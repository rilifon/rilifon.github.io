(function () { "use strict";
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function inherit() {}; inherit.prototype = from; var proto = new inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { }
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.completed = 0;
	ApplicationMain.loaders = new haxe.ds.StringMap();
	ApplicationMain.urlLoaders = new haxe.ds.StringMap();
	ApplicationMain.total = 0;
	flash.Lib.get_current().loaderInfo = flash.display.LoaderInfo.create(null);
	try {
		if(Reflect.hasField(js.Browser.window,"winParameters")) flash.Lib.get_current().loaderInfo.parameters = (Reflect.field(js.Browser.window,"winParameters"))();
		flash.Lib.get_current().get_stage().loaderInfo = flash.Lib.get_current().loaderInfo;
	} catch( e ) {
	}
	ApplicationMain.preloader = new flixel.system.FlxPreloader();
	flash.Lib.get_current().addChild(ApplicationMain.preloader);
	ApplicationMain.preloader.onInit();
	var urlLoader = new flash.net.URLLoader();
	urlLoader.set_dataFormat(flash.net.URLLoaderDataFormat.BINARY);
	ApplicationMain.urlLoaders.set("assets/data/text/index/main.txt",urlLoader);
	ApplicationMain.total++;
	var loader = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/banner.png",loader);
	ApplicationMain.total++;
	var loader1 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/construction.jpg",loader1);
	ApplicationMain.total++;
	var loader2 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/covers/naomi/naomi.png",loader2);
	ApplicationMain.total++;
	var loader3 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/covers/naomi/star.png",loader3);
	ApplicationMain.total++;
	var loader4 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/covers/psycho/ball.png",loader4);
	ApplicationMain.total++;
	var loader5 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/covers/psycho/psycho.png",loader5);
	ApplicationMain.total++;
	var loader6 = new flash.display.Loader();
	ApplicationMain.loaders.set("assets/images/dialog.png",loader6);
	ApplicationMain.total++;
	var resourcePrefix = "__ASSET__:bitmap_";
	var _g = 0, _g1 = haxe.Resource.listNames();
	while(_g < _g1.length) {
		var resourceName = _g1[_g];
		++_g;
		if(StringTools.startsWith(resourceName,resourcePrefix)) {
			var type = Type.resolveClass(StringTools.replace(resourceName.substring(resourcePrefix.length),"_","."));
			if(type != null) {
				ApplicationMain.total++;
				var instance = Type.createInstance(type,[0,0,true,16777215,ApplicationMain.bitmapClass_onComplete]);
			}
		}
	}
	if(ApplicationMain.total == 0) ApplicationMain.begin(); else {
		var $it0 = ApplicationMain.loaders.keys();
		while( $it0.hasNext() ) {
			var path = $it0.next();
			var loader7 = ApplicationMain.loaders.get(path);
			loader7.contentLoaderInfo.addEventListener("complete",ApplicationMain.loader_onComplete);
			loader7.load(new flash.net.URLRequest(path));
		}
		var $it1 = ApplicationMain.urlLoaders.keys();
		while( $it1.hasNext() ) {
			var path = $it1.next();
			var urlLoader1 = ApplicationMain.urlLoaders.get(path);
			urlLoader1.addEventListener("complete",ApplicationMain.loader_onComplete);
			urlLoader1.load(new flash.net.URLRequest(path));
		}
	}
}
ApplicationMain.begin = function() {
	ApplicationMain.preloader.addEventListener(flash.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	ApplicationMain.preloader.onLoaded();
}
ApplicationMain.bitmapClass_onComplete = function(instance) {
	ApplicationMain.completed++;
	var classType = Type.getClass(instance);
	classType.preload = instance;
	if(ApplicationMain.completed == ApplicationMain.total) ApplicationMain.begin();
}
ApplicationMain.loader_onComplete = function(event) {
	ApplicationMain.completed++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.completed,ApplicationMain.total);
	if(ApplicationMain.completed == ApplicationMain.total) ApplicationMain.begin();
}
ApplicationMain.preloader_onComplete = function(event) {
	ApplicationMain.preloader.removeEventListener(flash.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	flash.Lib.get_current().removeChild(ApplicationMain.preloader);
	ApplicationMain.preloader = null;
	if(Reflect.field(Main,"main") == null) {
		var mainDisplayObj = Type.createInstance(DocumentClass,[]);
		if(js.Boot.__instanceof(mainDisplayObj,flash.display.DisplayObject)) flash.Lib.get_current().addChild(mainDisplayObj);
	} else Reflect.field(Main,"main").apply(Main,[]);
}
var flash = {}
flash.events = {}
flash.events.IEventDispatcher = function() { }
$hxClasses["flash.events.IEventDispatcher"] = flash.events.IEventDispatcher;
flash.events.IEventDispatcher.__name__ = ["flash","events","IEventDispatcher"];
flash.events.IEventDispatcher.prototype = {
	__class__: flash.events.IEventDispatcher
}
flash.events.EventDispatcher = function(target) {
	if(target != null) this.__target = target; else this.__target = this;
	this.__eventMap = [];
};
$hxClasses["flash.events.EventDispatcher"] = flash.events.EventDispatcher;
flash.events.EventDispatcher.__name__ = ["flash","events","EventDispatcher"];
flash.events.EventDispatcher.__interfaces__ = [flash.events.IEventDispatcher];
flash.events.EventDispatcher.compareListeners = function(l1,l2) {
	return l1.mPriority == l2.mPriority?0:l1.mPriority > l2.mPriority?-1:1;
}
flash.events.EventDispatcher.prototype = {
	willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,toString: function() {
		return "[ " + this.__name__ + " ]";
	}
	,setList: function(type,list) {
		this.__eventMap[type] = list;
	}
	,removeEventListener: function(type,listener,inCapture) {
		if(inCapture == null) inCapture = false;
		if(!this.existList(type)) return;
		var list = this.getList(type);
		var capture = inCapture == null?false:inCapture;
		var _g1 = 0, _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].Is(listener,capture)) {
				list.splice(i,1);
				return;
			}
		}
	}
	,hasEventListener: function(type) {
		return this.existList(type);
	}
	,getList: function(type) {
		return this.__eventMap[type];
	}
	,existList: function(type) {
		return this.__eventMap != null && this.__eventMap[type] != undefined;
	}
	,dispatchEvent: function(event) {
		if(event.target == null) event.target = this.__target;
		var capture = event.eventPhase == flash.events.EventPhase.CAPTURING_PHASE;
		if(this.existList(event.type)) {
			var list = this.getList(event.type);
			var idx = 0;
			while(idx < list.length) {
				var listener = list[idx];
				if(listener.mUseCapture == capture) {
					listener.dispatchEvent(event);
					if(event.__getIsCancelledNow()) return true;
				}
				if(idx < list.length && listener != list[idx]) {
				} else idx++;
			}
			return true;
		}
		return false;
	}
	,addEventListener: function(type,inListener,useCapture,inPriority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(inPriority == null) inPriority = 0;
		if(useCapture == null) useCapture = false;
		var capture = useCapture == null?false:useCapture;
		var priority = inPriority == null?0:inPriority;
		var list = this.getList(type);
		if(!this.existList(type)) {
			list = [];
			this.setList(type,list);
		}
		list.push(new flash.events.Listener(inListener,capture,priority));
		list.sort(flash.events.EventDispatcher.compareListeners);
	}
	,__class__: flash.events.EventDispatcher
}
flash.display = {}
flash.display.IBitmapDrawable = function() { }
$hxClasses["flash.display.IBitmapDrawable"] = flash.display.IBitmapDrawable;
flash.display.IBitmapDrawable.__name__ = ["flash","display","IBitmapDrawable"];
flash.display.IBitmapDrawable.prototype = {
	__class__: flash.display.IBitmapDrawable
}
flash.display.DisplayObject = function() {
	flash.events.EventDispatcher.call(this,null);
	this.___id = flash.utils.Uuid.uuid();
	this.set_parent(null);
	this.set_transform(new flash.geom.Transform(this));
	this.__x = 0.0;
	this.__y = 0.0;
	this.__scaleX = 1.0;
	this.__scaleY = 1.0;
	this.__rotation = 0.0;
	this.__width = 0.0;
	this.__height = 0.0;
	this.set_visible(true);
	this.alpha = 1.0;
	this.__filters = new Array();
	this.__boundsRect = new flash.geom.Rectangle();
	this.__scrollRect = null;
	this.__mask = null;
	this.__maskingObj = null;
	this.set___combinedVisible(this.get_visible());
};
$hxClasses["flash.display.DisplayObject"] = flash.display.DisplayObject;
flash.display.DisplayObject.__name__ = ["flash","display","DisplayObject"];
flash.display.DisplayObject.__interfaces__ = [flash.display.IBitmapDrawable];
flash.display.DisplayObject.__super__ = flash.events.EventDispatcher;
flash.display.DisplayObject.prototype = $extend(flash.events.EventDispatcher.prototype,{
	__srUpdateDivs: function() {
		var gfx = this.__getGraphics();
		if(gfx == null || this.parent == null) return;
		if(this.__scrollRect == null) {
			if(this._srAxes != null && gfx.__surface.parentNode == this._srAxes && this._srWindow.parentNode != null) this._srWindow.parentNode.replaceChild(gfx.__surface,this._srWindow);
			return;
		}
		if(this._srWindow == null) {
			this._srWindow = js.Browser.document.createElement("div");
			this._srAxes = js.Browser.document.createElement("div");
			this._srWindow.style.setProperty("position","absolute","");
			this._srWindow.style.setProperty("left","0px","");
			this._srWindow.style.setProperty("top","0px","");
			this._srWindow.style.setProperty("width","0px","");
			this._srWindow.style.setProperty("height","0px","");
			this._srWindow.style.setProperty("overflow","hidden","");
			this._srAxes.style.setProperty("position","absolute","");
			this._srAxes.style.setProperty("left","0px","");
			this._srAxes.style.setProperty("top","0px","");
			this._srWindow.appendChild(this._srAxes);
		}
		var pnt = this.parent.localToGlobal(new flash.geom.Point(this.get_x(),this.get_y()));
		this._srWindow.style.left = pnt.x + "px";
		this._srWindow.style.top = pnt.y + "px";
		this._srWindow.style.width = this.__scrollRect.width + "px";
		this._srWindow.style.height = this.__scrollRect.height + "px";
		this._srAxes.style.left = -pnt.x - this.__scrollRect.x + "px";
		this._srAxes.style.top = -pnt.y - this.__scrollRect.y + "px";
		if(gfx.__surface.parentNode != this._srAxes && gfx.__surface.parentNode != null) {
			gfx.__surface.parentNode.insertBefore(this._srWindow,gfx.__surface);
			flash.Lib.__removeSurface(gfx.__surface);
			this._srAxes.appendChild(gfx.__surface);
		}
	}
	,__getSrWindow: function() {
		return this._srWindow;
	}
	,set_width: function(inValue) {
		if(this.get__boundsInvalid()) this.validateBounds();
		var w = this.__boundsRect.width;
		if(this.__scaleX * w != inValue) {
			if(w == 0) {
				this.__scaleX = 1;
				this.__invalidateMatrix(true);
				this.___renderFlags |= 64;
				if(this.parent != null) this.parent.___renderFlags |= 64;
				w = this.__boundsRect.width;
			}
			if(w <= 0) return 0;
			this.__scaleX = inValue / w;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
		}
		return inValue;
	}
	,get_width: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__width;
	}
	,set_y: function(inValue) {
		if(this.__y != inValue) {
			this.__y = inValue;
			this.__invalidateMatrix(true);
			if(this.parent != null) this.parent.__invalidateBounds();
		}
		return inValue;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_x: function(inValue) {
		if(this.__x != inValue) {
			this.__x = inValue;
			this.__invalidateMatrix(true);
			if(this.parent != null) this.parent.__invalidateBounds();
		}
		return inValue;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_visible: function(inValue) {
		if(this.__visible != inValue) {
			this.__visible = inValue;
			this.setSurfaceVisible(inValue);
		}
		return this.__visible;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_transform: function(inValue) {
		this.transform = inValue;
		this.__x = this.transform.get_matrix().tx;
		this.__y = this.transform.get_matrix().ty;
		this.__invalidateMatrix(true);
		return inValue;
	}
	,get__topmostSurface: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) return gfx.__surface;
		return null;
	}
	,get_stage: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) return flash.Lib.__getStage();
		return null;
	}
	,set_scrollRect: function(inValue) {
		this.__scrollRect = inValue;
		this.__srUpdateDivs();
		return inValue;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scaleY: function(inValue) {
		if(this.__scaleY != inValue) {
			this.__scaleY = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
		}
		return inValue;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleX: function(inValue) {
		if(this.__scaleX != inValue) {
			this.__scaleX = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
		}
		return inValue;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_rotation: function(inValue) {
		if(this.__rotation != inValue) {
			this.__rotation = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
		}
		return inValue;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_parent: function(inValue) {
		if(inValue == this.parent) return inValue;
		this.__invalidateMatrix();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.__children,this);
			this.parent.__invalidateBounds();
		}
		if(inValue != null) {
			inValue.___renderFlags |= 64;
			if(inValue.parent != null) inValue.parent.___renderFlags |= 64;
		}
		if(this.parent == null && inValue != null) {
			this.parent = inValue;
			var evt = new flash.events.Event(flash.events.Event.ADDED,true,false);
			this.dispatchEvent(evt);
		} else if(this.parent != null && inValue == null) {
			this.parent = inValue;
			var evt = new flash.events.Event(flash.events.Event.REMOVED,true,false);
			this.dispatchEvent(evt);
		} else this.parent = inValue;
		return inValue;
	}
	,set___combinedVisible: function(inValue) {
		if(this.__combinedVisible != inValue) {
			this.__combinedVisible = inValue;
			this.setSurfaceVisible(inValue);
		}
		return this.__combinedVisible;
	}
	,get_mouseY: function() {
		return this.globalToLocal(new flash.geom.Point(0,this.get_stage().get_mouseY())).y;
	}
	,get_mouseX: function() {
		return this.globalToLocal(new flash.geom.Point(this.get_stage().get_mouseX(),0)).x;
	}
	,get__matrixInvalid: function() {
		return (this.___renderFlags & 4) != 0;
	}
	,get__matrixChainInvalid: function() {
		return (this.___renderFlags & 8) != 0;
	}
	,set_mask: function(inValue) {
		if(this.__mask != null) this.__mask.__maskingObj = null;
		this.__mask = inValue;
		if(this.__mask != null) this.__mask.__maskingObj = this;
		return this.__mask;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_height: function(inValue) {
		if(this.get__boundsInvalid()) this.validateBounds();
		var h = this.__boundsRect.height;
		if(this.__scaleY * h != inValue) {
			if(h == 0) {
				this.__scaleY = 1;
				this.__invalidateMatrix(true);
				this.___renderFlags |= 64;
				if(this.parent != null) this.parent.___renderFlags |= 64;
				h = this.__boundsRect.height;
			}
			if(h <= 0) return 0;
			this.__scaleY = inValue / h;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
		}
		return inValue;
	}
	,get_height: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__height;
	}
	,set_filters: function(filters) {
		var oldFilterCount = this.__filters == null?0:this.__filters.length;
		if(filters == null) {
			this.__filters = null;
			if(oldFilterCount > 0) this.invalidateGraphics();
		} else {
			this.__filters = new Array();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				this.__filters.push(filter.clone());
			}
			this.invalidateGraphics();
		}
		return filters;
	}
	,get__boundsInvalid: function() {
		var gfx = this.__getGraphics();
		if(gfx == null) return (this.___renderFlags & 64) != 0; else return (this.___renderFlags & 64) != 0 || gfx.boundsDirty;
	}
	,get_filters: function() {
		if(this.__filters == null) return [];
		var result = new Array();
		var _g = 0, _g1 = this.__filters;
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			result.push(filter.clone());
		}
		return result;
	}
	,get__bottommostSurface: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) return gfx.__surface;
		return null;
	}
	,__validateMatrix: function() {
		var parentMatrixInvalid = (this.___renderFlags & 8) != 0 && this.parent != null;
		if((this.___renderFlags & 4) != 0 || parentMatrixInvalid) {
			if(parentMatrixInvalid) this.parent.__validateMatrix();
			var m = this.transform.get_matrix();
			if((this.___renderFlags & 16) != 0) this.___renderFlags &= -5;
			if((this.___renderFlags & 4) != 0) {
				m.identity();
				m.scale(this.__scaleX,this.__scaleY);
				var rad = this.__rotation * flash.geom.Transform.DEG_TO_RAD;
				if(rad != 0.0) m.rotate(rad);
				m.translate(this.__x,this.__y);
				this.transform._matrix.copy(m);
				m;
			}
			var cm = this.transform.__getFullMatrix(null);
			var fm = this.parent == null?m:this.parent.transform.__getFullMatrix(m);
			this._fullScaleX = fm._sx;
			this._fullScaleY = fm._sy;
			if(cm.a != fm.a || cm.b != fm.b || cm.c != fm.c || cm.d != fm.d || cm.tx != fm.tx || cm.ty != fm.ty) {
				this.transform.__setFullMatrix(fm);
				this.___renderFlags |= 32;
			}
			this.___renderFlags &= -29;
		}
	}
	,__unifyChildrenWithDOM: function(lastMoveObj) {
		var gfx = this.__getGraphics();
		if(gfx != null && lastMoveObj != null && this != lastMoveObj) {
			var ogfx = lastMoveObj.__getGraphics();
			if(ogfx != null) flash.Lib.__setSurfaceZIndexAfter(this.__scrollRect == null?gfx.__surface:this._srWindow,lastMoveObj.__scrollRect == null?ogfx.__surface:lastMoveObj == this.parent?ogfx.__surface:lastMoveObj._srWindow);
		}
		if(gfx == null) return lastMoveObj; else return this;
	}
	,__testFlag: function(mask) {
		return (this.___renderFlags & mask) != 0;
	}
	,__setMatrix: function(inValue) {
		this.transform._matrix.copy(inValue);
		return inValue;
	}
	,__setFullMatrix: function(inValue) {
		return this.transform.__setFullMatrix(inValue);
	}
	,__setFlagToValue: function(mask,value) {
		if(value) this.___renderFlags |= mask; else this.___renderFlags &= ~mask;
	}
	,__setFlag: function(mask) {
		this.___renderFlags |= mask;
	}
	,__setDimensions: function() {
		if(this.scale9Grid != null) {
			this.__boundsRect.width *= this.__scaleX;
			this.__boundsRect.height *= this.__scaleY;
			this.__width = this.__boundsRect.width;
			this.__height = this.__boundsRect.height;
		} else {
			this.__width = this.__boundsRect.width * this.__scaleX;
			this.__height = this.__boundsRect.height * this.__scaleY;
		}
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		var gfx = this.__getGraphics();
		if(gfx == null) return;
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(gfx.__render(inMask,this.__filters,1,1)) {
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.__applyFilters(gfx.__surface);
			this.___renderFlags |= 32;
		}
		var fullAlpha = (this.parent != null?this.parent.__combinedAlpha:1) * this.alpha;
		if(inMask != null) {
			var m = this.getSurfaceTransform(gfx);
			flash.Lib.__drawToSurface(gfx.__surface,inMask,m,fullAlpha,clipRect);
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m = this.getSurfaceTransform(gfx);
				flash.Lib.__setSurfaceTransform(gfx.__surface,m);
				this.___renderFlags &= -33;
				this.__srUpdateDivs();
			}
			flash.Lib.__setSurfaceOpacity(gfx.__surface,fullAlpha);
		}
	}
	,__removeFromStage: function() {
		var gfx = this.__getGraphics();
		if(gfx != null && flash.Lib.__isOnStage(gfx.__surface)) {
			flash.Lib.__removeSurface(gfx.__surface);
			var evt = new flash.events.Event(flash.events.Event.REMOVED_FROM_STAGE,false,false);
			this.dispatchEvent(evt);
		}
	}
	,__matrixOverridden: function() {
		this.__x = this.transform.get_matrix().tx;
		this.__y = this.transform.get_matrix().ty;
		this.___renderFlags |= 16;
		this.___renderFlags |= 4;
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
	}
	,__isOnStage: function() {
		var gfx = this.__getGraphics();
		if(gfx != null && flash.Lib.__isOnStage(gfx.__surface)) return true;
		return false;
	}
	,__invalidateMatrix: function(local) {
		if(local == null) local = false;
		if(local) this.___renderFlags |= 4; else this.___renderFlags |= 8;
	}
	,__invalidateBounds: function() {
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
	}
	,__getSurface: function() {
		var gfx = this.__getGraphics();
		var surface = null;
		if(gfx != null) surface = gfx.__surface;
		return surface;
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null;
		var gfx = this.__getGraphics();
		if(gfx != null) {
			gfx.__render();
			var extX = gfx.__extent.x;
			var extY = gfx.__extent.y;
			var local = this.globalToLocal(point);
			if(local.x - extX <= 0 || local.y - extY <= 0 || (local.x - extX) * this.get_scaleX() > this.get_width() || (local.y - extY) * this.get_scaleY() > this.get_height()) return null;
			if(gfx.__hitTest(local.x,local.y)) return this;
		}
		return null;
	}
	,__getMatrix: function() {
		return this.transform.get_matrix();
	}
	,__getInteractiveObjectStack: function(outStack) {
		var io = this;
		if(io != null) outStack.push(io);
		if(this.parent != null) this.parent.__getInteractiveObjectStack(outStack);
	}
	,__getGraphics: function() {
		return null;
	}
	,__getFullMatrix: function(localMatrix) {
		return this.transform.__getFullMatrix(localMatrix);
	}
	,__fireEvent: function(event) {
		var stack = [];
		if(this.parent != null) this.parent.__getInteractiveObjectStack(stack);
		var l = stack.length;
		if(l > 0) {
			event.__setPhase(flash.events.EventPhase.CAPTURING_PHASE);
			stack.reverse();
			var _g = 0;
			while(_g < stack.length) {
				var obj = stack[_g];
				++_g;
				event.currentTarget = obj;
				obj.__dispatchEvent(event);
				if(event.__getIsCancelled()) return;
			}
		}
		event.__setPhase(flash.events.EventPhase.AT_TARGET);
		event.currentTarget = this;
		this.__dispatchEvent(event);
		if(event.__getIsCancelled()) return;
		if(event.bubbles) {
			event.__setPhase(flash.events.EventPhase.BUBBLING_PHASE);
			stack.reverse();
			var _g = 0;
			while(_g < stack.length) {
				var obj = stack[_g];
				++_g;
				event.currentTarget = obj;
				obj.__dispatchEvent(event);
				if(event.__getIsCancelled()) return;
			}
		}
	}
	,__dispatchEvent: function(event) {
		if(event.target == null) event.target = this;
		event.currentTarget = this;
		return flash.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,__contains: function(child) {
		return false;
	}
	,__clearFlag: function(mask) {
		this.___renderFlags &= ~mask;
	}
	,__broadcast: function(event) {
		this.__dispatchEvent(event);
	}
	,__applyFilters: function(surface) {
		if(this.__filters != null) {
			var _g = 0, _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				filter.__applyFilter(surface);
			}
		}
	}
	,__addToStage: function(newParent,beforeSibling) {
		var gfx = this.__getGraphics();
		if(gfx == null) return;
		if(newParent.__getGraphics() != null) {
			flash.Lib.__setSurfaceId(gfx.__surface,this.___id);
			if(beforeSibling != null && beforeSibling.__getGraphics() != null) flash.Lib.__appendSurface(gfx.__surface,beforeSibling.get__bottommostSurface()); else {
				var stageChildren = [];
				var _g = 0, _g1 = newParent.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					if(child.get_stage() != null) stageChildren.push(child);
				}
				if(stageChildren.length < 1) flash.Lib.__appendSurface(gfx.__surface,null,newParent.get__topmostSurface()); else {
					var nextSibling = stageChildren[stageChildren.length - 1];
					var container;
					while(js.Boot.__instanceof(nextSibling,flash.display.DisplayObjectContainer)) {
						container = js.Boot.__cast(nextSibling , flash.display.DisplayObjectContainer);
						if(container.__children.length > 0) nextSibling = container.__children[container.__children.length - 1]; else break;
					}
					if(nextSibling.__getGraphics() != gfx) flash.Lib.__appendSurface(gfx.__surface,null,nextSibling.get__topmostSurface()); else flash.Lib.__appendSurface(gfx.__surface);
				}
			}
			flash.Lib.__setSurfaceTransform(gfx.__surface,this.getSurfaceTransform(gfx));
		} else if(newParent.name == "Stage") flash.Lib.__appendSurface(gfx.__surface);
		if(this.__isOnStage()) {
			this.__srUpdateDivs();
			var evt = new flash.events.Event(flash.events.Event.ADDED_TO_STAGE,false,false);
			this.dispatchEvent(evt);
		}
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			var gfx = this.__getGraphics();
			if(gfx == null) {
				this.__boundsRect.x = this.get_x();
				this.__boundsRect.y = this.get_y();
				this.__boundsRect.width = 0;
				this.__boundsRect.height = 0;
			} else {
				this.__boundsRect = gfx.__extent.clone();
				if(this.scale9Grid != null) {
					this.__boundsRect.width *= this.__scaleX;
					this.__boundsRect.height *= this.__scaleY;
					this.__width = this.__boundsRect.width;
					this.__height = this.__boundsRect.height;
				} else {
					this.__width = this.__boundsRect.width * this.__scaleX;
					this.__height = this.__boundsRect.height * this.__scaleY;
				}
				gfx.boundsDirty = false;
			}
			this.___renderFlags &= -65;
		}
	}
	,toString: function() {
		return "[DisplayObject name=" + this.name + " id=" + this.___id + "]";
	}
	,setSurfaceVisible: function(inValue) {
		var gfx = this.__getGraphics();
		if(gfx != null && gfx.__surface != null) flash.Lib.__setSurfaceVisible(gfx.__surface,inValue);
	}
	,localToGlobal: function(point) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		return this.transform.__getFullMatrix(null).transformPoint(point);
	}
	,invalidateGraphics: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) {
			gfx.__changed = true;
			gfx.__clearNextCycle = true;
		}
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		var boundingBox = shapeFlag == null?true:!shapeFlag;
		if(!boundingBox) return this.__getObjectUnderPoint(new flash.geom.Point(x,y)) != null; else {
			var gfx = this.__getGraphics();
			if(gfx != null) {
				var extX = gfx.__extent.x;
				var extY = gfx.__extent.y;
				var local = this.globalToLocal(new flash.geom.Point(x,y));
				if(local.x - extX < 0 || local.y - extY < 0 || (local.x - extX) * this.get_scaleX() > this.get_width() || (local.y - extY) * this.get_scaleY() > this.get_height()) return false; else return true;
			}
			return false;
		}
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,handleGraphicsUpdated: function(gfx) {
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.__applyFilters(gfx.__surface);
		this.___renderFlags |= 32;
	}
	,globalToLocal: function(inPos) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		return this.transform.__getFullMatrix(null).invert().transformPoint(inPos);
	}
	,getSurfaceTransform: function(gfx) {
		var extent = gfx.__extentWithFilters;
		var fm = this.transform.__getFullMatrix(null);
		fm.__translateTransformed(extent.get_topLeft());
		return fm;
	}
	,getScreenBounds: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__boundsRect.clone();
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,getBounds: function(targetCoordinateSpace) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(this.get__boundsInvalid()) this.validateBounds();
		var m = this.transform.__getFullMatrix(null);
		if(targetCoordinateSpace != null) m.concat(targetCoordinateSpace.transform.__getFullMatrix(null).invert());
		var rect = this.__boundsRect.transform(m);
		return rect;
	}
	,drawToSurface: function(inSurface,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		var oldAlpha = this.alpha;
		this.alpha = 1;
		this.__render(inSurface,clipRect);
		this.alpha = oldAlpha;
	}
	,dispatchEvent: function(event) {
		var result = this.__dispatchEvent(event);
		if(event.__getIsCancelled()) return true;
		if(event.bubbles && this.parent != null) this.parent.dispatchEvent(event);
		return result;
	}
	,__class__: flash.display.DisplayObject
	,__properties__: {set_filters:"set_filters",get_filters:"get_filters",set_height:"set_height",get_height:"get_height",set_mask:"set_mask",get_mask:"get_mask",get_mouseX:"get_mouseX",get_mouseY:"get_mouseY",set_parent:"set_parent",set_rotation:"set_rotation",get_rotation:"get_rotation",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",get_stage:"get_stage",set_transform:"set_transform",set_visible:"set_visible",get_visible:"get_visible",set_width:"set_width",get_width:"get_width",set_x:"set_x",get_x:"get_x",set_y:"set_y",get_y:"get_y",set___combinedVisible:"set___combinedVisible",get__bottommostSurface:"get__bottommostSurface",get__boundsInvalid:"get__boundsInvalid",get__matrixChainInvalid:"get__matrixChainInvalid",get__matrixInvalid:"get__matrixInvalid",get__topmostSurface:"get__topmostSurface"}
});
flash.display.InteractiveObject = function() {
	flash.display.DisplayObject.call(this);
	this.tabEnabled = false;
	this.mouseEnabled = true;
	this.doubleClickEnabled = true;
	this.set_tabIndex(0);
};
$hxClasses["flash.display.InteractiveObject"] = flash.display.InteractiveObject;
flash.display.InteractiveObject.__name__ = ["flash","display","InteractiveObject"];
flash.display.InteractiveObject.__super__ = flash.display.DisplayObject;
flash.display.InteractiveObject.prototype = $extend(flash.display.DisplayObject.prototype,{
	set_tabIndex: function(inIndex) {
		return this.__tabIndex = inIndex;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.mouseEnabled) return null; else return flash.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,toString: function() {
		return "[InteractiveObject name=" + this.name + " id=" + this.___id + "]";
	}
	,__class__: flash.display.InteractiveObject
	,__properties__: $extend(flash.display.DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex"})
});
flash.display.DisplayObjectContainer = function() {
	this.__children = new Array();
	this.mouseChildren = true;
	this.tabChildren = true;
	flash.display.InteractiveObject.call(this);
	this.__combinedAlpha = this.alpha;
};
$hxClasses["flash.display.DisplayObjectContainer"] = flash.display.DisplayObjectContainer;
flash.display.DisplayObjectContainer.__name__ = ["flash","display","DisplayObjectContainer"];
flash.display.DisplayObjectContainer.__super__ = flash.display.InteractiveObject;
flash.display.DisplayObjectContainer.prototype = $extend(flash.display.InteractiveObject.prototype,{
	set_scrollRect: function(inValue) {
		inValue = flash.display.InteractiveObject.prototype.set_scrollRect.call(this,inValue);
		this.__unifyChildrenWithDOM();
		return inValue;
	}
	,set_visible: function(inVal) {
		this.set___combinedVisible(this.parent != null?this.parent.__combinedVisible && inVal:inVal);
		return flash.display.InteractiveObject.prototype.set_visible.call(this,inVal);
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,set___combinedVisible: function(inVal) {
		if(inVal != this.__combinedVisible) {
			var _g = 0, _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.set___combinedVisible(child.get_visible() && inVal);
			}
		}
		return flash.display.InteractiveObject.prototype.set___combinedVisible.call(this,inVal);
	}
	,set_filters: function(filters) {
		flash.display.InteractiveObject.prototype.set_filters.call(this,filters);
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_filters(filters);
		}
		return filters;
	}
	,__unifyChildrenWithDOM: function(lastMoveObj) {
		var obj = flash.display.InteractiveObject.prototype.__unifyChildrenWithDOM.call(this,lastMoveObj);
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			obj = child.__unifyChildrenWithDOM(obj);
			if(child.get_scrollRect() != null) obj = child;
		}
		return obj;
	}
	,__swapSurface: function(c1,c2) {
		if(this.__children[c1] == null) throw "Null element at index " + c1 + " length " + this.__children.length;
		if(this.__children[c2] == null) throw "Null element at index " + c2 + " length " + this.__children.length;
		var gfx1 = this.__children[c1].__getGraphics();
		var gfx2 = this.__children[c2].__getGraphics();
		if(gfx1 != null && gfx2 != null) {
			var surface1 = this.__children[c1].__scrollRect == null?gfx1.__surface:this.__children[c1].__getSrWindow();
			var surface2 = this.__children[c2].__scrollRect == null?gfx2.__surface:this.__children[c2].__getSrWindow();
			if(surface1 != null && surface2 != null) flash.Lib.__swapSurface(surface1,surface2);
		}
	}
	,__render: function(inMask,clipRect) {
		if(!this.__visible) return;
		if(clipRect == null && this.__scrollRect != null) clipRect = this.__scrollRect;
		flash.display.InteractiveObject.prototype.__render.call(this,inMask,clipRect);
		this.__combinedAlpha = this.parent != null?this.parent.__combinedAlpha * this.alpha:this.alpha;
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__visible) {
				if(clipRect != null) {
					if((child.___renderFlags & 4) != 0 || (child.___renderFlags & 8) != 0) child.__validateMatrix();
				}
				child.__render(inMask,clipRect);
			}
		}
		if(this.__addedChildren) {
			this.__unifyChildrenWithDOM();
			this.__addedChildren = false;
		}
	}
	,__removeFromStage: function() {
		flash.display.InteractiveObject.prototype.__removeFromStage.call(this);
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__removeFromStage();
		}
	}
	,__removeChild: function(child) {
		HxOverrides.remove(this.__children,child);
		child.__removeFromStage();
		child.set_parent(null);
		return child;
	}
	,__invalidateMatrix: function(local) {
		if(local == null) local = false;
		if(!((this.___renderFlags & 8) != 0) && !((this.___renderFlags & 4) != 0)) {
			var _g = 0, _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__invalidateMatrix();
			}
		}
		flash.display.InteractiveObject.prototype.__invalidateMatrix.call(this,local);
	}
	,__getObjectsUnderPoint: function(point,stack) {
		var l = this.__children.length - 1;
		var _g1 = 0, _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = this.__children[l - i].__getObjectUnderPoint(point);
			if(result != null) stack.push(result);
		}
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null;
		var l = this.__children.length - 1;
		var _g1 = 0, _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = null;
			if(this.mouseEnabled) result = this.__children[l - i].__getObjectUnderPoint(point);
			if(result != null) return this.mouseChildren?result:this;
		}
		return flash.display.InteractiveObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__contains: function(child) {
		if(child == null) return false;
		if(this == child) return true;
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c == child || c.__contains(child)) return true;
		}
		return false;
	}
	,__broadcast: function(event) {
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__broadcast(event);
		}
		this.dispatchEvent(event);
	}
	,__addToStage: function(newParent,beforeSibling) {
		flash.display.InteractiveObject.prototype.__addToStage.call(this,newParent,beforeSibling);
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__getGraphics() == null || !child.__isOnStage()) child.__addToStage(this);
		}
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			flash.display.InteractiveObject.prototype.validateBounds.call(this);
			var _g = 0, _g1 = this.__children;
			while(_g < _g1.length) {
				var obj = _g1[_g];
				++_g;
				if(obj.get_visible()) {
					var r = obj.getBounds(this);
					if(r.width != 0 || r.height != 0) {
						if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
					}
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,toString: function() {
		return "[DisplayObjectContainer name=" + this.name + " id=" + this.___id + "]";
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,swapChildren: function(child1,child2) {
		var c1 = -1;
		var c2 = -1;
		var swap;
		var _g1 = 0, _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child1) c1 = i; else if(this.__children[i] == child2) c2 = i;
		}
		if(c1 != -1 && c2 != -1) {
			swap = this.__children[c1];
			this.__children[c1] = this.__children[c2];
			this.__children[c2] = swap;
			swap = null;
			this.__swapSurface(c1,c2);
			child1.__unifyChildrenWithDOM();
			child2.__unifyChildrenWithDOM();
		}
	}
	,setChildIndex: function(child,index) {
		if(index > this.__children.length) throw "Invalid index position " + index;
		var oldIndex = this.getChildIndex(child);
		if(oldIndex < 0) {
			var msg = "setChildIndex : object " + child.name + " not found.";
			if(child.parent == this) {
				var realindex = -1;
				var _g1 = 0, _g = this.__children.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.__children[i] == child) {
						realindex = i;
						break;
					}
				}
				if(realindex != -1) msg += "Internal error: Real child index was " + Std.string(realindex); else msg += "Internal error: Child was not in __children array!";
			}
			throw msg;
		}
		if(index < oldIndex) {
			var i = oldIndex;
			while(i > index) {
				this.swapChildren(this.__children[i],this.__children[i - 1]);
				i--;
			}
		} else if(oldIndex < index) {
			var i = oldIndex;
			while(i < index) {
				this.swapChildren(this.__children[i],this.__children[i + 1]);
				i++;
			}
		}
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__removeChild(this.__children[index]);
		throw "removeChildAt(" + index + ") : none found?";
	}
	,removeChild: function(inChild) {
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child == inChild) return (function($this) {
				var $r;
				HxOverrides.remove($this.__children,child);
				child.__removeFromStage();
				child.set_parent(null);
				$r = child;
				return $r;
			}(this));
		}
		throw "removeChild : none found?";
	}
	,getObjectsUnderPoint: function(point) {
		var result = new Array();
		this.__getObjectsUnderPoint(point,result);
		return result;
	}
	,getChildIndex: function(inChild) {
		var _g1 = 0, _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == inChild) return i;
		}
		return -1;
	}
	,getChildByName: function(inName) {
		var _g = 0, _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.name == inName) return child;
		}
		return null;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		throw "getChildAt : index out of bounds " + index + "/" + this.__children.length;
		return null;
	}
	,contains: function(child) {
		return this.__contains(child);
	}
	,addChildAt: function(object,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		this.__addedChildren = true;
		if(object.parent == this) {
			this.setChildIndex(object,index);
			return object;
		}
		if(index == this.__children.length) return this.addChild(object); else {
			if(this.__isOnStage()) object.__addToStage(this,this.__children[index]);
			this.__children.splice(index,0,object);
			object.set_parent(this);
		}
		return object;
	}
	,addChild: function(object) {
		if(object == null) throw "DisplayObjectContainer asked to add null child object";
		if(object == this) throw "Adding to self";
		this.__addedChildren = true;
		if(object.parent == this) {
			this.setChildIndex(object,this.__children.length - 1);
			return object;
		}
		object.set_parent(this);
		if(this.__isOnStage()) object.__addToStage(this);
		if(this.__children == null) this.__children = new Array();
		this.__children.push(object);
		return object;
	}
	,__class__: flash.display.DisplayObjectContainer
	,__properties__: $extend(flash.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
flash.display.Sprite = function() {
	flash.display.DisplayObjectContainer.call(this);
	this.__graphics = new flash.display.Graphics();
	this.buttonMode = false;
};
$hxClasses["flash.display.Sprite"] = flash.display.Sprite;
flash.display.Sprite.__name__ = ["flash","display","Sprite"];
flash.display.Sprite.__super__ = flash.display.DisplayObjectContainer;
flash.display.Sprite.prototype = $extend(flash.display.DisplayObjectContainer.prototype,{
	set_useHandCursor: function(cursor) {
		if(cursor == this.useHandCursor) return cursor;
		if(this.__cursorCallbackOver != null) this.removeEventListener(flash.events.MouseEvent.ROLL_OVER,this.__cursorCallbackOver);
		if(this.__cursorCallbackOut != null) this.removeEventListener(flash.events.MouseEvent.ROLL_OUT,this.__cursorCallbackOut);
		if(!cursor) flash.Lib.__setCursor(flash._Lib.CursorType.Default); else {
			this.__cursorCallbackOver = function(_) {
				flash.Lib.__setCursor(flash._Lib.CursorType.Pointer);
			};
			this.__cursorCallbackOut = function(_) {
				flash.Lib.__setCursor(flash._Lib.CursorType.Default);
			};
			this.addEventListener(flash.events.MouseEvent.ROLL_OVER,this.__cursorCallbackOver);
			this.addEventListener(flash.events.MouseEvent.ROLL_OUT,this.__cursorCallbackOut);
		}
		this.useHandCursor = cursor;
		return cursor;
	}
	,get_graphics: function() {
		return this.__graphics;
	}
	,get_dropTarget: function() {
		return this.__dropTarget;
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,toString: function() {
		return "[Sprite name=" + this.name + " id=" + this.___id + "]";
	}
	,stopDrag: function() {
		if(this.__isOnStage()) {
			this.get_stage().__stopDrag(this);
			var l = this.parent.__children.length - 1;
			var obj = this.get_stage();
			var _g1 = 0, _g = this.parent.__children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var result = this.parent.__children[l - i].__getObjectUnderPoint(new flash.geom.Point(this.get_stage().get_mouseX(),this.get_stage().get_mouseY()));
				if(result != null) obj = result;
			}
			if(obj != this) this.__dropTarget = obj; else this.__dropTarget = this.get_stage();
		}
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.__isOnStage()) this.get_stage().__startDrag(this,lockCenter,bounds);
	}
	,__class__: flash.display.Sprite
	,__properties__: $extend(flash.display.DisplayObjectContainer.prototype.__properties__,{get_dropTarget:"get_dropTarget",get_graphics:"get_graphics",set_useHandCursor:"set_useHandCursor"})
});
var Main = function() {
	flash.display.Sprite.call(this);
	if(this.get_stage() != null) this.init(); else this.addEventListener(flash.events.Event.ADDED_TO_STAGE,$bind(this,this.init));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	flash.Lib.get_current().addChild(new Main());
}
Main.__super__ = flash.display.Sprite;
Main.prototype = $extend(flash.display.Sprite.prototype,{
	initialize: function() {
		flash.Lib.get_current().get_stage().align = flash.display.StageAlign.TOP_LEFT;
		flash.Lib.get_current().get_stage().scaleMode = flash.display.StageScaleMode.NO_SCALE;
	}
	,init: function(E) {
		if(this.hasEventListener(flash.events.Event.ADDED_TO_STAGE)) this.removeEventListener(flash.events.Event.ADDED_TO_STAGE,$bind(this,this.init));
		this.initialize();
		var game = new GameClass();
		this.addChild(game);
	}
	,__class__: Main
});
var DocumentClass = function() {
	Main.call(this);
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	get_stage: function() {
		return flash.Lib.get_current().get_stage();
	}
	,__class__: DocumentClass
});
var flixel = {}
flixel.interfaces = {}
flixel.interfaces.IFlxDestroyable = function() { }
$hxClasses["flixel.interfaces.IFlxDestroyable"] = flixel.interfaces.IFlxDestroyable;
flixel.interfaces.IFlxDestroyable.__name__ = ["flixel","interfaces","IFlxDestroyable"];
flixel.interfaces.IFlxDestroyable.prototype = {
	__class__: flixel.interfaces.IFlxDestroyable
}
flixel.FlxBasic = function() {
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = -1;
	this.collisionType = flixel.system.FlxCollisionType.NONE;
};
$hxClasses["flixel.FlxBasic"] = flixel.FlxBasic;
flixel.FlxBasic.__name__ = ["flixel","FlxBasic"];
flixel.FlxBasic.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.FlxBasic.prototype = {
	toString: function() {
		return flixel.util.FlxStringUtil.getDebugString([{ label : "active", value : this.active},{ label : "visible", value : this.visible},{ label : "alive", value : this.alive},{ label : "exists", value : this.exists}]);
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,draw: function() {
	}
	,update: function() {
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,destroy: function() {
		this.set_exists(false);
		this.collisionType = null;
	}
	,__class__: flixel.FlxBasic
	,__properties__: {set_active:"set_active",set_visible:"set_visible",set_alive:"set_alive",set_exists:"set_exists"}
}
flixel.util = {}
flixel.util.FlxRect = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
};
$hxClasses["flixel.util.FlxRect"] = flixel.util.FlxRect;
flixel.util.FlxRect.__name__ = ["flixel","util","FlxRect"];
flixel.util.FlxRect.prototype = {
	toString: function() {
		return flixel.util.FlxStringUtil.getDebugString([{ label : "x", value : this.x},{ label : "y", value : this.y},{ label : "w", value : this.width},{ label : "h", value : this.height}]);
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.get_right(),Rect.get_right());
		var maxY = Math.max(this.get_bottom(),Rect.get_bottom());
		return (function($this) {
			var $r;
			$this.x = minX;
			$this.y = minY;
			$this.width = maxX - minX;
			$this.height = maxY - minY;
			$r = $this;
			return $r;
		}(this));
	}
	,containsFlxPoint: function(Point) {
		return flixel.util.FlxMath.pointInFlxRect(Point.x,Point.y,this);
	}
	,overlaps: function(Rect) {
		return Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
	}
	,copyToFlash: function(FlashRect) {
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		return Rect;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_left: function() {
		return this.x;
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
	}
	,__class__: flixel.util.FlxRect
	,__properties__: {set_left:"set_left",get_left:"get_left",set_right:"set_right",get_right:"get_right",set_top:"set_top",get_top:"get_top",set_bottom:"set_bottom",get_bottom:"get_bottom"}
}
flixel.util.FlxPoint = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.y = 0;
	this.x = 0;
	this.set_x(X);
	this.set_y(Y);
};
$hxClasses["flixel.util.FlxPoint"] = flixel.util.FlxPoint;
flixel.util.FlxPoint.__name__ = ["flixel","util","FlxPoint"];
flixel.util.FlxPoint.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.util.FlxPoint.prototype = {
	toString: function() {
		return flixel.util.FlxStringUtil.getDebugString([{ label : "x", value : this.x},{ label : "y", value : this.y}]);
	}
	,destroy: function() {
	}
	,distanceTo: function(AnotherPoint) {
		return flixel.util.FlxMath.getDistance(this,AnotherPoint);
	}
	,inFlxRect: function(Rect) {
		return flixel.util.FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel.util.FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,copyToFlash: function(FlashPoint) {
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyTo: function(point) {
		if(point == null) point = new flixel.util.FlxPoint();
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		return this;
	}
	,set: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,__class__: flixel.util.FlxPoint
	,__properties__: {set_x:"set_x",set_y:"set_y"}
}
flixel.FlxObject = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.forceComplexRender = false;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.y = 0;
	this.x = 0;
	flixel.FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel.FlxObject;
flixel.FlxObject.__name__ = ["flixel","FlxObject"];
flixel.FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel.FlxObject.separateX(Object1,Object2);
	var separatedY = flixel.FlxObject.separateY(Object1,Object2);
	return separatedX || separatedY;
}
flixel.FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == flixel.system.FlxCollisionType.TILEMAP) return (js.Boot.__cast(Object1 , flixel.tile.FlxTilemap)).overlapsWithCallback(Object2,flixel.FlxObject.separateX);
	if(Object2.collisionType == flixel.system.FlxCollisionType.TILEMAP) return (js.Boot.__cast(Object2 , flixel.tile.FlxTilemap)).overlapsWithCallback(Object1,flixel.FlxObject.separateX,true);
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0?obj1delta:-obj1delta;
		var obj2deltaAbs = obj2delta > 0?obj2delta:-obj2delta;
		var obj1rect = flixel.FlxObject._firstSeparateFlxRect.set(Object1.x - (obj1delta > 0?obj1delta:0),Object1.last.y,Object1.get_width() + (obj1delta > 0?obj1delta:-obj1delta),Object1.get_height());
		var obj2rect = flixel.FlxObject._secondSeparateFlxRect.set(Object2.x - (obj2delta > 0?obj2delta:0),Object2.last.y,Object2.get_width() + (obj2delta > 0?obj2delta:-obj2delta),Object2.get_height());
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel.FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) overlap = 0; else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) overlap = 0; else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	} else return false;
}
flixel.FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == flixel.system.FlxCollisionType.TILEMAP) return (js.Boot.__cast(Object1 , flixel.tile.FlxTilemap)).overlapsWithCallback(Object2,flixel.FlxObject.separateY);
	if(Object2.collisionType == flixel.system.FlxCollisionType.TILEMAP) return (js.Boot.__cast(Object2 , flixel.tile.FlxTilemap)).overlapsWithCallback(Object1,flixel.FlxObject.separateY,true);
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0?obj1delta:-obj1delta;
		var obj2deltaAbs = obj2delta > 0?obj2delta:-obj2delta;
		var obj1rect = flixel.FlxObject._firstSeparateFlxRect.set(Object1.x,Object1.y - (obj1delta > 0?obj1delta:0),Object1.get_width(),Object1.get_height() + obj1deltaAbs);
		var obj2rect = flixel.FlxObject._secondSeparateFlxRect.set(Object2.x,Object2.y - (obj2delta > 0?obj2delta:0),Object2.get_width(),Object2.get_height() + obj2deltaAbs);
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel.FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) overlap = 0; else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) overlap = 0; else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g = Object1;
				_g.set_x(_g.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g = Object2;
				_g.set_x(_g.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	} else return false;
}
flixel.FlxObject.__super__ = flixel.FlxBasic;
flixel.FlxObject.prototype = $extend(flixel.FlxBasic.prototype,{
	toString: function() {
		return flixel.util.FlxStringUtil.getDebugString([{ label : "x", value : this.x},{ label : "y", value : this.y},{ label : "w", value : this.get_width()},{ label : "h", value : this.get_height()},{ label : "visible", value : this.visible},{ label : "velocity", value : this.velocity}]);
	}
	,set_forceComplexRender: function(Value) {
		return this.forceComplexRender = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_solid: function(Solid) {
		if(Solid) this.allowCollisions = 4369; else this.allowCollisions = 0;
		return Solid;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,get_height: function() {
		return this.height;
	}
	,get_width: function() {
		return this.width;
	}
	,set_height: function(Height) {
		this.height = Height;
		return Height;
	}
	,set_width: function(Width) {
		this.width = Width;
		return Width;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_cachedGraphics: function(Value) {
		var oldCached = this.cachedGraphics;
		if(this.cachedGraphics != Value && Value != null) {
			var _g = Value, _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		if(oldCached != null && oldCached != Value) {
			var _g = oldCached, _g1 = _g.useCount;
			_g.set_useCount(_g1 - 1);
			_g1;
		}
		return this.cachedGraphics = Value;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
	}
	,hurt: function(Damage) {
		this.health = this.health - Damage;
		if(this.health <= 0) this.kill();
	}
	,justTouched: function(Direction) {
		return (this.touching & Direction) > 0 && (this.wasTouching & Direction) <= 0;
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		this.getScreenXY(this._point,Camera);
		return this._point.x + this.get_width() > 0 && this._point.x < Camera.width && this._point.y + this.get_height() > 0 && this._point.y < Camera.height;
	}
	,reset: function(X,Y) {
		this.revive();
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
	}
	,getMidpoint: function(point) {
		if(point == null) point = new flixel.util.FlxPoint();
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,getScreenXY: function(point,Camera) {
		if(point == null) point = new flixel.util.FlxPoint();
		if(Camera == null) Camera = flixel.FlxG.camera;
		return point.set(this.x - Camera.scroll.x * this.scrollFactor.x,this.y - Camera.scroll.y * this.scrollFactor.y);
	}
	,inWorldBounds: function() {
		return this.x + this.get_width() > flixel.FlxG.worldBounds.x && this.x < flixel.FlxG.worldBounds.get_right() && this.y + this.get_height() > flixel.FlxG.worldBounds.y && this.y < flixel.FlxG.worldBounds.get_bottom();
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return point.x > this.x && point.x < this.x + this.get_width() && point.y > this.y && point.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel.FlxG.camera;
		var X = point.x - Camera.scroll.x;
		var Y = point.y - Camera.scroll.y;
		this.getScreenXY(this._point,Camera);
		return X > this._point.x && X < this._point.x + this.get_width() && Y > this._point.y && Y < this._point.y + this.get_height();
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.SPRITEGROUP) ObjectOrGroup = Reflect.field(ObjectOrGroup,"group");
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.GROUP) {
			var results = false;
			var basic;
			var i = 0;
			var grp = ObjectOrGroup;
			var members = grp.get_members();
			while(i < (grp.length | 0)) {
				basic = members[i++];
				if(basic != null && basic.exists && this.overlapsAt(X,Y,basic,InScreenSpace,Camera)) {
					results = true;
					break;
				}
			}
			return results;
		}
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.TILEMAP) {
			var tilemap = js.Boot.__cast(ObjectOrGroup , flixel.tile.FlxTilemap);
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object = js.Boot.__cast(ObjectOrGroup , flixel.FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y && object.y < Y + this.get_height();
		if(Camera == null) Camera = flixel.FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.SPRITEGROUP) ObjectOrGroup = Reflect.field(ObjectOrGroup,"group");
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.GROUP) {
			var results = false;
			var i = 0;
			var basic;
			var grp = ObjectOrGroup;
			var members = grp.get_members();
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists && this.overlaps(basic,InScreenSpace,Camera)) {
					results = true;
					break;
				}
			}
			return results;
		}
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.TILEMAP) return (js.Boot.__cast(ObjectOrGroup , flixel.tile.FlxTilemap)).overlaps(this,InScreenSpace,Camera);
		var object = js.Boot.__cast(ObjectOrGroup , flixel.FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y && object.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel.FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,draw: function() {
		if(this.cameras == null) this.cameras = flixel.FlxG.cameras.list;
		var camera;
		var i = 0;
		var l = this.cameras.length;
		while(i < l) {
			camera = this.cameras[i++];
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) continue;
		}
	}
	,updateMotion: function() {
		var delta;
		var velocityDelta;
		var dt = flixel.FlxG.elapsed;
		velocityDelta = 0.5 * (flixel.util.FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * dt);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel.util.FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x) - this.velocity.x);
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		delta = this.velocity.x * dt;
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var _g = this;
		_g.set_x(_g.x + delta);
		velocityDelta = 0.5 * (flixel.util.FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y) - this.velocity.y);
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		delta = this.velocity.y * dt;
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		var _g = this;
		_g.set_y(_g.y + delta);
	}
	,update: function() {
		this.last.set_x(this.x);
		this.last.set_y(this.y);
		if(this.moves) this.updateMotion();
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,destroy: function() {
		flixel.FlxBasic.prototype.destroy.call(this);
		this.velocity = null;
		this.acceleration = null;
		this.drag = null;
		this.maxVelocity = null;
		this.scrollFactor = null;
		this.last = null;
		this.cameras = null;
		this._point = null;
		this.scrollFactor = null;
		this.framesData = null;
		this.set_cachedGraphics(null);
		this.region = null;
	}
	,initMotionVars: function() {
		this.velocity = new flixel.util.FlxPoint();
		this.acceleration = new flixel.util.FlxPoint();
		this.drag = new flixel.util.FlxPoint();
		this.maxVelocity = new flixel.util.FlxPoint(10000,10000);
	}
	,initVars: function() {
		this.collisionType = flixel.system.FlxCollisionType.OBJECT;
		this.last = new flixel.util.FlxPoint(this.x,this.y);
		this.scrollFactor = new flixel.util.FlxPoint(1,1);
		this._point = new flixel.util.FlxPoint();
		this.velocity = new flixel.util.FlxPoint();
		this.acceleration = new flixel.util.FlxPoint();
		this.drag = new flixel.util.FlxPoint();
		this.maxVelocity = new flixel.util.FlxPoint(10000,10000);
	}
	,__class__: flixel.FlxObject
	,__properties__: $extend(flixel.FlxBasic.prototype.__properties__,{set_x:"set_x",set_y:"set_y",set_width:"set_width",get_width:"get_width",set_height:"set_height",get_height:"get_height",set_angle:"set_angle",set_moves:"set_moves",set_immovable:"set_immovable",set_solid:"set_solid",get_solid:"get_solid",set_forceComplexRender:"set_forceComplexRender",set_cachedGraphics:"set_cachedGraphics"})
});
flixel.FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._angleChanged = false;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this._blendInt = 0;
	this._facingMult = 1;
	this._blue = 1.0;
	this._green = 1.0;
	this._red = 1.0;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipped = 0;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.frames = 0;
	this.isColored = false;
	this.dirty = true;
	this.antialiasing = false;
	flixel.FlxObject.call(this,X,Y);
	if(SimpleGraphic != null) this.loadGraphic(SimpleGraphic);
};
$hxClasses["flixel.FlxSprite"] = flixel.FlxSprite;
flixel.FlxSprite.__name__ = ["flixel","FlxSprite"];
flixel.FlxSprite.__super__ = flixel.FlxObject;
flixel.FlxSprite.prototype = $extend(flixel.FlxObject.prototype,{
	set_blend: function(Value) {
		if(Value != null) {
			switch( (Value)[1] ) {
			case 0:
				this._blendInt = 65536;
				break;
			default:
				this._blendInt = 0;
			}
		} else this._blendInt = 0;
		return this.blend = Value;
	}
	,set_angle: function(Value) {
		this._angleChanged = this.angle != Value || this._angleChanged;
		return flixel.FlxObject.prototype.set_angle.call(this,Value);
	}
	,get_colorTransform: function() {
		return this._colorTransform;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this.color == Color) return Color;
		this.color = Color;
		this.updateColorTransform();
		this._red = (this.color >> 16) / 255;
		this._green = (this.color >> 8 & 255) / 255;
		this._blue = (this.color & 255) / 255;
		this.isColored = this.color < 16777215;
		return this.color;
	}
	,set_alpha: function(Alpha) {
		if(Alpha > 1) Alpha = 1;
		if(Alpha < 0) Alpha = 0;
		if(Alpha == this.alpha) return this.alpha;
		this.alpha = Alpha;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_facing: function(Direction) {
		if(this.facing != Direction) this.dirty = true;
		this.facing = Direction;
		this._facingMult = this.flipped != 0 && this.facing == 1?-1:1;
		return Direction;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.framesData != null && this.framesData.frames != null && this.framesData.frames.length > 0) {
			this.frame = this.framesData.frames[0];
			this.dirty = true;
		}
		return this.frame;
	}
	,set_pixels: function(Pixels) {
		var key = flixel.FlxG.bitmap.getCacheKeyFor(Pixels);
		if(key == null) {
			key = flixel.FlxG.bitmap.getUniqueKey();
			this.set_cachedGraphics(flixel.FlxG.bitmap.add(Pixels,false,key));
			this.cachedGraphics.set_destroyOnNoUse(true);
		} else this.set_cachedGraphics(flixel.FlxG.bitmap.get(key));
		if(this.region == null) this.region = new flixel.system.layer.Region();
		this.region.startX = 0;
		this.region.startY = 0;
		this.region.tileWidth = this.region.width = this.cachedGraphics.bitmap.get_width();
		this.region.tileHeight = this.region.height = this.cachedGraphics.bitmap.get_height();
		this.region.spacingX = 0;
		this.region.spacingY = 0;
		this.set_width(this.frameWidth = this.cachedGraphics.bitmap.get_width());
		this.set_height(this.frameHeight = this.cachedGraphics.bitmap.get_height());
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return Pixels;
	}
	,get_pixels: function() {
		return this.cachedGraphics.bitmap;
	}
	,isSimpleRender: function() {
		return (this.angle == 0 && this.frame.additionalAngle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1;
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		var maxX = 0;
		var maxY = 0;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			maxX = minX + this.frameWidth;
			maxY = minY + this.frameHeight;
		} else {
			var radiusX = this._halfWidth;
			var radiusY = this._halfHeight;
			if(this.origin.x == this._halfWidth) radiusX = Math.abs(this._halfWidth * this.scale.x); else {
				var sox = this.scale.x * this.origin.x;
				var sfw = this.scale.x * this.frameWidth;
				var x1 = Math.abs(sox);
				var x2 = Math.abs(sfw - sox);
				radiusX = Math.max(x2,x1);
			}
			if(this.origin.y == this._halfHeight) radiusY = Math.abs(this._halfHeight * this.scale.y); else {
				var soy = this.scale.y * this.origin.y;
				var sfh = this.scale.y * this.frameHeight;
				var y1 = Math.abs(soy);
				var y2 = Math.abs(sfh - soy);
				radiusY = Math.max(y2,y1);
			}
			var radius = Math.max(radiusX,radiusY);
			radius *= 1.415;
			minX += this.origin.x;
			maxX = minX + radius;
			minX -= radius;
			minY += this.origin.y;
			maxY = minY + radius;
			minY -= radius;
		}
		if(maxX < 0 || minX > Camera.width) return false;
		if(maxY < 0 || minY > Camera.height) return false;
		return true;
	}
	,resetFrameBitmapDatas: function() {
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) point = new flixel.util.FlxPoint();
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,getFlxFrameBitmapData: function() {
		var frameBmd = null;
		if(this.frame != null) {
			if(this.facing == 1 && this.flipped > 0) frameBmd = this.frame.getHReversedBitmap(); else frameBmd = this.frame.getBitmap();
		}
		return frameBmd;
	}
	,updateFrameData: function() {
		if(this.cachedGraphics == null) return;
		if(this.cachedGraphics.data != null && (this.region.tileWidth == 0 && this.region.tileHeight == 0)) this.framesData = this.cachedGraphics.get_tilesheet().getTexturePackerFrames(this.cachedGraphics.data); else this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,null);
		this.set_frame(this.framesData.frames[0]);
		this.frames = this.framesData.frames.length;
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this.cachedGraphics == null) this.loadGraphic(flixel._FlxSprite.GraphicDefault);
		if(this.frame != null) {
			if(this.framePixels == null || this.framePixels.get_width() != this.frameWidth || this.framePixels.get_height() != this.frameHeight) {
				if(this.framePixels != null) this.framePixels.dispose();
				this.framePixels = new flash.display.BitmapData(this.frame.sourceSize.x | 0,this.frame.sourceSize.y | 0);
			}
			this.framePixels.copyPixels(this.getFlxFrameBitmapData(),this._flashRect,this._flashPointZero);
		}
		if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this._colorTransform);
		this.dirty = false;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) Mask = 255;
		if(Camera == null) Camera = flixel.FlxG.camera;
		this.getScreenXY(this._point,Camera);
		this._point.set_x(this._point.x - this.offset.x);
		this._point.set_y(this._point.y - this.offset.y);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) return false; else {
			var frameData = this.getFlxFrameBitmapData();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			var pixelAlpha = pixelColor >> 24 & 255;
			return pixelAlpha * this.alpha >= Mask;
		}
	}
	,updateColorTransform: function() {
		if(this.alpha != 1 || this.color != 16777215) {
			if(this._colorTransform == null) this._colorTransform = new flash.geom.ColorTransform((this.color >> 16) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha); else {
				this._colorTransform.redMultiplier = (this.color >> 16) / 255;
				this._colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
				this._colorTransform.blueMultiplier = (this.color & 255) / 255;
				this._colorTransform.alphaMultiplier = this.alpha;
			}
			this.useColorTransform = true;
		} else {
			if(this._colorTransform != null) {
				this._colorTransform.redMultiplier = 1;
				this._colorTransform.greenMultiplier = 1;
				this._colorTransform.blueMultiplier = 1;
				this._colorTransform.alphaMultiplier = 1;
			}
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) alphaOffset = 0;
		if(blueOffset == null) blueOffset = 0;
		if(greenOffset == null) greenOffset = 0;
		if(redOffset == null) redOffset = 0;
		if(alphaMultiplier == null) alphaMultiplier = 1.0;
		if(blueMultiplier == null) blueMultiplier = 1.0;
		if(greenMultiplier == null) greenMultiplier = 1.0;
		if(redMultiplier == null) redMultiplier = 1.0;
		this.set_color((redMultiplier * 255 | 0) << 16 | (greenMultiplier * 255 | 0) << 8 | (blueMultiplier * 255 | 0));
		this.set_alpha(alphaMultiplier);
		if(this._colorTransform == null) this._colorTransform = new flash.geom.ColorTransform(); else {
			this._colorTransform.redMultiplier = redMultiplier;
			this._colorTransform.greenMultiplier = greenMultiplier;
			this._colorTransform.blueMultiplier = blueMultiplier;
			this._colorTransform.alphaMultiplier = alphaMultiplier;
			this._colorTransform.redOffset = redOffset;
			this._colorTransform.greenOffset = greenOffset;
			this._colorTransform.blueOffset = blueOffset;
			this._colorTransform.alphaOffset = alphaOffset;
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || redOffset != 0 || greenOffset != 0 || blueOffset != 0 || alphaOffset != 0;
		this.dirty = true;
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) FetchPositions = false;
		var positions = null;
		if(FetchPositions) positions = new Array();
		var row = this.region.startY;
		var column;
		var rows = this.region.height;
		var columns = this.region.width;
		this.cachedGraphics.bitmap.lock();
		while(row < rows) {
			column = this.region.startX;
			while(column < columns) {
				if(this.cachedGraphics.bitmap.getPixel32(column,row) == Color) {
					this.cachedGraphics.bitmap.setPixel32(column,row,NewColor);
					if(FetchPositions) positions.push(new flixel.util.FlxPoint(column,row));
					this.dirty = true;
				}
				column++;
			}
			row++;
		}
		this.cachedGraphics.bitmap.unlock();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return positions;
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) AdjustPosition = false;
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g = this;
			_g.set_y(_g.y + this.offset.y);
		}
	}
	,drawFrame: function(Force) {
		if(Force == null) Force = false;
		this.calcFrame(true);
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		Brush.calcFrame(true);
		var bitmapData = Brush.framePixels;
		if((Brush.angle == 0 || Brush.bakedRotationAngle > 0) && Brush.scale.x == 1 && Brush.scale.y == 1 && Brush.blend == null) {
			this._flashPoint.x = X + this.region.startX;
			this._flashPoint.y = Y + this.region.startY;
			this._flashRect2.width = bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.width:0;
			this._flashRect2.height = bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.height:0;
			this.cachedGraphics.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.cachedGraphics.bitmap.get_width();
			this._flashRect2.height = this.cachedGraphics.bitmap.get_height();
			this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
			return;
		}
		this._matrix.identity();
		this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
		this._matrix.scale(Brush.scale.x,Brush.scale.y);
		if(Brush.angle != 0) this._matrix.rotate(Brush.angle * flixel.util.FlxAngle.TO_RAD);
		this._matrix.translate(X + this.region.startX + Brush.origin.x,Y + this.region.startY + Brush.origin.y);
		var brushBlend = Brush.blend;
		this.cachedGraphics.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	}
	,draw: function() {
		if(this.alpha == 0) return;
		if(this.dirty) this.calcFrame();
		if(this.cameras == null) this.cameras = flixel.FlxG.cameras.list;
		var drawItem;
		var currDrawData;
		var currIndex;
		var cos;
		var sin;
		var simpleRender = this.isSimpleRender();
		var _g = 0, _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) continue;
			var useAlpha = this.alpha < 1 || camera.alpha < 1;
			drawItem = camera.getDrawStackItem(this.cachedGraphics,useAlpha);
			currDrawData = drawItem.drawData;
			currIndex = drawItem.position;
			this._point.set_x(this.x - camera.scroll.x * this.scrollFactor.x - this.offset.x);
			this._point.set_y(this.y - camera.scroll.y * this.scrollFactor.y - this.offset.y);
			this._point.set_x(this._point.x + this.origin.x);
			this._point.set_y(this._point.y + this.origin.y);
			this._point.set_x(Math.floor(this._point.x));
			this._point.set_y(Math.floor(this._point.y));
			var csx = this._facingMult;
			var ssy = 0;
			var ssx = 0;
			var csy = 1;
			var x1 = this.origin.x - this.frame.center.x;
			var y1 = this.origin.y - this.frame.center.y;
			var x2 = x1;
			var y2 = y1;
			var a = csx;
			var b = ssx;
			var c = ssy;
			var d = csy;
			if(!simpleRender) {
				if(this._angleChanged && this.bakedRotationAngle <= 0) {
					var radians = -this.angle * flixel.util.FlxAngle.TO_RAD;
					this._sinAngle = Math.sin(radians);
					this._cosAngle = Math.cos(radians);
					this._angleChanged = false;
				}
				var sx = this.scale.x * this._facingMult;
				if(this.frame.rotated) {
					cos = -this._sinAngle;
					sin = this._cosAngle;
					csx = cos * sx;
					ssy = sin * this.scale.y;
					ssx = sin * sx;
					csy = cos * this.scale.y;
					x2 = x1 * ssx - y1 * csy;
					y2 = x1 * csx + y1 * ssy;
					a = csy;
					b = ssy;
					c = ssx;
					d = csx;
				} else {
					cos = this._cosAngle;
					sin = this._sinAngle;
					csx = cos * sx;
					ssy = sin * this.scale.y;
					ssx = sin * sx;
					csy = cos * this.scale.y;
					x2 = x1 * csx + y1 * ssy;
					y2 = -x1 * ssx + y1 * csy;
					a = csx;
					b = ssx;
					c = ssy;
					d = csy;
				}
			} else x2 = x1 * csx;
			currDrawData[currIndex++] = this._point.x - x2;
			currDrawData[currIndex++] = this._point.y - y2;
			currDrawData[currIndex++] = this.frame.tileID;
			currDrawData[currIndex++] = a;
			currDrawData[currIndex++] = -b;
			currDrawData[currIndex++] = c;
			currDrawData[currIndex++] = d;
			if(useAlpha) currDrawData[currIndex++] = this.alpha * camera.alpha;
			drawItem.position = currIndex;
		}
	}
	,update: function() {
		flixel.FlxObject.prototype.update.call(this);
		this.animation.update();
	}
	,resetHelpers: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		this._flashRect2.width = this.cachedGraphics.bitmap.get_width();
		this._flashRect2.height = this.cachedGraphics.bitmap.get_height();
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		this._halfWidth = this.frameWidth * 0.5;
		this._halfHeight = this.frameHeight * 0.5;
	}
	,updateHitbox: function() {
		var newWidth = this.scale.x * this.frameWidth;
		var newHeight = this.scale.y * this.frameHeight;
		this.set_width(newWidth);
		this.set_height(newHeight);
		this.offset.set(-((newWidth - this.frameWidth) * 0.5),-((newHeight - this.frameHeight) * 0.5));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Width <= 0 && Height <= 0) return;
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) this.scale.set_x(newScaleY); else if(Height <= 0) this.scale.set_y(newScaleX);
	}
	,setOriginToCenter: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,resetFrameSize: function() {
		this.frameWidth = this.frame.sourceSize.x | 0;
		this.frameHeight = this.frame.sourceSize.y | 0;
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Color == null) Color = -1;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel.FlxG.bitmap.create(Width,Height,Color,Unique,Key));
		this.region = new flixel.system.layer.Region();
		this.region.width = Width;
		this.region.height = Height;
		this.set_width(this.region.tileWidth = this.frameWidth = this.cachedGraphics.bitmap.get_width());
		this.set_height(this.region.tileHeight = this.frameHeight = this.cachedGraphics.bitmap.get_height());
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,loadRotatedGraphicFromTexture: function(Data,Image,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Rotations == null) Rotations = 16;
		var temp = this.loadGraphicFromTexture(Data);
		if(temp == null) return null;
		this.animation.set_frameName(Image);
		this.antialiasing = AntiAliasing;
		return this;
	}
	,loadGraphicFromTexture: function(Data,Reverse,Unique,FrameName) {
		if(Unique == null) Unique = false;
		if(Reverse == null) Reverse = false;
		this.bakedRotationAngle = 0;
		if(js.Boot.__instanceof(Data,flixel.util.loaders.CachedGraphics)) {
			this.set_cachedGraphics(Data);
			if(this.cachedGraphics.data == null) return null;
		} else if(js.Boot.__instanceof(Data,flixel.util.loaders.TexturePackerData)) {
			this.set_cachedGraphics(flixel.FlxG.bitmap.add(Data.assetName,Unique));
			this.cachedGraphics.data = Data;
		} else return null;
		this.region = new flixel.system.layer.Region();
		this.region.width = this.cachedGraphics.bitmap.get_width();
		this.region.height = this.cachedGraphics.bitmap.get_height();
		this.flipped = Reverse == true?this.cachedGraphics.bitmap.get_width():0;
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		if(FrameName != null) this.animation.set_frameName(FrameName);
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Frame == null) Frame = -1;
		if(Rotations == null) Rotations = 16;
		var rows = Math.sqrt(Rotations) | 0;
		var brush = flixel.FlxG.bitmap.add(Graphic,false,Key).bitmap;
		var isRegion = js.Boot.__instanceof(Graphic,flixel.util.loaders.TextureRegion);
		var spriteRegion = isRegion == true?Graphic:null;
		var tempRegion = isRegion == true?spriteRegion.region:null;
		if(Frame >= 0 || isRegion) {
			var full = brush;
			if(isRegion) {
				brush = new flash.display.BitmapData(tempRegion.width,tempRegion.height);
				this._flashRect.x = tempRegion.startX;
				this._flashRect.y = tempRegion.startY;
				this._flashRect.width = tempRegion.width;
				this._flashRect.height = tempRegion.height;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			} else {
				brush = new flash.display.BitmapData(full.___textureBuffer != null?full.___textureBuffer.height:0,full.___textureBuffer != null?full.___textureBuffer.height:0);
				var rx = Frame * (brush.___textureBuffer != null?brush.___textureBuffer.width:0);
				var ry = 0;
				var fw = full.___textureBuffer != null?full.___textureBuffer.width:0;
				if(rx >= fw) {
					ry = (rx / fw | 0) * (brush.___textureBuffer != null?brush.___textureBuffer.height:0);
					rx %= fw;
				}
				this._flashRect.x = rx;
				this._flashRect.y = ry;
				this._flashRect.width = brush.___textureBuffer != null?brush.___textureBuffer.width:0;
				this._flashRect.height = brush.___textureBuffer != null?brush.___textureBuffer.height:0;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			}
		}
		var max = brush.___textureBuffer != null?brush.___textureBuffer.width:0;
		if((brush.___textureBuffer != null?brush.___textureBuffer.height:0) > max) max = brush.___textureBuffer != null?brush.___textureBuffer.height:0;
		if(AutoBuffer) max = max * 1.5 | 0;
		var columns = Math.ceil(Rotations / rows);
		this.set_width(max * columns);
		this.set_height(max * rows);
		var key = "";
		if(js.Boot.__instanceof(Graphic,String)) key = Graphic; else if(js.Boot.__instanceof(Graphic,Class)) key = Type.getClassName(Graphic); else if(js.Boot.__instanceof(Graphic,flash.display.BitmapData) && Key != null) key = Key; else if(isRegion) {
			key = spriteRegion.data.key;
			key += ":" + tempRegion.startX + ":" + tempRegion.startY + ":" + tempRegion.width + ":" + tempRegion.height + ":" + Rotations;
		} else return null;
		if(!isRegion) key += ":" + Frame + ":" + this.get_width() + "x" + this.get_height() + ":" + Rotations;
		var skipGen = flixel.FlxG.bitmap.checkCache(key);
		this.set_cachedGraphics(flixel.FlxG.bitmap.create((this.get_width() | 0) + columns - 1,(this.get_height() | 0) + rows - 1,0,true,key));
		this.bakedRotationAngle = 360 / Rotations;
		if(!skipGen) {
			var row = 0;
			var column;
			var bakedAngle = 0;
			var halfBrushWidth = (brush.___textureBuffer != null?brush.___textureBuffer.width:0) * 0.5 | 0;
			var halfBrushHeight = (brush.___textureBuffer != null?brush.___textureBuffer.height:0) * 0.5 | 0;
			var midpointX = max * 0.5 | 0;
			var midpointY = max * 0.5 | 0;
			while(row < rows) {
				column = 0;
				while(column < columns) {
					this._matrix.identity();
					this._matrix.translate(-halfBrushWidth,-halfBrushHeight);
					this._matrix.rotate(bakedAngle * flixel.util.FlxAngle.TO_RAD);
					this._matrix.translate(max * column + midpointX + column,midpointY + row);
					bakedAngle += this.bakedRotationAngle;
					this.cachedGraphics.bitmap.draw(brush,this._matrix,null,null,null,AntiAliasing);
					column++;
				}
				midpointY += max;
				row++;
			}
		}
		this.frameWidth = this.frameHeight = max;
		this.set_width(this.set_height(max));
		this.region = new flixel.system.layer.Region(0,0,max,max,1,1);
		this.region.width = this.cachedGraphics.bitmap.get_width();
		this.region.height = this.cachedGraphics.bitmap.get_height();
		this.antialiasing = AntiAliasing;
		this.updateFrameData();
		this.resetHelpers();
		if(AutoBuffer) {
			this.set_width(brush.___textureBuffer != null?brush.___textureBuffer.width:0);
			this.set_height(brush.___textureBuffer != null?brush.___textureBuffer.height:0);
			this.centerOffsets();
		}
		this.animation.createPrerotated();
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Reverse,Width,Height,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Reverse == null) Reverse = false;
		if(Animated == null) Animated = false;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel.FlxG.bitmap.add(Graphic,Unique,Key));
		this.flipped = Reverse == true?this.cachedGraphics.bitmap.get_width():0;
		if(Width == 0) {
			Width = Animated == true?this.cachedGraphics.bitmap.get_height():this.cachedGraphics.bitmap.get_width();
			Width = Width > this.cachedGraphics.bitmap.get_width()?this.cachedGraphics.bitmap.get_width():Width;
		}
		if(Height == 0) {
			Height = Animated == true?Width:this.cachedGraphics.bitmap.get_height();
			Height = Height > this.cachedGraphics.bitmap.get_height()?this.cachedGraphics.bitmap.get_height():Height;
		}
		if(!js.Boot.__instanceof(Graphic,flixel.util.loaders.TextureRegion)) {
			this.region = new flixel.system.layer.Region(0,0,Width,Height);
			this.region.width = this.cachedGraphics.bitmap.get_width();
			this.region.height = this.cachedGraphics.bitmap.get_height();
		} else {
			this.region = (js.Boot.__cast(Graphic , flixel.util.loaders.TextureRegion)).region.clone();
			if(this.region.tileWidth > 0) Width = this.region.tileWidth; else this.region.tileWidth = this.region.width;
			if(this.region.tileHeight > 0) Height = this.region.tileWidth; else this.region.tileHeight = this.region.height;
		}
		this.set_width(this.frameWidth = Width);
		this.set_height(this.frameHeight = Height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,loadGraphicFromSprite: function(Sprite) {
		if(!this.exists) null;
		this.region = Sprite.region.clone();
		this.flipped = Sprite.flipped;
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		this.set_cachedGraphics(Sprite.cachedGraphics);
		this.set_width(this.frameWidth = Sprite.frameWidth);
		this.set_height(this.frameHeight = Sprite.frameHeight);
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.updateFrameData();
		this.resetHelpers();
		this.antialiasing = Sprite.antialiasing;
		this.animation.copyFrom(Sprite.animation);
		return this;
	}
	,clone: function(NewSprite) {
		if(NewSprite == null) NewSprite = new flixel.FlxSprite();
		return NewSprite.loadGraphicFromSprite(this);
	}
	,destroy: function() {
		flixel.FlxObject.prototype.destroy.call(this);
		this.animation = flixel.FlxG.safeDestroy(this.animation);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this.offset = null;
		this.origin = null;
		this.scale = null;
		this._matrix = null;
		this._colorTransform = null;
		if(this.framePixels != null) this.framePixels.dispose();
		this.framePixels = null;
		this.set_blend(null);
		this.set_frame(null);
	}
	,initVars: function() {
		flixel.FlxObject.prototype.initVars.call(this);
		this.animation = new flixel.animation.FlxAnimationController(this);
		this._flashPoint = new flash.geom.Point();
		this._flashRect = new flash.geom.Rectangle();
		this._flashRect2 = new flash.geom.Rectangle();
		this._flashPointZero = new flash.geom.Point();
		this.offset = new flixel.util.FlxPoint();
		this.origin = new flixel.util.FlxPoint();
		this.scale = new flixel.util.FlxPoint(1,1);
		this._matrix = new flash.geom.Matrix();
	}
	,__class__: flixel.FlxSprite
	,__properties__: $extend(flixel.FlxObject.prototype.__properties__,{set_pixels:"set_pixels",get_pixels:"get_pixels",set_frame:"set_frame",set_alpha:"set_alpha",set_facing:"set_facing",set_blend:"set_blend",set_color:"set_color",get_colorTransform:"get_colorTransform"})
});
var Banner = function() {
	flixel.FlxSprite.call(this,0,0);
	this.loadGraphic("assets/images/banner.png",false);
	this.set_x((flixel.FlxG.width - this.get_width()) / 2);
	this.dialog = new flixel.FlxSprite(0,0);
	this.dialog.loadGraphic("assets/images/dialog.png",false);
	this.dialog.set_x(this.x - this.dialog.get_width());
};
$hxClasses["Banner"] = Banner;
Banner.__name__ = ["Banner"];
Banner.__super__ = flixel.FlxSprite;
Banner.prototype = $extend(flixel.FlxSprite.prototype,{
	draw: function() {
		flixel.FlxSprite.prototype.draw.call(this);
		if(this.state) this.dialog.draw();
	}
	,update: function() {
		flixel.FlxSprite.prototype.update.call(this);
		this.state = this.contains(flixel.FlxG.mouse.screenX,flixel.FlxG.mouse.screenY);
		if(this.state) this.dialog.update();
	}
	,contains: function(px,py) {
		return px > this.x && px < this.x + 250 && py > this.y && py < this.y + this.get_height();
	}
	,__class__: Banner
});
var openfl = {}
openfl.AssetLibrary = function() {
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.prototype = {
	loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadBitmapData: function(id,handler) {
		handler(this.getBitmapData(id));
	}
	,load: function(handler) {
		handler(this);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,getSound: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getBitmapData: function(id) {
		return null;
	}
	,exists: function(id,type) {
		return false;
	}
	,__class__: openfl.AssetLibrary
}
var DefaultAssetLibrary = function() {
	openfl.AssetLibrary.call(this);
	DefaultAssetLibrary.path.set("assets/data/text/index/main.txt","assets/data/text/index/main.txt");
	var value = Reflect.field(openfl.AssetType,"text".toUpperCase());
	DefaultAssetLibrary.type.set("assets/data/text/index/main.txt",value);
	DefaultAssetLibrary.path.set("assets/images/banner.png","assets/images/banner.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/banner.png",value);
	DefaultAssetLibrary.path.set("assets/images/construction.jpg","assets/images/construction.jpg");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/construction.jpg",value);
	DefaultAssetLibrary.path.set("assets/images/covers/naomi/naomi.png","assets/images/covers/naomi/naomi.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/covers/naomi/naomi.png",value);
	DefaultAssetLibrary.path.set("assets/images/covers/naomi/star.png","assets/images/covers/naomi/star.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/covers/naomi/star.png",value);
	DefaultAssetLibrary.path.set("assets/images/covers/psycho/ball.png","assets/images/covers/psycho/ball.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/covers/psycho/ball.png",value);
	DefaultAssetLibrary.path.set("assets/images/covers/psycho/psycho.png","assets/images/covers/psycho/psycho.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/covers/psycho/psycho.png",value);
	DefaultAssetLibrary.path.set("assets/images/dialog.png","assets/images/dialog.png");
	var value = Reflect.field(openfl.AssetType,"image".toUpperCase());
	DefaultAssetLibrary.type.set("assets/images/dialog.png",value);
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = openfl.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(openfl.AssetLibrary.prototype,{
	loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadBytes: function(id,handler) {
		if(DefaultAssetLibrary.path.exists(id)) {
			var loader = new flash.net.URLLoader();
			loader.addEventListener(flash.events.Event.COMPLETE,function(event) {
				var bytes = new flash.utils.ByteArray();
				bytes.writeUTFBytes(event.currentTarget.data);
				bytes.position = 0;
				handler(bytes);
			});
			loader.load(new flash.net.URLRequest(DefaultAssetLibrary.path.get(id)));
		} else handler(this.getBytes(id));
	}
	,loadBitmapData: function(id,handler) {
		if(DefaultAssetLibrary.path.exists(id)) {
			var loader = new flash.display.Loader();
			loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE,function(event) {
				handler((js.Boot.__cast(event.currentTarget.content , flash.display.Bitmap)).bitmapData);
			});
			loader.load(new flash.net.URLRequest(DefaultAssetLibrary.path.get(id)));
		} else handler(this.getBitmapData(id));
	}
	,isLocal: function(id,type) {
		return true;
	}
	,getSound: function(id) {
		return new flash.media.Sound(new flash.net.URLRequest(DefaultAssetLibrary.path.get(id)));
	}
	,getPath: function(id) {
		return DefaultAssetLibrary.path.get(id);
	}
	,getMusic: function(id) {
		return new flash.media.Sound(new flash.net.URLRequest(DefaultAssetLibrary.path.get(id)));
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(DefaultAssetLibrary.className.get(id),[]) , flash.text.Font);
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ApplicationMain.urlLoaders.get(DefaultAssetLibrary.path.get(id)).data;
		if(js.Boot.__instanceof(data,String)) {
			bytes = new flash.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,flash.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getBitmapData: function(id) {
		return (js.Boot.__cast(ApplicationMain.loaders.get(DefaultAssetLibrary.path.get(id)).contentLoaderInfo.content , flash.display.Bitmap)).bitmapData;
	}
	,exists: function(id,type) {
		var assetType = DefaultAssetLibrary.type.get(id);
		if(assetType != null) {
			if(assetType == type || (type == openfl.AssetType.SOUND || type == openfl.AssetType.MUSIC) && (assetType == openfl.AssetType.MUSIC || assetType == openfl.AssetType.SOUND)) return true;
			if(type == openfl.AssetType.BINARY || type == null) return true;
		}
		return false;
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matched: function(n) {
		return this.r.m != null && n >= 0 && n < this.r.m.length?this.r.m[n]:(function($this) {
			var $r;
			throw "EReg::matched";
			return $r;
		}(this));
	}
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
}
flixel.FlxGame = function(GameSizeX,GameSizeY,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) StartFullscreen = false;
	if(SkipSplash == null) SkipSplash = false;
	if(DrawFramerate == null) DrawFramerate = 60;
	if(UpdateFramerate == null) UpdateFramerate = 60;
	if(Zoom == null) Zoom = 1;
	if(GameSizeY == null) GameSizeY = 480;
	if(GameSizeX == null) GameSizeX = 640;
	this._resetGame = false;
	this._skipSplash = false;
	this._customFocusLostScreen = flixel.system.ui.FlxFocusLostScreen;
	this._customSoundTray = flixel.system.ui.FlxSoundTray;
	this._lostFocus = false;
	this._total = 0;
	this._gameJustStarted = false;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	flash.display.Sprite.call(this);
	this._inputContainer = new flash.display.Sprite();
	flixel.FlxG.init(this,GameSizeX,GameSizeY,Zoom);
	flixel.FlxG.set_updateFramerate(UpdateFramerate);
	flixel.FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._initialState = InitialState == null?flixel.FlxState:InitialState;
	this.addEventListener(flash.events.Event.ADDED_TO_STAGE,$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel.FlxGame;
flixel.FlxGame.__name__ = ["flixel","FlxGame"];
flixel.FlxGame.__super__ = flash.display.Sprite;
flixel.FlxGame.prototype = $extend(flash.display.Sprite.prototype,{
	draw: function() {
		flixel.system.layer.TileSheetExt._DRAWCALLS = 0;
		flixel.FlxG.cameras.lock();
		flixel.FlxG.plugins.draw();
		this._state.draw();
		flixel.FlxG.cameras.render();
		flixel.FlxG.cameras.unlock();
	}
	,updateInput: function() {
		flixel.FlxG.inputs.update();
	}
	,update: function() {
		if(this._state != this._requestedState) this.switchState();
		if(flixel.FlxG.fixedTimestep) flixel.FlxG.elapsed = flixel.FlxG.timeScale * this._stepSeconds; else flixel.FlxG.elapsed = flixel.FlxG.timeScale * (this._elapsedMS / 1000);
		this.updateInput();
		flixel.FlxG.sound.update();
		flixel.FlxG.plugins.update();
		this._state.tryUpdate();
		flixel.FlxG.cameras.update();
		var _g = 0, _g1 = flixel.FlxG.swipes;
		while(_g < _g1.length) {
			var swipe = _g1[_g];
			++_g;
			swipe = null;
		}
		flixel.FlxG.swipes = [];
	}
	,step: function() {
		if(this._resetGame) {
			if(this._skipSplash) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				this._gameJustStarted = true;
			} else {
				this._requestedState = new flixel.system.FlxSplash(this._initialState);
				this._skipSplash = true;
			}
			flixel.FlxG.reset();
			this._resetGame = false;
		}
		this.update();
	}
	,gameStart: function() {
		flixel.FlxG.mouse.onGameStart();
		this._gameJustStarted = false;
	}
	,switchState: function() {
		flixel.text.pxText.PxBitmapFont.clearStorage();
		flixel.FlxG.bitmap.clearCache();
		flixel.FlxG.cameras.reset();
		flixel.FlxG.inputs.reset();
		flixel.FlxG.sound.destroy();
		flixel.FlxG.plugins.onStateSwitch();
		if(this._state != null) this._state.destroy();
		this._state = this._requestedState;
		this._state.create();
		if(this._gameJustStarted) this.gameStart();
	}
	,resetGame: function() {
		if(this._skipSplash) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			this._gameJustStarted = true;
		} else {
			this._requestedState = new flixel.system.FlxSplash(this._initialState);
			this._skipSplash = true;
		}
		flixel.FlxG.reset();
	}
	,onEnterFrame: function(FlashEvent) {
		this.ticks = flash.Lib.getTimer();
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) this.soundTray.update(this._elapsedMS);
		if(!this._lostFocus || !flixel.FlxG.autoPause) {
			if(flixel.FlxG.vcr.paused) {
				if(flixel.FlxG.vcr.stepRequested) flixel.FlxG.vcr.stepRequested = false; else if(this._state == this._requestedState) return;
			}
			if(flixel.FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				if(this._accumulator > this._maxAccumulation) this._accumulator = this._maxAccumulation;
				while(this._accumulator > this._stepMS) {
					this.step();
					this._accumulator = this._accumulator - this._stepMS;
				}
			} else this.step();
			this.draw();
		}
	}
	,onResize: function(E) {
		var width = flash.Lib.get_current().get_stage().get_stageWidth();
		var height = flash.Lib.get_current().get_stage().get_stageHeight();
		flixel.FlxG.bitmap.onContext();
		flixel.FlxG._scaleMode.onMeasure(width,height);
		this._state.onResize(width,height);
		flixel.FlxG.plugins.onResize(width,height);
		if(this._focusLostScreen != null) this._focusLostScreen.draw();
		if(this.soundTray != null) this.soundTray.screenCenter();
		this._inputContainer.set_scaleX(1 / flixel.FlxG.game.get_scaleX());
		this._inputContainer.set_scaleY(1 / flixel.FlxG.game.get_scaleY());
	}
	,onFocusLost: function(FlashEvent) {
		this._lostFocus = true;
		if(!flixel.FlxG.autoPause) {
			this._state.onFocusLost();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(true);
		this.get_stage().set_frameRate(this.focusLostFramerate);
		flixel.FlxG.sound.onFocusLost();
		flixel.FlxG.inputs.onFocusLost();
	}
	,onFocus: function(FlashEvent) {
		this._lostFocus = false;
		if(!flixel.FlxG.autoPause) {
			this._state.onFocus();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(false);
		this.get_stage().set_frameRate(flixel.FlxG.drawFramerate);
		flixel.FlxG.sound.onFocus();
		flixel.FlxG.inputs.onFocus();
	}
	,create: function(FlashEvent) {
		if(this.get_stage() == null) return;
		this.removeEventListener(flash.events.Event.ADDED_TO_STAGE,$bind(this,this.create));
		this._total = flash.Lib.getTimer();
		this.get_stage().scaleMode = flash.display.StageScaleMode.NO_SCALE;
		this.get_stage().align = flash.display.StageAlign.TOP_LEFT;
		this.get_stage().set_frameRate(flixel.FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this._focusLostScreen = Type.createInstance(this._customFocusLostScreen,[]);
		this.addChild(this._focusLostScreen);
		this.get_stage().addEventListener(flash.events.Event.DEACTIVATE,$bind(this,this.onFocusLost));
		this.get_stage().addEventListener(flash.events.Event.ACTIVATE,$bind(this,this.onFocus));
		if(this._skipSplash) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			this._gameJustStarted = true;
		} else {
			this._requestedState = new flixel.system.FlxSplash(this._initialState);
			this._skipSplash = true;
		}
		flixel.FlxG.reset();
		this.switchState();
		if((1000 / flixel.FlxG.game._stepMS | 0) < flixel.FlxG.drawFramerate) null;
		this.get_stage().addEventListener(flash.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.get_stage().addEventListener(flash.events.Event.RESIZE,$bind(this,this.onResize));
	}
	,__class__: flixel.FlxGame
});
var GameClass = function() {
	this.startFullscreen = false;
	this.skipSplash = false;
	this.framerate = 60;
	this.zoom = -1;
	this.initialState = states.IndexState;
	this.gameHeight = 1080;
	this.gameWidth = 1920;
	var stageWidth = flash.Lib.get_current().get_stage().get_stageWidth();
	var stageHeight = flash.Lib.get_current().get_stage().get_stageHeight();
	if(this.zoom == -1) {
		var ratioX = stageWidth / this.gameWidth;
		var ratioY = stageHeight / this.gameHeight;
		this.zoom = Math.min(ratioX,ratioY);
		this.gameWidth = Math.ceil(stageWidth / this.zoom);
		this.gameHeight = Math.ceil(stageHeight / this.zoom);
	}
	flixel.FlxGame.call(this,this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen);
};
$hxClasses["GameClass"] = GameClass;
GameClass.__name__ = ["GameClass"];
GameClass.__super__ = flixel.FlxGame;
GameClass.prototype = $extend(flixel.FlxGame.prototype,{
	__class__: GameClass
});
var HxOverrides = function() { }
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
}
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
}
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
}
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
}
HxOverrides.remove = function(a,obj) {
	var i = 0;
	var l = a.length;
	while(i < l) {
		if(a[i] == obj) {
			a.splice(i,1);
			return true;
		}
		i++;
	}
	return false;
}
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
}
var Lambda = function() { }
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = new Array();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
}
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l[0];
			l = l[1];
			if(f(v)) l2.add(v);
		}
		return l2;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,first: function() {
		return this.h == null?null:this.h[0];
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,__class__: List
}
var IMap = function() { }
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
var NMEPreloader = function() {
	flash.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 9;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 3;
	this.outline = new flash.display.Sprite();
	this.outline.get_graphics().lineStyle(1,color,0.15,true);
	this.outline.get_graphics().drawRoundRect(0,0,width,height,padding * 2,padding * 2);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new flash.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = flash.display.Sprite;
NMEPreloader.prototype = $extend(flash.display.Sprite.prototype,{
	onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded == 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,onLoaded: function() {
		this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
	}
	,onInit: function() {
	}
	,getWidth: function() {
		var width = 640;
		if(width > 0) return width; else return flash.Lib.get_current().get_stage().get_stageWidth();
	}
	,getHeight: function() {
		var height = 480;
		if(height > 0) return height; else return flash.Lib.get_current().get_stage().get_stageHeight();
	}
	,getBackgroundColor: function() {
		return 0;
	}
	,__class__: NMEPreloader
});
flixel.text = {}
flixel.text.FlxText = function(X,Y,Width,Text,size,EmbeddedFont) {
	if(EmbeddedFont == null) EmbeddedFont = true;
	if(size == null) size = 8;
	this._heightInc = 0;
	this._widthInc = 0;
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = 0;
	flixel.FlxSprite.call(this,X,Y);
	this._filters = [];
	if(Text == null) Text = "";
	this._textField = new flash.text.TextField();
	this._textField.set_width(Width);
	this._textField.selectable = false;
	this._textField.multiline = true;
	this._textField.set_wordWrap(true);
	this._defaultFormat = new flash.text.TextFormat(flixel.system.FlxAssets.FONT_DEFAULT,size,16777215);
	this._formatAdjusted = new flash.text.TextFormat();
	this._textField.set_defaultTextFormat(this._defaultFormat);
	this._textField.set_text(Text);
	this._textField.embedFonts = EmbeddedFont;
	this._formats = new Array();
	this._textField.set_height(Text.length <= 0?1:10);
	this.allowCollisions = 0;
	this.set_moves(false);
	var key = flixel.FlxG.bitmap.getUniqueKey("text");
	this.makeGraphic(Width,1,0,false,key);
	if(Text != "") this.calcFrame();
};
$hxClasses["flixel.text.FlxText"] = flixel.text.FlxText;
flixel.text.FlxText.__name__ = ["flixel","text","FlxText"];
flixel.text.FlxText.__super__ = flixel.FlxSprite;
flixel.text.FlxText.prototype = $extend(flixel.FlxSprite.prototype,{
	updateFormat: function(Format) {
		this._textField.setTextFormat(Format,0,this._textField.get_text().length);
	}
	,convertTextAlignmentFromString: function(StrAlign) {
		if(StrAlign == "right") return flash.text.TextFormatAlign.RIGHT; else if(StrAlign == "center") return flash.text.TextFormatAlign.CENTER; else if(StrAlign == "justify") return flash.text.TextFormatAlign.JUSTIFY; else return flash.text.TextFormatAlign.LEFT;
	}
	,dtfCopy: function() {
		var defaultTextFormat = this._textField.get_defaultTextFormat();
		return new flash.text.TextFormat(defaultTextFormat.font,defaultTextFormat.size,defaultTextFormat.color,defaultTextFormat.bold,defaultTextFormat.italic,defaultTextFormat.underline,defaultTextFormat.url,defaultTextFormat.target,defaultTextFormat.align);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this._textField == null) return;
		if(this._filters != null) this._textField.set_filters(this._filters);
		this.regenGraphics();
		if(this._textField != null && this._textField.get_text() != null && this._textField.get_text().length > 0) {
			this._formatAdjusted.font = this._defaultFormat.font;
			this._formatAdjusted.size = this._defaultFormat.size;
			this._formatAdjusted.bold = this._defaultFormat.bold;
			this._formatAdjusted.italic = this._defaultFormat.italic;
			this._formatAdjusted.color = this._defaultFormat.color;
			this._formatAdjusted.align = this._defaultFormat.align;
			this._matrix.identity();
			this._matrix.translate(0.5 * this._widthInc | 0,0.5 * this._heightInc | 0);
			if(this._defaultFormat.align == flash.text.TextFormatAlign.CENTER) {
				this._formatAdjusted.align = flash.text.TextFormatAlign.LEFT;
				this._textField.setTextFormat(this._formatAdjusted,0,this._textField.get_text().length);
				this._matrix.translate(Math.floor((this.get_width() - this._textField.get_textWidth()) / 2),0);
			}
			if(this.borderStyle != 0) {
				var iterations = this.borderSize * this.borderQuality | 0;
				if(iterations <= 0) iterations = 1;
				var delta = this.borderSize / iterations;
				if(this.borderStyle == 1) {
					this.applyFormats(this._formatAdjusted,true);
					var _g = 0;
					while(_g < iterations) {
						var iter = _g++;
						this._matrix.translate(delta,delta);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
					}
					this._matrix.translate(-this.borderSize,-this.borderSize);
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 2) {
					this.applyFormats(this._formatAdjusted,true);
					var itd = delta;
					var _g = 0;
					while(_g < iterations) {
						var iter = _g++;
						this._matrix.translate(-itd,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						itd += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 3) {
					this.applyFormats(this._formatAdjusted,true);
					var itd = delta;
					var _g = 0;
					while(_g < iterations) {
						var iter = _g++;
						this._matrix.translate(-itd,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd * 2);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,-itd);
						itd += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				}
			} else this.applyFormats(this._formatAdjusted,false);
			this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
		}
		this.dirty = false;
		if(this.framePixels == null || this.framePixels.get_width() != this.cachedGraphics.bitmap.get_width() || this.framePixels.get_height() != this.cachedGraphics.bitmap.get_height()) {
			if(this.framePixels != null) this.framePixels.dispose();
			this.framePixels = new flash.display.BitmapData(this.cachedGraphics.bitmap.get_width(),this.cachedGraphics.bitmap.get_height(),true,0);
		}
		this.framePixels.copyPixels(this.cachedGraphics.bitmap,this._flashRect,this._flashPointZero);
		if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this._colorTransform);
	}
	,regenGraphics: function() {
		var oldWidth = this.cachedGraphics.bitmap.get_width();
		var oldHeight = this.cachedGraphics.bitmap.get_height();
		var newWidth = this._textField.get_width() + this._widthInc;
		var newHeight = this._textField.get_textHeight() + this._heightInc + 4;
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight - this._heightInc);
			var key = this.cachedGraphics.key;
			flixel.FlxG.bitmap.remove(key);
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			this.frameHeight = this.get_height() | 0;
			this._textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else this.cachedGraphics.bitmap.fillRect(this._flashRect,0);
	}
	,updateColorTransform: function() {
		if(this.alpha != 1) {
			if(this._colorTransform == null) this._colorTransform = new flash.geom.ColorTransform(1,1,1,this.alpha); else this._colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			if(this._colorTransform != null) this._colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,set_cachedGraphics: function(Value) {
		var cached = flixel.FlxSprite.prototype.set_cachedGraphics.call(this,Value);
		if(Value != null) Value.set_destroyOnNoUse(true);
		return cached;
	}
	,get_textField: function() {
		return this._textField;
	}
	,set_borderQuality: function(Value) {
		if(Value < 0) Value = 0; else if(Value > 1) Value = 1;
		if(Value != this.borderQuality && this.borderStyle != 0) this.dirty = true;
		this.borderQuality = Value;
		return Value;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != 0) this.dirty = true;
		this.borderSize = Value;
		return Value;
	}
	,set_borderColor: function(Color) {
		Color &= 16777215;
		if(this.borderColor != Color && this.borderStyle != 0) this.dirty = true;
		this.borderColor = Color;
		return Color;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this.borderStyle = style;
			this.dirty = true;
		}
		return this.borderStyle;
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Alignment;
	}
	,get_alignment: function() {
		return js.Boot.__cast(this._defaultFormat.align , String);
	}
	,set_wordWrap: function(value) {
		if(this._textField.get_wordWrap() != value) {
			this._textField.set_wordWrap(value);
			this._textField.multiline = value;
			this.dirty = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this._textField.get_wordWrap();
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_systemFont: function(Font) {
		this._textField.embedFonts = false;
		this._defaultFormat.font = Font;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,get_embedded: function() {
		return this._textField.embedFonts = true;
	}
	,set_font: function(Font) {
		this._textField.embedFonts = true;
		this._defaultFormat.font = openfl.Assets.getFont(Font).fontName;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_font: function() {
		return this._defaultFormat.font;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this._defaultFormat.color == Color) return Color;
		this._defaultFormat.color = Color;
		this.color = Color;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Color;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Size;
	}
	,get_size: function() {
		return this._defaultFormat.size;
	}
	,set_text: function(Text) {
		var ot = this._textField.get_text();
		this._textField.set_text(Text);
		if(this._textField.get_text() != ot) this.dirty = true;
		return this._textField.get_text();
	}
	,get_text: function() {
		return this._textField.get_text();
	}
	,set_width: function(Width) {
		if(Width != this.get_width()) {
			var newWidth = flixel.FlxSprite.prototype.set_width.call(this,Width);
			if(this._textField != null) this._textField.set_width(newWidth);
			this.dirty = true;
		}
		return Width;
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) UseBorderColor = false;
		FormatAdjusted.color = UseBorderColor?this.borderColor:this._defaultFormat.color;
		this._textField.setTextFormat(FormatAdjusted,0,this._textField.get_text().length);
		var _g = 0, _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			if(this._textField.get_text().length - 1 < format.start) break; else {
				FormatAdjusted.font = format.format.font;
				FormatAdjusted.bold = format.format.bold;
				FormatAdjusted.italic = format.format.italic;
				FormatAdjusted.size = format.format.size;
				FormatAdjusted.color = UseBorderColor?format.borderColor:format.format.color;
			}
			this._textField.setTextFormat(FormatAdjusted,format.start,Math.min(format.end,this._textField.get_text().length) | 0);
		}
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region);
			this.set_frame(this.framesData.frames[0]);
			this.frames = 1;
		}
	}
	,clearFilters: function() {
		if(this._filters.length > 0) this.dirty = true;
		this._filters = [];
	}
	,removeFilter: function(filter) {
		var removed = HxOverrides.remove(this._filters,filter);
		if(removed) this.dirty = true;
	}
	,addFilter: function(filter,widthInc,heightInc) {
		if(heightInc == null) heightInc = 0;
		if(widthInc == null) widthInc = 0;
		this._filters.push(filter);
		this.dirty = true;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) Quality = 1;
		if(Size == null) Size = 1;
		if(Color == null) Color = 0;
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) Embedded = true;
		if(BorderColor == null) BorderColor = 0;
		if(BorderStyle == null) BorderStyle = 0;
		if(Color == null) Color = 16777215;
		if(Size == null) Size = 8;
		if(Embedded) {
			if(Font == null) this._defaultFormat.font = flixel.system.FlxAssets.FONT_DEFAULT; else this._defaultFormat.font = openfl.Assets.getFont(Font).fontName;
		} else if(Font != null) this._defaultFormat.font = Font;
		this._textField.embedFonts = Embedded;
		this._defaultFormat.size = Size;
		Color &= 16777215;
		this._defaultFormat.color = Color;
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(BorderColor);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return this;
	}
	,clearFormats: function() {
		var _g = 0, _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			format.destroy();
			format = null;
		}
		this._formats = [];
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
	}
	,removeFormat: function(Format) {
		flixel.util.FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat(this._formats,Format);
		this.dirty = true;
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) End = -1;
		if(Start == null) Start = -1;
		Format.start = Start > -1?Start:Format.start;
		Format.end = End > -1?End:Format.end;
		this._formats.push(Format);
		this._formats.sort(function(left,right) {
			return left.start < right.start?-1:1;
		});
		this.dirty = true;
	}
	,destroy: function() {
		this._textField = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this._filters = null;
		if(this._formats != null) {
			var _g = 0, _g1 = this._formats;
			while(_g < _g1.length) {
				var format = _g1[_g];
				++_g;
				if(format != null) {
					format.destroy();
					format = null;
				}
			}
		}
		this._formats = null;
		flixel.FlxSprite.prototype.destroy.call(this);
	}
	,__class__: flixel.text.FlxText
	,__properties__: $extend(flixel.FlxSprite.prototype.__properties__,{set_text:"set_text",get_text:"get_text",set_size:"set_size",get_size:"get_size",set_font:"set_font",get_font:"get_font",get_embedded:"get_embedded",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",set_bold:"set_bold",get_bold:"get_bold",set_italic:"set_italic",get_italic:"get_italic",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_alignment:"set_alignment",get_alignment:"get_alignment",set_borderStyle:"set_borderStyle",set_borderColor:"set_borderColor",set_borderSize:"set_borderSize",set_borderQuality:"set_borderQuality",get_textField:"get_textField"})
});
var base = {}
base.Button = function(x,y,label,_callback) {
	this.max = 40;
	this.mid = 30;
	this.min = 20;
	flixel.text.FlxText.call(this,x,y,flixel.FlxG.width,label,this.max);
	this.set_width(this.get_textField().get_textWidth() + this.get_textField().get_textWidth() / label.length);
	this.set_alignment("center");
	this.set_size(this.min);
	this.callback = _callback;
};
$hxClasses["base.Button"] = base.Button;
base.Button.__name__ = ["base","Button"];
base.Button.__super__ = flixel.text.FlxText;
base.Button.prototype = $extend(flixel.text.FlxText.prototype,{
	draw: function() {
		flixel.text.FlxText.prototype.draw.call(this);
	}
	,update: function() {
		flixel.text.FlxText.prototype.update.call(this);
		if(this.contains(flixel.FlxG.mouse.screenX,flixel.FlxG.mouse.screenY)) {
			this.set_size(this.mid);
			if(flixel.FlxG.mouse._leftButton.current > 0) {
				this.set_size(this.max);
				this.set_bold(true);
			} else {
				this.set_size(this.mid);
				this.set_bold(false);
			}
			if(flixel.FlxG.mouse._leftButton.justReleased()) this.callback(this);
		} else this.set_size(this.min);
	}
	,contains: function(px,py) {
		return px > this.x && px < this.x + this.get_width() && py > this.y && py < this.y + this.get_height();
	}
	,__class__: base.Button
});
var _Navbar = {}
_Navbar.NavButton = function(x,y,state) {
	var gambs = this;
	base.Button.call(this,x,y,base.State.getLabel(state),function(self) {
		if(!gambs.state) flixel.FlxG.game._requestedState = Type.createInstance(Type.resolveClass(base.State.getPath(state)),[]);
	});
	this.state = Type.getClassName(Type.getClass(flixel.FlxG.game._state)) == base.State.getPath(state);
	if(this.state) this.min = this.mid;
};
$hxClasses["_Navbar.NavButton"] = _Navbar.NavButton;
_Navbar.NavButton.__name__ = ["_Navbar","NavButton"];
_Navbar.NavButton.__super__ = base.Button;
_Navbar.NavButton.prototype = $extend(base.Button.prototype,{
	__class__: _Navbar.NavButton
});
var Navbar = function(y) {
	flixel.FlxBasic.call(this);
	this.buttons = new flixel.group.FlxTypedGroup();
	this.buttons.add(new _Navbar.NavButton(0,y,base.State.state_list[0]));
	var _g1 = 1, _g = base.State.state_list.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.buttons.add(new _Navbar.NavButton(50 + this.buttons.get_members()[i - 1].x + this.buttons.get_members()[i - 1].get_width(),y,base.State.state_list[i]));
	}
	var offset = (this.buttons.get_members()[base.State.state_list.length - 1].x + this.buttons.get_members()[base.State.state_list.length - 1].get_width() - this.buttons.get_members()[0].x - flixel.FlxG.width) / 2;
	var $it0 = this.buttons.iterator(null);
	while( $it0.hasNext() ) {
		var it = $it0.next();
		var _g = it;
		_g.set_x(_g.x - offset);
	}
};
$hxClasses["Navbar"] = Navbar;
Navbar.__name__ = ["Navbar"];
Navbar.__super__ = flixel.FlxBasic;
Navbar.prototype = $extend(flixel.FlxBasic.prototype,{
	draw: function() {
		flixel.FlxBasic.prototype.draw.call(this);
		var $it0 = this.buttons.iterator(null);
		while( $it0.hasNext() ) {
			var it = $it0.next();
			it.draw();
		}
	}
	,update: function() {
		flixel.FlxBasic.prototype.update.call(this);
		var $it0 = this.buttons.iterator(null);
		while( $it0.hasNext() ) {
			var it = $it0.next();
			it.update();
		}
	}
	,__class__: Navbar
});
var Reflect = function() { }
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
}
Reflect.field = function(o,field) {
	var v = null;
	try {
		v = o[field];
	} catch( e ) {
	}
	return v;
}
Reflect.getProperty = function(o,field) {
	var tmp;
	return o == null?null:o.__properties__ && (tmp = o.__properties__["get_" + field])?o[tmp]():o[field];
}
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
}
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
}
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
}
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
}
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
}
Reflect.deleteField = function(o,field) {
	if(!Reflect.hasField(o,field)) return false;
	delete(o[field]);
	return true;
}
var Reg = function() { }
$hxClasses["Reg"] = Reg;
Reg.__name__ = ["Reg"];
var Std = function() { }
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
}
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
}
Std.parseFloat = function(x) {
	return parseFloat(x);
}
Std.random = function(x) {
	return x <= 0?0:Math.floor(Math.random() * x);
}
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	addSub: function(s,pos,len) {
		this.b += len == null?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
}
var StringTools = function() { }
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
}
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
}
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
}
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
}
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
}
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
}
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
}
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
}
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
}
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
}
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] }
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; }
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; }
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { }
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return o.__class__;
}
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
}
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
}
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
}
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
}
Type.createInstance = function(cl,args) {
	switch(args.length) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
}
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
}
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
}
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
}
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = v.__class__;
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
}
var XmlType = $hxClasses["XmlType"] = { __ename__ : ["XmlType"], __constructs__ : [] }
var Xml = function() { }
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.prototype = {
	elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				var n = this.x[k];
				k += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k;
					return n;
				}
			}
			return null;
		}};
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,__class__: Xml
}
base.Cover = function(x,y,background,_state) {
	flixel.FlxSprite.call(this,x,y);
	this.loadGraphic(background,false);
	this.state = _state;
};
$hxClasses["base.Cover"] = base.Cover;
base.Cover.__name__ = ["base","Cover"];
base.Cover.__super__ = flixel.FlxSprite;
base.Cover.prototype = $extend(flixel.FlxSprite.prototype,{
	set_animated: function(state) {
		return this.animated = state;
	}
	,update: function() {
		if(this.contains(flixel.FlxG.mouse.screenX,flixel.FlxG.mouse.screenY)) {
			if(flixel.FlxG.mouse._leftButton.justPressed()) flixel.FlxG.game._requestedState = Type.createInstance(Type.resolveClass(this.state),[]);
			if(!this.animated) this.set_animated(true);
		} else if(this.animated) this.set_animated(false);
	}
	,contains: function(px,py) {
		return px > this.x && px < this.x + this.get_width() && py > this.y && py < this.y + this.get_height();
	}
	,__class__: base.Cover
	,__properties__: $extend(flixel.FlxSprite.prototype.__properties__,{set_animated:"set_animated"})
});
base.Developer = function(y,title,role,_text,img_path) {
	flixel.FlxObject.call(this,flixel.FlxG.width / 10 + 50,y);
	this.image = new flixel.FlxSprite(this.x,y);
	this.image.makeGraphic(200,200,-1);
	this.text = new flixel.text.FlxText(this.x + this.image.get_width() + 50,y,1500,title + "\n" + role + "\n\n" + _text,18);
};
$hxClasses["base.Developer"] = base.Developer;
base.Developer.__name__ = ["base","Developer"];
base.Developer.__super__ = flixel.FlxObject;
base.Developer.prototype = $extend(flixel.FlxObject.prototype,{
	get_height: function() {
		return this.text.get_height() + this.image.get_height();
	}
	,get_width: function() {
		return this.text.get_textField().get_textWidth() + this.text.get_textField().get_textWidth() / this.text.get_text().length + this.image.get_width();
	}
	,update: function() {
		flixel.FlxObject.prototype.update.call(this);
		this.text.update();
		this.image.update();
	}
	,draw: function() {
		flixel.FlxObject.prototype.draw.call(this);
		this.text.draw();
		this.image.draw();
	}
	,__class__: base.Developer
});
base.StateEnum = $hxClasses["base.StateEnum"] = { __ename__ : ["base","StateEnum"], __constructs__ : ["StateConst"] }
base.StateEnum.StateConst = function(label,path) { var $x = ["StateConst",0,label,path]; $x.__enum__ = base.StateEnum; $x.toString = $estr; return $x; }
flixel.group = {}
flixel.group.FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	this._marker = 0;
	this.length = 0;
	flixel.FlxBasic.call(this);
	this.set_maxSize(Math.abs(MaxSize) | 0);
	this._members = new Array();
	this._basics = this._members;
	this.collisionType = flixel.system.FlxCollisionType.GROUP;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel.group.FlxTypedGroup;
flixel.group.FlxTypedGroup.__name__ = ["flixel","group","FlxTypedGroup"];
flixel.group.FlxTypedGroup.__super__ = flixel.FlxBasic;
flixel.group.FlxTypedGroup.prototype = $extend(flixel.FlxBasic.prototype,{
	get_members: function() {
		return this._members;
	}
	,set_maxSize: function(Size) {
		this.maxSize = Math.abs(Size) | 0;
		if(this._marker >= this.maxSize) this._marker = 0;
		if(this.maxSize == 0 || this._members == null || this.maxSize >= this._members.length) return this.maxSize;
		var i = this.maxSize;
		var l = this._members.length;
		var basic = null;
		while(i < l) {
			basic = this._basics[i++];
			if(basic != null) basic.destroy();
		}
		this.length = this.maxSize;
		flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this._members,this.maxSize);
		return this.maxSize;
	}
	,forEachExists: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i];
			if(basic != null && basic.exists) Function(this._members[i]);
			i++;
		}
	}
	,forEachDead: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i];
			if(basic != null && !basic.alive) Function(this._members[i]);
			i++;
		}
	}
	,forEachAlive: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i];
			if(basic != null && basic.exists && basic.alive) Function(this._members[i]);
			i++;
		}
	}
	,forEach: function(Function) {
		var _g = 0, _g1 = this._members;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member != null) Function(member);
		}
	}
	,iterator: function(filter) {
		return new flixel.group.FlxTypedGroupIterator(this._members,filter == null?function(m) {
			return true;
		}:filter);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && basic.exists) basic.kill();
		}
		flixel.FlxBasic.prototype.kill.call(this);
	}
	,clear: function() {
		this.length = 0;
		this._members.splice(0,this._members.length);
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) Length = 0;
		if(StartIndex == null) StartIndex = 0;
		if(StartIndex < 0) StartIndex = 0;
		if(Length <= 0) Length = this.length;
		return flixel.util.FlxRandom.getObject_getRandom_T(this._members,StartIndex,Length);
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(!basic.alive) count++;
			}
		}
		return count;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(basic.exists && basic.alive) count++;
			}
		}
		return count;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && !basic.alive) return this._members[i - 1];
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && basic.exists && basic.alive) return this._members[i - 1];
		}
		return null;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && basic.exists) return this._members[i - 1];
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		var l = this._members.length;
		while(i < l) if(this._members[i] == null) return i; else i++;
		return -1;
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) Force = false;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js.Boot.__instanceof(basic,ObjectClass))) {
				if(Force && Type.getClassName(Type.getClass(basic)) != Type.getClassName(ObjectClass)) continue;
				return this._members[i - 1];
			}
		}
		return null;
	}
	,callAll: function(FunctionName,Args,Recurse) {
		if(Recurse == null) Recurse = true;
		if(Args == null) Args = [];
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == flixel.system.FlxCollisionType.GROUP) (js.Boot.__cast(basic , flixel.group.FlxTypedGroup)).callAll(FunctionName,Args,Recurse); else Reflect.getProperty(basic,FunctionName).apply(basic,Args);
			}
		}
	}
	,setAll: function(VariableName,Value,Recurse) {
		if(Recurse == null) Recurse = true;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == flixel.system.FlxCollisionType.GROUP) basic.setAll(VariableName,Value,Recurse); else Reflect.setProperty(basic,VariableName,Value);
			}
		}
	}
	,sort: function(Function,Order) {
		if(Order == null) Order = -1;
		this._members.sort((function(f,a1) {
			return function(a2,a3) {
				return f(a1,a2,a3);
			};
		})(Function,Order));
	}
	,replace: function(OldObject,NewObject) {
		var index = flixel.util.FlxArrayUtil.indexOf_flixel_group_FlxTypedGroup_T(this._members,OldObject);
		if(index < 0 || index >= this._members.length) return null;
		this._members[index] = NewObject;
		return NewObject;
	}
	,remove: function(Object,Splice) {
		if(Splice == null) Splice = false;
		if(this._members == null) return null;
		var index = flixel.util.FlxArrayUtil.indexOf_flixel_group_FlxTypedGroup_T(this._members,Object);
		if(index < 0 || index >= this._members.length) return null;
		if(Splice) this._members.splice(index,1); else this._members[index] = null;
		return Object;
	}
	,recycle: function(ObjectClass,ContructorArgs,Force,Revive) {
		if(Revive == null) Revive = true;
		if(Force == null) Force = false;
		if(ContructorArgs == null) ContructorArgs = [];
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				if(ObjectClass == null) return null;
				return this.add(Type.createInstance(ObjectClass,ContructorArgs));
			} else {
				basic = this._members[this._marker++];
				if(this._marker >= this.maxSize) this._marker = 0;
				if(Revive) basic.revive();
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) basic.revive();
				return basic;
			}
			if(ObjectClass == null) return null;
			return this.add(Type.createInstance(ObjectClass,ContructorArgs));
		}
	}
	,add: function(Object) {
		if(Object == null) return null;
		if(flixel.util.FlxArrayUtil.indexOf_flixel_group_FlxTypedGroup_T(this._members,Object) >= 0) return Object;
		var i = 0;
		var l = this._members.length;
		while(i < l) {
			if(this._members[i] == null) {
				this._members[i] = Object;
				if(i >= this.length) this.length = i + 1;
				return Object;
			}
			i++;
		}
		if(this.maxSize > 0) {
			if(this._members.length >= this.maxSize) return Object; else if(this._members.length * 2 <= this.maxSize) flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this._members,this._members.length * 2); else flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this._members,this.maxSize);
		} else flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this._members,this._members.length * 2);
		this._members[i] = Object;
		this.length = i + 1;
		return Object;
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && basic.exists && basic.visible) basic.draw();
		}
	}
	,update: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this._basics[i++];
			if(basic != null && basic.exists && basic.active) basic.update();
		}
	}
	,destroy: function() {
		flixel.FlxBasic.prototype.destroy.call(this);
		if(this._basics != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this._basics[i++];
				if(basic != null) basic.destroy();
			}
			this._basics = null;
			this._members = null;
		}
	}
	,__class__: flixel.group.FlxTypedGroup
	,__properties__: $extend(flixel.FlxBasic.prototype.__properties__,{get_members:"get_members",set_maxSize:"set_maxSize"})
});
flixel.group.FlxGroup = function(MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	flixel.group.FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.group.FlxGroup"] = flixel.group.FlxGroup;
flixel.group.FlxGroup.__name__ = ["flixel","group","FlxGroup"];
flixel.group.FlxGroup.__super__ = flixel.group.FlxTypedGroup;
flixel.group.FlxGroup.prototype = $extend(flixel.group.FlxTypedGroup.prototype,{
	__class__: flixel.group.FlxGroup
});
flixel.FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel.group.FlxGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel.FlxState;
flixel.FlxState.__name__ = ["flixel","FlxState"];
flixel.FlxState.__super__ = flixel.group.FlxGroup;
flixel.FlxState.prototype = $extend(flixel.group.FlxGroup.prototype,{
	set_bgColor: function(Value) {
		return flixel.FlxG.cameras.set_bgColor(Value);
	}
	,get_bgColor: function() {
		return flixel.FlxG.cameras.get_bgColor();
	}
	,tryUpdate: function() {
		if(this.persistentUpdate || this.subState == null) this.update();
		if(this._requestSubStateReset) {
			this.resetSubState();
			this._requestSubStateReset = false;
		} else if(this.subState != null) this.subState.tryUpdate();
	}
	,onResize: function(Width,Height) {
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
	}
	,destroy: function() {
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel.group.FlxGroup.prototype.destroy.call(this);
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) this.subState.closeCallback();
			if(this.destroySubStates) this.subState.destroy();
		}
		this.subState = this._requestedSubState;
		if(this.subState != null) {
			if(!this.persistentUpdate) flixel.FlxG.inputs.reset();
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState._parentState = this;
				this.subState.create();
			}
		}
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
		this._requestedSubState = null;
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) flixel.group.FlxGroup.prototype.draw.call(this);
		if(this.subState != null) this.subState.draw();
	}
	,create: function() {
	}
	,__class__: flixel.FlxState
	,__properties__: $extend(flixel.group.FlxGroup.prototype.__properties__,{set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
base.State = function(MaxSize) {
	flixel.FlxState.call(this,MaxSize);
};
$hxClasses["base.State"] = base.State;
base.State.__name__ = ["base","State"];
base.State.getLabel = function(e) {
	return (function($this) {
		var $r;
		var $e = (e);
		switch( $e[1] ) {
		case 0:
			var path = $e[3], label = $e[2];
			$r = label;
			break;
		}
		return $r;
	}(this));
}
base.State.getPath = function(e) {
	return (function($this) {
		var $r;
		var $e = (e);
		switch( $e[1] ) {
		case 0:
			var path = $e[3], label = $e[2];
			$r = path;
			break;
		}
		return $r;
	}(this));
}
base.State.__super__ = flixel.FlxState;
base.State.prototype = $extend(flixel.FlxState.prototype,{
	update: function() {
		base.Timer.updateTimers(flixel.FlxG.elapsed);
		flixel.FlxState.prototype.update.call(this);
	}
	,destroy: function() {
		base.Timer.destroy();
		flixel.FlxState.prototype.destroy.call(this);
	}
	,draw: function() {
		flixel.FlxState.prototype.draw.call(this);
	}
	,create: function() {
		flixel.FlxG.cameras.set_bgColor(Reg.background_color);
		flixel.FlxState.prototype.create.call(this);
	}
	,__class__: base.State
});
var haxe = {}
haxe.ds = {}
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,set: function(key,value) {
		this.h["$" + key] = value;
	}
	,__class__: haxe.ds.StringMap
}
base.TextDatabase = function() {
	haxe.ds.StringMap.call(this);
	this.set("home.main","Has the world gone insane?! What does a man have to do to get some fried carrots around here?\n\n" + "Last night I had a dream. I dreamt I would meet the end of times at my prime time.\n" + "I told many of this. People thought I had gone insane. Mad. Irrational. Fearful.\n" + "But to their dismay, I was right. For I did meet the end of an era. The end of " + "times as we know it. For the prophecy prayed:\n\n" + "\"At your finest hour\n" + "The prime of your time\n" + "You shall meet the end of power\n" + "The end of days of fine.\"\n\n" + "And it was at primetime, that the end came.\n" + "For Walter White retired his mane. And fell gloriously to the arms of death.\n\n" + "And also my cookie jar fell and chocolate chips spread all over. I was very upset. Sad face." + "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
};
$hxClasses["base.TextDatabase"] = base.TextDatabase;
base.TextDatabase.__name__ = ["base","TextDatabase"];
base.TextDatabase.getValue = function(key) {
	if(base.TextDatabase.instance == null) base.TextDatabase.instance = new base.TextDatabase();
	return base.TextDatabase.instance.get(key);
}
base.TextDatabase.__super__ = haxe.ds.StringMap;
base.TextDatabase.prototype = $extend(haxe.ds.StringMap.prototype,{
	__class__: base.TextDatabase
});
base.Timer = function(args) {
	this.timeToSet = args.timeToSet;
	this.callback = args.callback;
	this["delete"] = false;
	this.repeats = args.repeats == null?false:args.repeats;
	this.running = args.running == null?true:args.running;
	this.currentTime = args.dt == null?0:args.dt;
	base.Timer.timers.add(this);
};
$hxClasses["base.Timer"] = base.Timer;
base.Timer.__name__ = ["base","Timer"];
base.Timer.callIn = function(timeToSet,callback) {
	if(timeToSet == 0) callback(); else new base.Timer({ timeToSet : timeToSet, repeats : false, callback : function(_) {
		callback();
	}});
}
base.Timer.register = function(t) {
	if(!t["delete"]) return;
	t["delete"] = false;
	t.currentTime = 0;
	t.running = true;
	base.Timer.timers.add(t);
}
base.Timer.isAlive = function(timer) {
	return !timer["delete"];
}
base.Timer.updateTimers = function(dt) {
	var $it0 = base.Timer.timers.iterator();
	while( $it0.hasNext() ) {
		var timer = $it0.next();
		if(timer.running) timer.currentTime += dt;
		if(timer.currentTime >= timer.timeToSet) {
			timer.currentTime -= timer.timeToSet;
			if(!timer.repeats) timer["delete"] = true;
			timer.callback(timer);
		}
	}
	base.Timer.timers = base.Timer.timers.filter(base.Timer.isAlive);
}
base.Timer.destroy = function() {
	base.Timer.timers = new List();
}
base.Timer.prototype = {
	reset: function() {
		this.currentTime = 0;
	}
	,__class__: base.Timer
}
var covers = {}
covers._NaomiCover = {}
covers._NaomiCover.Star = function(x,y) {
	flixel.FlxSprite.call(this,x,y);
	this.loadGraphic("assets/images/covers/naomi/star.png",false);
	this.fader = flixel.tweens.FlxTween.color(this,1 + Std.random(4),this.color,this.color,0,1,{ type : 4});
	this.fader.active = false;
};
$hxClasses["covers._NaomiCover.Star"] = covers._NaomiCover.Star;
covers._NaomiCover.Star.__name__ = ["covers","_NaomiCover","Star"];
covers._NaomiCover.Star.__super__ = flixel.FlxSprite;
covers._NaomiCover.Star.prototype = $extend(flixel.FlxSprite.prototype,{
	set: function(state) {
		this.fader.active = state;
	}
	,__class__: covers._NaomiCover.Star
});
covers.NaomiCover = function(x,y) {
	base.Cover.call(this,x,y,"assets/images/covers/naomi/naomi.png","NaomiState");
	this.stars = new flixel.group.FlxTypedGroup();
	this.stars.add(new covers._NaomiCover.Star(x + 120,y + 145));
	this.stars.add(new covers._NaomiCover.Star(x + 215,y + 130));
	this.stars.add(new covers._NaomiCover.Star(x + 315,y + 95));
	this.stars.add(new covers._NaomiCover.Star(x + 160,y + 100));
	this.stars.add(new covers._NaomiCover.Star(x + 20,y + 85));
};
$hxClasses["covers.NaomiCover"] = covers.NaomiCover;
covers.NaomiCover.__name__ = ["covers","NaomiCover"];
covers.NaomiCover.__super__ = base.Cover;
covers.NaomiCover.prototype = $extend(base.Cover.prototype,{
	set_animated: function(state) {
		var $it0 = this.stars.iterator(null);
		while( $it0.hasNext() ) {
			var it = $it0.next();
			it.set(state);
		}
		return base.Cover.prototype.set_animated.call(this,state);
	}
	,draw: function() {
		base.Cover.prototype.draw.call(this);
		var $it0 = this.stars.iterator(null);
		while( $it0.hasNext() ) {
			var it = $it0.next();
			it.draw();
		}
	}
	,update: function() {
		base.Cover.prototype.update.call(this);
		var $it0 = this.stars.iterator(null);
		while( $it0.hasNext() ) {
			var it = $it0.next();
			it.update();
		}
	}
	,__class__: covers.NaomiCover
});
covers._PsychoCover = {}
covers._PsychoCover.Ball = function(x,y) {
	flixel.FlxSprite.call(this,x,y);
	this.loadGraphic("assets/images/covers/psycho/ball.png",false);
	this.set_color(-7071679);
	this.path = flixel.tweens.FlxTween.linearMotion(this,x,y,x + 250,y,100,false,{ type : 4});
	this.palette = flixel.tweens.FlxTween.color(this,4,this.color,-16156108,1,1,{ type : 4});
	this.path.active = this.palette.active = false;
};
$hxClasses["covers._PsychoCover.Ball"] = covers._PsychoCover.Ball;
covers._PsychoCover.Ball.__name__ = ["covers","_PsychoCover","Ball"];
covers._PsychoCover.Ball.__super__ = flixel.FlxSprite;
covers._PsychoCover.Ball.prototype = $extend(flixel.FlxSprite.prototype,{
	set: function(state) {
		this.path.active = state;
		this.palette.active = state;
	}
	,__class__: covers._PsychoCover.Ball
});
covers.PsychoCover = function(x,y) {
	base.Cover.call(this,x,y,"assets/images/covers/psycho/psycho.png","PsychoState");
	this.background = new flixel.FlxSprite(x,y);
	this.background.makeGraphic(this.get_width() | 0,this.get_height() | 0,-5744622);
	this.palette = flixel.tweens.FlxTween.color(this.background,6,this.color,-15031865,1,1,{ type : 4});
	this.palette.active = false;
	this.ball = new covers._PsychoCover.Ball(x + 25,y + 150);
};
$hxClasses["covers.PsychoCover"] = covers.PsychoCover;
covers.PsychoCover.__name__ = ["covers","PsychoCover"];
covers.PsychoCover.__super__ = base.Cover;
covers.PsychoCover.prototype = $extend(base.Cover.prototype,{
	set_animated: function(state) {
		this.palette.active = state;
		this.ball.set(state);
		return base.Cover.prototype.set_animated.call(this,state);
	}
	,draw: function() {
		this.background.draw();
		base.Cover.prototype.draw.call(this);
		this.ball.draw();
	}
	,update: function() {
		base.Cover.prototype.update.call(this);
		this.ball.update();
		this.background.update();
	}
	,__class__: covers.PsychoCover
});
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = window.setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
}
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
}
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
}
haxe.Timer.prototype = {
	run: function() {
	}
	,stop: function() {
		if(this.id == null) return;
		window.clearInterval(this.id);
		this.id = null;
	}
	,__class__: haxe.Timer
}
flash.Lib = function(rootElement,width,height) {
	this.mKilled = false;
	this.__scr = rootElement;
	if(this.__scr == null) throw "Root element not found";
	this.__scr.style.setProperty("overflow","hidden","");
	this.__scr.style.setProperty("position","absolute","");
	if(this.__scr.style.getPropertyValue("width") != "100%") this.__scr.style.width = width + "px";
	if(this.__scr.style.getPropertyValue("height") != "100%") this.__scr.style.height = height + "px";
};
$hxClasses["flash.Lib"] = flash.Lib;
flash.Lib.__name__ = ["flash","Lib"];
flash.Lib.__properties__ = {get_current:"get_current"}
flash.Lib.addCallback = function(functionName,closure) {
	flash.Lib.mMe.__scr[functionName] = closure;
}
flash.Lib["as"] = function(v,c) {
	return js.Boot.__instanceof(v,c)?v:null;
}
flash.Lib.attach = function(name) {
	return new flash.display.MovieClip();
}
flash.Lib.getTimer = function() {
	return (haxe.Timer.stamp() - flash.Lib.starttime) * 1000 | 0;
}
flash.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
}
flash.Lib.preventDefaultTouchMove = function() {
	js.Browser.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
}
flash.Lib.Run = function(tgt,width,height) {
	flash.Lib.mMe = new flash.Lib(tgt,width,height);
	var _g1 = 0, _g = tgt.attributes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var attr = tgt.attributes.item(i);
		if(StringTools.startsWith(attr.name,"data-")) {
			if(attr.name == "data-" + "framerate") flash.Lib.__getStage().set_frameRate(Std.parseFloat(attr.value));
		}
	}
	var _g = 0, _g1 = flash.Lib.HTML_TOUCH_EVENT_TYPES;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		tgt.addEventListener(type,($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	var _g = 0, _g1 = flash.Lib.HTML_TOUCH_ALT_EVENT_TYPES;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		tgt.addEventListener(type,($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	var _g = 0, _g1 = flash.Lib.HTML_DIV_EVENT_TYPES;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		tgt.addEventListener(type,($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	if(Reflect.hasField(js.Browser.window,"on" + "devicemotion")) js.Browser.window.addEventListener("devicemotion",($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	if(Reflect.hasField(js.Browser.window,"on" + "orientationchange")) js.Browser.window.addEventListener("orientationchange",($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	var _g = 0, _g1 = flash.Lib.HTML_WINDOW_EVENT_TYPES;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		js.Browser.window.addEventListener(type,($_=flash.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),false);
	}
	if(tgt.style.backgroundColor != null && tgt.style.backgroundColor != "") flash.Lib.__getStage().set_backgroundColor(flash.Lib.__parseColor(tgt.style.backgroundColor,function(res,pos,cur) {
		return pos == 0?res | cur << 16:pos == 1?res | cur << 8:pos == 2?res | cur:(function($this) {
			var $r;
			throw "pos should be 0-2";
			return $r;
		}(this));
	})); else flash.Lib.__getStage().set_backgroundColor(16777215);
	flash.Lib.get_current().get_graphics().beginFill(flash.Lib.__getStage().get_backgroundColor());
	flash.Lib.get_current().get_graphics().drawRect(0,0,width,height);
	flash.Lib.__setSurfaceId(flash.Lib.get_current().get_graphics().__surface,"Root MovieClip");
	flash.Lib.__getStage().__updateNextWake();
	return flash.Lib.mMe;
}
flash.Lib.setUserScalable = function(isScalable) {
	if(isScalable == null) isScalable = true;
	var meta = js.Browser.document.createElement("meta");
	meta.name = "viewport";
	meta.content = "user-scalable=" + (isScalable?"yes":"no");
}
flash.Lib.trace = function(arg) {
	if(window.console != null) window.console.log(arg);
}
flash.Lib.__appendSurface = function(surface,before,after) {
	if(flash.Lib.mMe.__scr != null) {
		surface.style.setProperty("position","absolute","");
		surface.style.setProperty("left","0px","");
		surface.style.setProperty("top","0px","");
		surface.style.setProperty("transform-origin","0 0","");
		surface.style.setProperty("-moz-transform-origin","0 0","");
		surface.style.setProperty("-webkit-transform-origin","0 0","");
		surface.style.setProperty("-o-transform-origin","0 0","");
		surface.style.setProperty("-ms-transform-origin","0 0","");
		try {
			if(surface.localName == "canvas") surface.onmouseover = surface.onselectstart = function() {
				return false;
			};
		} catch( e ) {
		}
		if(before != null) before.parentNode.insertBefore(surface,before); else if(after != null && after.nextSibling != null) after.parentNode.insertBefore(surface,after.nextSibling); else flash.Lib.mMe.__scr.appendChild(surface);
	}
}
flash.Lib.__appendText = function(surface,container,text,wrap,isHtml) {
	var _g1 = 0, _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		surface.removeChild(surface.childNodes[i]);
	}
	if(isHtml) container.innerHTML = text; else container.appendChild(js.Browser.document.createTextNode(text));
	container.style.setProperty("position","relative","");
	container.style.setProperty("cursor","default","");
	if(!wrap) container.style.setProperty("white-space","nowrap","");
	surface.appendChild(container);
}
flash.Lib.__bootstrap = function() {
	if(flash.Lib.mMe == null) {
		var target = js.Browser.document.getElementById("haxe:openfl");
		if(target == null) target = js.Browser.document.createElement("div");
		var agent = navigator.userAgent;
		if(agent.indexOf("BlackBerry") > -1 && target.style.height == "100%") target.style.height = screen.height + "px";
		if(agent.indexOf("Android") > -1) {
			var version = Std.parseFloat(HxOverrides.substr(agent,agent.indexOf("Android") + 8,3));
			if(version <= 2.3) flash.Lib.mForce2DTransform = true;
		}
		flash.Lib.Run(target,flash.Lib.__getWidth(),flash.Lib.__getHeight());
	}
}
flash.Lib.__copyStyle = function(src,tgt) {
	tgt.id = src.id;
	var _g = 0, _g1 = ["left","top","transform","transform-origin","-moz-transform","-moz-transform-origin","-webkit-transform","-webkit-transform-origin","-o-transform","-o-transform-origin","opacity","display"];
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		tgt.style.setProperty(prop,src.style.getPropertyValue(prop),"");
	}
}
flash.Lib.__createSurfaceAnimationCSS = function(surface,data,template,templateFunc,fps,discrete,infinite) {
	if(infinite == null) infinite = false;
	if(discrete == null) discrete = false;
	if(fps == null) fps = 25;
	if(surface.id == null || surface.id == "") {
		flash.Lib.trace("Failed to create a CSS Style tag for a surface without an id attribute");
		return null;
	}
	var style = null;
	if(surface.getAttribute("data-openfl-anim") != null) style = js.Browser.document.getElementById(surface.getAttribute("data-openfl-anim")); else {
		style = flash.Lib.mMe.__scr.appendChild(js.Browser.document.createElement("style"));
		style.sheet.id = "__openfl_anim_" + surface.id + "__";
		surface.setAttribute("data-openfl-anim",style.sheet.id);
	}
	var keyframeStylesheetRule = "";
	var _g1 = 0, _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var perc = i / (data.length - 1) * 100;
		var frame = data[i];
		keyframeStylesheetRule += perc + "% { " + template.execute(templateFunc(frame)) + " } ";
	}
	var animationDiscreteRule = discrete?"steps(::steps::, end)":"";
	var animationInfiniteRule = infinite?"infinite":"";
	var animationTpl = "";
	var _g = 0, _g1 = ["animation","-moz-animation","-webkit-animation","-o-animation","-ms-animation"];
	while(_g < _g1.length) {
		var prefix = _g1[_g];
		++_g;
		animationTpl += prefix + ": ::id:: ::duration::s " + animationDiscreteRule + " " + animationInfiniteRule + "; ";
	}
	var animationStylesheetRule = new haxe.Template(animationTpl).execute({ id : surface.id, duration : data.length / fps, steps : 1});
	var rules = style.sheet.rules != null?style.sheet.rules:style.sheet.cssRules;
	var _g = 0, _g1 = ["","-moz-","-webkit-","-o-","-ms-"];
	while(_g < _g1.length) {
		var variant = _g1[_g];
		++_g;
		try {
			style.sheet.insertRule("@" + variant + "keyframes " + surface.id + " {" + keyframeStylesheetRule + "}",rules.length);
		} catch( e ) {
		}
	}
	style.sheet.insertRule("#" + surface.id + " { " + animationStylesheetRule + " } ",rules.length);
	return style;
}
flash.Lib.__designMode = function(mode) {
	js.Browser.document.designMode = mode?"on":"off";
}
flash.Lib.__disableFullScreen = function() {
}
flash.Lib.__disableRightClick = function() {
	if(flash.Lib.mMe != null) try {
		flash.Lib.mMe.__scr.oncontextmenu = function() {
			return false;
		};
	} catch( e ) {
		flash.Lib.trace("Disable right click not supported in this browser.");
	}
}
flash.Lib.__drawClippedImage = function(surface,tgtCtx,clipRect) {
	if(clipRect != null) {
		if(clipRect.x < 0) {
			clipRect.width += clipRect.x;
			clipRect.x = 0;
		}
		if(clipRect.y < 0) {
			clipRect.height += clipRect.y;
			clipRect.y = 0;
		}
		if(clipRect.width > surface.width - clipRect.x) clipRect.width = surface.width - clipRect.x;
		if(clipRect.height > surface.height - clipRect.y) clipRect.height = surface.height - clipRect.y;
		tgtCtx.drawImage(surface,clipRect.x,clipRect.y,clipRect.width,clipRect.height,clipRect.x,clipRect.y,clipRect.width,clipRect.height);
	} else tgtCtx.drawImage(surface,0,0);
}
flash.Lib.__drawSurfaceRect = function(surface,tgt,x,y,rect) {
	var tgtCtx = tgt.getContext("2d");
	tgt.width = rect.width;
	tgt.height = rect.height;
	tgtCtx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,0,0,rect.width,rect.height);
	tgt.style.left = x + "px";
	tgt.style.top = y + "px";
}
flash.Lib.__drawToSurface = function(surface,tgt,matrix,alpha,clipRect,smoothing) {
	if(smoothing == null) smoothing = true;
	if(alpha == null) alpha = 1.0;
	var srcCtx = surface.getContext("2d");
	var tgtCtx = tgt.getContext("2d");
	tgtCtx.globalAlpha = alpha;
	flash.Lib.__setImageSmoothing(tgtCtx,smoothing);
	if(surface.width > 0 && surface.height > 0) {
		if(matrix != null) {
			tgtCtx.save();
			if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) tgtCtx.translate(matrix.tx,matrix.ty); else tgtCtx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			flash.Lib.__drawClippedImage(surface,tgtCtx,clipRect);
			tgtCtx.restore();
		} else flash.Lib.__drawClippedImage(surface,tgtCtx,clipRect);
	}
}
flash.Lib.__enableFullScreen = function() {
	if(flash.Lib.mMe != null) {
		var origWidth = flash.Lib.mMe.__scr.style.getPropertyValue("width");
		var origHeight = flash.Lib.mMe.__scr.style.getPropertyValue("height");
		flash.Lib.mMe.__scr.style.setProperty("width","100%","");
		flash.Lib.mMe.__scr.style.setProperty("height","100%","");
		flash.Lib.__disableFullScreen = function() {
			flash.Lib.mMe.__scr.style.setProperty("width",origWidth,"");
			flash.Lib.mMe.__scr.style.setProperty("height",origHeight,"");
		};
	}
}
flash.Lib.__enableRightClick = function() {
	if(flash.Lib.mMe != null) try {
		flash.Lib.mMe.__scr.oncontextmenu = null;
	} catch( e ) {
		flash.Lib.trace("Enable right click not supported in this browser.");
	}
}
flash.Lib.__fullScreenHeight = function() {
	return js.Browser.window.innerHeight;
}
flash.Lib.__fullScreenWidth = function() {
	return js.Browser.window.innerWidth;
}
flash.Lib.__getHeight = function() {
	var tgt = flash.Lib.mMe != null?flash.Lib.mMe.__scr:js.Browser.document.getElementById("haxe:openfl");
	return tgt != null && tgt.clientHeight > 0?tgt.clientHeight:500;
}
flash.Lib.__getStage = function() {
	if(flash.Lib.mStage == null) {
		var width = flash.Lib.__getWidth();
		var height = flash.Lib.__getHeight();
		flash.Lib.mStage = new flash.display.Stage(width,height);
	}
	return flash.Lib.mStage;
}
flash.Lib.__getWidth = function() {
	var tgt = flash.Lib.mMe != null?flash.Lib.mMe.__scr:js.Browser.document.getElementById("haxe:openfl");
	return tgt != null && tgt.clientWidth > 0?tgt.clientWidth:500;
}
flash.Lib.__isOnStage = function(surface) {
	var p = surface;
	while(p != null && p != flash.Lib.mMe.__scr) p = p.parentNode;
	return p == flash.Lib.mMe.__scr;
}
flash.Lib.__parseColor = function(str,cb) {
	var re = new EReg("rgb\\(([0-9]*), ?([0-9]*), ?([0-9]*)\\)","");
	var hex = new EReg("#([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])","");
	if(re.match(str)) {
		var col = 0;
		var _g = 1;
		while(_g < 4) {
			var pos = _g++;
			var v = Std.parseInt(re.matched(pos));
			col = cb(col,pos - 1,v);
		}
		return col;
	} else if(hex.match(str)) {
		var col = 0;
		var _g = 1;
		while(_g < 4) {
			var pos = _g++;
			var v = "0x" + hex.matched(pos) & 255;
			v = cb(col,pos - 1,v);
		}
		return col;
	} else throw "Cannot parse color '" + str + "'.";
}
flash.Lib.__removeSurface = function(surface) {
	if(flash.Lib.mMe.__scr != null) {
		var anim = surface.getAttribute("data-openfl-anim");
		if(anim != null) {
			var style = js.Browser.document.getElementById(anim);
			if(style != null) flash.Lib.mMe.__scr.removeChild(style);
		}
		if(surface.parentNode != null) surface.parentNode.removeChild(surface);
	}
	return surface;
}
flash.Lib.__setSurfaceBorder = function(surface,color,size) {
	surface.style.setProperty("border-color","#" + StringTools.hex(color),"");
	surface.style.setProperty("border-style","solid","");
	surface.style.setProperty("border-width",size + "px","");
	surface.style.setProperty("border-collapse","collapse","");
}
flash.Lib.__setSurfaceClipping = function(surface,rect) {
}
flash.Lib.__setSurfaceFont = function(surface,font,bold,size,color,align,lineHeight) {
	surface.style.setProperty("font-family",font,"");
	surface.style.setProperty("font-weight",Std.string(bold),"");
	surface.style.setProperty("color","#" + StringTools.hex(color),"");
	surface.style.setProperty("font-size",size + "px","");
	surface.style.setProperty("text-align",align,"");
	surface.style.setProperty("line-height",lineHeight + "px","");
}
flash.Lib.__setSurfaceOpacity = function(surface,alpha) {
	surface.style.setProperty("opacity",Std.string(alpha),"");
}
flash.Lib.__setSurfacePadding = function(surface,padding,margin,display) {
	surface.style.setProperty("padding",padding + "px","");
	surface.style.setProperty("margin",margin + "px","");
	surface.style.setProperty("top",padding + 2 + "px","");
	surface.style.setProperty("right",padding + 1 + "px","");
	surface.style.setProperty("left",padding + 1 + "px","");
	surface.style.setProperty("bottom",padding + 1 + "px","");
	surface.style.setProperty("display",display?"inline":"block","");
}
flash.Lib.__setSurfaceTransform = function(surface,matrix) {
	if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1 && surface.getAttribute("data-openfl-anim") == null) {
		surface.style.left = matrix.tx + "px";
		surface.style.top = matrix.ty + "px";
		surface.style.setProperty("transform","","");
		surface.style.setProperty("-moz-transform","","");
		surface.style.setProperty("-webkit-transform","","");
		surface.style.setProperty("-o-transform","","");
		surface.style.setProperty("-ms-transform","","");
	} else {
		surface.style.left = "0px";
		surface.style.top = "0px";
		surface.style.setProperty("transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")","");
		surface.style.setProperty("-moz-transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + "px, " + matrix.ty + "px)","");
		if(!flash.Lib.mForce2DTransform) surface.style.setProperty("-webkit-transform","matrix3d(" + matrix.a + ", " + matrix.b + ", " + "0, 0, " + matrix.c + ", " + matrix.d + ", " + "0, 0, 0, 0, 1, 0, " + matrix.tx + ", " + matrix.ty + ", " + "0, 1" + ")",""); else surface.style.setProperty("-webkit-transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")","");
		surface.style.setProperty("-o-transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")","");
		surface.style.setProperty("-ms-transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")","");
	}
}
flash.Lib.__setSurfaceZIndexAfter = function(surface1,surface2) {
	if(surface1 != null && surface2 != null) {
		if(surface1.parentNode != surface2.parentNode && surface2.parentNode != null) surface2.parentNode.appendChild(surface1);
		if(surface2.parentNode != null) {
			var nextSibling = surface2.nextSibling;
			if(surface1.previousSibling != surface2) {
				var swap = flash.Lib.__removeSurface(surface1);
				if(nextSibling == null) surface2.parentNode.appendChild(swap); else surface2.parentNode.insertBefore(swap,nextSibling);
			}
		}
	}
}
flash.Lib.__swapSurface = function(surface1,surface2) {
	var parent1 = surface1.parentNode;
	var parent2 = surface2.parentNode;
	if(parent1 != null && parent2 != null) {
		if(parent1 == parent2) {
			var next1 = surface1.nextSibling;
			var next2 = surface2.nextSibling;
			if(next1 == surface2) parent1.insertBefore(surface2,surface1); else if(next2 == surface1) parent1.insertBefore(surface1,surface2); else {
				parent1.replaceChild(surface2,surface1);
				if(next2 != null) parent1.insertBefore(surface1,next2); else parent1.appendChild(surface1);
			}
		} else {
			var next2 = surface2.nextSibling;
			parent1.replaceChild(surface2,surface1);
			if(next2 != null) parent2.insertBefore(surface1,next2); else parent2.appendChild(surface1);
		}
	}
}
flash.Lib.__setContentEditable = function(surface,contentEditable) {
	if(contentEditable == null) contentEditable = true;
	surface.setAttribute("contentEditable",contentEditable?"true":"false");
}
flash.Lib.__setCursor = function(type) {
	if(flash.Lib.mMe != null) flash.Lib.mMe.__scr.style.cursor = (function($this) {
		var $r;
		switch( (type)[1] ) {
		case 0:
			$r = "pointer";
			break;
		case 1:
			$r = "text";
			break;
		default:
			$r = "default";
		}
		return $r;
	}(this));
}
flash.Lib.__setImageSmoothing = function(context,enabled) {
	var _g = 0, _g1 = ["imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled"];
	while(_g < _g1.length) {
		var variant = _g1[_g];
		++_g;
		context[variant] = enabled;
	}
}
flash.Lib.__setSurfaceAlign = function(surface,align) {
	surface.style.setProperty("text-align",align,"");
}
flash.Lib.__setSurfaceId = function(surface,name) {
	var regex = new EReg("[^a-zA-Z0-9\\-]","g");
	surface.id = regex.replace(name,"_");
}
flash.Lib.__setSurfaceRotation = function(surface,rotate) {
	surface.style.setProperty("transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-moz-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-webkit-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-o-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-ms-transform","rotate(" + rotate + "deg)","");
}
flash.Lib.__setSurfaceScale = function(surface,scale) {
	surface.style.setProperty("transform","scale(" + scale + ")","");
	surface.style.setProperty("-moz-transform","scale(" + scale + ")","");
	surface.style.setProperty("-webkit-transform","scale(" + scale + ")","");
	surface.style.setProperty("-o-transform","scale(" + scale + ")","");
	surface.style.setProperty("-ms-transform","scale(" + scale + ")","");
}
flash.Lib.__setSurfaceSpritesheetAnimation = function(surface,spec,fps) {
	if(spec.length == 0) return surface;
	var div = js.Browser.document.createElement("div");
	div.style.backgroundImage = "url(" + surface.toDataURL("image/png") + ")";
	div.id = surface.id;
	var keyframeTpl = new haxe.Template("background-position: ::left::px ::top::px; width: ::width::px; height: ::height::px; ");
	var templateFunc = function(frame) {
		return { left : -frame.x, top : -frame.y, width : frame.width, height : frame.height};
	};
	flash.Lib.__createSurfaceAnimationCSS(div,spec,keyframeTpl,templateFunc,fps,true,true);
	if(flash.Lib.__isOnStage(surface)) {
		flash.Lib.__appendSurface(div);
		flash.Lib.__copyStyle(surface,div);
		flash.Lib.__swapSurface(surface,div);
		flash.Lib.__removeSurface(surface);
	} else flash.Lib.__copyStyle(surface,div);
	return div;
}
flash.Lib.__setSurfaceVisible = function(surface,visible) {
	if(visible) surface.style.setProperty("display","block",""); else surface.style.setProperty("display","none","");
}
flash.Lib.__setTextDimensions = function(surface,width,height,align) {
	surface.style.setProperty("width",width + "px","");
	surface.style.setProperty("height",height + "px","");
	surface.style.setProperty("overflow","hidden","");
	surface.style.setProperty("text-align",align,"");
}
flash.Lib.__surfaceHitTest = function(surface,x,y) {
	var _g1 = 0, _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var node = surface.childNodes[i];
		if(x >= node.offsetLeft && x <= node.offsetLeft + node.offsetWidth && y >= node.offsetTop && y <= node.offsetTop + node.offsetHeight) return true;
	}
	return false;
}
flash.Lib.get_current = function() {
	if(flash.Lib.mMainClassRoot == null) {
		flash.Lib.mMainClassRoot = new flash.display.MovieClip();
		flash.Lib.mCurrent = flash.Lib.mMainClassRoot;
		flash.Lib.__getStage().addChild(flash.Lib.mCurrent);
	}
	return flash.Lib.mMainClassRoot;
}
flash.Lib.prototype = {
	__class__: flash.Lib
}
flash._Lib = {}
flash._Lib.CursorType = $hxClasses["flash._Lib.CursorType"] = { __ename__ : ["flash","_Lib","CursorType"], __constructs__ : ["Pointer","Text","Default"] }
flash._Lib.CursorType.Pointer = ["Pointer",0];
flash._Lib.CursorType.Pointer.toString = $estr;
flash._Lib.CursorType.Pointer.__enum__ = flash._Lib.CursorType;
flash._Lib.CursorType.Text = ["Text",1];
flash._Lib.CursorType.Text.toString = $estr;
flash._Lib.CursorType.Text.__enum__ = flash._Lib.CursorType;
flash._Lib.CursorType.Default = ["Default",2];
flash._Lib.CursorType.Default.toString = $estr;
flash._Lib.CursorType.Default.__enum__ = flash._Lib.CursorType;
flash._Vector = {}
flash._Vector.Vector_Impl_ = function() { }
$hxClasses["flash._Vector.Vector_Impl_"] = flash._Vector.Vector_Impl_;
flash._Vector.Vector_Impl_.__name__ = ["flash","_Vector","Vector_Impl_"];
flash._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
flash._Vector.Vector_Impl_._new = function(length,fixed) {
	return new Array();
}
flash._Vector.Vector_Impl_.concat = function(this1,a) {
	return this1.concat(a);
}
flash._Vector.Vector_Impl_.copy = function(this1) {
	return this1.slice();
}
flash._Vector.Vector_Impl_.iterator = function(this1) {
	return HxOverrides.iter(this1);
}
flash._Vector.Vector_Impl_.join = function(this1,sep) {
	return this1.join(sep);
}
flash._Vector.Vector_Impl_.pop = function(this1) {
	return this1.pop();
}
flash._Vector.Vector_Impl_.push = function(this1,x) {
	return this1.push(x);
}
flash._Vector.Vector_Impl_.reverse = function(this1) {
	this1.reverse();
}
flash._Vector.Vector_Impl_.shift = function(this1) {
	return this1.shift();
}
flash._Vector.Vector_Impl_.unshift = function(this1,x) {
	this1.unshift(x);
}
flash._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
}
flash._Vector.Vector_Impl_.sort = function(this1,f) {
	this1.sort(f);
}
flash._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
}
flash._Vector.Vector_Impl_.toString = function(this1) {
	return this1.toString();
}
flash._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var _g1 = from, _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1[i] == x) return i;
	}
	return -1;
}
flash._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1[i] == x) return i;
		i--;
	}
	return -1;
}
flash._Vector.Vector_Impl_.ofArray = function(a) {
	return flash._Vector.Vector_Impl_.concat(flash._Vector.Vector_Impl_._new(),a);
}
flash._Vector.Vector_Impl_.convert = function(v) {
	return v;
}
flash._Vector.Vector_Impl_.fromArray = function(a) {
	return a;
}
flash._Vector.Vector_Impl_.toArray = function(this1) {
	return this1;
}
flash._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
}
flash._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(value < this1.length) this1 = this1.slice(0,value);
	while(value > this1.length) this1.push(null);
	return value;
}
flash._Vector.Vector_Impl_.get_fixed = function(this1) {
	return false;
}
flash._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return value;
}
flash.accessibility = {}
flash.accessibility.AccessibilityProperties = function() {
	this.description = "";
	this.forceSimple = false;
	this.name = "";
	this.noAutoLabeling = false;
	this.shortcut = "";
	this.silent = false;
};
$hxClasses["flash.accessibility.AccessibilityProperties"] = flash.accessibility.AccessibilityProperties;
flash.accessibility.AccessibilityProperties.__name__ = ["flash","accessibility","AccessibilityProperties"];
flash.accessibility.AccessibilityProperties.prototype = {
	__class__: flash.accessibility.AccessibilityProperties
}
flash.display.Bitmap = function(inBitmapData,inPixelSnapping,inSmoothing) {
	if(inSmoothing == null) inSmoothing = false;
	flash.display.DisplayObject.call(this);
	this.pixelSnapping = inPixelSnapping;
	this.smoothing = inSmoothing;
	if(inBitmapData != null) {
		this.set_bitmapData(inBitmapData);
		if(this.bitmapData.__referenceCount == 1) this.__graphics = new flash.display.Graphics(this.bitmapData.___textureBuffer);
	}
	if(this.pixelSnapping == null) this.pixelSnapping = flash.display.PixelSnapping.AUTO;
	if(this.__graphics == null) this.__graphics = new flash.display.Graphics();
	if(this.bitmapData != null) this.__render();
};
$hxClasses["flash.display.Bitmap"] = flash.display.Bitmap;
flash.display.Bitmap.__name__ = ["flash","display","Bitmap"];
flash.display.Bitmap.__super__ = flash.display.DisplayObject;
flash.display.Bitmap.prototype = $extend(flash.display.DisplayObject.prototype,{
	set_bitmapData: function(inBitmapData) {
		if(inBitmapData != this.bitmapData) {
			if(this.bitmapData != null) {
				this.bitmapData.__referenceCount--;
				if(this.__graphics.__surface == this.bitmapData.___textureBuffer) flash.Lib.__setSurfaceOpacity(this.bitmapData.___textureBuffer,0);
			}
			if(inBitmapData != null) inBitmapData.__referenceCount++;
		}
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.bitmapData = inBitmapData;
		return inBitmapData;
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		if(this.bitmapData == null) return;
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(this.bitmapData.___textureBuffer != this.__graphics.__surface) {
			var imageDataLease = this.bitmapData.__lease;
			if(imageDataLease != null && (this.__currentLease == null || imageDataLease.seed != this.__currentLease.seed || imageDataLease.time != this.__currentLease.time)) {
				var srcCanvas = this.bitmapData.___textureBuffer;
				this.__graphics.__surface.width = srcCanvas.width;
				this.__graphics.__surface.height = srcCanvas.height;
				this.__graphics.clear();
				flash.Lib.__drawToSurface(srcCanvas,this.__graphics.__surface);
				this.__currentLease = imageDataLease.clone();
				this.___renderFlags |= 64;
				if(this.parent != null) this.parent.___renderFlags |= 64;
				this.__applyFilters(this.__graphics.__surface);
				this.___renderFlags |= 32;
			}
		}
		if(inMask != null) {
			this.__applyFilters(this.__graphics.__surface);
			var m = this.getBitmapSurfaceTransform(this.__graphics);
			flash.Lib.__drawToSurface(this.__graphics.__surface,inMask,m,(this.parent != null?this.parent.__combinedAlpha:1) * this.alpha,clipRect,this.smoothing);
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m = this.getBitmapSurfaceTransform(this.__graphics);
				flash.Lib.__setSurfaceTransform(this.__graphics.__surface,m);
				this.___renderFlags &= -33;
			}
			if(!this.__init) {
				flash.Lib.__setSurfaceOpacity(this.__graphics.__surface,0);
				this.__init = true;
			} else flash.Lib.__setSurfaceOpacity(this.__graphics.__surface,(this.parent != null?this.parent.__combinedAlpha:1) * this.alpha);
		}
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null; else if(this.bitmapData != null) {
			var local = this.globalToLocal(point);
			if(local.x < 0 || local.y < 0 || local.x > this.get_width() / this.get_scaleX() || local.y > this.get_height() / this.get_scaleY()) return null; else return this;
		} else return flash.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			flash.display.DisplayObject.prototype.validateBounds.call(this);
			if(this.bitmapData != null) {
				var r = new flash.geom.Rectangle(0,0,this.bitmapData.get_width(),this.bitmapData.get_height());
				if(r.width != 0 || r.height != 0) {
					if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,toString: function() {
		return "[Bitmap name=" + this.name + " id=" + this.___id + "]";
	}
	,getBitmapSurfaceTransform: function(gfx) {
		var extent = gfx.__extentWithFilters;
		var fm = this.transform.__getFullMatrix(null);
		fm.__translateTransformed(extent.get_topLeft());
		return fm;
	}
	,__class__: flash.display.Bitmap
	,__properties__: $extend(flash.display.DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
flash.display.BitmapData = function(width,height,transparent,inFillColor) {
	if(inFillColor == null) inFillColor = -1;
	if(transparent == null) transparent = true;
	this.__locked = false;
	this.__referenceCount = 0;
	this.__leaseNum = 0;
	this.__lease = new flash.display.ImageDataLease();
	this.__lease.set(this.__leaseNum++,new Date().getTime());
	this.___textureBuffer = js.Browser.document.createElement("canvas");
	this.___textureBuffer.width = width;
	this.___textureBuffer.height = height;
	this.___id = flash.utils.Uuid.uuid();
	flash.Lib.__setSurfaceId(this.___textureBuffer,this.___id);
	this.__transparent = transparent;
	this.rect = new flash.geom.Rectangle(0,0,width,height);
	if(this.__transparent) {
		this.__transparentFiller = js.Browser.document.createElement("canvas");
		this.__transparentFiller.width = width;
		this.__transparentFiller.height = height;
		var ctx = this.__transparentFiller.getContext("2d");
		ctx.fillStyle = "rgba(0,0,0,0);";
		ctx.fill();
	}
	if(inFillColor != null && width > 0 && height > 0) {
		if(!this.__transparent) inFillColor |= -16777216;
		this.__initColor = inFillColor;
		this.__fillRect(this.rect,inFillColor);
	}
};
$hxClasses["flash.display.BitmapData"] = flash.display.BitmapData;
flash.display.BitmapData.__name__ = ["flash","display","BitmapData"];
flash.display.BitmapData.__interfaces__ = [flash.display.IBitmapDrawable];
flash.display.BitmapData.getRGBAPixels = function(bitmapData) {
	var p = bitmapData.getPixels(new flash.geom.Rectangle(0,0,bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.width:0,bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.height:0));
	var num = (bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.width:0) * (bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.height:0);
	p.position = 0;
	var _g = 0;
	while(_g < num) {
		var i = _g++;
		var pos = p.position;
		var alpha = p.readByte();
		var red = p.readByte();
		var green = p.readByte();
		var blue = p.readByte();
		p.position = pos;
		p.writeByte(red);
		p.writeByte(green);
		p.writeByte(blue);
		p.writeByte(alpha);
	}
	return p;
}
flash.display.BitmapData.loadFromBase64 = function(base64,type,onload) {
	var bitmapData = new flash.display.BitmapData(0,0);
	bitmapData.__loadFromBase64(base64,type,onload);
	return bitmapData;
}
flash.display.BitmapData.loadFromBytes = function(bytes,inRawAlpha,onload) {
	var bitmapData = new flash.display.BitmapData(0,0);
	bitmapData.__loadFromBytes(bytes,inRawAlpha,onload);
	return bitmapData;
}
flash.display.BitmapData.__base64Encode = function(bytes) {
	var blob = "";
	var codex = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	bytes.position = 0;
	while(bytes.position < bytes.length) {
		var by1 = 0, by2 = 0, by3 = 0;
		by1 = bytes.readByte();
		if(bytes.position < bytes.length) by2 = bytes.readByte();
		if(bytes.position < bytes.length) by3 = bytes.readByte();
		var by4 = 0, by5 = 0, by6 = 0, by7 = 0;
		by4 = by1 >> 2;
		by5 = (by1 & 3) << 4 | by2 >> 4;
		by6 = (by2 & 15) << 2 | by3 >> 6;
		by7 = by3 & 63;
		blob += codex.charAt(by4);
		blob += codex.charAt(by5);
		if(bytes.position < bytes.length) blob += codex.charAt(by6); else blob += "=";
		if(bytes.position < bytes.length) blob += codex.charAt(by7); else blob += "=";
	}
	return blob;
}
flash.display.BitmapData.__createFromHandle = function(inHandle) {
	var result = new flash.display.BitmapData(0,0);
	result.___textureBuffer = inHandle;
	return result;
}
flash.display.BitmapData.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readByte() == 255 && bytes.readByte() == 216;
}
flash.display.BitmapData.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readByte() == 137 && bytes.readByte() == 80 && bytes.readByte() == 78 && bytes.readByte() == 71 && bytes.readByte() == 13 && bytes.readByte() == 10 && bytes.readByte() == 26 && bytes.readByte() == 10;
}
flash.display.BitmapData.prototype = {
	get_width: function() {
		if(this.___textureBuffer != null) return this.___textureBuffer.width; else return 0;
	}
	,get_transparent: function() {
		return this.__transparent;
	}
	,get_height: function() {
		if(this.___textureBuffer != null) return this.___textureBuffer.height; else return 0;
	}
	,__onLoad: function(data,e) {
		var canvas = data.texture;
		var width = data.image.width;
		var height = data.image.height;
		canvas.width = width;
		canvas.height = height;
		var ctx = canvas.getContext("2d");
		ctx.drawImage(data.image,0,0,width,height);
		data.bitmapData.width = width;
		data.bitmapData.height = height;
		data.bitmapData.rect = new flash.geom.Rectangle(0,0,width,height);
		data.bitmapData.__buildLease();
		if(data.inLoader != null) {
			var e1 = new flash.events.Event(flash.events.Event.COMPLETE);
			e1.target = data.inLoader;
			data.inLoader.dispatchEvent(e1);
		}
	}
	,__loadFromFile: function(inFilename,inLoader) {
		var _g = this;
		var image = js.Browser.document.createElement("img");
		if(inLoader != null) {
			var data = { image : image, texture : this.___textureBuffer, inLoader : inLoader, bitmapData : this};
			image.addEventListener("load",(function(f,a1) {
				return function(e) {
					return f(a1,e);
				};
			})($bind(this,this.__onLoad),data),false);
			image.addEventListener("error",function(e) {
				if(!image.complete) _g.__onLoad(data,e);
			},false);
		}
		image.src = inFilename;
		if(image.complete) {
		}
	}
	,__incrNumRefBitmaps: function() {
		this.__assignedBitmaps++;
	}
	,__getNumRefBitmaps: function() {
		return this.__assignedBitmaps;
	}
	,__loadFromBytes: function(bytes,inRawAlpha,onload) {
		var _g = this;
		var type = "";
		if(flash.display.BitmapData.__isPNG(bytes)) type = "image/png"; else if(flash.display.BitmapData.__isJPG(bytes)) type = "image/jpeg"; else throw new flash.errors.IOError("BitmapData tried to read a PNG/JPG ByteArray, but found an invalid header.");
		if(inRawAlpha != null) this.__loadFromBase64(flash.display.BitmapData.__base64Encode(bytes),type,function(_) {
			var ctx = _g.___textureBuffer.getContext("2d");
			var pixels = ctx.getImageData(0,0,_g.___textureBuffer.width,_g.___textureBuffer.height);
			var _g2 = 0, _g1 = inRawAlpha.length;
			while(_g2 < _g1) {
				var i = _g2++;
				pixels.data[i * 4 + 3] = inRawAlpha.readUnsignedByte();
			}
			ctx.putImageData(pixels,0,0);
			if(onload != null) onload(_g);
		}); else this.__loadFromBase64(flash.display.BitmapData.__base64Encode(bytes),type,onload);
	}
	,__loadFromBase64: function(base64,type,onload) {
		var _g = this;
		var img = js.Browser.document.createElement("img");
		var canvas = this.___textureBuffer;
		var drawImage = function(_) {
			canvas.width = img.width;
			canvas.height = img.height;
			var ctx = canvas.getContext("2d");
			ctx.drawImage(img,0,0);
			_g.rect = new flash.geom.Rectangle(0,0,canvas.width,canvas.height);
			if(onload != null) onload(_g);
		};
		img.addEventListener("load",drawImage,false);
		img.src = "data:" + type + ";base64," + base64;
	}
	,__getLease: function() {
		return this.__lease;
	}
	,__fillRect: function(rect,color) {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		var ctx = this.___textureBuffer.getContext("2d");
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		var a = this.__transparent?color >>> 24:255;
		if(!this.__locked) {
			var style = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
			ctx.fillStyle = style;
			ctx.fillRect(rect.x,rect.y,rect.width,rect.height);
		} else {
			var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.__imageData.width);
			var offsetY;
			var offsetX;
			var _g1 = 0, _g = Math.round(rect.height);
			while(_g1 < _g) {
				var i = _g1++;
				offsetY = i * this.__imageData.width;
				var _g3 = 0, _g2 = Math.round(rect.width);
				while(_g3 < _g2) {
					var j = _g3++;
					offsetX = 4 * (j + offsetY);
					this.__imageData.data[s + offsetX] = r;
					this.__imageData.data[s + offsetX + 1] = g;
					this.__imageData.data[s + offsetX + 2] = b;
					this.__imageData.data[s + offsetX + 3] = a;
				}
			}
			this.__imageDataChanged = true;
		}
	}
	,__decrNumRefBitmaps: function() {
		this.__assignedBitmaps--;
	}
	,__clearCanvas: function() {
		var ctx = this.___textureBuffer.getContext("2d");
		ctx.clearRect(0,0,this.___textureBuffer.width,this.___textureBuffer.height);
	}
	,__buildLease: function() {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	}
	,unlock: function(changeRect) {
		this.__locked = false;
		var ctx = this.___textureBuffer.getContext("2d");
		if(this.__imageDataChanged) {
			if(changeRect != null) ctx.putImageData(this.__imageData,0,0,changeRect.x,changeRect.y,changeRect.width,changeRect.height); else ctx.putImageData(this.__imageData,0,0);
		}
		var _g = 0, _g1 = this.__copyPixelList;
		while(_g < _g1.length) {
			var copyCache = _g1[_g];
			++_g;
			if(this.__transparent && copyCache.transparentFiller != null) {
				var trpCtx = copyCache.transparentFiller.getContext("2d");
				var trpData = trpCtx.getImageData(copyCache.sourceX,copyCache.sourceY,copyCache.sourceWidth,copyCache.sourceHeight);
				ctx.putImageData(trpData,copyCache.destX,copyCache.destY);
			}
			ctx.drawImage(copyCache.handle,copyCache.sourceX,copyCache.sourceY,copyCache.sourceWidth,copyCache.sourceHeight,copyCache.destX,copyCache.destY,copyCache.sourceWidth,copyCache.sourceHeight);
		}
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		haxe.Log.trace("BitmapData.threshold not implemented",{ fileName : "BitmapData.hx", lineNumber : 1164, className : "flash.display.BitmapData", methodName : "threshold"});
		return 0;
	}
	,setPixels: function(rect,byteArray) {
		rect = this.clipRect(rect);
		if(rect == null) return;
		var len = Math.round(4 * rect.width * rect.height);
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(rect.width,rect.height);
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				imageData.data[i] = byteArray.readByte();
			}
			ctx.putImageData(imageData,rect.x,rect.y);
		} else {
			var offset = Math.round(4 * this.__imageData.width * rect.y + rect.x * 4);
			var pos = offset;
			var boundR = Math.round(4 * (rect.x + rect.width));
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				if(pos % (this.__imageData.width * 4) > boundR - 1) pos += this.__imageData.width * 4 - boundR;
				this.__imageData.data[pos] = byteArray.readByte();
				pos++;
			}
			this.__imageDataChanged = true;
		}
	}
	,setPixel32: function(x,y,color) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return;
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(1,1);
			imageData.data[0] = (color & 16711680) >>> 16;
			imageData.data[1] = (color & 65280) >>> 8;
			imageData.data[2] = color & 255;
			if(this.__transparent) imageData.data[3] = (color & -16777216) >>> 24; else imageData.data[3] = 255;
			ctx.putImageData(imageData,x,y);
		} else {
			var offset = 4 * y * this.__imageData.width + x * 4;
			this.__imageData.data[offset] = (color & 16711680) >>> 16;
			this.__imageData.data[offset + 1] = (color & 65280) >>> 8;
			this.__imageData.data[offset + 2] = color & 255;
			if(this.__transparent) this.__imageData.data[offset + 3] = (color & -16777216) >>> 24; else this.__imageData.data[offset + 3] = 255;
			this.__imageDataChanged = true;
		}
	}
	,setPixel: function(x,y,color) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return;
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(1,1);
			imageData.data[0] = (color & 16711680) >>> 16;
			imageData.data[1] = (color & 65280) >>> 8;
			imageData.data[2] = color & 255;
			if(this.__transparent) imageData.data[3] = 255;
			ctx.putImageData(imageData,x,y);
		} else {
			var offset = 4 * y * this.__imageData.width + x * 4;
			this.__imageData.data[offset] = (color & 16711680) >>> 16;
			this.__imageData.data[offset + 1] = (color & 65280) >>> 8;
			this.__imageData.data[offset + 2] = color & 255;
			if(this.__transparent) this.__imageData.data[offset + 3] = 255;
			this.__imageDataChanged = true;
		}
	}
	,scroll: function(x,y) {
		throw "bitmapData.scroll is currently not supported for HTML5";
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		var generator = new flash.display._BitmapData.MinstdGenerator(randomSeed);
		var ctx = this.___textureBuffer.getContext("2d");
		var imageData = null;
		if(this.__locked) imageData = this.__imageData; else imageData = ctx.createImageData(this.___textureBuffer.width,this.___textureBuffer.height);
		var _g1 = 0, _g = this.___textureBuffer.width * this.___textureBuffer.height;
		while(_g1 < _g) {
			var i = _g1++;
			if(grayScale) imageData.data[i * 4] = imageData.data[i * 4 + 1] = imageData.data[i * 4 + 2] = low + generator.nextValue() % (high - low + 1); else {
				imageData.data[i * 4] = (channelOptions & 1) == 0?0:low + generator.nextValue() % (high - low + 1);
				imageData.data[i * 4 + 1] = (channelOptions & 2) == 0?0:low + generator.nextValue() % (high - low + 1);
				imageData.data[i * 4 + 2] = (channelOptions & 4) == 0?0:low + generator.nextValue() % (high - low + 1);
			}
			imageData.data[i * 4 + 3] = (channelOptions & 8) == 0?255:low + generator.nextValue() % (high - low + 1);
		}
		if(this.__locked) this.__imageDataChanged = true; else ctx.putImageData(imageData,0,0);
	}
	,lock: function() {
		this.__locked = true;
		var ctx = this.___textureBuffer.getContext("2d");
		this.__imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
		this.__imageDataChanged = false;
		this.__copyPixelList = [];
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		var type = Type.getClassName(Type.getClass(secondObject));
		firstAlphaThreshold = firstAlphaThreshold & -1;
		var me = this;
		var doHitTest = function(imageData) {
			if(secondObject.__proto__ == null || secondObject.__proto__.__class__ == null || secondObject.__proto__.__class__.__name__ == null) return false;
			var _g = secondObject.__proto__.__class__.__name__[2];
			switch(_g) {
			case "Rectangle":
				var rect = secondObject;
				rect.x -= firstPoint.x;
				rect.y -= firstPoint.y;
				rect = me.clipRect(me.rect);
				if(me.rect == null) return false;
				var boundingBox = new flash.geom.Rectangle(0,0,me.___textureBuffer != null?me.___textureBuffer.width:0,me.___textureBuffer != null?me.___textureBuffer.height:0);
				if(!rect.intersects(boundingBox)) return false;
				var diff = rect.intersection(boundingBox);
				var offset = 4 * (Math.round(diff.x) + Math.round(diff.y) * imageData.width) + 3;
				var pos = offset;
				var boundR = Math.round(4 * (diff.x + diff.width));
				while(pos < offset + Math.round(4 * (diff.width + imageData.width * diff.height))) {
					if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
					if(imageData.data[pos] - firstAlphaThreshold >= 0) return true;
					pos += 4;
				}
				return false;
			case "Point":
				var point = secondObject;
				var x = point.x - firstPoint.x;
				var y = point.y - firstPoint.y;
				if(x < 0 || y < 0 || x >= (me.___textureBuffer != null?me.___textureBuffer.width:0) || y >= (me.___textureBuffer != null?me.___textureBuffer.height:0)) return false;
				if(imageData.data[Math.round(4 * (y * (me.___textureBuffer != null?me.___textureBuffer.width:0) + x)) + 3] - firstAlphaThreshold > 0) return true;
				return false;
			case "Bitmap":
				throw "bitmapData.hitTest with a second object of type Bitmap is currently not supported for HTML5";
				return false;
			case "BitmapData":
				throw "bitmapData.hitTest with a second object of type BitmapData is currently not supported for HTML5";
				return false;
			default:
				throw "BitmapData::hitTest secondObject argument must be either a Rectangle, a Point, a Bitmap or a BitmapData object.";
				return false;
			}
		};
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			return doHitTest(imageData);
		} else return doHitTest(this.__imageData);
	}
	,handle: function() {
		return this.___textureBuffer;
	}
	,getPixels: function(rect) {
		var len = Math.round(4 * rect.width * rect.height);
		var byteArray = new flash.utils.ByteArray();
		if(byteArray.allocated < len) byteArray.___resizeBuffer(byteArray.allocated = Math.max(len,byteArray.allocated * 2) | 0); else if(byteArray.allocated > len) byteArray.___resizeBuffer(byteArray.allocated = len);
		byteArray.length = len;
		len;
		rect = this.clipRect(rect);
		if(rect == null) return byteArray;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				byteArray.writeByte(imagedata.data[i]);
			}
		} else {
			var offset = Math.round(4 * this.__imageData.width * rect.y + rect.x * 4);
			var pos = offset;
			var boundR = Math.round(4 * (rect.x + rect.width));
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				if(pos % (this.__imageData.width * 4) > boundR - 1) pos += this.__imageData.width * 4 - boundR;
				byteArray.writeByte(this.__imageData.data[pos]);
				pos++;
			}
		}
		byteArray.position = 0;
		return byteArray;
	}
	,getPixel32: function(x,y) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return 0;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			return this.getInt32(0,ctx.getImageData(x,y,1,1).data);
		} else return this.getInt32(4 * y * this.___textureBuffer.width + x * 4,this.__imageData.data);
	}
	,getPixel: function(x,y) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return 0;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(x,y,1,1);
			return imagedata.data[0] << 16 | imagedata.data[1] << 8 | imagedata.data[2];
		} else {
			var offset = 4 * y * (this.___textureBuffer != null?this.___textureBuffer.width:0) + x * 4;
			return this.__imageData.data[offset] << 16 | this.__imageData.data[offset + 1] << 8 | this.__imageData.data[offset + 2];
		}
	}
	,getInt32: function(offset,data) {
		return (this.__transparent?data[offset + 3]:255) << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		var me = this;
		var doGetColorBoundsRect = function(data) {
			var minX = me.___textureBuffer != null?me.___textureBuffer.width:0, maxX = 0, minY = me.___textureBuffer != null?me.___textureBuffer.height:0, maxY = 0, i = 0;
			while(i < data.length) {
				var value = me.getInt32(i,data);
				if(findColor) {
					if((value & mask) == color) {
						var x = Math.round(i % ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4) / 4);
						var y = Math.round(i / ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4));
						if(x < minX) minX = x;
						if(x > maxX) maxX = x;
						if(y < minY) minY = y;
						if(y > maxY) maxY = y;
					}
				} else if((value & mask) != color) {
					var x = Math.round(i % ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4) / 4);
					var y = Math.round(i / ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4));
					if(x < minX) minX = x;
					if(x > maxX) maxX = x;
					if(y < minY) minY = y;
					if(y > maxY) maxY = y;
				}
				i += 4;
			}
			if(minX < maxX && minY < maxY) return new flash.geom.Rectangle(minX,minY,maxX - minX + 1,maxY - minY); else return new flash.geom.Rectangle(0,0,me.___textureBuffer != null?me.___textureBuffer.width:0,me.___textureBuffer != null?me.___textureBuffer.height:0);
		};
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			return doGetColorBoundsRect(imageData.data);
		} else return doGetColorBoundsRect(this.__imageData.data);
	}
	,floodFill: function(x,y,color) {
		var wasLocked = this.__locked;
		if(!this.__locked) this.lock();
		var queue = new Array();
		queue.push(new flash.geom.Point(x,y));
		var old = this.getPixel32(x,y);
		var iterations = 0;
		var search = new Array();
		var _g1 = 0, _g = (this.___textureBuffer != null?this.___textureBuffer.width:0) + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var column = new Array();
			var _g3 = 0, _g2 = (this.___textureBuffer != null?this.___textureBuffer.height:0) + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				column.push(false);
			}
			search.push(column);
		}
		var currPoint, newPoint;
		while(queue.length > 0) {
			currPoint = queue.shift();
			++iterations;
			var x1 = currPoint.x | 0;
			var y1 = currPoint.y | 0;
			if(x1 < 0 || x1 >= (this.___textureBuffer != null?this.___textureBuffer.width:0)) continue;
			if(y1 < 0 || y1 >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) continue;
			search[x1][y1] = true;
			if(this.getPixel32(x1,y1) == old) {
				this.setPixel32(x1,y1,color);
				if(!search[x1 + 1][y1]) queue.push(new flash.geom.Point(x1 + 1,y1));
				if(!search[x1][y1 + 1]) queue.push(new flash.geom.Point(x1,y1 + 1));
				if(x1 > 0 && !search[x1 - 1][y1]) queue.push(new flash.geom.Point(x1 - 1,y1));
				if(y1 > 0 && !search[x1][y1 - 1]) queue.push(new flash.geom.Point(x1,y1 - 1));
			}
		}
		if(!wasLocked) this.unlock();
	}
	,fillRect: function(rect,color) {
		if(rect == null) return;
		if(rect.width <= 0 || rect.height <= 0) return;
		if(rect.x == 0 && rect.y == 0 && rect.width == this.___textureBuffer.width && rect.height == this.___textureBuffer.height) {
			if(this.__transparent) {
				if(color >>> 24 == 0 || color == this.__initColor) return this.__clearCanvas();
			} else if((color | -16777216) == (this.__initColor | -16777216)) return this.__clearCanvas();
		}
		return this.__fillRect(rect,color);
	}
	,drawToSurface: function(inSurface,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		var ctx = inSurface.getContext("2d");
		if(matrix != null) {
			ctx.save();
			if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) ctx.translate(matrix.tx,matrix.ty); else {
				flash.Lib.__setImageSmoothing(ctx,smoothing);
				ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			}
			ctx.drawImage(this.___textureBuffer,0,0);
			ctx.restore();
		} else ctx.drawImage(this.___textureBuffer,0,0);
		if(inColorTransform != null) this.colorTransform(new flash.geom.Rectangle(0,0,this.___textureBuffer.width,this.___textureBuffer.height),inColorTransform);
	}
	,draw: function(source,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		source.drawToSurface(this.___textureBuffer,matrix,inColorTransform,blendMode,clipRect,smoothing);
		if(inColorTransform != null) {
			var rect = new flash.geom.Rectangle();
			var object = source;
			rect.x = matrix != null?matrix.tx:0;
			rect.y = matrix != null?matrix.ty:0;
			try {
				rect.width = Reflect.getProperty(source,"width");
				rect.height = Reflect.getProperty(source,"height");
			} catch( e ) {
				rect.width = this.___textureBuffer.width;
				rect.height = this.___textureBuffer.height;
			}
			this.colorTransform(rect,inColorTransform);
		}
	}
	,dispose: function() {
		this.__clearCanvas();
		this.___textureBuffer = null;
		this.__leaseNum = 0;
		this.__lease = null;
		this.__imageData = null;
	}
	,destroy: function() {
		this.___textureBuffer = null;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(sourceBitmapData.___textureBuffer == null || this.___textureBuffer == null || sourceBitmapData.___textureBuffer.width == 0 || sourceBitmapData.___textureBuffer.height == 0 || sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.___textureBuffer.width) sourceRect.width = sourceBitmapData.___textureBuffer.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.___textureBuffer.height) sourceRect.height = sourceBitmapData.___textureBuffer.height - sourceRect.y;
		if(alphaBitmapData != null && alphaBitmapData.__transparent) {
			if(alphaPoint == null) alphaPoint = new flash.geom.Point();
			var bitmapData = new flash.display.BitmapData(sourceBitmapData.___textureBuffer != null?sourceBitmapData.___textureBuffer.width:0,sourceBitmapData.___textureBuffer != null?sourceBitmapData.___textureBuffer.height:0,true);
			bitmapData.copyPixels(sourceBitmapData,sourceRect,new flash.geom.Point(sourceRect.x,sourceRect.y));
			bitmapData.copyChannel(alphaBitmapData,new flash.geom.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new flash.geom.Point(sourceRect.x,sourceRect.y),8,8);
			sourceBitmapData = bitmapData;
		}
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			if(!mergeAlpha) {
				if(this.__transparent && sourceBitmapData.__transparent) {
					var trpCtx = sourceBitmapData.__transparentFiller.getContext("2d");
					var trpData = trpCtx.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
					ctx.putImageData(trpData,destPoint.x,destPoint.y);
				}
			}
			ctx.drawImage(sourceBitmapData.___textureBuffer,sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height,destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
		} else this.__copyPixelList[this.__copyPixelList.length] = { handle : sourceBitmapData.___textureBuffer, transparentFiller : mergeAlpha?null:sourceBitmapData.__transparentFiller, sourceX : sourceRect.x, sourceY : sourceRect.y, sourceWidth : sourceRect.width, sourceHeight : sourceRect.height, destX : destPoint.x, destY : destPoint.y};
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		this.rect = this.clipRect(this.rect);
		if(this.rect == null) return;
		if(destChannel == 8 && !this.__transparent) return;
		if(sourceBitmapData.___textureBuffer == null || this.___textureBuffer == null || sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.___textureBuffer.width) sourceRect.width = sourceBitmapData.___textureBuffer.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.___textureBuffer.height) sourceRect.height = sourceBitmapData.___textureBuffer.height - sourceRect.y;
		var doChannelCopy = function(imageData) {
			var srcCtx = sourceBitmapData.___textureBuffer.getContext("2d");
			var srcImageData = srcCtx.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
			var destIdx = -1;
			if(destChannel == 8) destIdx = 3; else if(destChannel == 4) destIdx = 2; else if(destChannel == 2) destIdx = 1; else if(destChannel == 1) destIdx = 0; else throw "Invalid destination BitmapDataChannel passed to BitmapData::copyChannel.";
			var pos = 4 * (Math.round(destPoint.x) + Math.round(destPoint.y) * imageData.width) + destIdx;
			var boundR = Math.round(4 * (destPoint.x + sourceRect.width));
			var setPos = function(val) {
				if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
				imageData.data[pos] = val;
				pos += 4;
			};
			var srcIdx = -1;
			if(sourceChannel == 8) srcIdx = 3; else if(sourceChannel == 4) srcIdx = 2; else if(sourceChannel == 2) srcIdx = 1; else if(sourceChannel == 1) srcIdx = 0; else throw "Invalid source BitmapDataChannel passed to BitmapData::copyChannel.";
			while(srcIdx < srcImageData.data.length) {
				setPos(srcImageData.data[srcIdx]);
				srcIdx += 4;
			}
		};
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			doChannelCopy(imageData);
			ctx.putImageData(imageData,0,0);
		} else {
			doChannelCopy(this.__imageData);
			this.__imageDataChanged = true;
		}
	}
	,compare: function(inBitmapTexture) {
		throw "bitmapData.compare is currently not supported for HTML5";
		return 0;
	}
	,colorTransform: function(rect,colorTransform) {
		if(rect == null) return;
		rect = this.clipRect(rect);
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
			var offsetX;
			var _g1 = 0, _g = imagedata.data.length >> 2;
			while(_g1 < _g) {
				var i = _g1++;
				offsetX = i * 4;
				imagedata.data[offsetX] = imagedata.data[offsetX] * colorTransform.redMultiplier + colorTransform.redOffset | 0;
				imagedata.data[offsetX + 1] = imagedata.data[offsetX + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset | 0;
				imagedata.data[offsetX + 2] = imagedata.data[offsetX + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset | 0;
				imagedata.data[offsetX + 3] = imagedata.data[offsetX + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset | 0;
			}
			ctx.putImageData(imagedata,rect.x,rect.y);
		} else {
			var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.__imageData.width);
			var offsetY;
			var offsetX;
			var _g1 = 0, _g = Math.round(rect.height);
			while(_g1 < _g) {
				var i = _g1++;
				offsetY = i * this.__imageData.width;
				var _g3 = 0, _g2 = Math.round(rect.width);
				while(_g3 < _g2) {
					var j = _g3++;
					offsetX = 4 * (j + offsetY);
					this.__imageData.data[s + offsetX] = this.__imageData.data[s + offsetX] * colorTransform.redMultiplier + colorTransform.redOffset | 0;
					this.__imageData.data[s + offsetX + 1] = this.__imageData.data[s + offsetX + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset | 0;
					this.__imageData.data[s + offsetX + 2] = this.__imageData.data[s + offsetX + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset | 0;
					this.__imageData.data[s + offsetX + 3] = this.__imageData.data[s + offsetX + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset | 0;
				}
			}
			this.__imageDataChanged = true;
		}
	}
	,clone: function() {
		var bitmapData = new flash.display.BitmapData(this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0,this.__transparent);
		var rect = new flash.geom.Rectangle(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
		bitmapData.setPixels(rect,this.getPixels(rect));
		bitmapData.__lease.set(bitmapData.__leaseNum++,new Date().getTime());
		return bitmapData;
	}
	,clipRect: function(r) {
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= (this.___textureBuffer != null?this.___textureBuffer.width:0)) {
			r.width -= r.x + r.width - (this.___textureBuffer != null?this.___textureBuffer.width:0);
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) {
			r.height -= r.y + r.height - (this.___textureBuffer != null?this.___textureBuffer.height:0);
			if(r.height <= 0) return null;
		}
		return r;
	}
	,clear: function(color) {
		this.fillRect(this.rect,color);
	}
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(sourceBitmapData == this && sourceRect.x == destPoint.x && sourceRect.y == destPoint.y) filter.__applyFilter(this.___textureBuffer,sourceRect); else {
			var bitmapData = new flash.display.BitmapData(sourceRect.width | 0,sourceRect.height | 0);
			bitmapData.copyPixels(sourceBitmapData,sourceRect,new flash.geom.Point());
			filter.__applyFilter(bitmapData.___textureBuffer);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
		}
	}
	,__class__: flash.display.BitmapData
	,__properties__: {get_height:"get_height",get_transparent:"get_transparent",get_width:"get_width"}
}
flash.display.ImageDataLease = function() {
};
$hxClasses["flash.display.ImageDataLease"] = flash.display.ImageDataLease;
flash.display.ImageDataLease.__name__ = ["flash","display","ImageDataLease"];
flash.display.ImageDataLease.prototype = {
	set: function(s,t) {
		this.seed = s;
		this.time = t;
	}
	,clone: function() {
		var leaseClone = new flash.display.ImageDataLease();
		leaseClone.seed = this.seed;
		leaseClone.time = this.time;
		return leaseClone;
	}
	,__class__: flash.display.ImageDataLease
}
flash.display._BitmapData = {}
flash.display._BitmapData.MinstdGenerator = function(seed) {
	if(seed == 0) this.value = 1; else this.value = seed;
};
$hxClasses["flash.display._BitmapData.MinstdGenerator"] = flash.display._BitmapData.MinstdGenerator;
flash.display._BitmapData.MinstdGenerator.__name__ = ["flash","display","_BitmapData","MinstdGenerator"];
flash.display._BitmapData.MinstdGenerator.prototype = {
	nextValue: function() {
		var lo = 16807 * (this.value & 65535);
		var hi = 16807 * (this.value >>> 16);
		lo += (hi & 32767) << 16;
		if(lo < 0 || lo > -2147483648 - 1) {
			lo &= -2147483648 - 1;
			++lo;
		}
		lo += hi >>> 15;
		if(lo < 0 || lo > -2147483648 - 1) {
			lo &= -2147483648 - 1;
			++lo;
		}
		return this.value = lo;
	}
	,__class__: flash.display._BitmapData.MinstdGenerator
}
flash.display.BitmapDataChannel = function() { }
$hxClasses["flash.display.BitmapDataChannel"] = flash.display.BitmapDataChannel;
flash.display.BitmapDataChannel.__name__ = ["flash","display","BitmapDataChannel"];
flash.display.BlendMode = $hxClasses["flash.display.BlendMode"] = { __ename__ : ["flash","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] }
flash.display.BlendMode.ADD = ["ADD",0];
flash.display.BlendMode.ADD.toString = $estr;
flash.display.BlendMode.ADD.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.ALPHA = ["ALPHA",1];
flash.display.BlendMode.ALPHA.toString = $estr;
flash.display.BlendMode.ALPHA.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.DARKEN = ["DARKEN",2];
flash.display.BlendMode.DARKEN.toString = $estr;
flash.display.BlendMode.DARKEN.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
flash.display.BlendMode.DIFFERENCE.toString = $estr;
flash.display.BlendMode.DIFFERENCE.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.ERASE = ["ERASE",4];
flash.display.BlendMode.ERASE.toString = $estr;
flash.display.BlendMode.ERASE.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
flash.display.BlendMode.HARDLIGHT.toString = $estr;
flash.display.BlendMode.HARDLIGHT.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.INVERT = ["INVERT",6];
flash.display.BlendMode.INVERT.toString = $estr;
flash.display.BlendMode.INVERT.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.LAYER = ["LAYER",7];
flash.display.BlendMode.LAYER.toString = $estr;
flash.display.BlendMode.LAYER.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
flash.display.BlendMode.LIGHTEN.toString = $estr;
flash.display.BlendMode.LIGHTEN.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
flash.display.BlendMode.MULTIPLY.toString = $estr;
flash.display.BlendMode.MULTIPLY.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.NORMAL = ["NORMAL",10];
flash.display.BlendMode.NORMAL.toString = $estr;
flash.display.BlendMode.NORMAL.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.OVERLAY = ["OVERLAY",11];
flash.display.BlendMode.OVERLAY.toString = $estr;
flash.display.BlendMode.OVERLAY.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.SCREEN = ["SCREEN",12];
flash.display.BlendMode.SCREEN.toString = $estr;
flash.display.BlendMode.SCREEN.__enum__ = flash.display.BlendMode;
flash.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
flash.display.BlendMode.SUBTRACT.toString = $estr;
flash.display.BlendMode.SUBTRACT.__enum__ = flash.display.BlendMode;
flash.display.CapsStyle = $hxClasses["flash.display.CapsStyle"] = { __ename__ : ["flash","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] }
flash.display.CapsStyle.NONE = ["NONE",0];
flash.display.CapsStyle.NONE.toString = $estr;
flash.display.CapsStyle.NONE.__enum__ = flash.display.CapsStyle;
flash.display.CapsStyle.ROUND = ["ROUND",1];
flash.display.CapsStyle.ROUND.toString = $estr;
flash.display.CapsStyle.ROUND.__enum__ = flash.display.CapsStyle;
flash.display.CapsStyle.SQUARE = ["SQUARE",2];
flash.display.CapsStyle.SQUARE.toString = $estr;
flash.display.CapsStyle.SQUARE.__enum__ = flash.display.CapsStyle;
flash.display.GradientType = $hxClasses["flash.display.GradientType"] = { __ename__ : ["flash","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] }
flash.display.GradientType.RADIAL = ["RADIAL",0];
flash.display.GradientType.RADIAL.toString = $estr;
flash.display.GradientType.RADIAL.__enum__ = flash.display.GradientType;
flash.display.GradientType.LINEAR = ["LINEAR",1];
flash.display.GradientType.LINEAR.toString = $estr;
flash.display.GradientType.LINEAR.__enum__ = flash.display.GradientType;
flash.display.Graphics = function(inSurface) {
	flash.Lib.__bootstrap();
	if(inSurface == null) {
		this.__surface = js.Browser.document.createElement("canvas");
		this.__surface.width = 0;
		this.__surface.height = 0;
	} else this.__surface = inSurface;
	this.mLastMoveID = 0;
	this.mPenX = 0.0;
	this.mPenY = 0.0;
	this.mDrawList = new Array();
	this.mPoints = [];
	this.mSolidGradient = null;
	this.mBitmap = null;
	this.mFilling = false;
	this.mFillColour = 0;
	this.mFillAlpha = 0.0;
	this.mLastMoveID = 0;
	this.boundsDirty = true;
	this.__clearLine();
	this.mLineJobs = [];
	this.__changed = true;
	this.nextDrawIndex = 0;
	this.__extent = new flash.geom.Rectangle();
	this.__extentWithFilters = new flash.geom.Rectangle();
	this._padding = 0.0;
	this.__clearNextCycle = true;
};
$hxClasses["flash.display.Graphics"] = flash.display.Graphics;
flash.display.Graphics.__name__ = ["flash","display","Graphics"];
flash.display.Graphics.__detectIsPointInPathMode = function() {
	var canvas = js.Browser.document.createElement("canvas");
	var ctx = canvas.getContext("2d");
	if(ctx.isPointInPath == null) return flash.display.PointInPathMode.USER_SPACE;
	ctx.save();
	ctx.translate(1,0);
	ctx.beginPath();
	ctx.rect(0,0,1,1);
	var rv = ctx.isPointInPath(0.3,0.3)?flash.display.PointInPathMode.USER_SPACE:flash.display.PointInPathMode.DEVICE_SPACE;
	ctx.restore();
	return rv;
}
flash.display.Graphics.prototype = {
	__render: function(maskHandle,filters,sx,sy,clip0,clip1,clip2,clip3) {
		if(sy == null) sy = 1.0;
		if(sx == null) sx = 1.0;
		if(!this.__changed) return false;
		this.closePolygon(true);
		var padding = this._padding;
		if(filters != null) {
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				if(Reflect.hasField(filter,"blurX")) padding += Math.max(Reflect.field(filter,"blurX"),Reflect.field(filter,"blurY")) * 4;
			}
		}
		this.__expandFilteredExtent(-(padding * sx) / 2,-(padding * sy) / 2);
		if(this.__clearNextCycle) {
			this.nextDrawIndex = 0;
			this.__clearCanvas();
			this.__clearNextCycle = false;
		}
		if(this.__extentWithFilters.width - this.__extentWithFilters.x > this.__surface.width || this.__extentWithFilters.height - this.__extentWithFilters.y > this.__surface.height) this.__adjustSurface(sx,sy);
		var ctx = (function($this) {
			var $r;
			try {
				$r = $this.__surface.getContext("2d");
			} catch( e ) {
				$r = null;
			}
			return $r;
		}(this));
		if(ctx == null) return false;
		if(clip0 != null) {
			ctx.beginPath();
			ctx.moveTo(clip0.x * sx,clip0.y * sy);
			ctx.lineTo(clip1.x * sx,clip1.y * sy);
			ctx.lineTo(clip2.x * sx,clip2.y * sy);
			ctx.lineTo(clip3.x * sx,clip3.y * sy);
			ctx.closePath();
			ctx.clip();
		}
		if(filters != null) {
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				if(js.Boot.__instanceof(filter,flash.filters.DropShadowFilter)) filter.__applyFilter(this.__surface,null,true);
			}
		}
		var len = this.mDrawList.length;
		ctx.save();
		if(this.__extentWithFilters.x != 0 || this.__extentWithFilters.y != 0) ctx.translate(-this.__extentWithFilters.x * sx,-this.__extentWithFilters.y * sy);
		if(sx != 1 || sy != 0) ctx.scale(sx,sy);
		var doStroke = false;
		var _g = this.nextDrawIndex;
		while(_g < len) {
			var i = _g++;
			var d = this.mDrawList[len - 1 - i];
			if(d.tileJob != null) this.__drawTiles(d.tileJob.sheet,d.tileJob.drawList,d.tileJob.flags); else {
				if(d.lineJobs.length > 0) {
					var _g1 = 0, _g2 = d.lineJobs;
					while(_g1 < _g2.length) {
						var lj = _g2[_g1];
						++_g1;
						ctx.lineWidth = lj.thickness;
						switch(lj.joints) {
						case 0:
							ctx.lineJoin = "round";
							break;
						case 4096:
							ctx.lineJoin = "miter";
							break;
						case 8192:
							ctx.lineJoin = "bevel";
							break;
						}
						switch(lj.caps) {
						case 256:
							ctx.lineCap = "round";
							break;
						case 512:
							ctx.lineCap = "square";
							break;
						case 0:
							ctx.lineCap = "butt";
							break;
						}
						ctx.miterLimit = lj.miter_limit;
						if(lj.grad != null) ctx.strokeStyle = this.createCanvasGradient(ctx,lj.grad); else ctx.strokeStyle = this.createCanvasColor(lj.colour,lj.alpha);
						ctx.beginPath();
						var _g4 = lj.point_idx0, _g3 = lj.point_idx1 + 1;
						while(_g4 < _g3) {
							var i1 = _g4++;
							var p = d.points[i1];
							switch(p.type) {
							case 0:
								ctx.moveTo(p.x,p.y);
								break;
							case 2:
								ctx.quadraticCurveTo(p.cx,p.cy,p.x,p.y);
								break;
							default:
								ctx.lineTo(p.x,p.y);
							}
						}
						ctx.closePath();
						doStroke = true;
					}
				} else {
					ctx.beginPath();
					var _g1 = 0, _g2 = d.points;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						switch(p.type) {
						case 0:
							ctx.moveTo(p.x,p.y);
							break;
						case 2:
							ctx.quadraticCurveTo(p.cx,p.cy,p.x,p.y);
							break;
						default:
							ctx.lineTo(p.x,p.y);
						}
					}
					ctx.closePath();
				}
				var fillColour = d.fillColour;
				var fillAlpha = d.fillAlpha;
				var g = d.solidGradient;
				var bitmap = d.bitmap;
				if(g != null) ctx.fillStyle = this.createCanvasGradient(ctx,g); else if(bitmap != null && (bitmap.flags & 16) > 0) {
					var m = bitmap.matrix;
					if(m != null) ctx.transform(m.a,m.b,m.c,m.d,m.tx,m.ty);
					if((bitmap.flags & 65536) == 0) {
						ctx.mozImageSmoothingEnabled = false;
						ctx.webkitImageSmoothingEnabled = false;
					}
					ctx.fillStyle = ctx.createPattern(bitmap.texture_buffer,"repeat");
				} else ctx.fillStyle = this.createCanvasColor(fillColour,Math.min(1.0,Math.max(0.0,fillAlpha)));
				ctx.fill();
				if(doStroke) ctx.stroke();
				ctx.save();
				if(bitmap != null && (bitmap.flags & 16) == 0) {
					ctx.clip();
					var img = bitmap.texture_buffer;
					var m = bitmap.matrix;
					if(m != null) ctx.transform(m.a,m.b,m.c,m.d,m.tx,m.ty);
					ctx.drawImage(img,0,0);
				}
				ctx.restore();
			}
		}
		ctx.restore();
		this.__changed = false;
		this.nextDrawIndex = len > 0?len - 1:0;
		this.mDrawList = [];
		return true;
	}
	,__mediaSurface: function(surface) {
		this.__surface = surface;
	}
	,__invalidate: function() {
		this.__changed = true;
		this.__clearNextCycle = true;
	}
	,__hitTest: function(inX,inY) {
		var ctx = (function($this) {
			var $r;
			try {
				$r = $this.__surface.getContext("2d");
			} catch( e ) {
				$r = null;
			}
			return $r;
		}(this));
		if(ctx == null) return false;
		if(ctx.isPointInPath(inX,inY)) return true; else if(this.mDrawList.length == 0 && this.__extent.width > 0 && this.__extent.height > 0) return true;
		return false;
	}
	,__expandStandardExtent: function(x,y,thickness) {
		if(thickness == null) thickness = 0;
		if(this._padding > 0) {
			this.__extent.width -= this._padding;
			this.__extent.height -= this._padding;
		}
		if(thickness != null && thickness > this._padding) this._padding = thickness;
		var maxX, minX, maxY, minY;
		minX = this.__extent.x;
		minY = this.__extent.y;
		maxX = this.__extent.width + minX;
		maxY = this.__extent.height + minY;
		maxX = x > maxX?x:maxX;
		minX = x < minX?x:minX;
		maxY = y > maxY?y:maxY;
		minY = y < minY?y:minY;
		this.__extent.x = minX;
		this.__extent.y = minY;
		this.__extent.width = maxX - minX + this._padding;
		this.__extent.height = maxY - minY + this._padding;
		this.boundsDirty = true;
	}
	,__expandFilteredExtent: function(x,y) {
		var maxX, minX, maxY, minY;
		minX = this.__extent.x;
		minY = this.__extent.y;
		maxX = this.__extent.width + minX;
		maxY = this.__extent.height + minY;
		maxX = x > maxX?x:maxX;
		minX = x < minX?x:minX;
		maxY = y > maxY?y:maxY;
		minY = y < minY?y:minY;
		this.__extentWithFilters.x = minX;
		this.__extentWithFilters.y = minY;
		this.__extentWithFilters.width = maxX - minX;
		this.__extentWithFilters.height = maxY - minY;
	}
	,__drawTiles: function(sheet,tileData,flags) {
		if(flags == null) flags = 0;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		var itemCount = totalCount / numValues | 0;
		var index = 0;
		var rect = null;
		var center = null;
		var previousTileID = -1;
		var surface = sheet.__bitmap.___textureBuffer;
		var ctx = (function($this) {
			var $r;
			try {
				$r = $this.__surface.getContext("2d");
			} catch( e ) {
				$r = null;
			}
			return $r;
		}(this));
		if(ctx != null) while(index < totalCount) {
			var tileID = tileData[index + 2] | 0;
			if(tileID != previousTileID) {
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				previousTileID = tileID;
			}
			if(rect != null && center != null) {
				ctx.save();
				ctx.translate(tileData[index],tileData[index + 1]);
				if(useRotation) ctx.rotate(tileData[index + rotationIndex]);
				var scale = 1.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useTransform) ctx.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
				if(useAlpha) ctx.globalAlpha = tileData[index + alphaIndex];
				ctx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
				ctx.restore();
			}
			index += numValues;
		}
	}
	,__drawEllipse: function(x,y,rx,ry) {
		this.moveTo(x + rx,y);
		this.curveTo(rx + x,-0.4142 * ry + y,0.7071 * rx + x,-0.7071 * ry + y);
		this.curveTo(0.4142 * rx + x,-ry + y,x,-ry + y);
		this.curveTo(-0.4142 * rx + x,-ry + y,-0.7071 * rx + x,-0.7071 * ry + y);
		this.curveTo(-rx + x,-0.4142 * ry + y,-rx + x,y);
		this.curveTo(-rx + x,0.4142 * ry + y,-0.7071 * rx + x,0.7071 * ry + y);
		this.curveTo(-0.4142 * rx + x,ry + y,x,ry + y);
		this.curveTo(0.4142 * rx + x,ry + y,0.7071 * rx + x,0.7071 * ry + y);
		this.curveTo(rx + x,0.4142 * ry + y,rx + x,y);
	}
	,__clearLine: function() {
		this.mCurrentLine = new flash.display.LineJob(null,-1,-1,0.0,0.0,0,1,0,256,3,3.0);
	}
	,__clearCanvas: function() {
		if(this.__surface != null) {
			var ctx = (function($this) {
				var $r;
				try {
					$r = $this.__surface.getContext("2d");
				} catch( e ) {
					$r = null;
				}
				return $r;
			}(this));
			if(ctx != null) ctx.clearRect(0,0,this.__surface.width,this.__surface.height);
		}
	}
	,__adjustSurface: function(sx,sy) {
		if(sy == null) sy = 1.0;
		if(sx == null) sx = 1.0;
		if(Reflect.field(this.__surface,"getContext") != null) {
			var width = Math.ceil((this.__extentWithFilters.width - this.__extentWithFilters.x) * sx);
			var height = Math.ceil((this.__extentWithFilters.height - this.__extentWithFilters.y) * sy);
			if(width <= 5000 && height <= 5000) {
				var dstCanvas = js.Browser.document.createElement("canvas");
				dstCanvas.width = width;
				dstCanvas.height = height;
				flash.Lib.__drawToSurface(this.__surface,dstCanvas);
				if(flash.Lib.__isOnStage(this.__surface)) {
					flash.Lib.__appendSurface(dstCanvas);
					flash.Lib.__copyStyle(this.__surface,dstCanvas);
					flash.Lib.__swapSurface(this.__surface,dstCanvas);
					flash.Lib.__removeSurface(this.__surface);
					if(this.__surface.id != null) flash.Lib.__setSurfaceId(dstCanvas,this.__surface.id);
				}
				this.__surface = dstCanvas;
			}
		}
	}
	,moveTo: function(inX,inY) {
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY);
		if(!this.mFilling) this.closePolygon(false); else {
			this.addLineSegment();
			this.mLastMoveID = this.mPoints.length;
			this.mPoints.push(new flash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
		}
	}
	,lineTo: function(inX,inY) {
		var pid = this.mPoints.length;
		if(pid == 0) {
			this.mPoints.push(new flash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
			pid++;
		}
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY,this.mCurrentLine.thickness);
		this.mPoints.push(new flash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,1));
		if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
			if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
			this.mCurrentLine.point_idx1 = pid;
		}
		if(!this.mFilling) this.closePolygon(false);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.addLineSegment();
		if(thickness == null) {
			this.__clearLine();
			return;
		} else {
			this.mCurrentLine.grad = null;
			this.mCurrentLine.thickness = thickness;
			this.mCurrentLine.colour = color == null?0:color;
			this.mCurrentLine.alpha = alpha == null?1.0:alpha;
			this.mCurrentLine.miter_limit = miterLimit == null?3.0:miterLimit;
			this.mCurrentLine.pixel_hinting = pixelHinting == null || !pixelHinting?0:16384;
		}
		if(caps != null) {
			switch( (caps)[1] ) {
			case 1:
				this.mCurrentLine.caps = 256;
				break;
			case 2:
				this.mCurrentLine.caps = 512;
				break;
			case 0:
				this.mCurrentLine.caps = 0;
				break;
			}
		}
		this.mCurrentLine.scale_mode = 3;
		if(scaleMode != null) {
			switch( (scaleMode)[1] ) {
			case 2:
				this.mCurrentLine.scale_mode = 3;
				break;
			case 3:
				this.mCurrentLine.scale_mode = 1;
				break;
			case 0:
				this.mCurrentLine.scale_mode = 2;
				break;
			case 1:
				this.mCurrentLine.scale_mode = 0;
				break;
			}
		}
		this.mCurrentLine.joints = 0;
		if(joints != null) {
			switch( (joints)[1] ) {
			case 1:
				this.mCurrentLine.joints = 0;
				break;
			case 0:
				this.mCurrentLine.joints = 4096;
				break;
			case 2:
				this.mCurrentLine.joints = 8192;
				break;
			}
		}
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.mCurrentLine.grad = this.createGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,getContext: function() {
		try {
			return this.__surface.getContext("2d");
		} catch( e ) {
			return null;
		}
	}
	,flush: function() {
		this.closePolygon(true);
	}
	,endFill: function() {
		this.closePolygon(true);
	}
	,drawTiles: function(sheet,tileData,smooth,flags) {
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__expandStandardExtent(flash.Lib.get_current().get_stage().get_stageWidth(),flash.Lib.get_current().get_stage().get_stageHeight());
		this.addDrawable(new flash.display.Drawable(null,null,null,null,null,null,new flash.display.TileJob(sheet,tileData,flags)));
		this.__changed = true;
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(ry == -1) ry = rx;
		rx *= 0.5;
		ry *= 0.5;
		var w = width * 0.5;
		x += w;
		if(rx > w) rx = w;
		var lw = w - rx;
		var w_ = lw + rx * Math.sin(Math.PI / 4);
		var cw_ = lw + rx * Math.tan(Math.PI / 8);
		var h = height * 0.5;
		y += h;
		if(ry > h) ry = h;
		var lh = h - ry;
		var h_ = lh + ry * Math.sin(Math.PI / 4);
		var ch_ = lh + ry * Math.tan(Math.PI / 8);
		this.closePolygon(false);
		this.moveTo(x + w,y + lh);
		this.curveTo(x + w,y + ch_,x + w_,y + h_);
		this.curveTo(x + cw_,y + h,x + lw,y + h);
		this.lineTo(x - lw,y + h);
		this.curveTo(x - cw_,y + h,x - w_,y + h_);
		this.curveTo(x - w,y + ch_,x - w,y + lh);
		this.lineTo(x - w,y - lh);
		this.curveTo(x - w,y - ch_,x - w_,y - h_);
		this.curveTo(x - cw_,y - h,x - lw,y - h);
		this.lineTo(x + lw,y - h);
		this.curveTo(x + cw_,y - h,x + w_,y - h_);
		this.curveTo(x + w,y - ch_,x + w,y - lh);
		this.lineTo(x + w,y + lh);
		this.closePolygon(false);
	}
	,drawRect: function(x,y,width,height) {
		this.closePolygon(false);
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
		this.closePolygon(false);
	}
	,drawGraphicsData: function(points) {
		var $it0 = ((function(_e) {
			return function() {
				return $iterator(flash._Vector.Vector_Impl_)(_e);
			};
		})(points))();
		while( $it0.hasNext() ) {
			var data = $it0.next();
			if(data == null) this.mFilling = true; else switch(data.__graphicsDataType) {
			case flash.display.GraphicsDataType.STROKE:
				var stroke = data;
				if(stroke.fill == null) this.lineStyle(stroke.thickness,0,1.,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit); else switch(stroke.fill.__graphicsFillType) {
				case flash.display.GraphicsFillType.SOLID_FILL:
					var fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					break;
				case flash.display.GraphicsFillType.GRADIENT_FILL:
					var fill = stroke.fill;
					this.lineGradientStyle(fill.type,fill.colors,fill.alphas,fill.ratios,fill.matrix,fill.spreadMethod,fill.interpolationMethod,fill.focalPointRatio);
					break;
				}
				break;
			case flash.display.GraphicsDataType.PATH:
				var path = data;
				var j = 0;
				var _g1 = 0, _g = flash._Vector.Vector_Impl_.get_length(path.commands);
				while(_g1 < _g) {
					var i = _g1++;
					var command = path.commands[i];
					switch(command) {
					case 1:
						this.moveTo(path.data[j],path.data[j + 1]);
						j = j + 2;
						break;
					case 2:
						this.lineTo(path.data[j],path.data[j + 1]);
						j = j + 2;
						break;
					case 3:
						this.curveTo(path.data[j],path.data[j + 1],path.data[j + 2],path.data[j + 3]);
						j = j + 4;
						break;
					}
				}
				break;
			case flash.display.GraphicsDataType.SOLID:
				var fill = data;
				this.beginFill(fill.color,fill.alpha);
				break;
			case flash.display.GraphicsDataType.GRADIENT:
				var fill = data;
				this.beginGradientFill(fill.type,fill.colors,fill.alphas,fill.ratios,fill.matrix,fill.spreadMethod,fill.interpolationMethod,fill.focalPointRatio);
				break;
			}
		}
	}
	,drawEllipse: function(x,y,rx,ry) {
		this.closePolygon(false);
		rx /= 2;
		ry /= 2;
		this.__drawEllipse(x + rx,y + ry,rx,ry);
		this.closePolygon(false);
	}
	,drawCircle: function(x,y,rad) {
		this.closePolygon(false);
		this.__drawEllipse(x,y,rad,rad);
		this.closePolygon(false);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		var pid = this.mPoints.length;
		if(pid == 0) {
			this.mPoints.push(new flash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
			pid++;
		}
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY,this.mCurrentLine.thickness);
		this.mPoints.push(new flash.display.GfxPoint(inX,inY,inCX,inCY,2));
		if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
			if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
			this.mCurrentLine.point_idx1 = pid;
		}
	}
	,createGradient: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		var points = new Array();
		var _g1 = 0, _g = colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			points.push(new flash.display.GradPoint(colors[i],alphas[i],ratios[i]));
		}
		var flags = 0;
		if(type == flash.display.GradientType.RADIAL) flags |= 1;
		if(spreadMethod == flash.display.SpreadMethod.REPEAT) flags |= 2; else if(spreadMethod == flash.display.SpreadMethod.REFLECT) flags |= 4;
		if(matrix == null) {
			matrix = new flash.geom.Matrix();
			matrix.createGradientBox(25,25);
		} else matrix = matrix.clone();
		var focal = focalPointRatio == null?0:focalPointRatio;
		return new flash.display.Grad(points,matrix,flags,focal);
	}
	,createCanvasGradient: function(ctx,g) {
		var gradient;
		var matrix = g.matrix;
		if((g.flags & 1) == 0) {
			var p1 = matrix.transformPoint(new flash.geom.Point(-819.2,0));
			var p2 = matrix.transformPoint(new flash.geom.Point(819.2,0));
			gradient = ctx.createLinearGradient(p1.x,p1.y,p2.x,p2.y);
		} else {
			var p1 = matrix.transformPoint(new flash.geom.Point(g.focal * 819.2,0));
			var p2 = matrix.transformPoint(new flash.geom.Point(0,819.2));
			gradient = ctx.createRadialGradient(p1.x,p1.y,0,p2.x,p1.y,p2.y);
		}
		var _g = 0, _g1 = g.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			var color = this.createCanvasColor(point.col,point.alpha);
			var pos = point.ratio / 255;
			gradient.addColorStop(pos,color);
		}
		return gradient;
	}
	,createCanvasColor: function(color,alpha) {
		var r = (16711680 & color) >> 16;
		var g = (65280 & color) >> 8;
		var b = 255 & color;
		return "rgba" + "(" + r + "," + g + "," + b + "," + alpha + ")";
	}
	,closePolygon: function(inCancelFill) {
		var l = this.mPoints.length;
		if(l > 0) {
			if(l > 1) {
				if(this.mFilling && l > 2) {
					if(this.mPoints[this.mLastMoveID].x != this.mPoints[l - 1].x || this.mPoints[this.mLastMoveID].y != this.mPoints[l - 1].y) this.lineTo(this.mPoints[this.mLastMoveID].x,this.mPoints[this.mLastMoveID].y);
				}
				this.addLineSegment();
				var drawable = new flash.display.Drawable(this.mPoints,this.mFillColour,this.mFillAlpha,this.mSolidGradient,this.mBitmap,this.mLineJobs,null);
				this.addDrawable(drawable);
			}
			this.mLineJobs = [];
			this.mPoints = [];
		}
		if(inCancelFill) {
			this.mFillAlpha = 0;
			this.mSolidGradient = null;
			this.mBitmap = null;
			this.mFilling = false;
		}
		this.__changed = true;
	}
	,clear: function() {
		this.__clearLine();
		this.mPenX = 0.0;
		this.mPenY = 0.0;
		this.mDrawList = new Array();
		this.nextDrawIndex = 0;
		this.mPoints = [];
		this.mSolidGradient = null;
		this.mFilling = false;
		this.mFillColour = 0;
		this.mFillAlpha = 0.0;
		this.mLastMoveID = 0;
		this.__clearNextCycle = true;
		this.boundsDirty = true;
		this.__extent.x = 0.0;
		this.__extent.y = 0.0;
		this.__extent.width = 0.0;
		this.__extent.height = 0.0;
		this._padding = 0.0;
		this.mLineJobs = [];
	}
	,blit: function(inTexture) {
		this.closePolygon(true);
		var ctx = (function($this) {
			var $r;
			try {
				$r = $this.__surface.getContext("2d");
			} catch( e ) {
				$r = null;
			}
			return $r;
		}(this));
		if(ctx != null) ctx.drawImage(inTexture.___textureBuffer,this.mPenX,this.mPenY);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.closePolygon(true);
		this.mFilling = true;
		this.mBitmap = null;
		this.mSolidGradient = this.createGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,beginFill: function(color,alpha) {
		this.closePolygon(true);
		this.mFillColour = color;
		this.mFillAlpha = alpha == null?1.0:alpha;
		this.mFilling = true;
		this.mSolidGradient = null;
		this.mBitmap = null;
	}
	,beginBitmapFill: function(bitmap,matrix,in_repeat,in_smooth) {
		if(in_smooth == null) in_smooth = false;
		if(in_repeat == null) in_repeat = true;
		this.closePolygon(true);
		var repeat = in_repeat == null?true:in_repeat;
		var smooth = in_smooth == null?false:in_smooth;
		this.mFilling = true;
		this.mSolidGradient = null;
		this.__expandStandardExtent(bitmap.___textureBuffer != null?bitmap.___textureBuffer.width:0,bitmap.___textureBuffer != null?bitmap.___textureBuffer.height:0);
		this.mBitmap = { texture_buffer : bitmap.___textureBuffer, matrix : matrix == null?matrix:matrix.clone(), flags : (repeat?16:0) | (smooth?65536:0)};
	}
	,addLineSegment: function() {
		if(this.mCurrentLine.point_idx1 > 0) this.mLineJobs.push(new flash.display.LineJob(this.mCurrentLine.grad,this.mCurrentLine.point_idx0,this.mCurrentLine.point_idx1,this.mCurrentLine.thickness,this.mCurrentLine.alpha,this.mCurrentLine.colour,this.mCurrentLine.pixel_hinting,this.mCurrentLine.joints,this.mCurrentLine.caps,this.mCurrentLine.scale_mode,this.mCurrentLine.miter_limit));
		this.mCurrentLine.point_idx0 = this.mCurrentLine.point_idx1 = -1;
	}
	,addDrawable: function(inDrawable) {
		if(inDrawable == null) return;
		this.mDrawList.unshift(inDrawable);
	}
	,__class__: flash.display.Graphics
}
flash.display.Drawable = function(inPoints,inFillColour,inFillAlpha,inSolidGradient,inBitmap,inLineJobs,inTileJob) {
	this.points = inPoints;
	this.fillColour = inFillColour;
	this.fillAlpha = inFillAlpha;
	this.solidGradient = inSolidGradient;
	this.bitmap = inBitmap;
	this.lineJobs = inLineJobs;
	this.tileJob = inTileJob;
};
$hxClasses["flash.display.Drawable"] = flash.display.Drawable;
flash.display.Drawable.__name__ = ["flash","display","Drawable"];
flash.display.Drawable.prototype = {
	__class__: flash.display.Drawable
}
flash.display.GfxPoint = function(inX,inY,inCX,inCY,inType) {
	this.x = inX;
	this.y = inY;
	this.cx = inCX;
	this.cy = inCY;
	this.type = inType;
};
$hxClasses["flash.display.GfxPoint"] = flash.display.GfxPoint;
flash.display.GfxPoint.__name__ = ["flash","display","GfxPoint"];
flash.display.GfxPoint.prototype = {
	__class__: flash.display.GfxPoint
}
flash.display.Grad = function(inPoints,inMatrix,inFlags,inFocal) {
	this.points = inPoints;
	this.matrix = inMatrix;
	this.flags = inFlags;
	this.focal = inFocal;
};
$hxClasses["flash.display.Grad"] = flash.display.Grad;
flash.display.Grad.__name__ = ["flash","display","Grad"];
flash.display.Grad.prototype = {
	__class__: flash.display.Grad
}
flash.display.GradPoint = function(inCol,inAlpha,inRatio) {
	this.col = inCol;
	this.alpha = inAlpha;
	this.ratio = inRatio;
};
$hxClasses["flash.display.GradPoint"] = flash.display.GradPoint;
flash.display.GradPoint.__name__ = ["flash","display","GradPoint"];
flash.display.GradPoint.prototype = {
	__class__: flash.display.GradPoint
}
flash.display.LineJob = function(inGrad,inPoint_idx0,inPoint_idx1,inThickness,inAlpha,inColour,inPixel_hinting,inJoints,inCaps,inScale_mode,inMiter_limit) {
	this.grad = inGrad;
	this.point_idx0 = inPoint_idx0;
	this.point_idx1 = inPoint_idx1;
	this.thickness = inThickness;
	this.alpha = inAlpha;
	this.colour = inColour;
	this.pixel_hinting = inPixel_hinting;
	this.joints = inJoints;
	this.caps = inCaps;
	this.scale_mode = inScale_mode;
	this.miter_limit = inMiter_limit;
};
$hxClasses["flash.display.LineJob"] = flash.display.LineJob;
flash.display.LineJob.__name__ = ["flash","display","LineJob"];
flash.display.LineJob.prototype = {
	__class__: flash.display.LineJob
}
flash.display.PointInPathMode = $hxClasses["flash.display.PointInPathMode"] = { __ename__ : ["flash","display","PointInPathMode"], __constructs__ : ["USER_SPACE","DEVICE_SPACE"] }
flash.display.PointInPathMode.USER_SPACE = ["USER_SPACE",0];
flash.display.PointInPathMode.USER_SPACE.toString = $estr;
flash.display.PointInPathMode.USER_SPACE.__enum__ = flash.display.PointInPathMode;
flash.display.PointInPathMode.DEVICE_SPACE = ["DEVICE_SPACE",1];
flash.display.PointInPathMode.DEVICE_SPACE.toString = $estr;
flash.display.PointInPathMode.DEVICE_SPACE.__enum__ = flash.display.PointInPathMode;
flash.display.TileJob = function(sheet,drawList,flags) {
	this.sheet = sheet;
	this.drawList = drawList;
	this.flags = flags;
};
$hxClasses["flash.display.TileJob"] = flash.display.TileJob;
flash.display.TileJob.__name__ = ["flash","display","TileJob"];
flash.display.TileJob.prototype = {
	__class__: flash.display.TileJob
}
flash.display.IGraphicsFill = function() { }
$hxClasses["flash.display.IGraphicsFill"] = flash.display.IGraphicsFill;
flash.display.IGraphicsFill.__name__ = ["flash","display","IGraphicsFill"];
flash.display.IGraphicsFill.prototype = {
	__class__: flash.display.IGraphicsFill
}
flash.display.IGraphicsData = function() { }
$hxClasses["flash.display.IGraphicsData"] = flash.display.IGraphicsData;
flash.display.IGraphicsData.__name__ = ["flash","display","IGraphicsData"];
flash.display.IGraphicsData.prototype = {
	__class__: flash.display.IGraphicsData
}
flash.display.GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = flash.display.GraphicsDataType.GRADIENT;
	this.__graphicsFillType = flash.display.GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["flash.display.GraphicsGradientFill"] = flash.display.GraphicsGradientFill;
flash.display.GraphicsGradientFill.__name__ = ["flash","display","GraphicsGradientFill"];
flash.display.GraphicsGradientFill.__interfaces__ = [flash.display.IGraphicsFill,flash.display.IGraphicsData];
flash.display.GraphicsGradientFill.prototype = {
	__class__: flash.display.GraphicsGradientFill
}
flash.display.IGraphicsPath = function() { }
$hxClasses["flash.display.IGraphicsPath"] = flash.display.IGraphicsPath;
flash.display.IGraphicsPath.__name__ = ["flash","display","IGraphicsPath"];
flash.display.GraphicsPath = function(commands,data,winding) {
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = flash.display.GraphicsDataType.PATH;
};
$hxClasses["flash.display.GraphicsPath"] = flash.display.GraphicsPath;
flash.display.GraphicsPath.__name__ = ["flash","display","GraphicsPath"];
flash.display.GraphicsPath.__interfaces__ = [flash.display.IGraphicsPath,flash.display.IGraphicsData];
flash.display.GraphicsPath.prototype = {
	moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			flash._Vector.Vector_Impl_.push(this.commands,1);
			flash._Vector.Vector_Impl_.push(this.data,x);
			flash._Vector.Vector_Impl_.push(this.data,y);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			flash._Vector.Vector_Impl_.push(this.commands,2);
			flash._Vector.Vector_Impl_.push(this.data,x);
			flash._Vector.Vector_Impl_.push(this.data,y);
		}
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			flash._Vector.Vector_Impl_.push(this.commands,3);
			flash._Vector.Vector_Impl_.push(this.data,anchorX);
			flash._Vector.Vector_Impl_.push(this.data,anchorY);
			flash._Vector.Vector_Impl_.push(this.data,controlX);
			flash._Vector.Vector_Impl_.push(this.data,controlY);
		}
	}
	,__class__: flash.display.GraphicsPath
}
flash.display.GraphicsPathCommand = function() { }
$hxClasses["flash.display.GraphicsPathCommand"] = flash.display.GraphicsPathCommand;
flash.display.GraphicsPathCommand.__name__ = ["flash","display","GraphicsPathCommand"];
flash.display.GraphicsPathWinding = $hxClasses["flash.display.GraphicsPathWinding"] = { __ename__ : ["flash","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] }
flash.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
flash.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
flash.display.GraphicsPathWinding.EVEN_ODD.__enum__ = flash.display.GraphicsPathWinding;
flash.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
flash.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
flash.display.GraphicsPathWinding.NON_ZERO.__enum__ = flash.display.GraphicsPathWinding;
flash.display.GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = flash.display.GraphicsDataType.SOLID;
	this.__graphicsFillType = flash.display.GraphicsFillType.SOLID_FILL;
};
$hxClasses["flash.display.GraphicsSolidFill"] = flash.display.GraphicsSolidFill;
flash.display.GraphicsSolidFill.__name__ = ["flash","display","GraphicsSolidFill"];
flash.display.GraphicsSolidFill.__interfaces__ = [flash.display.IGraphicsFill,flash.display.IGraphicsData];
flash.display.GraphicsSolidFill.prototype = {
	__class__: flash.display.GraphicsSolidFill
}
flash.display.IGraphicsStroke = function() { }
$hxClasses["flash.display.IGraphicsStroke"] = flash.display.IGraphicsStroke;
flash.display.IGraphicsStroke.__name__ = ["flash","display","IGraphicsStroke"];
flash.display.GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	this.caps = caps != null?caps:null;
	this.fill = fill;
	this.joints = joints != null?joints:null;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null?scaleMode:null;
	this.thickness = thickness;
	this.__graphicsDataType = flash.display.GraphicsDataType.STROKE;
};
$hxClasses["flash.display.GraphicsStroke"] = flash.display.GraphicsStroke;
flash.display.GraphicsStroke.__name__ = ["flash","display","GraphicsStroke"];
flash.display.GraphicsStroke.__interfaces__ = [flash.display.IGraphicsStroke,flash.display.IGraphicsData];
flash.display.GraphicsStroke.prototype = {
	__class__: flash.display.GraphicsStroke
}
flash.display.GraphicsDataType = $hxClasses["flash.display.GraphicsDataType"] = { __ename__ : ["flash","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH"] }
flash.display.GraphicsDataType.STROKE = ["STROKE",0];
flash.display.GraphicsDataType.STROKE.toString = $estr;
flash.display.GraphicsDataType.STROKE.__enum__ = flash.display.GraphicsDataType;
flash.display.GraphicsDataType.SOLID = ["SOLID",1];
flash.display.GraphicsDataType.SOLID.toString = $estr;
flash.display.GraphicsDataType.SOLID.__enum__ = flash.display.GraphicsDataType;
flash.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
flash.display.GraphicsDataType.GRADIENT.toString = $estr;
flash.display.GraphicsDataType.GRADIENT.__enum__ = flash.display.GraphicsDataType;
flash.display.GraphicsDataType.PATH = ["PATH",3];
flash.display.GraphicsDataType.PATH.toString = $estr;
flash.display.GraphicsDataType.PATH.__enum__ = flash.display.GraphicsDataType;
flash.display.GraphicsFillType = $hxClasses["flash.display.GraphicsFillType"] = { __ename__ : ["flash","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL"] }
flash.display.GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
flash.display.GraphicsFillType.SOLID_FILL.toString = $estr;
flash.display.GraphicsFillType.SOLID_FILL.__enum__ = flash.display.GraphicsFillType;
flash.display.GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
flash.display.GraphicsFillType.GRADIENT_FILL.toString = $estr;
flash.display.GraphicsFillType.GRADIENT_FILL.__enum__ = flash.display.GraphicsFillType;
flash.display.InterpolationMethod = $hxClasses["flash.display.InterpolationMethod"] = { __ename__ : ["flash","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] }
flash.display.InterpolationMethod.RGB = ["RGB",0];
flash.display.InterpolationMethod.RGB.toString = $estr;
flash.display.InterpolationMethod.RGB.__enum__ = flash.display.InterpolationMethod;
flash.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
flash.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
flash.display.InterpolationMethod.LINEAR_RGB.__enum__ = flash.display.InterpolationMethod;
flash.display.JointStyle = $hxClasses["flash.display.JointStyle"] = { __ename__ : ["flash","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] }
flash.display.JointStyle.MITER = ["MITER",0];
flash.display.JointStyle.MITER.toString = $estr;
flash.display.JointStyle.MITER.__enum__ = flash.display.JointStyle;
flash.display.JointStyle.ROUND = ["ROUND",1];
flash.display.JointStyle.ROUND.toString = $estr;
flash.display.JointStyle.ROUND.__enum__ = flash.display.JointStyle;
flash.display.JointStyle.BEVEL = ["BEVEL",2];
flash.display.JointStyle.BEVEL.toString = $estr;
flash.display.JointStyle.BEVEL.__enum__ = flash.display.JointStyle;
flash.display.LineScaleMode = $hxClasses["flash.display.LineScaleMode"] = { __ename__ : ["flash","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] }
flash.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
flash.display.LineScaleMode.HORIZONTAL.toString = $estr;
flash.display.LineScaleMode.HORIZONTAL.__enum__ = flash.display.LineScaleMode;
flash.display.LineScaleMode.NONE = ["NONE",1];
flash.display.LineScaleMode.NONE.toString = $estr;
flash.display.LineScaleMode.NONE.__enum__ = flash.display.LineScaleMode;
flash.display.LineScaleMode.NORMAL = ["NORMAL",2];
flash.display.LineScaleMode.NORMAL.toString = $estr;
flash.display.LineScaleMode.NORMAL.__enum__ = flash.display.LineScaleMode;
flash.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
flash.display.LineScaleMode.VERTICAL.toString = $estr;
flash.display.LineScaleMode.VERTICAL.__enum__ = flash.display.LineScaleMode;
flash.display.Loader = function() {
	flash.display.Sprite.call(this);
	this.contentLoaderInfo = flash.display.LoaderInfo.create(this);
};
$hxClasses["flash.display.Loader"] = flash.display.Loader;
flash.display.Loader.__name__ = ["flash","display","Loader"];
flash.display.Loader.__super__ = flash.display.Sprite;
flash.display.Loader.prototype = $extend(flash.display.Sprite.prototype,{
	handleLoad: function(e) {
		e.currentTarget = this;
		this.content.__invalidateBounds();
		this.content.__render(null,null);
		this.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE,$bind(this,this.handleLoad));
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			flash.display.Sprite.prototype.validateBounds.call(this);
			if(this.mImage != null) {
				var r = new flash.geom.Rectangle(0,0,this.mImage.get_width(),this.mImage.get_height());
				if(r.width != 0 || r.height != 0) {
					if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,toString: function() {
		return "[Loader name=" + this.name + " id=" + this.___id + "]";
	}
	,loadBytes: function(buffer) {
		var _g = this;
		try {
			this.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE,$bind(this,this.handleLoad),false,2147483647);
			flash.display.BitmapData.loadFromBytes(buffer,null,function(bmd) {
				_g.content = new flash.display.Bitmap(bmd);
				_g.contentLoaderInfo.content = _g.content;
				_g.addChild(_g.content);
				var evt = new flash.events.Event(flash.events.Event.COMPLETE);
				evt.currentTarget = _g;
				_g.contentLoaderInfo.dispatchEvent(evt);
			});
		} catch( e ) {
			haxe.Log.trace("Error " + Std.string(e),{ fileName : "Loader.hx", lineNumber : 123, className : "flash.display.Loader", methodName : "loadBytes"});
			var evt = new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR);
			evt.currentTarget = this;
			this.contentLoaderInfo.dispatchEvent(evt);
		}
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") this.contentLoaderInfo.contentType = (function($this) {
			var $r;
			switch(extension) {
			case "swf":
				$r = "application/x-shockwave-flash";
				break;
			case "jpg":case "jpeg":
				$r = (function($this) {
					var $r;
					transparent = false;
					$r = "image/jpeg";
					return $r;
				}($this));
				break;
			case "png":
				$r = "image/png";
				break;
			case "gif":
				$r = "image/gif";
				break;
			default:
				$r = "application/x-www-form-urlencoded";
			}
			return $r;
		}(this)); else this.contentLoaderInfo.contentType = request.contentType;
		this.mImage = new flash.display.BitmapData(0,0,transparent);
		try {
			this.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE,$bind(this,this.handleLoad),false,2147483647);
			this.mImage.__loadFromFile(request.url,this.contentLoaderInfo);
			this.content = new flash.display.Bitmap(this.mImage);
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
		} catch( e ) {
			haxe.Log.trace("Error " + Std.string(e),{ fileName : "Loader.hx", lineNumber : 86, className : "flash.display.Loader", methodName : "load"});
			var evt = new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR);
			evt.currentTarget = this;
			this.contentLoaderInfo.dispatchEvent(evt);
			return;
		}
		if(this.mShape == null) {
			this.mShape = new flash.display.Shape();
			this.addChild(this.mShape);
		}
	}
	,__class__: flash.display.Loader
});
flash.display.LoaderInfo = function() {
	flash.events.EventDispatcher.call(this);
	this.applicationDomain = flash.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["flash.display.LoaderInfo"] = flash.display.LoaderInfo;
flash.display.LoaderInfo.__name__ = ["flash","display","LoaderInfo"];
flash.display.LoaderInfo.create = function(ldr) {
	var li = new flash.display.LoaderInfo();
	if(ldr != null) li.loader = ldr; else li.url = "";
	return li;
}
flash.display.LoaderInfo.__super__ = flash.events.EventDispatcher;
flash.display.LoaderInfo.prototype = $extend(flash.events.EventDispatcher.prototype,{
	__class__: flash.display.LoaderInfo
});
flash.display.MovieClip = function() {
	flash.display.Sprite.call(this);
	this.enabled = true;
	this.__currentFrame = 0;
	this.__totalFrames = 0;
	this.loaderInfo = flash.display.LoaderInfo.create(null);
};
$hxClasses["flash.display.MovieClip"] = flash.display.MovieClip;
flash.display.MovieClip.__name__ = ["flash","display","MovieClip"];
flash.display.MovieClip.__super__ = flash.display.Sprite;
flash.display.MovieClip.prototype = $extend(flash.display.Sprite.prototype,{
	get_totalFrames: function() {
		return this.__totalFrames;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,toString: function() {
		return "[MovieClip name=" + this.name + " id=" + this.___id + "]";
	}
	,stop: function() {
	}
	,prevFrame: function() {
	}
	,play: function() {
	}
	,nextFrame: function() {
	}
	,gotoAndStop: function(frame,scene) {
		if(scene == null) scene = "";
	}
	,gotoAndPlay: function(frame,scene) {
		if(scene == null) scene = "";
	}
	,__class__: flash.display.MovieClip
	,__properties__: $extend(flash.display.Sprite.prototype.__properties__,{get_currentFrame:"get_currentFrame",get_framesLoaded:"get_framesLoaded",get_totalFrames:"get_totalFrames"})
});
flash.display.PixelSnapping = $hxClasses["flash.display.PixelSnapping"] = { __ename__ : ["flash","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] }
flash.display.PixelSnapping.NEVER = ["NEVER",0];
flash.display.PixelSnapping.NEVER.toString = $estr;
flash.display.PixelSnapping.NEVER.__enum__ = flash.display.PixelSnapping;
flash.display.PixelSnapping.AUTO = ["AUTO",1];
flash.display.PixelSnapping.AUTO.toString = $estr;
flash.display.PixelSnapping.AUTO.__enum__ = flash.display.PixelSnapping;
flash.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
flash.display.PixelSnapping.ALWAYS.toString = $estr;
flash.display.PixelSnapping.ALWAYS.__enum__ = flash.display.PixelSnapping;
flash.display.Shape = function() {
	flash.display.DisplayObject.call(this);
	this.__graphics = new flash.display.Graphics();
};
$hxClasses["flash.display.Shape"] = flash.display.Shape;
flash.display.Shape.__name__ = ["flash","display","Shape"];
flash.display.Shape.__super__ = flash.display.DisplayObject;
flash.display.Shape.prototype = $extend(flash.display.DisplayObject.prototype,{
	get_graphics: function() {
		return this.__graphics;
	}
	,__getObjectUnderPoint: function(point) {
		if(this.parent == null) return null;
		if(this.parent.mouseEnabled && flash.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point) == this) return this.parent; else return null;
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,toString: function() {
		return "[Shape name=" + this.name + " id=" + this.___id + "]";
	}
	,__class__: flash.display.Shape
	,__properties__: $extend(flash.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
flash.display.SpreadMethod = $hxClasses["flash.display.SpreadMethod"] = { __ename__ : ["flash","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] }
flash.display.SpreadMethod.REPEAT = ["REPEAT",0];
flash.display.SpreadMethod.REPEAT.toString = $estr;
flash.display.SpreadMethod.REPEAT.__enum__ = flash.display.SpreadMethod;
flash.display.SpreadMethod.REFLECT = ["REFLECT",1];
flash.display.SpreadMethod.REFLECT.toString = $estr;
flash.display.SpreadMethod.REFLECT.__enum__ = flash.display.SpreadMethod;
flash.display.SpreadMethod.PAD = ["PAD",2];
flash.display.SpreadMethod.PAD.toString = $estr;
flash.display.SpreadMethod.PAD.__enum__ = flash.display.SpreadMethod;
flash.events.Event = function(inType,inBubbles,inCancelable) {
	if(inCancelable == null) inCancelable = false;
	if(inBubbles == null) inBubbles = false;
	this.type = inType;
	this.bubbles = inBubbles;
	this.cancelable = inCancelable;
	this.__isCancelled = false;
	this.__isCancelledNow = false;
	this.target = null;
	this.currentTarget = null;
	this.eventPhase = flash.events.EventPhase.AT_TARGET;
};
$hxClasses["flash.events.Event"] = flash.events.Event;
flash.events.Event.__name__ = ["flash","events","Event"];
flash.events.Event.prototype = {
	__setPhase: function(phase) {
		this.eventPhase = phase;
	}
	,__getIsCancelledNow: function() {
		return this.__isCancelledNow;
	}
	,__getIsCancelled: function() {
		return this.__isCancelled;
	}
	,__createSimilar: function(type,related,targ) {
		var result = new flash.events.Event(type,this.bubbles,this.cancelable);
		if(targ != null) result.target = targ;
		return result;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,clone: function() {
		return new flash.events.Event(this.type,this.bubbles,this.cancelable);
	}
	,__class__: flash.events.Event
}
flash.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["flash.events.MouseEvent"] = flash.events.MouseEvent;
flash.events.MouseEvent.__name__ = ["flash","events","MouseEvent"];
flash.events.MouseEvent.__create = function(type,event,local,target) {
	var __mouseDown = false;
	var delta = 2;
	if(type == flash.events.MouseEvent.MOUSE_WHEEL) {
		var mouseEvent = event;
		if(mouseEvent.wheelDelta) delta = mouseEvent.wheelDelta / 120 | 0; else if(mouseEvent.detail) -mouseEvent.detail | 0;
	}
	if(type == flash.events.MouseEvent.MOUSE_DOWN) __mouseDown = event.which != null?event.which == 1:event.button != null?event.button == 0:false; else if(type == flash.events.MouseEvent.MOUSE_UP) {
		if(event.which != null) {
			if(event.which == 1) __mouseDown = false; else if(event.button != null) {
				if(event.button == 0) __mouseDown = false; else __mouseDown = false;
			}
		}
	}
	var pseudoEvent = new flash.events.MouseEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,__mouseDown,delta);
	pseudoEvent.stageX = flash.Lib.get_current().get_stage().get_mouseX();
	pseudoEvent.stageY = flash.Lib.get_current().get_stage().get_mouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
}
flash.events.MouseEvent.__super__ = flash.events.Event;
flash.events.MouseEvent.prototype = $extend(flash.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__createSimilar: function(type,related,targ) {
		var result = new flash.events.MouseEvent(type,this.bubbles,this.cancelable,this.localX,this.localY,related == null?this.relatedObject:related,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		if(targ != null) result.target = targ;
		return result;
	}
	,__class__: flash.events.MouseEvent
});
flash.display.Stage = function(width,height) {
	flash.display.DisplayObjectContainer.call(this);
	this.__focusObject = null;
	this.__focusObjectActivated = false;
	this.__windowWidth = width;
	this.__windowHeight = height;
	this.stageFocusRect = false;
	this.scaleMode = flash.display.StageScaleMode.SHOW_ALL;
	this.__stageMatrix = new flash.geom.Matrix();
	this.tabEnabled = true;
	this.set_frameRate(0.0);
	this.set_backgroundColor(16777215);
	this.name = "Stage";
	this.loaderInfo = flash.display.LoaderInfo.create(null);
	this.loaderInfo.parameters.width = Std.string(this.__windowWidth);
	this.loaderInfo.parameters.height = Std.string(this.__windowHeight);
	this.__pointInPathMode = flash.display.Graphics.__detectIsPointInPathMode();
	this.__mouseOverObjects = [];
	this.set_showDefaultContextMenu(true);
	this.__touchInfo = [];
	this.__uIEventsQueue = new Array(1000);
	this.__uIEventsQueueIndex = 0;
};
$hxClasses["flash.display.Stage"] = flash.display.Stage;
flash.display.Stage.__name__ = ["flash","display","Stage"];
flash.display.Stage.getOrientation = function() {
	var rotation = window.orientation;
	var orientation = flash.display.Stage.OrientationPortrait;
	switch(rotation) {
	case -90:
		orientation = flash.display.Stage.OrientationLandscapeLeft;
		break;
	case 180:
		orientation = flash.display.Stage.OrientationPortraitUpsideDown;
		break;
	case 90:
		orientation = flash.display.Stage.OrientationLandscapeRight;
		break;
	default:
		orientation = flash.display.Stage.OrientationPortrait;
	}
	return orientation;
}
flash.display.Stage.__super__ = flash.display.DisplayObjectContainer;
flash.display.Stage.prototype = $extend(flash.display.DisplayObjectContainer.prototype,{
	get_stageWidth: function() {
		return this.__windowWidth;
	}
	,get_stageHeight: function() {
		return this.__windowHeight;
	}
	,get_stage: function() {
		return flash.Lib.__getStage();
	}
	,set_showDefaultContextMenu: function(showDefaultContextMenu) {
		if(showDefaultContextMenu != this.__showDefaultContextMenu && this.__showDefaultContextMenu != null) {
			if(!showDefaultContextMenu) flash.Lib.__disableRightClick(); else flash.Lib.__enableRightClick();
		}
		this.__showDefaultContextMenu = showDefaultContextMenu;
		return showDefaultContextMenu;
	}
	,get_showDefaultContextMenu: function() {
		return this.__showDefaultContextMenu;
	}
	,set_quality: function(inQuality) {
		return this.quality = inQuality;
	}
	,get_quality: function() {
		return this.quality != null?this.quality:flash.display.StageQuality.BEST;
	}
	,get_mouseY: function() {
		return this._mouseY;
	}
	,get_mouseX: function() {
		return this._mouseX;
	}
	,get_fullScreenHeight: function() {
		return js.Browser.window.innerHeight;
	}
	,get_fullScreenWidth: function() {
		return js.Browser.window.innerWidth;
	}
	,set_frameRate: function(speed) {
		if(speed == 0) {
			var window = js.Browser.window;
			var __requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			if(__requestAnimationFrame == null) speed = 60;
		}
		if(speed != 0) this.__interval = 1000.0 / speed | 0;
		this.__frameRate = speed;
		this.__updateNextWake();
		return speed;
	}
	,get_frameRate: function() {
		return this.__frameRate;
	}
	,set_focus: function(inObj) {
		this.__onFocus(inObj);
		return this.__focusObject;
	}
	,get_focus: function() {
		return this.__focusObject;
	}
	,set_displayState: function(displayState) {
		if(displayState != this.displayState && this.displayState != null) {
			switch( (displayState)[1] ) {
			case 0:
				flash.Lib.__disableFullScreen();
				break;
			case 1:
			case 2:
				flash.Lib.__enableFullScreen();
				break;
			}
		}
		this.displayState = displayState;
		return displayState;
	}
	,get_displayState: function() {
		return this.displayState;
	}
	,set_color: function(col) {
		return this.__backgroundColour = col;
	}
	,get_color: function() {
		return this.__backgroundColour;
	}
	,set_backgroundColor: function(col) {
		return this.__backgroundColour = col;
	}
	,get_backgroundColor: function() {
		return this.__backgroundColour;
	}
	,__onTouch: function(event,touch,type,touchInfo,isPrimaryTouchPoint) {
		var rect = flash.Lib.mMe.__scr.getBoundingClientRect();
		var point = new flash.geom.Point(touch.pageX - rect.left,touch.pageY - rect.top);
		var obj = this.__getObjectUnderPoint(point);
		this._mouseX = point.x;
		this._mouseY = point.y;
		var stack = new Array();
		if(obj != null) obj.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			stack.reverse();
			var local = obj.globalToLocal(point);
			var evt = flash.events.TouchEvent.__create(type,event,touch,local,obj);
			evt.touchPointID = touch.identifier;
			evt.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__checkInOuts(evt,stack,touchInfo);
			obj.__fireEvent(evt);
			var mouseType = (function($this) {
				var $r;
				switch(type) {
				case "touchBegin":
					$r = flash.events.MouseEvent.MOUSE_DOWN;
					break;
				case "touchEnd":
					$r = flash.events.MouseEvent.MOUSE_UP;
					break;
				default:
					$r = (function($this) {
						var $r;
						if($this.__dragObject != null) $this.__drag(point);
						$r = flash.events.MouseEvent.MOUSE_MOVE;
						return $r;
					}($this));
				}
				return $r;
			}(this));
			obj.__fireEvent(flash.events.MouseEvent.__create(mouseType,evt,local,obj));
		} else {
			var evt = flash.events.TouchEvent.__create(type,event,touch,point,null);
			evt.touchPointID = touch.identifier;
			evt.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__checkInOuts(evt,stack,touchInfo);
		}
	}
	,__onResize: function(inW,inH) {
		this.__windowWidth = inW;
		this.__windowHeight = inH;
		var event = new flash.events.Event(flash.events.Event.RESIZE);
		event.target = this;
		this.__broadcast(event);
	}
	,__onMouse: function(event,type) {
		var rect = flash.Lib.mMe.__scr.getBoundingClientRect();
		var point = new flash.geom.Point(event.clientX - rect.left,event.clientY - rect.top);
		if(this.__dragObject != null) this.__drag(point);
		var obj = this.__getObjectUnderPoint(point);
		this._mouseX = point.x;
		this._mouseY = point.y;
		var stack = new Array();
		if(obj != null) obj.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			stack.reverse();
			var local = obj.globalToLocal(point);
			var evt = flash.events.MouseEvent.__create(type,event,local,obj);
			this.__checkInOuts(evt,stack);
			if(type == flash.events.MouseEvent.MOUSE_DOWN) this.__onFocus(stack[stack.length - 1]);
			obj.__fireEvent(evt);
		} else {
			var evt = flash.events.MouseEvent.__create(type,event,point,null);
			this.__checkInOuts(evt,stack);
		}
	}
	,__onFocus: function(target) {
		if(target != this.__focusObject) {
			if(this.__focusObject != null) this.__focusObject.__fireEvent(new flash.events.FocusEvent(flash.events.FocusEvent.FOCUS_OUT,true,false,this.__focusObject,false,0));
			target.__fireEvent(new flash.events.FocusEvent(flash.events.FocusEvent.FOCUS_IN,true,false,target,false,0));
			this.__focusObject = target;
		}
	}
	,__onKey: function(code,pressed,inChar,ctrl,alt,shift,keyLocation) {
		var stack = new Array();
		if(this.__focusObject == null) this.__getInteractiveObjectStack(stack); else this.__focusObject.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			var obj = stack[0];
			var evt = new flash.events.KeyboardEvent(pressed?flash.events.KeyboardEvent.KEY_DOWN:flash.events.KeyboardEvent.KEY_UP,true,false,inChar,code,keyLocation,ctrl,alt,shift);
			obj.__fireEvent(evt);
		}
	}
	,__handleOrientationChange: function() {
	}
	,__handleAccelerometer: function(evt) {
		flash.display.Stage.__acceleration.x = evt.accelerationIncludingGravity.x;
		flash.display.Stage.__acceleration.y = evt.accelerationIncludingGravity.y;
		flash.display.Stage.__acceleration.z = evt.accelerationIncludingGravity.z;
	}
	,__updateNextWake: function() {
		if(this.__frameRate == 0) {
			var __requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			__requestAnimationFrame($bind(this,this.__updateNextWake));
			this.__stageRender();
		} else {
			js.Browser.window.clearInterval(this.__timer);
			this.__timer = js.Browser.window.setInterval($bind(this,this.__stageRender),this.__interval);
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		this.__dragBounds = bounds == null?null:bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			var mouse = new flash.geom.Point(this._mouseX,this._mouseY);
			var p = this.__dragObject.parent;
			if(p != null) mouse = p.globalToLocal(mouse);
			if(lockCenter) {
				var bounds1 = sprite.getBounds(this);
				this.__dragOffsetX = this.__dragObject.get_x() - (bounds1.width / 2 + bounds1.x);
				this.__dragOffsetY = this.__dragObject.get_y() - (bounds1.height / 2 + bounds1.y);
			} else {
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stageRender: function(_) {
		if(!this.__stageActive) {
			this.__onResize(this.__windowWidth,this.__windowHeight);
			var event = new flash.events.Event(flash.events.Event.ACTIVATE);
			event.target = this;
			this.__broadcast(event);
			this.__stageActive = true;
		}
		var _g1 = 0, _g = this.__uIEventsQueueIndex;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__uIEventsQueue[i] != null) this.__processStageEvent(this.__uIEventsQueue[i]);
		}
		this.__uIEventsQueueIndex = 0;
		var event = new flash.events.Event(flash.events.Event.ENTER_FRAME);
		this.__broadcast(event);
		if(this.__invalid) {
			var event1 = new flash.events.Event(flash.events.Event.RENDER);
			this.__broadcast(event1);
		}
		this.__renderAll();
	}
	,__renderToCanvas: function(canvas) {
		canvas.width = canvas.width;
		this.__render(canvas);
	}
	,__renderAll: function() {
		this.__render(null,null);
	}
	,__queueStageEvent: function(evt) {
		this.__uIEventsQueue[this.__uIEventsQueueIndex++] = evt;
	}
	,__processStageEvent: function(evt) {
		evt.stopPropagation();
		switch(evt.type) {
		case "resize":
			this.__onResize(flash.Lib.__getWidth(),flash.Lib.__getHeight());
			break;
		case "focus":
			this.__onFocus(this);
			if(!this.__focusObjectActivated) {
				this.__focusObjectActivated = true;
				this.dispatchEvent(new flash.events.Event(flash.events.Event.ACTIVATE));
			}
			break;
		case "blur":
			if(this.__focusObjectActivated) {
				this.__focusObjectActivated = false;
				this.dispatchEvent(new flash.events.Event(flash.events.Event.DEACTIVATE));
			}
			break;
		case "mousemove":
			this.__onMouse(evt,flash.events.MouseEvent.MOUSE_MOVE);
			break;
		case "mousedown":
			this.__onMouse(evt,flash.events.MouseEvent.MOUSE_DOWN);
			break;
		case "mouseup":
			this.__onMouse(evt,flash.events.MouseEvent.MOUSE_UP);
			break;
		case "click":
			this.__onMouse(evt,flash.events.MouseEvent.CLICK);
			break;
		case "mousewheel":
			this.__onMouse(evt,flash.events.MouseEvent.MOUSE_WHEEL);
			break;
		case "dblclick":
			this.__onMouse(evt,flash.events.MouseEvent.DOUBLE_CLICK);
			break;
		case "keydown":
			var evt1 = evt;
			var keyCode = evt1.keyCode != null?evt1.keyCode:evt1.which;
			keyCode = flash.ui.Keyboard.__convertMozillaCode(keyCode);
			this.__onKey(keyCode,true,evt1.charCode,evt1.ctrlKey,evt1.altKey,evt1.shiftKey,evt1.keyLocation);
			break;
		case "keyup":
			var evt1 = evt;
			var keyCode = evt1.keyCode != null?evt1.keyCode:evt1.which;
			keyCode = flash.ui.Keyboard.__convertMozillaCode(keyCode);
			this.__onKey(keyCode,false,evt1.charCode,evt1.ctrlKey,evt1.altKey,evt1.shiftKey,evt1.keyLocation);
			break;
		case "touchstart":
			var evt1 = evt;
			evt1.preventDefault();
			var touchInfo = new flash.display._Stage.TouchInfo();
			this.__touchInfo[evt1.changedTouches[0].identifier] = touchInfo;
			this.__onTouch(evt1,evt1.changedTouches[0],"touchBegin",touchInfo,false);
			break;
		case "touchmove":
			var evt1 = evt;
			evt1.preventDefault();
			var touchInfo = this.__touchInfo[evt1.changedTouches[0].identifier];
			this.__onTouch(evt1,evt1.changedTouches[0],"touchMove",touchInfo,true);
			break;
		case "touchend":
			var evt1 = evt;
			evt1.preventDefault();
			var touchInfo = this.__touchInfo[evt1.changedTouches[0].identifier];
			this.__onTouch(evt1,evt1.changedTouches[0],"touchEnd",touchInfo,true);
			this.__touchInfo[evt1.changedTouches[0].identifier] = null;
			break;
		case "devicemotion":
			var evt1 = evt;
			this.__handleAccelerometer(evt1);
			break;
		case "orientationchange":
			this.__handleOrientationChange();
			break;
		default:
		}
	}
	,__isOnStage: function() {
		return true;
	}
	,__drag: function(point) {
		var p = this.__dragObject.parent;
		if(p != null) point = p.globalToLocal(point);
		var x = point.x + this.__dragOffsetX;
		var y = point.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__checkInOuts: function(event,stack,touchInfo) {
		var prev = touchInfo == null?this.__mouseOverObjects:touchInfo.touchOverObjects;
		var changeEvents = touchInfo == null?flash.display.Stage.__mouseChanges:flash.display.Stage.__touchChanges;
		var new_n = stack.length;
		var new_obj = new_n > 0?stack[new_n - 1]:null;
		var old_n = prev.length;
		var old_obj = old_n > 0?prev[old_n - 1]:null;
		if(new_obj != old_obj) {
			if(old_obj != null) old_obj.__fireEvent(event.__createSimilar(changeEvents[0],new_obj,old_obj));
			if(new_obj != null) new_obj.__fireEvent(event.__createSimilar(changeEvents[1],old_obj,new_obj));
			var common = 0;
			while(common < new_n && common < old_n && stack[common] == prev[common]) common++;
			var rollOut = event.__createSimilar(changeEvents[2],new_obj,old_obj);
			var i = old_n - 1;
			while(i >= common) {
				prev[i].dispatchEvent(rollOut);
				i--;
			}
			var rollOver = event.__createSimilar(changeEvents[3],old_obj);
			var i1 = new_n - 1;
			while(i1 >= common) {
				stack[i1].dispatchEvent(rollOver);
				i1--;
			}
			if(touchInfo == null) this.__mouseOverObjects = stack; else touchInfo.touchOverObjects = stack;
		}
	}
	,toString: function() {
		return "[Stage id=" + this.___id + "]";
	}
	,invalidate: function() {
		this.__invalid = true;
	}
	,__class__: flash.display.Stage
	,__properties__: $extend(flash.display.DisplayObjectContainer.prototype.__properties__,{set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_color:"set_color",get_color:"get_color",set_displayState:"set_displayState",get_displayState:"get_displayState",set_focus:"set_focus",get_focus:"get_focus",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",get_fullScreenHeight:"get_fullScreenHeight",get_fullScreenWidth:"get_fullScreenWidth",set_quality:"set_quality",get_quality:"get_quality",set_showDefaultContextMenu:"set_showDefaultContextMenu",get_showDefaultContextMenu:"get_showDefaultContextMenu",get_stageHeight:"get_stageHeight",get_stageWidth:"get_stageWidth"})
});
flash.display._Stage = {}
flash.display._Stage.TouchInfo = function() {
	this.touchOverObjects = [];
};
$hxClasses["flash.display._Stage.TouchInfo"] = flash.display._Stage.TouchInfo;
flash.display._Stage.TouchInfo.__name__ = ["flash","display","_Stage","TouchInfo"];
flash.display._Stage.TouchInfo.prototype = {
	__class__: flash.display._Stage.TouchInfo
}
flash.display.StageAlign = $hxClasses["flash.display.StageAlign"] = { __ename__ : ["flash","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] }
flash.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
flash.display.StageAlign.TOP_RIGHT.toString = $estr;
flash.display.StageAlign.TOP_RIGHT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
flash.display.StageAlign.TOP_LEFT.toString = $estr;
flash.display.StageAlign.TOP_LEFT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.TOP = ["TOP",2];
flash.display.StageAlign.TOP.toString = $estr;
flash.display.StageAlign.TOP.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.RIGHT = ["RIGHT",3];
flash.display.StageAlign.RIGHT.toString = $estr;
flash.display.StageAlign.RIGHT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.LEFT = ["LEFT",4];
flash.display.StageAlign.LEFT.toString = $estr;
flash.display.StageAlign.LEFT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
flash.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
flash.display.StageAlign.BOTTOM_RIGHT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
flash.display.StageAlign.BOTTOM_LEFT.toString = $estr;
flash.display.StageAlign.BOTTOM_LEFT.__enum__ = flash.display.StageAlign;
flash.display.StageAlign.BOTTOM = ["BOTTOM",7];
flash.display.StageAlign.BOTTOM.toString = $estr;
flash.display.StageAlign.BOTTOM.__enum__ = flash.display.StageAlign;
flash.display.StageDisplayState = $hxClasses["flash.display.StageDisplayState"] = { __ename__ : ["flash","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] }
flash.display.StageDisplayState.NORMAL = ["NORMAL",0];
flash.display.StageDisplayState.NORMAL.toString = $estr;
flash.display.StageDisplayState.NORMAL.__enum__ = flash.display.StageDisplayState;
flash.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
flash.display.StageDisplayState.FULL_SCREEN.toString = $estr;
flash.display.StageDisplayState.FULL_SCREEN.__enum__ = flash.display.StageDisplayState;
flash.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
flash.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
flash.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = flash.display.StageDisplayState;
flash.display.StageQuality = function() { }
$hxClasses["flash.display.StageQuality"] = flash.display.StageQuality;
flash.display.StageQuality.__name__ = ["flash","display","StageQuality"];
flash.display.StageScaleMode = $hxClasses["flash.display.StageScaleMode"] = { __ename__ : ["flash","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] }
flash.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
flash.display.StageScaleMode.SHOW_ALL.toString = $estr;
flash.display.StageScaleMode.SHOW_ALL.__enum__ = flash.display.StageScaleMode;
flash.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
flash.display.StageScaleMode.NO_SCALE.toString = $estr;
flash.display.StageScaleMode.NO_SCALE.__enum__ = flash.display.StageScaleMode;
flash.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
flash.display.StageScaleMode.NO_BORDER.toString = $estr;
flash.display.StageScaleMode.NO_BORDER.__enum__ = flash.display.StageScaleMode;
flash.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
flash.display.StageScaleMode.EXACT_FIT.toString = $estr;
flash.display.StageScaleMode.EXACT_FIT.__enum__ = flash.display.StageScaleMode;
flash.errors = {}
flash.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
};
$hxClasses["flash.errors.Error"] = flash.errors.Error;
flash.errors.Error.__name__ = ["flash","errors","Error"];
flash.errors.Error.prototype = {
	toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,__class__: flash.errors.Error
}
flash.errors.IOError = function(message) {
	if(message == null) message = "";
	flash.errors.Error.call(this,message);
};
$hxClasses["flash.errors.IOError"] = flash.errors.IOError;
flash.errors.IOError.__name__ = ["flash","errors","IOError"];
flash.errors.IOError.__super__ = flash.errors.Error;
flash.errors.IOError.prototype = $extend(flash.errors.Error.prototype,{
	__class__: flash.errors.IOError
});
flash.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["flash.events.TextEvent"] = flash.events.TextEvent;
flash.events.TextEvent.__name__ = ["flash","events","TextEvent"];
flash.events.TextEvent.__super__ = flash.events.Event;
flash.events.TextEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.TextEvent
});
flash.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	flash.events.TextEvent.call(this,type,bubbles,cancelable);
	this.text = text;
	this.errorID = id;
};
$hxClasses["flash.events.ErrorEvent"] = flash.events.ErrorEvent;
flash.events.ErrorEvent.__name__ = ["flash","events","ErrorEvent"];
flash.events.ErrorEvent.__super__ = flash.events.TextEvent;
flash.events.ErrorEvent.prototype = $extend(flash.events.TextEvent.prototype,{
	__class__: flash.events.ErrorEvent
});
flash.events.Listener = function(inListener,inUseCapture,inPriority) {
	this.mListner = inListener;
	this.mUseCapture = inUseCapture;
	this.mPriority = inPriority;
	this.mID = flash.events.Listener.sIDs++;
};
$hxClasses["flash.events.Listener"] = flash.events.Listener;
flash.events.Listener.__name__ = ["flash","events","Listener"];
flash.events.Listener.prototype = {
	Is: function(inListener,inCapture) {
		return Reflect.compareMethods(this.mListner,inListener) && this.mUseCapture == inCapture;
	}
	,dispatchEvent: function(event) {
		this.mListner(event);
	}
	,__class__: flash.events.Listener
}
flash.events.EventPhase = function() { }
$hxClasses["flash.events.EventPhase"] = flash.events.EventPhase;
flash.events.EventPhase.__name__ = ["flash","events","EventPhase"];
flash.events.FocusEvent = function(type,bubbles,cancelable,inObject,inShiftKey,inKeyCode) {
	if(inKeyCode == null) inKeyCode = 0;
	if(inShiftKey == null) inShiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = inKeyCode;
	this.shiftKey = inShiftKey == null?false:inShiftKey;
	this.target = inObject;
};
$hxClasses["flash.events.FocusEvent"] = flash.events.FocusEvent;
flash.events.FocusEvent.__name__ = ["flash","events","FocusEvent"];
flash.events.FocusEvent.__super__ = flash.events.Event;
flash.events.FocusEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.FocusEvent
});
flash.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	flash.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["flash.events.HTTPStatusEvent"] = flash.events.HTTPStatusEvent;
flash.events.HTTPStatusEvent.__name__ = ["flash","events","HTTPStatusEvent"];
flash.events.HTTPStatusEvent.__super__ = flash.events.Event;
flash.events.HTTPStatusEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.HTTPStatusEvent
});
flash.events.IOErrorEvent = function(type,bubbles,cancelable,inText) {
	if(inText == null) inText = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.text = inText;
};
$hxClasses["flash.events.IOErrorEvent"] = flash.events.IOErrorEvent;
flash.events.IOErrorEvent.__name__ = ["flash","events","IOErrorEvent"];
flash.events.IOErrorEvent.__super__ = flash.events.Event;
flash.events.IOErrorEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.IOErrorEvent
});
flash.events.KeyboardEvent = function(type,bubbles,cancelable,inCharCode,inKeyCode,inKeyLocation,inCtrlKey,inAltKey,inShiftKey,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(inShiftKey == null) inShiftKey = false;
	if(inAltKey == null) inAltKey = false;
	if(inCtrlKey == null) inCtrlKey = false;
	if(inKeyLocation == null) inKeyLocation = 0;
	if(inKeyCode == null) inKeyCode = 0;
	if(inCharCode == null) inCharCode = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.altKey = inAltKey == null?false:inAltKey;
	this.charCode = inCharCode == null?0:inCharCode;
	this.ctrlKey = inCtrlKey == null?false:inCtrlKey;
	this.commandKey = commandKeyValue;
	this.controlKey = controlKeyValue;
	this.keyCode = inKeyCode;
	this.keyLocation = inKeyLocation == null?0:inKeyLocation;
	this.shiftKey = inShiftKey == null?false:inShiftKey;
};
$hxClasses["flash.events.KeyboardEvent"] = flash.events.KeyboardEvent;
flash.events.KeyboardEvent.__name__ = ["flash","events","KeyboardEvent"];
flash.events.KeyboardEvent.__super__ = flash.events.Event;
flash.events.KeyboardEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.KeyboardEvent
});
flash.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["flash.events.ProgressEvent"] = flash.events.ProgressEvent;
flash.events.ProgressEvent.__name__ = ["flash","events","ProgressEvent"];
flash.events.ProgressEvent.__super__ = flash.events.Event;
flash.events.ProgressEvent.prototype = $extend(flash.events.Event.prototype,{
	__class__: flash.events.ProgressEvent
});
flash.events.SecurityErrorEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	flash.events.ErrorEvent.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["flash.events.SecurityErrorEvent"] = flash.events.SecurityErrorEvent;
flash.events.SecurityErrorEvent.__name__ = ["flash","events","SecurityErrorEvent"];
flash.events.SecurityErrorEvent.__super__ = flash.events.ErrorEvent;
flash.events.SecurityErrorEvent.prototype = $extend(flash.events.ErrorEvent.prototype,{
	__class__: flash.events.SecurityErrorEvent
});
flash.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	flash.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["flash.events.TouchEvent"] = flash.events.TouchEvent;
flash.events.TouchEvent.__name__ = ["flash","events","TouchEvent"];
flash.events.TouchEvent.__create = function(type,event,touch,local,target) {
	var evt = new flash.events.TouchEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,false,0,null,0);
	evt.stageX = flash.Lib.get_current().get_stage().get_mouseX();
	evt.stageY = flash.Lib.get_current().get_stage().get_mouseY();
	evt.target = target;
	return evt;
}
flash.events.TouchEvent.__super__ = flash.events.Event;
flash.events.TouchEvent.prototype = $extend(flash.events.Event.prototype,{
	__createSimilar: function(type,related,targ) {
		var result = new flash.events.TouchEvent(type,this.bubbles,this.cancelable,this.localX,this.localY,related == null?this.relatedObject:related,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey);
		result.touchPointID = this.touchPointID;
		result.isPrimaryTouchPoint = this.isPrimaryTouchPoint;
		if(targ != null) result.target = targ;
		return result;
	}
	,__class__: flash.events.TouchEvent
});
flash.filters = {}
flash.filters.BitmapFilter = function(inType) {
	this._mType = inType;
};
$hxClasses["flash.filters.BitmapFilter"] = flash.filters.BitmapFilter;
flash.filters.BitmapFilter.__name__ = ["flash","filters","BitmapFilter"];
flash.filters.BitmapFilter.prototype = {
	__applyFilter: function(surface,rect,refreshCache) {
		if(refreshCache == null) refreshCache = false;
	}
	,__preFilter: function(surface) {
	}
	,clone: function() {
		return new flash.filters.BitmapFilter(this._mType);
	}
	,__class__: flash.filters.BitmapFilter
}
flash.filters.DropShadowFilter = function(in_distance,in_angle,in_color,in_alpha,in_blurX,in_blurY,in_strength,in_quality,in_inner,in_knockout,in_hideObject) {
	if(in_hideObject == null) in_hideObject = false;
	if(in_knockout == null) in_knockout = false;
	if(in_inner == null) in_inner = false;
	if(in_quality == null) in_quality = 1;
	if(in_strength == null) in_strength = 1.0;
	if(in_blurY == null) in_blurY = 4.0;
	if(in_blurX == null) in_blurX = 4.0;
	if(in_alpha == null) in_alpha = 1.0;
	if(in_color == null) in_color = 0;
	if(in_angle == null) in_angle = 45.0;
	if(in_distance == null) in_distance = 4.0;
	flash.filters.BitmapFilter.call(this,"DropShadowFilter");
	this.distance = in_distance;
	this.angle = in_angle;
	this.color = in_color;
	this.alpha = in_alpha;
	this.blurX = in_blurX;
	this.blurY = in_blurX;
	this.strength = in_strength;
	this.quality = in_quality;
	this.inner = in_inner;
	this.knockout = in_knockout;
	this.hideObject = in_hideObject;
	this.___cached = false;
};
$hxClasses["flash.filters.DropShadowFilter"] = flash.filters.DropShadowFilter;
flash.filters.DropShadowFilter.__name__ = ["flash","filters","DropShadowFilter"];
flash.filters.DropShadowFilter.__super__ = flash.filters.BitmapFilter;
flash.filters.DropShadowFilter.prototype = $extend(flash.filters.BitmapFilter.prototype,{
	__applyFilter: function(surface,rect,refreshCache) {
		if(refreshCache == null) refreshCache = false;
		if(!this.___cached || refreshCache) {
			var distanceX = this.distance * Math.sin(2 * Math.PI * this.angle / 360.0);
			var distanceY = this.distance * Math.cos(2 * Math.PI * this.angle / 360.0);
			var blurRadius = Math.max(this.blurX,this.blurY);
			var context = surface.getContext("2d");
			context.shadowOffsetX = distanceX;
			context.shadowOffsetY = distanceY;
			context.shadowBlur = blurRadius;
			context.shadowColor = "rgba(" + (this.color >> 16 & 255) + "," + (this.color >> 8 & 255) + "," + (this.color & 255) + "," + this.alpha + ")";
			this.___cached = true;
		}
	}
	,clone: function() {
		return new flash.filters.DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__class__: flash.filters.DropShadowFilter
});
flash.geom = {}
flash.geom.ColorTransform = function(inRedMultiplier,inGreenMultiplier,inBlueMultiplier,inAlphaMultiplier,inRedOffset,inGreenOffset,inBlueOffset,inAlphaOffset) {
	if(inAlphaOffset == null) inAlphaOffset = 0;
	if(inBlueOffset == null) inBlueOffset = 0;
	if(inGreenOffset == null) inGreenOffset = 0;
	if(inRedOffset == null) inRedOffset = 0;
	if(inAlphaMultiplier == null) inAlphaMultiplier = 1;
	if(inBlueMultiplier == null) inBlueMultiplier = 1;
	if(inGreenMultiplier == null) inGreenMultiplier = 1;
	if(inRedMultiplier == null) inRedMultiplier = 1;
	this.redMultiplier = inRedMultiplier == null?1.0:inRedMultiplier;
	this.greenMultiplier = inGreenMultiplier == null?1.0:inGreenMultiplier;
	this.blueMultiplier = inBlueMultiplier == null?1.0:inBlueMultiplier;
	this.alphaMultiplier = inAlphaMultiplier == null?1.0:inAlphaMultiplier;
	this.redOffset = inRedOffset == null?0.0:inRedOffset;
	this.greenOffset = inGreenOffset == null?0.0:inGreenOffset;
	this.blueOffset = inBlueOffset == null?0.0:inBlueOffset;
	this.alphaOffset = inAlphaOffset == null?0.0:inAlphaOffset;
};
$hxClasses["flash.geom.ColorTransform"] = flash.geom.ColorTransform;
flash.geom.ColorTransform.__name__ = ["flash","geom","ColorTransform"];
flash.geom.ColorTransform.prototype = {
	set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__class__: flash.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
}
flash.geom.Matrix = function(in_a,in_b,in_c,in_d,in_tx,in_ty) {
	if(in_ty == null) in_ty = 0;
	if(in_tx == null) in_tx = 0;
	if(in_d == null) in_d = 1;
	if(in_c == null) in_c = 0;
	if(in_b == null) in_b = 0;
	if(in_a == null) in_a = 1;
	this.a = in_a;
	this.b = in_b;
	this.c = in_c;
	this.d = in_d;
	this.set_tx(in_tx);
	this.set_ty(in_ty);
	this._sx = 1.0;
	this._sy = 1.0;
};
$hxClasses["flash.geom.Matrix"] = flash.geom.Matrix;
flash.geom.Matrix.__name__ = ["flash","geom","Matrix"];
flash.geom.Matrix.prototype = {
	set_ty: function(inValue) {
		this.ty = inValue;
		return this.ty;
	}
	,set_tx: function(inValue) {
		this.tx = inValue;
		return this.tx;
	}
	,__translateTransformed: function(inPos) {
		this.set_tx(inPos.x * this.a + inPos.y * this.c + this.tx);
		this.set_ty(inPos.x * this.b + inPos.y * this.d + this.ty);
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,__transformY: function(inPos) {
		return inPos.x * this.b + inPos.y * this.d + this.ty;
	}
	,__transformX: function(inPos) {
		return inPos.x * this.a + inPos.y * this.c + this.tx;
	}
	,translate: function(inDX,inDY) {
		var m = new flash.geom.Matrix();
		m.set_tx(inDX);
		m.set_ty(inDY);
		this.concat(m);
	}
	,transformPoint: function(inPos) {
		return new flash.geom.Point(inPos.x * this.a + inPos.y * this.c + this.tx,inPos.x * this.b + inPos.y * this.d + this.ty);
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,to3DString: function() {
		return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", " + "0, 1" + ")";
	}
	,setRotation: function(inTheta,inScale) {
		if(inScale == null) inScale = 1;
		var scale = inScale;
		this.a = Math.cos(inTheta) * scale;
		this.c = Math.sin(inTheta) * scale;
		this.b = -this.c;
		this.d = this.a;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,scale: function(inSX,inSY) {
		this._sx = inSX;
		this._sy = inSY;
		this.a *= inSX;
		this.b *= inSY;
		this.c *= inSX;
		this.d *= inSY;
		var _g = this;
		_g.set_tx(_g.tx * inSX);
		var _g = this;
		_g.set_ty(_g.ty * inSY);
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,rotate: function(inTheta) {
		var cos = Math.cos(inTheta);
		var sin = Math.sin(inTheta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.set_ty(this.tx * sin + this.ty * cos);
		this.set_tx(tx1);
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,mult: function(m) {
		var result = this.clone();
		result.concat(m);
		return result;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.set_tx(-this.tx);
			this.set_ty(-this.ty);
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.set_ty(-this.b * this.tx - this.d * this.ty);
			this.set_tx(tx1);
		}
		this._sx /= this._sx;
		this._sy /= this._sy;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
		return this;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.set_tx(0);
		this.set_ty(0);
		this._sx = 1.0;
		this._sy = 1.0;
	}
	,createGradientBox: function(in_width,in_height,rotation,in_tx,in_ty) {
		if(in_ty == null) in_ty = 0;
		if(in_tx == null) in_tx = 0;
		if(rotation == null) rotation = 0;
		this.a = in_width / 1638.4;
		this.d = in_height / 1638.4;
		if(rotation != null && rotation != 0.0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.set_tx(in_tx != null?in_tx + in_width / 2:in_width / 2);
		this.set_ty(in_ty != null?in_ty + in_height / 2:in_height / 2);
	}
	,copy: function(m) {
		this.a = m.a;
		this.b = m.b;
		this.c = m.c;
		this.d = m.d;
		this.set_tx(m.tx);
		this.set_ty(m.ty);
		this._sx = m._sx;
		this._sy = m._sy;
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.set_ty(this.tx * m.b + this.ty * m.d + m.ty);
		this.set_tx(tx1);
		this._sx *= m._sx;
		this._sy *= m._sy;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,clone: function() {
		var m = new flash.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
		m._sx = this._sx;
		m._sy = this._sy;
		return m;
	}
	,cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.set_tx(Math.round(this.tx * 10) / 10);
		this.set_ty(Math.round(this.ty * 10) / 10);
	}
	,__class__: flash.geom.Matrix
	,__properties__: {set_tx:"set_tx",set_ty:"set_ty"}
}
flash.geom.Point = function(inX,inY) {
	if(inY == null) inY = 0;
	if(inX == null) inX = 0;
	this.x = inX;
	this.y = inY;
};
$hxClasses["flash.geom.Point"] = flash.geom.Point;
flash.geom.Point.__name__ = ["flash","geom","Point"];
flash.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
}
flash.geom.Point.interpolate = function(pt1,pt2,f) {
	return new flash.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
}
flash.geom.Point.polar = function(len,angle) {
	return new flash.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
}
flash.geom.Point.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,subtract: function(v) {
		return new flash.geom.Point(this.x - v.x,this.y - v.y);
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,equals: function(toCompare) {
		return toCompare.x == this.x && toCompare.y == this.y;
	}
	,clone: function() {
		return new flash.geom.Point(this.x,this.y);
	}
	,add: function(v) {
		return new flash.geom.Point(v.x + this.x,v.y + this.y);
	}
	,__class__: flash.geom.Point
	,__properties__: {get_length:"get_length"}
}
flash.geom.Rectangle = function(inX,inY,inWidth,inHeight) {
	if(inHeight == null) inHeight = 0;
	if(inWidth == null) inWidth = 0;
	if(inY == null) inY = 0;
	if(inX == null) inX = 0;
	this.x = inX;
	this.y = inY;
	this.width = inWidth;
	this.height = inHeight;
};
$hxClasses["flash.geom.Rectangle"] = flash.geom.Rectangle;
flash.geom.Rectangle.__name__ = ["flash","geom","Rectangle"];
flash.geom.Rectangle.prototype = {
	set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,get_topLeft: function() {
		return new flash.geom.Point(this.x,this.y);
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_top: function() {
		return this.y;
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_size: function() {
		return new flash.geom.Point(this.width,this.height);
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_left: function() {
		return this.x;
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_bottomRight: function() {
		return new flash.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,union: function(toUnion) {
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom();
		return new flash.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new flash.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) return false;
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		return y1 > y0;
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) return new flash.geom.Rectangle();
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) return new flash.geom.Rectangle();
		return new flash.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,extendBounds: function(r) {
		var dx = this.x - r.x;
		if(dx > 0) {
			this.x -= dx;
			this.width += dx;
		}
		var dy = this.y - r.y;
		if(dy > 0) {
			this.y -= dy;
			this.height += dy;
		}
		if(r.get_right() > this.get_right()) this.set_right(r.get_right());
		if(r.get_bottom() > this.get_bottom()) this.set_bottom(r.get_bottom());
	}
	,equals: function(toCompare) {
		return this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,contains: function(inX,inY) {
		return inX >= this.x && inY >= this.y && inX < this.get_right() && inY < this.get_bottom();
	}
	,clone: function() {
		return new flash.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,__class__: flash.geom.Rectangle
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_left:"set_left",get_left:"get_left",set_right:"set_right",get_right:"get_right",set_size:"set_size",get_size:"get_size",set_top:"set_top",get_top:"get_top",set_topLeft:"set_topLeft",get_topLeft:"get_topLeft"}
}
flash.geom.Transform = function(displayObject) {
	if(displayObject == null) throw "Cannot create Transform with no DisplayObject.";
	this._displayObject = displayObject;
	this._matrix = new flash.geom.Matrix();
	this._fullMatrix = new flash.geom.Matrix();
	this.set_colorTransform(new flash.geom.ColorTransform());
};
$hxClasses["flash.geom.Transform"] = flash.geom.Transform;
flash.geom.Transform.__name__ = ["flash","geom","Transform"];
flash.geom.Transform.prototype = {
	get_pixelBounds: function() {
		return this._displayObject.getBounds(null);
	}
	,set_matrix: function(inValue) {
		this._matrix.copy(inValue);
		this._displayObject.__matrixOverridden();
		return this._matrix;
	}
	,get_matrix: function() {
		return this._matrix.clone();
	}
	,get_concatenatedMatrix: function() {
		return this.__getFullMatrix(this._matrix);
	}
	,set_colorTransform: function(inValue) {
		this.colorTransform = inValue;
		return inValue;
	}
	,__setMatrix: function(inValue) {
		this._matrix.copy(inValue);
	}
	,__setFullMatrix: function(inValue) {
		this._fullMatrix.copy(inValue);
		return this._fullMatrix;
	}
	,__getFullMatrix: function(localMatrix) {
		var m;
		if(localMatrix != null) m = localMatrix.mult(this._fullMatrix); else m = this._fullMatrix.clone();
		return m;
	}
	,__class__: flash.geom.Transform
	,__properties__: {set_colorTransform:"set_colorTransform",get_concatenatedMatrix:"get_concatenatedMatrix",set_matrix:"set_matrix",get_matrix:"get_matrix",get_pixelBounds:"get_pixelBounds"}
}
flash.media = {}
flash.media.Sound = function(stream,context) {
	flash.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	this.__soundChannels = new haxe.ds.IntMap();
	this.__soundIdx = 0;
	if(stream != null) this.load(stream,context);
};
$hxClasses["flash.media.Sound"] = flash.media.Sound;
flash.media.Sound.__name__ = ["flash","media","Sound"];
flash.media.Sound.__canPlayMime = function(mime) {
	var audio = js.Browser.document.createElement("audio");
	var playable = function(ok) {
		if(ok != "" && ok != "no") return true; else return false;
	};
	return playable(audio.canPlayType(mime,null));
}
flash.media.Sound.__canPlayType = function(extension) {
	var mime = flash.media.Sound.__mimeForExtension(extension);
	if(mime == null) return false;
	return flash.media.Sound.__canPlayMime(mime);
}
flash.media.Sound.__mimeForExtension = function(extension) {
	var mime = null;
	switch(extension) {
	case "mp3":
		mime = "audio/mpeg";
		break;
	case "ogg":
		mime = "audio/ogg; codecs=\"vorbis\"";
		break;
	case "wav":
		mime = "audio/wav; codecs=\"1\"";
		break;
	case "aac":
		mime = "audio/mp4; codecs=\"mp4a.40.2\"";
		break;
	default:
		mime = null;
	}
	return mime;
}
flash.media.Sound.__super__ = flash.events.EventDispatcher;
flash.media.Sound.prototype = $extend(flash.events.EventDispatcher.prototype,{
	__onSoundLoaded: function(evt) {
		this.__removeEventListeners();
		var evt1 = new flash.events.Event(flash.events.Event.COMPLETE);
		this.dispatchEvent(evt1);
	}
	,__onSoundLoadError: function(evt) {
		this.__removeEventListeners();
		var evt1 = new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR);
		this.dispatchEvent(evt1);
	}
	,__removeEventListeners: function() {
		this.__soundCache.removeEventListener(flash.events.Event.COMPLETE,$bind(this,this.__onSoundLoaded),false);
		this.__soundCache.removeEventListener(flash.events.IOErrorEvent.IO_ERROR,$bind(this,this.__onSoundLoadError),false);
	}
	,__load: function(stream,context,mime) {
		if(mime == null) mime = "";
		this.__streamUrl = stream.url;
		try {
			this.__soundCache = new flash.net.URLLoader();
			this.__addEventListeners();
			this.__soundCache.load(stream);
		} catch( e ) {
		}
	}
	,__addEventListeners: function() {
		this.__soundCache.addEventListener(flash.events.Event.COMPLETE,$bind(this,this.__onSoundLoaded));
		this.__soundCache.addEventListener(flash.events.IOErrorEvent.IO_ERROR,$bind(this,this.__onSoundLoadError));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(this.__streamUrl == null) return null;
		var self = this;
		var curIdx = this.__soundIdx;
		var removeRef = function() {
			self.__soundChannels.remove(curIdx);
		};
		var channel = flash.media.SoundChannel.__create(this.__streamUrl,startTime,loops,sndTransform,removeRef);
		this.__soundChannels.set(curIdx,channel);
		this.__soundIdx++;
		var audio = channel.__audio;
		return channel;
	}
	,load: function(stream,context) {
		this.__load(stream,context);
	}
	,close: function() {
	}
	,__class__: flash.media.Sound
});
flash.media.SoundChannel = function() {
	flash.events.EventDispatcher.call(this,this);
	this.ChannelId = -1;
	this.leftPeak = 0.;
	this.position = 0.;
	this.rightPeak = 0.;
	this.__audioCurrentLoop = 1;
	this.__audioTotalLoops = 1;
};
$hxClasses["flash.media.SoundChannel"] = flash.media.SoundChannel;
flash.media.SoundChannel.__name__ = ["flash","media","SoundChannel"];
flash.media.SoundChannel.__create = function(src,startTime,loops,sndTransform,removeRef) {
	if(loops == null) loops = 0;
	if(startTime == null) startTime = 0.0;
	var channel = new flash.media.SoundChannel();
	channel.__audio = js.Browser.document.createElement("audio");
	channel.__removeRef = removeRef;
	channel.__audio.addEventListener("ended",$bind(channel,channel.__onSoundChannelFinished),false);
	channel.__audio.addEventListener("seeked",$bind(channel,channel.__onSoundSeeked),false);
	channel.__audio.addEventListener("stalled",$bind(channel,channel.__onStalled),false);
	channel.__audio.addEventListener("progress",$bind(channel,channel.__onProgress),false);
	if(loops > 0) {
		channel.__audioTotalLoops = loops;
		channel.__audio.loop = true;
	}
	channel.__startTime = startTime;
	if(startTime > 0.) {
		var onLoad = null;
		onLoad = function(_) {
			channel.__audio.currentTime = channel.__startTime;
			channel.__audio.play();
			channel.__audio.removeEventListener("canplaythrough",onLoad,false);
		};
		channel.__audio.addEventListener("canplaythrough",onLoad,false);
	} else channel.__audio.autoplay = true;
	channel.__audio.src = src;
	return channel;
}
flash.media.SoundChannel.__super__ = flash.events.EventDispatcher;
flash.media.SoundChannel.prototype = $extend(flash.events.EventDispatcher.prototype,{
	set_soundTransform: function(v) {
		this.__audio.volume = v.volume;
		return this.soundTransform = v;
	}
	,__onStalled: function(evt) {
		if(this.__audio != null) this.__audio.load();
	}
	,__onSoundSeeked: function(evt) {
		if(this.__audioCurrentLoop >= this.__audioTotalLoops) {
			this.__audio.loop = false;
			this.stop();
		} else this.__audioCurrentLoop++;
	}
	,__onSoundChannelFinished: function(evt) {
		if(this.__audioCurrentLoop >= this.__audioTotalLoops) {
			this.__audio.removeEventListener("ended",$bind(this,this.__onSoundChannelFinished),false);
			this.__audio.removeEventListener("seeked",$bind(this,this.__onSoundSeeked),false);
			this.__audio.removeEventListener("stalled",$bind(this,this.__onStalled),false);
			this.__audio.removeEventListener("progress",$bind(this,this.__onProgress),false);
			this.__audio = null;
			var evt1 = new flash.events.Event(flash.events.Event.SOUND_COMPLETE);
			evt1.target = this;
			this.dispatchEvent(evt1);
			if(this.__removeRef != null) this.__removeRef();
		} else {
			this.__audio.currentTime = this.__startTime;
			this.__audio.play();
		}
	}
	,__onProgress: function(evt) {
	}
	,stop: function() {
		if(this.__audio != null) {
			this.__audio.pause();
			this.__audio = null;
			if(this.__removeRef != null) this.__removeRef();
		}
	}
	,__class__: flash.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform"}
});
flash.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["flash.media.SoundLoaderContext"] = flash.media.SoundLoaderContext;
flash.media.SoundLoaderContext.__name__ = ["flash","media","SoundLoaderContext"];
flash.media.SoundLoaderContext.prototype = {
	__class__: flash.media.SoundLoaderContext
}
flash.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["flash.media.SoundTransform"] = flash.media.SoundTransform;
flash.media.SoundTransform.__name__ = ["flash","media","SoundTransform"];
flash.media.SoundTransform.prototype = {
	__class__: flash.media.SoundTransform
}
flash.net = {}
flash.net.SharedObject = function() {
	flash.events.EventDispatcher.call(this);
};
$hxClasses["flash.net.SharedObject"] = flash.net.SharedObject;
flash.net.SharedObject.__name__ = ["flash","net","SharedObject"];
flash.net.SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) secure = false;
	if(localPath == null) localPath = js.Browser.window.location.href;
	var so = new flash.net.SharedObject();
	so.__key = localPath + ":" + name;
	var rawData = null;
	try {
		rawData = flash.net.SharedObject.__getLocalStorage().getItem(so.__key);
	} catch( e ) {
	}
	so.data = { };
	if(rawData != null && rawData != "") {
		var unserializer = new haxe.Unserializer(rawData);
		unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : flash.net.SharedObject.resolveClass});
		so.data = unserializer.unserialize();
	}
	if(so.data == null) so.data = { };
	return so;
}
flash.net.SharedObject.__getLocalStorage = function() {
	var res = js.Browser.getLocalStorage();
	if(res == null) throw new flash.errors.Error("SharedObject not supported");
	return res;
}
flash.net.SharedObject.resolveClass = function(name) {
	if(name != null) return Type.resolveClass(StringTools.replace(StringTools.replace(name,"jeash.","flash."),"browser.","flash."));
	return null;
}
flash.net.SharedObject.__super__ = flash.events.EventDispatcher;
flash.net.SharedObject.prototype = $extend(flash.events.EventDispatcher.prototype,{
	get_size: function() {
		var d = haxe.Serializer.run(this.data);
		return haxe.io.Bytes.ofString(d).length;
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) this.data[propertyName] = value;
	}
	,flush: function() {
		var data = haxe.Serializer.run(this.data);
		try {
			flash.net.SharedObject.__getLocalStorage().removeItem(this.__key);
			flash.net.SharedObject.__getLocalStorage().setItem(this.__key,data);
		} catch( e ) {
			return flash.net.SharedObjectFlushStatus.PENDING;
		}
		return flash.net.SharedObjectFlushStatus.FLUSHED;
	}
	,clear: function() {
		this.data = { };
		try {
			flash.net.SharedObject.__getLocalStorage().removeItem(this.__key);
		} catch( e ) {
		}
		this.flush();
	}
	,__class__: flash.net.SharedObject
	,__properties__: {get_size:"get_size"}
});
flash.net.SharedObjectFlushStatus = $hxClasses["flash.net.SharedObjectFlushStatus"] = { __ename__ : ["flash","net","SharedObjectFlushStatus"], __constructs__ : ["FLUSHED","PENDING"] }
flash.net.SharedObjectFlushStatus.FLUSHED = ["FLUSHED",0];
flash.net.SharedObjectFlushStatus.FLUSHED.toString = $estr;
flash.net.SharedObjectFlushStatus.FLUSHED.__enum__ = flash.net.SharedObjectFlushStatus;
flash.net.SharedObjectFlushStatus.PENDING = ["PENDING",1];
flash.net.SharedObjectFlushStatus.PENDING.toString = $estr;
flash.net.SharedObjectFlushStatus.PENDING.__enum__ = flash.net.SharedObjectFlushStatus;
flash.net.URLLoader = function(request) {
	flash.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(flash.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["flash.net.URLLoader"] = flash.net.URLLoader;
flash.net.URLLoader.__name__ = ["flash","net","URLLoader"];
flash.net.URLLoader.__super__ = flash.events.EventDispatcher;
flash.net.URLLoader.prototype = $extend(flash.events.EventDispatcher.prototype,{
	set_dataFormat: function(inputVal) {
		if(inputVal == flash.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(js.Browser.window,"ArrayBuffer")) this.dataFormat = flash.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,onStatus: function(status) {
		var evt = new flash.events.HTTPStatusEvent(flash.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new flash.events.SecurityErrorEvent(flash.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new flash.events.Event(flash.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this;
		switch( (_g.dataFormat)[1] ) {
		case 0:
			this.data = flash.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new flash.events.Event(flash.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,flash.utils.ByteArray)) {
			var data1 = data;
			var _g = this;
			switch( (_g.dataFormat)[1] ) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,flash.net.URLVariables)) {
			var data1 = data;
			var _g = 0, _g1 = Reflect.fields(data1);
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri.length != 0) uri += "&";
				uri += StringTools.urlEncode(p) + "=" + StringTools.urlEncode(Reflect.field(data1,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g = this;
		switch( (_g.dataFormat)[1] ) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g1 = 0;
		while(_g1 < requestHeaders.length) {
			var header = requestHeaders[_g1];
			++_g1;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s = (function($this) {
				var $r;
				try {
					$r = subject.status;
				} catch( e ) {
					$r = null;
				}
				return $r;
			}(this));
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,getData: function() {
		return null;
	}
	,close: function() {
	}
	,__class__: flash.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
flash.net.URLLoaderDataFormat = $hxClasses["flash.net.URLLoaderDataFormat"] = { __ename__ : ["flash","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] }
flash.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
flash.net.URLLoaderDataFormat.BINARY.toString = $estr;
flash.net.URLLoaderDataFormat.BINARY.__enum__ = flash.net.URLLoaderDataFormat;
flash.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
flash.net.URLLoaderDataFormat.TEXT.toString = $estr;
flash.net.URLLoaderDataFormat.TEXT.__enum__ = flash.net.URLLoaderDataFormat;
flash.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
flash.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
flash.net.URLLoaderDataFormat.VARIABLES.__enum__ = flash.net.URLLoaderDataFormat;
flash.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = flash.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["flash.net.URLRequest"] = flash.net.URLRequest;
flash.net.URLRequest.__name__ = ["flash","net","URLRequest"];
flash.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == flash.net.URLRequestMethod.GET || this.data == null) return res;
		if(js.Boot.__instanceof(this.data,String) || js.Boot.__instanceof(this.data,flash.utils.ByteArray)) {
			res = res.slice();
			res.push(new flash.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: flash.net.URLRequest
}
flash.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["flash.net.URLRequestHeader"] = flash.net.URLRequestHeader;
flash.net.URLRequestHeader.__name__ = ["flash","net","URLRequestHeader"];
flash.net.URLRequestHeader.prototype = {
	__class__: flash.net.URLRequestHeader
}
flash.net.URLRequestMethod = function() { }
$hxClasses["flash.net.URLRequestMethod"] = flash.net.URLRequestMethod;
flash.net.URLRequestMethod.__name__ = ["flash","net","URLRequestMethod"];
flash.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["flash.net.URLVariables"] = flash.net.URLVariables;
flash.net.URLVariables.__name__ = ["flash","net","URLVariables"];
flash.net.URLVariables.prototype = {
	toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(StringTools.urlEncode(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g = 0;
		while(_g < fields1.length) {
			var f = fields1[_g];
			++_g;
			var eq = f.indexOf("=");
			if(eq > 0) this[StringTools.urlDecode(HxOverrides.substr(f,0,eq))] = StringTools.urlDecode(HxOverrides.substr(f,eq + 1,null)); else if(eq != 0) this[StringTools.urlDecode(f)] = "";
		}
	}
	,__class__: flash.net.URLVariables
}
flash.system = {}
flash.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = flash.system.ApplicationDomain.currentDomain;
};
$hxClasses["flash.system.ApplicationDomain"] = flash.system.ApplicationDomain;
flash.system.ApplicationDomain.__name__ = ["flash","system","ApplicationDomain"];
flash.system.ApplicationDomain.prototype = {
	hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,__class__: flash.system.ApplicationDomain
}
flash.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	if(applicationDomain != null) this.applicationDomain = applicationDomain; else this.applicationDomain = flash.system.ApplicationDomain.currentDomain;
};
$hxClasses["flash.system.LoaderContext"] = flash.system.LoaderContext;
flash.system.LoaderContext.__name__ = ["flash","system","LoaderContext"];
flash.system.LoaderContext.prototype = {
	__class__: flash.system.LoaderContext
}
flash.system.SecurityDomain = function() {
};
$hxClasses["flash.system.SecurityDomain"] = flash.system.SecurityDomain;
flash.system.SecurityDomain.__name__ = ["flash","system","SecurityDomain"];
flash.system.SecurityDomain.prototype = {
	__class__: flash.system.SecurityDomain
}
flash.text = {}
flash.text.AntiAliasType = function() { }
$hxClasses["flash.text.AntiAliasType"] = flash.text.AntiAliasType;
flash.text.AntiAliasType.__name__ = ["flash","text","AntiAliasType"];
flash.text.Font = function() {
	this.__metrics = [];
	this.__fontScale = 9.0;
	var className = Type.getClassName(Type.getClass(this));
	if(flash.text.Font.__fontData == null) {
		flash.text.Font.__fontData = [];
		flash.text.Font.__fontData["Bitstream_Vera_Sans"] = haxe.Unserializer.run(flash.text.Font.DEFAULT_FONT_DATA);
	}
	if(className == "flash.text.Font") this.set_fontName("Bitstream_Vera_Sans"); else this.set_fontName(className.split(".").pop());
};
$hxClasses["flash.text.Font"] = flash.text.Font;
flash.text.Font.__name__ = ["flash","text","Font"];
flash.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return flash.text.Font.__registeredFonts.slice();
}
flash.text.Font.__ofResource = function(resourceName,fontName) {
	if(fontName == null) fontName = "";
	var data = haxe.Unserializer.run(haxe.Resource.getString(resourceName));
	if(data == null) {
	} else {
		if(fontName == "") {
			flash.text.Font.__fontData[resourceName] = data.hash;
			fontName = data.fontName;
		}
		flash.text.Font.__fontData[data.fontName] = data.hash;
	}
	return fontName;
}
flash.text.Font.registerFont = function(font) {
	var instance = js.Boot.__cast(Type.createInstance(font,[]) , flash.text.Font);
	if(instance != null) {
		if(Reflect.hasField(font,"resourceName")) instance.set_fontName(flash.text.Font.__ofResource(Reflect.field(font,"resourceName")));
		flash.text.Font.__registeredFonts.push(instance);
	}
}
flash.text.Font.prototype = {
	set_fontName: function(name) {
		if(name == "_sans" || name == "_serif" || name == "_typewriter") name = "Bitstream_Vera_Sans";
		this.fontName = name;
		if(flash.text.Font.__fontData[this.fontName] == null) try {
			flash.text.Font.__ofResource(name);
		} catch( e ) {
			this.fontName = "Bitstream_Vera_Sans";
		}
		if(flash.text.Font.__fontData[this.fontName] != null) try {
			this.__glyphData = flash.text.Font.__fontData[this.fontName];
		} catch( e ) {
			this.fontName = "Bitstream_Vera_Sans";
		}
		return name;
	}
	,__setScale: function(scale) {
		this.__fontScale = scale / 1024;
	}
	,__render: function(graphics,inChar,inX,inY,inOutline) {
		var index = 0;
		var glyph = this.__glyphData.get(inChar);
		if(glyph == null) return;
		var commands = glyph.commands;
		var data = glyph.data;
		var _g = 0;
		while(_g < commands.length) {
			var c = commands[_g];
			++_g;
			switch(c) {
			case 1:
				graphics.moveTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			case 2:
				graphics.lineTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			case 3:
				graphics.curveTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale,inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			}
		}
	}
	,__getAdvance: function(inGlyph,height) {
		var m = this.__metrics[inGlyph];
		if(m == null) {
			var glyph = this.__glyphData.get(inGlyph);
			if(glyph == null) return 0;
			this.__metrics[inGlyph] = m = glyph._width * this.__fontScale | 0;
		}
		if(m == null) return 0;
		return m;
	}
	,hasGlyph: function(str) {
		return this.__glyphData.exists(HxOverrides.cca(str,0));
	}
	,__class__: flash.text.Font
	,__properties__: {set_fontName:"set_fontName"}
}
flash.text.FontStyle = $hxClasses["flash.text.FontStyle"] = { __ename__ : ["flash","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] }
flash.text.FontStyle.REGULAR = ["REGULAR",0];
flash.text.FontStyle.REGULAR.toString = $estr;
flash.text.FontStyle.REGULAR.__enum__ = flash.text.FontStyle;
flash.text.FontStyle.ITALIC = ["ITALIC",1];
flash.text.FontStyle.ITALIC.toString = $estr;
flash.text.FontStyle.ITALIC.__enum__ = flash.text.FontStyle;
flash.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
flash.text.FontStyle.BOLD_ITALIC.toString = $estr;
flash.text.FontStyle.BOLD_ITALIC.__enum__ = flash.text.FontStyle;
flash.text.FontStyle.BOLD = ["BOLD",3];
flash.text.FontStyle.BOLD.toString = $estr;
flash.text.FontStyle.BOLD.__enum__ = flash.text.FontStyle;
flash.text.FontType = $hxClasses["flash.text.FontType"] = { __ename__ : ["flash","text","FontType"], __constructs__ : ["EMBEDDED","DEVICE"] }
flash.text.FontType.EMBEDDED = ["EMBEDDED",0];
flash.text.FontType.EMBEDDED.toString = $estr;
flash.text.FontType.EMBEDDED.__enum__ = flash.text.FontType;
flash.text.FontType.DEVICE = ["DEVICE",1];
flash.text.FontType.DEVICE.toString = $estr;
flash.text.FontType.DEVICE.__enum__ = flash.text.FontType;
flash.text.GridFitType = $hxClasses["flash.text.GridFitType"] = { __ename__ : ["flash","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] }
flash.text.GridFitType.NONE = ["NONE",0];
flash.text.GridFitType.NONE.toString = $estr;
flash.text.GridFitType.NONE.__enum__ = flash.text.GridFitType;
flash.text.GridFitType.PIXEL = ["PIXEL",1];
flash.text.GridFitType.PIXEL.toString = $estr;
flash.text.GridFitType.PIXEL.__enum__ = flash.text.GridFitType;
flash.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
flash.text.GridFitType.SUBPIXEL.toString = $estr;
flash.text.GridFitType.SUBPIXEL.__enum__ = flash.text.GridFitType;
flash.text.TextField = function() {
	flash.display.InteractiveObject.call(this);
	this.mWidth = 100;
	this.mHeight = 20;
	this.mHTMLMode = false;
	this.multiline = false;
	this.__graphics = new flash.display.Graphics();
	this.mFace = flash.text.TextField.mDefaultFont;
	this.mAlign = flash.text.TextFormatAlign.LEFT;
	this.mParagraphs = new Array();
	this.mSelStart = -1;
	this.mSelEnd = -1;
	this.scrollH = 0;
	this.scrollV = 1;
	this.mType = flash.text.TextFieldType.DYNAMIC;
	this.set_autoSize("NONE");
	this.mTextHeight = 12;
	this.mMaxHeight = this.mTextHeight;
	this.mHTMLText = " ";
	this.mText = " ";
	this.mTextColour = 0;
	this.tabEnabled = false;
	this.mTryFreeType = true;
	this.selectable = true;
	this.mInsertPos = 0;
	this.__inputEnabled = false;
	this.mDownChar = 0;
	this.mSelectDrag = -1;
	this.mLineInfo = [];
	this.set_defaultTextFormat(new flash.text.TextFormat());
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = flash.text.GridFitType.PIXEL;
	this.sharpness = 0;
};
$hxClasses["flash.text.TextField"] = flash.text.TextField;
flash.text.TextField.__name__ = ["flash","text","TextField"];
flash.text.TextField.__super__ = flash.display.InteractiveObject;
flash.text.TextField.prototype = $extend(flash.display.InteractiveObject.prototype,{
	set_wordWrap: function(inWordWrap) {
		this.wordWrap = inWordWrap;
		this.Rebuild();
		return this.get_wordWrap();
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_width: function(inValue) {
		if(this.parent != null) this.parent.__invalidateBounds();
		if(this.get__boundsInvalid()) this.validateBounds();
		if(inValue != this.mWidth) {
			this.mWidth = inValue;
			this.Rebuild();
		}
		return this.mWidth;
	}
	,get_width: function() {
		return Math.max(this.mWidth,this.getBounds(this.get_stage()).width);
	}
	,set_type: function(inType) {
		this.mType = inType;
		this.__inputEnabled = this.mType == flash.text.TextFieldType.INPUT;
		if(this.mHTMLMode) {
			if(this.__inputEnabled) flash.Lib.__setContentEditable(this.__graphics.__surface,true); else flash.Lib.__setContentEditable(this.__graphics.__surface,false);
		} else if(this.__inputEnabled) {
			this.set_htmlText(StringTools.replace(this.mText,"\n","<BR />"));
			flash.Lib.__setContentEditable(this.__graphics.__surface,true);
		}
		this.tabEnabled = this.get_type() == flash.text.TextFieldType.INPUT;
		this.Rebuild();
		return inType;
	}
	,get_type: function() {
		return this.mType;
	}
	,get_textHeight: function() {
		return this.mMaxHeight;
	}
	,get_textWidth: function() {
		return this.mMaxWidth;
	}
	,set_textColor: function(inCol) {
		this.mTextColour = inCol;
		this.RebuildText();
		return inCol;
	}
	,get_textColor: function() {
		return this.mTextColour;
	}
	,set_text: function(inText) {
		this.mText = Std.string(inText);
		this.mHTMLMode = false;
		this.RebuildText();
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		return this.mText;
	}
	,get_text: function() {
		if(this.mHTMLMode) this.ConvertHTMLToText(false);
		return this.mText;
	}
	,set_scrollV: function(value) {
		return this.scrollV = value;
	}
	,get_scrollV: function() {
		return this.scrollV;
	}
	,set_scrollH: function(value) {
		return this.scrollH = value;
	}
	,get_scrollH: function() {
		return this.scrollH;
	}
	,get_numLines: function() {
		return 0;
	}
	,set_multiline: function(value) {
		return this.multiline = value;
	}
	,get_multiline: function() {
		return this.multiline;
	}
	,get_maxScrollV: function() {
		return 0;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,set_htmlText: function(inHTMLText) {
		this.mParagraphs = new Array();
		this.mHTMLText = inHTMLText;
		if(!this.mHTMLMode) {
			var domElement = js.Browser.document.createElement("div");
			if(this.background || this.border) {
				domElement.style.width = this.mWidth + "px";
				domElement.style.height = this.mHeight + "px";
			}
			if(this.background) domElement.style.backgroundColor = "#" + StringTools.hex(this.backgroundColor,6);
			if(this.border) domElement.style.border = "1px solid #" + StringTools.hex(this.borderColor,6);
			domElement.style.color = "#" + StringTools.hex(this.mTextColour,6);
			domElement.style.fontFamily = this.mFace;
			domElement.style.fontSize = this.mTextHeight + "px";
			domElement.style.textAlign = Std.string(this.mAlign);
			var wrapper = domElement;
			wrapper.innerHTML = inHTMLText;
			var destination = new flash.display.Graphics(wrapper);
			var __surface = this.__graphics.__surface;
			if(flash.Lib.__isOnStage(__surface)) {
				flash.Lib.__appendSurface(wrapper);
				flash.Lib.__copyStyle(__surface,wrapper);
				flash.Lib.__swapSurface(__surface,wrapper);
				flash.Lib.__removeSurface(__surface);
			}
			this.__graphics = destination;
			this.__graphics.__extent.width = wrapper.width;
			this.__graphics.__extent.height = wrapper.height;
		} else this.__graphics.__surface.innerHTML = inHTMLText;
		this.mHTMLMode = true;
		this.RebuildText();
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		return this.mHTMLText;
	}
	,get_htmlText: function() {
		return this.mHTMLText;
	}
	,set_height: function(inValue) {
		if(this.parent != null) this.parent.__invalidateBounds();
		if(this.get__boundsInvalid()) this.validateBounds();
		if(inValue != this.mHeight) {
			this.mHeight = inValue;
			this.Rebuild();
		}
		return this.mHeight;
	}
	,get_height: function() {
		return Math.max(this.mHeight,this.getBounds(this.get_stage()).height);
	}
	,set_defaultTextFormat: function(inFmt) {
		this.setTextFormat(inFmt);
		this._defaultTextFormat = inFmt;
		return inFmt;
	}
	,get_defaultTextFormat: function() {
		return this._defaultTextFormat;
	}
	,get_caretPos: function() {
		return this.mInsertPos;
	}
	,get_bottomScrollV: function() {
		return 0;
	}
	,set_borderColor: function(inBorderCol) {
		this.borderColor = inBorderCol;
		this.Rebuild();
		return inBorderCol;
	}
	,set_border: function(inBorder) {
		this.border = inBorder;
		this.Rebuild();
		return inBorder;
	}
	,set_backgroundColor: function(inCol) {
		this.backgroundColor = inCol;
		this.Rebuild();
		return inCol;
	}
	,set_background: function(inBack) {
		this.background = inBack;
		this.Rebuild();
		return inBack;
	}
	,set_autoSize: function(inAutoSize) {
		this.autoSize = inAutoSize;
		this.Rebuild();
		return inAutoSize;
	}
	,get_autoSize: function() {
		return this.autoSize;
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(this.__graphics.__render(inMask,this.__filters,1,1)) {
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.__applyFilters(this.__graphics.__surface);
			this.___renderFlags |= 32;
		}
		if(!this.mHTMLMode && inMask != null) {
			var m = this.getSurfaceTransform(this.__graphics);
			flash.Lib.__drawToSurface(this.__graphics.__surface,inMask,m,(this.parent != null?this.parent.__combinedAlpha:1) * this.alpha,clipRect,this.gridFitType != flash.text.GridFitType.PIXEL);
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m = this.getSurfaceTransform(this.__graphics);
				flash.Lib.__setSurfaceTransform(this.__graphics.__surface,m);
				this.___renderFlags &= -33;
			}
			flash.Lib.__setSurfaceOpacity(this.__graphics.__surface,(this.parent != null?this.parent.__combinedAlpha:1) * this.alpha);
		}
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null; else if(this.mText.length > 1) {
			var local = this.globalToLocal(point);
			if(local.x < 0 || local.y < 0 || local.x > this.mMaxWidth || local.y > this.mMaxHeight) return null; else return this;
		} else return flash.display.InteractiveObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,toString: function() {
		return "[TextField name=" + this.name + " id=" + this.___id + "]";
	}
	,setTextFormat: function(inFmt,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(inFmt.font != null) this.mFace = inFmt.font;
		if(inFmt.size != null) this.mTextHeight = inFmt.size | 0;
		if(inFmt.align != null) this.mAlign = inFmt.align;
		if(inFmt.color != null) this.mTextColour = inFmt.color;
		this.RebuildText();
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		return this.getTextFormat();
	}
	,setSelection: function(beginIndex,endIndex) {
	}
	,RenderRow: function(inRow,inY,inCharIdx,inAlign,inInsert) {
		if(inInsert == null) inInsert = 0;
		var h = 0;
		var w = 0;
		var _g = 0;
		while(_g < inRow.length) {
			var chr = inRow[_g];
			++_g;
			if(chr.fh > h) h = chr.fh;
			w += chr.adv;
		}
		if(w > this.mMaxWidth) this.mMaxWidth = w;
		var full_height = h * 1.2 | 0;
		var align_x = 0;
		var insert_x = 0;
		if(inInsert != null) {
			if(this.autoSize != "NONE") {
				this.scrollH = 0;
				insert_x = inInsert;
			} else {
				insert_x = inInsert - this.scrollH;
				if(insert_x < 0) this.scrollH -= (this.mLimitRenderX * 3 >> 2) - insert_x; else if(insert_x > this.mLimitRenderX) this.scrollH += insert_x - (this.mLimitRenderX * 3 >> 2);
				if(this.scrollH < 0) this.scrollH = 0;
			}
		}
		if(this.autoSize == "NONE" && w <= this.mLimitRenderX) {
			if(inAlign == flash.text.TextFormatAlign.CENTER) align_x = Math.round(this.mWidth) - w >> 1; else if(inAlign == flash.text.TextFormatAlign.RIGHT) align_x = Math.round(this.mWidth) - w;
		}
		var x_list = new Array();
		this.mLineInfo.push({ mY0 : inY, mIndex : inCharIdx - 1, mX : x_list});
		var cache_sel_font = null;
		var cache_normal_font = null;
		var x = align_x - this.scrollH;
		var x0 = x;
		var _g = 0;
		while(_g < inRow.length) {
			var chr = inRow[_g];
			++_g;
			var adv = chr.adv;
			if(x + adv > this.mLimitRenderX) break;
			x_list.push(x);
			if(x >= 0) {
				var font = chr.font;
				if(chr.sel) {
					this.__graphics.lineStyle();
					this.__graphics.beginFill(2105440);
					this.__graphics.drawRect(x,inY,adv,full_height);
					this.__graphics.endFill();
					if(cache_normal_font == chr.font) font = cache_sel_font; else {
						font = flash.text.FontInstance.CreateSolid(chr.font.GetFace(),chr.fh,16777215,1.0);
						cache_sel_font = font;
						cache_normal_font = chr.font;
					}
				}
				font.RenderChar(this.__graphics,chr.chr,x,inY + (h - chr.fh) | 0);
			}
			x += adv;
		}
		x += this.scrollH;
		return full_height;
	}
	,RebuildText: function() {
		this.mParagraphs = [];
		if(!this.mHTMLMode) {
			var font = flash.text.FontInstance.CreateSolid(this.mFace,this.mTextHeight,this.mTextColour,1.0);
			var paras = this.mText.split("\n");
			var _g = 0;
			while(_g < paras.length) {
				var paragraph = paras[_g];
				++_g;
				this.mParagraphs.push({ align : this.mAlign, spans : [{ font : font, text : paragraph + "\n"}]});
			}
		}
		this.Rebuild();
	}
	,Rebuild: function() {
		if(this.mHTMLMode) return;
		this.mLineInfo = [];
		this.__graphics.clear();
		if(this.background) {
			this.__graphics.beginFill(this.backgroundColor);
			this.__graphics.drawRect(0,0,this.get_width(),this.get_height());
			this.__graphics.endFill();
		}
		this.__graphics.lineStyle(this.mTextColour);
		var insert_x = null;
		this.mMaxWidth = 0;
		var wrap = this.mLimitRenderX = this.get_wordWrap() && !this.__inputEnabled?this.mWidth | 0:999999;
		var char_idx = 0;
		var h = 0;
		var s0 = this.mSelStart;
		var s1 = this.mSelEnd;
		var _g = 0, _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var row = [];
			var row_width = 0;
			var last_word_break = 0;
			var last_word_break_width = 0;
			var last_word_char_idx = 0;
			var start_idx = char_idx;
			var tx = 0;
			var _g2 = 0, _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var span = _g3[_g2];
				++_g2;
				var text = span.text;
				var font = span.font;
				var fh = font.get_height();
				last_word_break = row.length;
				last_word_break_width = row_width;
				last_word_char_idx = char_idx;
				var _g5 = 0, _g4 = text.length;
				while(_g5 < _g4) {
					var ch = _g5++;
					var g = HxOverrides.cca(text,ch);
					var adv = font.__getAdvance(g);
					if(g == 32) {
						last_word_break = row.length;
						last_word_break_width = tx;
						last_word_char_idx = char_idx;
					}
					if(tx + adv > wrap) {
						if(last_word_break > 0) {
							var row_end = row.splice(last_word_break,row.length - last_word_break);
							h += this.RenderRow(row,h,start_idx,paragraph.align);
							row = row_end;
							tx -= last_word_break_width;
							start_idx = last_word_char_idx;
							last_word_break = 0;
							last_word_break_width = 0;
							last_word_char_idx = 0;
							if(row_end.length > 0 && row_end[0].chr == 32) {
								row_end.shift();
								start_idx++;
							}
						} else {
							h += this.RenderRow(row,h,char_idx,paragraph.align);
							row = [];
							tx = 0;
							start_idx = char_idx;
						}
					}
					row.push({ font : font, chr : g, x : tx, fh : fh, sel : char_idx >= s0 && char_idx < s1, adv : adv});
					tx += adv;
					char_idx++;
				}
			}
			if(row.length > 0) {
				h += this.RenderRow(row,h,start_idx,paragraph.align,insert_x);
				insert_x = null;
			}
		}
		var w = this.mMaxWidth;
		if(h < this.mTextHeight) h = this.mTextHeight;
		this.mMaxHeight = h;
		var _g = this;
		switch(_g.autoSize) {
		case "LEFT":
			break;
		case "RIGHT":
			var x0 = this.get_x() + this.get_width();
			this.set_x(this.mWidth - x0);
			break;
		case "CENTER":
			var x0 = this.get_x() + this.get_width() / 2;
			this.set_x(this.mWidth / 2 - x0);
			break;
		default:
			if(this.get_wordWrap()) this.set_height(h);
		}
		if(this.border) {
			this.__graphics.endFill();
			this.__graphics.lineStyle(1,this.borderColor,1,true);
			this.__graphics.drawRect(.5,.5,this.get_width() - .5,this.get_height() - .5);
		}
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return new flash.text.TextFormat(this.mFace,this.mTextHeight,this.mTextColour);
	}
	,getLineIndexAtPoint: function(inX,inY) {
		if(this.mLineInfo.length < 1) return -1;
		if(inY <= 0) return 0;
		var _g1 = 0, _g = this.mLineInfo.length;
		while(_g1 < _g) {
			var l = _g1++;
			if(this.mLineInfo[l].mY0 > inY) return l == 0?0:l - 1;
		}
		return this.mLineInfo.length - 1;
	}
	,getCharIndexAtPoint: function(inX,inY) {
		var li = this.getLineIndexAtPoint(inX,inY);
		if(li < 0) return -1;
		var line = this.mLineInfo[li];
		var idx = line.mIndex;
		var _g = 0, _g1 = line.mX;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x > inX) return idx;
			idx++;
		}
		return idx;
	}
	,getCharBoundaries: function(a) {
		return null;
	}
	,DecodeColour: function(col) {
		return Std.parseInt("0x" + HxOverrides.substr(col,1,null));
	}
	,ConvertHTMLToText: function(inUnSetHTML) {
		this.mText = "";
		var _g = 0, _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var _g2 = 0, _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var span = _g3[_g2];
				++_g2;
				this.mText += span.text;
			}
		}
		if(inUnSetHTML) {
			this.mHTMLMode = false;
			this.RebuildText();
		}
	}
	,appendText: function(newText) {
		var _g = this;
		_g.set_text(_g.get_text() + newText);
	}
	,__class__: flash.text.TextField
	,__properties__: $extend(flash.display.InteractiveObject.prototype.__properties__,{set_autoSize:"set_autoSize",set_background:"set_background",set_backgroundColor:"set_backgroundColor",set_border:"set_border",set_borderColor:"set_borderColor",get_bottomScrollV:"get_bottomScrollV",get_caretPos:"get_caretPos",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",get_maxScrollH:"get_maxScrollH",get_maxScrollV:"get_maxScrollV",get_numLines:"get_numLines",set_text:"set_text",get_text:"get_text",set_textColor:"set_textColor",get_textColor:"get_textColor",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_type:"set_type",get_type:"get_type",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap"})
});
flash.text.FontInstanceMode = $hxClasses["flash.text.FontInstanceMode"] = { __ename__ : ["flash","text","FontInstanceMode"], __constructs__ : ["fimSolid"] }
flash.text.FontInstanceMode.fimSolid = ["fimSolid",0];
flash.text.FontInstanceMode.fimSolid.toString = $estr;
flash.text.FontInstanceMode.fimSolid.__enum__ = flash.text.FontInstanceMode;
flash.text.FontInstance = function(inFont,inHeight) {
	this.mFont = inFont;
	this.mHeight = inHeight;
	this.mTryFreeType = true;
	this.mGlyphs = [];
	this.mCacheAsBitmap = false;
};
$hxClasses["flash.text.FontInstance"] = flash.text.FontInstance;
flash.text.FontInstance.__name__ = ["flash","text","FontInstance"];
flash.text.FontInstance.CreateSolid = function(inFace,inHeight,inColour,inAlpha) {
	var id = "SOLID:" + inFace + ":" + inHeight + ":" + inColour + ":" + inAlpha;
	var f = flash.text.FontInstance.mSolidFonts.get(id);
	if(f != null) return f;
	var font = new flash.text.Font();
	font.__setScale(inHeight);
	font.set_fontName(inFace);
	if(font == null) return null;
	f = new flash.text.FontInstance(font,inHeight);
	f.SetSolid(inColour,inAlpha);
	flash.text.FontInstance.mSolidFonts.set(id,f);
	return f;
}
flash.text.FontInstance.prototype = {
	get_height: function() {
		return this.mHeight;
	}
	,__getAdvance: function(inChar) {
		if(this.mFont == null) return 0;
		return this.mFont.__getAdvance(inChar,this.mHeight);
	}
	,toString: function() {
		return "FontInstance:" + Std.string(this.mFont) + ":" + this.mColour + "(" + this.mGlyphs.length + ")";
	}
	,RenderChar: function(inGraphics,inGlyph,inX,inY) {
		inGraphics.__clearLine();
		inGraphics.beginFill(this.mColour,this.mAlpha);
		this.mFont.__render(inGraphics,inGlyph,inX,inY,this.mTryFreeType);
		inGraphics.endFill();
	}
	,SetSolid: function(inCol,inAlpha) {
		this.mColour = inCol;
		this.mAlpha = inAlpha;
		this.mMode = flash.text.FontInstanceMode.fimSolid;
	}
	,GetFace: function() {
		return this.mFont.fontName;
	}
	,__class__: flash.text.FontInstance
	,__properties__: {get_height:"get_height"}
}
flash.text.TextFieldAutoSize = function() { }
$hxClasses["flash.text.TextFieldAutoSize"] = flash.text.TextFieldAutoSize;
flash.text.TextFieldAutoSize.__name__ = ["flash","text","TextFieldAutoSize"];
flash.text.TextFieldType = function() { }
$hxClasses["flash.text.TextFieldType"] = flash.text.TextFieldType;
flash.text.TextFieldType.__name__ = ["flash","text","TextFieldType"];
flash.text.TextFormat = function(in_font,in_size,in_color,in_bold,in_italic,in_underline,in_url,in_target,in_align,in_leftMargin,in_rightMargin,in_indent,in_leading) {
	this.font = in_font;
	this.size = in_size;
	this.color = in_color;
	this.bold = in_bold;
	this.italic = in_italic;
	this.underline = in_underline;
	this.url = in_url;
	this.target = in_target;
	this.align = in_align;
	this.leftMargin = in_leftMargin;
	this.rightMargin = in_rightMargin;
	this.indent = in_indent;
	this.leading = in_leading;
};
$hxClasses["flash.text.TextFormat"] = flash.text.TextFormat;
flash.text.TextFormat.__name__ = ["flash","text","TextFormat"];
flash.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new flash.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.display = this.display;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__class__: flash.text.TextFormat
}
flash.text.TextFormatAlign = $hxClasses["flash.text.TextFormatAlign"] = { __ename__ : ["flash","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] }
flash.text.TextFormatAlign.LEFT = ["LEFT",0];
flash.text.TextFormatAlign.LEFT.toString = $estr;
flash.text.TextFormatAlign.LEFT.__enum__ = flash.text.TextFormatAlign;
flash.text.TextFormatAlign.RIGHT = ["RIGHT",1];
flash.text.TextFormatAlign.RIGHT.toString = $estr;
flash.text.TextFormatAlign.RIGHT.__enum__ = flash.text.TextFormatAlign;
flash.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
flash.text.TextFormatAlign.JUSTIFY.toString = $estr;
flash.text.TextFormatAlign.JUSTIFY.__enum__ = flash.text.TextFormatAlign;
flash.text.TextFormatAlign.CENTER = ["CENTER",3];
flash.text.TextFormatAlign.CENTER.toString = $estr;
flash.text.TextFormatAlign.CENTER.__enum__ = flash.text.TextFormatAlign;
flash.ui = {}
flash.ui.Keyboard = function() { }
$hxClasses["flash.ui.Keyboard"] = flash.ui.Keyboard;
flash.ui.Keyboard.__name__ = ["flash","ui","Keyboard"];
flash.ui.Keyboard.isAccessible = function() {
	return false;
}
flash.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 18;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
}
flash.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 18;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
}
flash.ui.Mouse = function() {
};
$hxClasses["flash.ui.Mouse"] = flash.ui.Mouse;
flash.ui.Mouse.__name__ = ["flash","ui","Mouse"];
flash.ui.Mouse.hide = function() {
}
flash.ui.Mouse.show = function() {
}
flash.ui.Mouse.prototype = {
	__class__: flash.ui.Mouse
}
flash.ui.Multitouch = function() { }
$hxClasses["flash.ui.Multitouch"] = flash.ui.Multitouch;
flash.ui.Multitouch.__name__ = ["flash","ui","Multitouch"];
flash.ui.Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
flash.ui.Multitouch.get_inputMode = function() {
	return flash.ui.MultitouchInputMode.TOUCH_POINT;
}
flash.ui.Multitouch.set_inputMode = function(inMode) {
	if(inMode == flash.ui.MultitouchInputMode.GESTURE) return flash.ui.Multitouch.get_inputMode();
	return inMode;
}
flash.ui.Multitouch.get_supportsTouchEvents = function() {
	var supported = Reflect.hasField(js.Browser.window,"ontouchstart");
	return supported;
}
flash.ui.MultitouchInputMode = $hxClasses["flash.ui.MultitouchInputMode"] = { __ename__ : ["flash","ui","MultitouchInputMode"], __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] }
flash.ui.MultitouchInputMode.NONE = ["NONE",0];
flash.ui.MultitouchInputMode.NONE.toString = $estr;
flash.ui.MultitouchInputMode.NONE.__enum__ = flash.ui.MultitouchInputMode;
flash.ui.MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
flash.ui.MultitouchInputMode.TOUCH_POINT.toString = $estr;
flash.ui.MultitouchInputMode.TOUCH_POINT.__enum__ = flash.ui.MultitouchInputMode;
flash.ui.MultitouchInputMode.GESTURE = ["GESTURE",2];
flash.ui.MultitouchInputMode.GESTURE.toString = $estr;
flash.ui.MultitouchInputMode.GESTURE.__enum__ = flash.ui.MultitouchInputMode;
flash.utils = {}
flash.utils.ByteArray = function() {
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	this.___resizeBuffer(this.allocated);
};
$hxClasses["flash.utils.ByteArray"] = flash.utils.ByteArray;
flash.utils.ByteArray.__name__ = ["flash","utils","ByteArray"];
flash.utils.ByteArray.fromBytes = function(inBytes) {
	var result = new flash.utils.ByteArray();
	result.byteView = new Uint8Array(inBytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
}
flash.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new flash.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
}
flash.utils.ByteArray.prototype = {
	set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Math.max(value,this.allocated * 2) | 0); else if(this.allocated > value) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,get_endian: function() {
		return this.littleEndian?"littleEndian":"bigEndian";
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,_getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0, _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,__get: function(pos) {
		return this.data.getUint8(pos);
	}
	,__fromBytes: function(inBytes) {
		this.byteView = new Uint8Array(inBytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0, _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this._getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeBytes: function(bytes,offset,length) {
		if(offset < 0 || length < 0) throw new flash.errors.IOError("Write error - Out of bounds");
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position += length;
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Math.max(lengthToEnsure,this.allocated * 2) | 0); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c2 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c2 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readFullBytes: function(bytes,pos,len) {
		if(this.length < len) {
			if(this.allocated < len) this.___resizeBuffer(this.allocated = Math.max(len,this.allocated * 2) | 0); else if(this.allocated > len) this.___resizeBuffer(this.allocated = len);
			this.length = len;
			len;
		}
		var _g1 = pos, _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var data = this.data;
			data.setInt8(this.position++,bytes.b[i]);
		}
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readBytes: function(bytes,offset,length) {
		if(offset < 0 || length < 0) throw new flash.errors.IOError("Read error - Out of bounds");
		if(offset == null) offset = 0;
		if(length == null) length = this.length;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Math.max(lengthToEnsure,bytes.allocated * 2) | 0); else if(bytes.allocated > lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Math.max(0,this.allocated * 2) | 0); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
	}
	,__class__: flash.utils.ByteArray
	,__properties__: {get_bytesAvailable:"get_bytesAvailable",set_endian:"set_endian",get_endian:"get_endian",set_length:"set_length"}
}
flash.utils.Endian = function() { }
$hxClasses["flash.utils.Endian"] = flash.utils.Endian;
flash.utils.Endian.__name__ = ["flash","utils","Endian"];
flash.utils.Uuid = function() { }
$hxClasses["flash.utils.Uuid"] = flash.utils.Uuid;
flash.utils.Uuid.__name__ = ["flash","utils","Uuid"];
flash.utils.Uuid.random = function(size) {
	if(size == null) size = 32;
	var nchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length;
	var uid = new StringBuf();
	var _g = 0;
	while(_g < size) {
		var i = _g++;
		uid.b += Std.string("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.random() * nchars | 0));
	}
	return uid.b;
}
flash.utils.Uuid.uuid = function() {
	return flash.utils.Uuid.random(8) + "-" + flash.utils.Uuid.random(4) + "-" + flash.utils.Uuid.random(4) + "-" + flash.utils.Uuid.random(4) + "-" + flash.utils.Uuid.random(12);
}
flixel.FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) Zoom = 0;
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.canvas = null;
	this._fxShakeDirection = 0;
	this._fxShakeComplete = null;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this.useBgAlphaBlending = true;
	this.bounds = null;
	this.deadzone = null;
	this.target = null;
	flixel.FlxBasic.call(this);
	this._scrollTarget = new flixel.util.FlxPoint();
	this.x = X;
	this.y = Y;
	this.set_width(Width <= 0?flixel.FlxG.width:Width);
	this.set_height(Height <= 0?flixel.FlxG.height:Height);
	this.scroll = new flixel.util.FlxPoint();
	this.followLead = new flixel.util.FlxPoint();
	this._point = new flixel.util.FlxPoint();
	this._flashOffset = new flixel.util.FlxPoint();
	this.canvas = new flash.display.Sprite();
	this.canvas.set_x(-this.width * 0.5);
	this.canvas.set_y(-this.height * 0.5);
	this.flashSprite = new flash.display.Sprite();
	this.set_zoom(Zoom);
	this._flashOffset.set(this.width * 0.5 * this.zoom,this.height * 0.5 * this.zoom);
	this.flashSprite.set_x(this.x + this._flashOffset.x);
	this.flashSprite.set_y(this.y + this._flashOffset.y);
	this.flashSprite.addChild(this.canvas);
	this._flashRect = new flash.geom.Rectangle(0,0,this.width,this.height);
	this._flashPoint = new flash.geom.Point();
	this._fxShakeOffset = new flixel.util.FlxPoint();
	this.canvas.set_scrollRect(new flash.geom.Rectangle(0,0,this.width * this.zoom,this.height * this.zoom));
	this._currentStackItem = new flixel.system.layer.DrawStackItem();
	this._headOfDrawStack = this._currentStackItem;
	this.bgColor = flixel.FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel.FlxCamera;
flixel.FlxCamera.__name__ = ["flixel","FlxCamera"];
flixel.FlxCamera.__super__ = flixel.FlxBasic;
flixel.FlxCamera.prototype = $extend(flixel.FlxBasic.prototype,{
	set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		return Antialiasing;
	}
	,set_color: function(Color) {
		this.color = Color & 16777215;
		var colorTransform = this.canvas.transform.colorTransform;
		colorTransform.redMultiplier = (this.color >> 16) / 255;
		colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
		colorTransform.blueMultiplier = (this.color & 255) / 255;
		this.canvas.transform.set_colorTransform(colorTransform);
		return Color;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_alpha: function(Alpha) {
		this.alpha = flixel.util.FlxMath.bound(Alpha,0,1);
		this.canvas.alpha = Alpha;
		return Alpha;
	}
	,set_zoom: function(Zoom) {
		if(Zoom == 0) this.zoom = flixel.FlxCamera.defaultZoom; else this.zoom = Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_height: function(Value) {
		if(Value > 0) {
			this.height = Value;
			if(this.canvas != null) {
				var rect = this.canvas.get_scrollRect();
				rect.height = Value * this.zoom;
				this.canvas.set_scrollRect(rect);
				this._flashOffset.set_y(this.height * 0.5 * this.zoom);
				this.canvas.set_y(-this.height * 0.5);
			}
		}
		return Value;
	}
	,set_width: function(Value) {
		if(Value > 0) {
			this.width = Value;
			if(this.canvas != null) {
				var rect = this.canvas.get_scrollRect();
				rect.width = Value * this.zoom;
				this.canvas.set_scrollRect(rect);
				this._flashOffset.set_x(this.width * 0.5 * this.zoom);
				this.canvas.set_x(-this.width * 0.5);
			}
		}
		return Value;
	}
	,getScale: function() {
		return this._point.set(this.flashSprite.get_scaleX(),this.flashSprite.get_scaleY());
	}
	,setScale: function(X,Y) {
		this.flashSprite.set_scaleX(X);
		this.flashSprite.set_scaleY(Y);
		this._flashOffset.set_x(this.width * 0.5 * X);
		this._flashOffset.set_y(this.height * 0.5 * Y);
	}
	,setBounds: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(this.bounds == null) this.bounds = new flixel.util.FlxRect();
		this.bounds.set(X,Y,Width,Height);
		if(UpdateWorld) flixel.FlxG.worldBounds.copyFrom(this.bounds);
		this.update();
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			this.fill(this._fxFlashColor & 16777215,true,(alphaComponent <= 0?255:alphaComponent) * this._fxFlashAlpha / 255,this.canvas.get_graphics());
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			this.fill(this._fxFadeColor & 16777215,true,(alphaComponent <= 0?255:alphaComponent) * this._fxFadeAlpha / 255,this.canvas.get_graphics());
		}
		if(this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0) {
			var _g = this.flashSprite;
			_g.set_x(_g.get_x() + this._fxShakeOffset.x);
			var _g = this.flashSprite;
			_g.set_y(_g.get_y() + this._fxShakeOffset.y);
		}
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) FxAlpha = 1.0;
		if(BlendAlpha == null) BlendAlpha = true;
		if(FxAlpha == 0) return;
		var targetGraphics = graphics == null?this.canvas.get_graphics():graphics;
		Color = Color & 16777215;
		targetGraphics.beginFill(Color,FxAlpha);
		targetGraphics.drawRect(0,0,this.width,this.height);
		targetGraphics.endFill();
	}
	,copyFrom: function(Camera) {
		if(Camera.bounds == null) this.bounds = null; else {
			if(this.bounds == null) this.bounds = new flixel.util.FlxRect();
			this.bounds.copyFrom(Camera.bounds);
		}
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) this.deadzone = null; else {
				if(this.deadzone == null) this.deadzone = new flixel.util.FlxRect();
				this.deadzone.copyFrom(Camera.deadzone);
			}
		}
		return this;
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.flashSprite.set_x(this.x + this._flashOffset.x);
		this.flashSprite.set_y(this.y + this._flashOffset.y);
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		if(!Force && (this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0)) return;
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeDirection = Direction;
		this._fxShakeOffset.set();
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		if(!Force && this._fxFadeAlpha > 0.0) return;
		this._fxFadeColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		if(this._fxFadeIn) this._fxFadeAlpha = 0.999999; else this._fxFadeAlpha = 0.0000000000000001;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		if(!Force && this._fxFlashAlpha > 0.0) return;
		this._fxFlashColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
	}
	,follow: function(Target,Style,Offset,Lerp) {
		if(Lerp == null) Lerp = 0;
		if(Style == null) Style = 0;
		this.style = Style;
		this.target = Target;
		this.followLerp = Lerp;
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style) {
		case 1:
			var w1 = this.width / 8 + (Offset != null?Offset.x:0);
			var h1 = this.height / 3 + (Offset != null?Offset.y:0);
			this.deadzone = new flixel.util.FlxRect((this.width - w1) / 2,(this.height - h1) / 2 - h1 * 0.25,w1,h1);
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			this.deadzone = new flixel.util.FlxRect((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			this.deadzone = new flixel.util.FlxRect((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 0:
			if(this.target != null) {
				w = this.target.get_width() + (Offset != null?Offset.x:0);
				h = this.target.get_height() + (Offset != null?Offset.y:0);
			}
			this.deadzone = new flixel.util.FlxRect((this.width - w) / 2,(this.height - h) / 2 - h * 0.25,w,h);
			break;
		case 4:
			this.deadzone = new flixel.util.FlxRect(0,0,this.width,this.height);
			break;
		default:
			this.deadzone = null;
		}
	}
	,updateShake: function() {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= flixel.FlxG.elapsed;
			if(this._fxShakeDuration <= 0) {
				this._fxShakeOffset.set();
				if(this._fxShakeComplete != null) this._fxShakeComplete();
			} else {
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 1) this._fxShakeOffset.set_x(((flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.width * 2 - this._fxShakeIntensity * this.width) * this.zoom);
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 2) this._fxShakeOffset.set_y(((flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.height * 2 - this._fxShakeIntensity * this.height) * this.zoom);
			}
			if(this.target != null) {
				this.flashSprite.set_x(this.x + this._flashOffset.x);
				this.flashSprite.set_y(this.y + this._flashOffset.y);
			}
		}
	}
	,updateFade: function() {
		if(this._fxFadeAlpha > 0.0 && this._fxFadeAlpha < 1.0) {
			if(this._fxFadeIn) {
				this._fxFadeAlpha -= flixel.FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha <= 0.0) {
					this._fxFadeAlpha = 0.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			} else {
				this._fxFadeAlpha += flixel.FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha >= 1.0) {
					this._fxFadeAlpha = 1.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			}
		}
	}
	,updateFlash: function() {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= flixel.FlxG.elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) this._fxFlashComplete();
		}
	}
	,updateFollow: function() {
		if(this.deadzone == null) this.focusOn(this.target.getMidpoint(this._point)); else {
			var edge;
			var targetX = this.target.x;
			var targetY = this.target.y;
			if(this.style == 4) {
				if(targetX > this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x - this.width);
				}
				if(targetY > this.scroll.y + this.height) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) this._scrollTarget.set_x(edge);
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) this._scrollTarget.set_x(edge);
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) this._scrollTarget.set_y(edge);
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) this._scrollTarget.set_y(edge);
			}
			if(js.Boot.__instanceof(this.target,flixel.FlxSprite)) {
				if(this._lastTargetPosition == null) this._lastTargetPosition = new flixel.util.FlxPoint(this.target.x,this.target.y);
				var _g = this._scrollTarget;
				_g.set_x(_g.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g = this._scrollTarget;
				_g.set_y(_g.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp == 0) {
				this.scroll.set_x(this._scrollTarget.x);
				this.scroll.set_y(this._scrollTarget.y);
			} else {
				var _g = this.scroll;
				_g.set_x(_g.x + (this._scrollTarget.x - this.scroll.x) * flixel.FlxG.elapsed / (flixel.FlxG.elapsed + this.followLerp * flixel.FlxG.elapsed));
				var _g = this.scroll;
				_g.set_y(_g.y + (this._scrollTarget.y - this.scroll.y) * flixel.FlxG.elapsed / (flixel.FlxG.elapsed + this.followLerp * flixel.FlxG.elapsed));
			}
		}
	}
	,update: function() {
		if(this.target != null) this.updateFollow();
		if(this.bounds != null) {
			this.scroll.set_x(flixel.util.FlxMath.bound(this.scroll.x,this.bounds.get_left(),this.bounds.get_right() - this.width));
			this.scroll.set_y(flixel.util.FlxMath.bound(this.scroll.y,this.bounds.get_top(),this.bounds.get_bottom() - this.height));
		}
		this.updateFlash();
		this.updateFade();
		this.updateShake();
	}
	,destroy: function() {
		this.target = null;
		this.scroll = null;
		this.deadzone = null;
		this.bounds = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		this._fxShakeOffset = null;
		this.flashSprite.removeChild(this.canvas);
		var canvasNumChildren = this.canvas.__children.length;
		var _g1 = 0, _g = canvasNumChildren;
		while(_g1 < _g) {
			var i = _g1++;
			this.canvas.removeChildAt(0);
		}
		this.canvas = null;
		this.clearDrawStack();
		this._headOfDrawStack.dispose();
		this._headOfDrawStack = null;
		this._currentStackItem = null;
		this.flashSprite = null;
		flixel.FlxBasic.prototype.destroy.call(this);
	}
	,render: function() {
		var currItem = this._headOfDrawStack;
		while(currItem != null) {
			var data = currItem.drawData;
			var dataLen = data.length;
			var position = currItem.position;
			if(position > 0) {
				if(dataLen != position) data.length = position;
				var tempFlags = 16;
				if(currItem.useAlpha) tempFlags |= 8;
				currItem.graphics.get_tilesheet().tileSheet.drawTiles(this.canvas.get_graphics(),data,this.antialiasing || currItem.antialiasing,tempFlags);
				flixel.system.layer.TileSheetExt._DRAWCALLS++;
			}
			currItem = currItem.next;
		}
	}
	,clearDrawStack: function() {
		var currItem = this._headOfDrawStack.next;
		while(currItem != null) {
			currItem.graphics = null;
			currItem.initialized = false;
			currItem.antialiasing = false;
			currItem.position = 0;
			var newStorageHead = currItem;
			currItem = currItem.next;
			if(flixel.FlxCamera._storageHead == null) {
				flixel.FlxCamera._storageHead = newStorageHead;
				newStorageHead.next = null;
			} else {
				newStorageHead.next = flixel.FlxCamera._storageHead;
				flixel.FlxCamera._storageHead = newStorageHead;
			}
		}
		this._headOfDrawStack.reset();
		this._headOfDrawStack.next = null;
		this._currentStackItem = this._headOfDrawStack;
	}
	,getDrawStackItem: function(ObjGraphics,UseAlpha,ObjAntialiasing) {
		if(ObjAntialiasing == null) ObjAntialiasing = false;
		var itemToReturn = null;
		if(this._currentStackItem.initialized == false) {
			this._headOfDrawStack = this._currentStackItem;
			this._currentStackItem.graphics = ObjGraphics;
			this._currentStackItem.antialiasing = ObjAntialiasing;
			this._currentStackItem.useAlpha = UseAlpha;
			itemToReturn = this._currentStackItem;
		} else if(this._currentStackItem.graphics == ObjGraphics && this._currentStackItem.useAlpha == UseAlpha) itemToReturn = this._currentStackItem;
		if(itemToReturn == null) {
			var newItem = null;
			if(flixel.FlxCamera._storageHead != null) {
				newItem = flixel.FlxCamera._storageHead;
				var newHead = flixel.FlxCamera._storageHead.next;
				newItem.next = null;
				flixel.FlxCamera._storageHead = newHead;
			} else newItem = new flixel.system.layer.DrawStackItem();
			newItem.graphics = ObjGraphics;
			newItem.antialiasing = ObjAntialiasing;
			newItem.useAlpha = UseAlpha;
			this._currentStackItem.next = newItem;
			this._currentStackItem = newItem;
			itemToReturn = this._currentStackItem;
		}
		itemToReturn.initialized = true;
		return itemToReturn;
	}
	,__class__: flixel.FlxCamera
	,__properties__: $extend(flixel.FlxBasic.prototype.__properties__,{set_width:"set_width",set_height:"set_height",set_zoom:"set_zoom",set_alpha:"set_alpha",set_angle:"set_angle",set_color:"set_color",set_antialiasing:"set_antialiasing"})
});
flixel.system = {}
flixel.system.FlxVersion = function(Major,Minor,Patch,PatchVersion) {
	if(PatchVersion == null) PatchVersion = "";
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
	this.patchVersion = PatchVersion;
};
$hxClasses["flixel.system.FlxVersion"] = flixel.system.FlxVersion;
flixel.system.FlxVersion.__name__ = ["flixel","system","FlxVersion"];
flixel.system.FlxVersion.prototype = {
	toString: function() {
		var patchVer = "";
		if(this.patchVersion != null && this.patchVersion != "") patchVer = "-" + this.patchVersion;
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + patchVer;
	}
	,__class__: flixel.system.FlxVersion
}
flixel.system.scaleModes = {}
flixel.system.scaleModes.BaseScaleMode = function() {
	this.deviceSize = new flixel.util.FlxPoint();
	this.gameSize = new flixel.util.FlxPoint();
	this.scale = new flixel.util.FlxPoint();
	this.offset = new flixel.util.FlxPoint();
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel.system.scaleModes.BaseScaleMode;
flixel.system.scaleModes.BaseScaleMode.__name__ = ["flixel","system","scaleModes","BaseScaleMode"];
flixel.system.scaleModes.BaseScaleMode.prototype = {
	updateGamePosition: function() {
		flixel.FlxG.game.set_x(this.offset.x);
		flixel.FlxG.game.set_y(this.offset.y);
	}
	,updateGameScale: function() {
		flixel.FlxG.game.set_scaleX(this.scale.x);
		flixel.FlxG.game.set_scaleY(this.scale.y);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / flixel.FlxG.width);
		this.scale.set_y(this.gameSize.y / flixel.FlxG.height);
		flixel.system.scaleModes.BaseScaleMode.zoom.set(flixel.FlxCamera.defaultZoom,flixel.FlxCamera.defaultZoom);
		if(flixel.FlxG.camera != null) {
			flixel.system.scaleModes.BaseScaleMode.zoom.set_x(flixel.FlxG.camera.getScale().x);
			flixel.system.scaleModes.BaseScaleMode.zoom.set_y(flixel.FlxG.camera.getScale().y);
		}
		var _g = this.scale;
		_g.set_x(_g.x / flixel.system.scaleModes.BaseScaleMode.zoom.x);
		var _g = this.scale;
		_g.set_y(_g.y / flixel.system.scaleModes.BaseScaleMode.zoom.y);
		this.offset.set_x(Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5));
		this.offset.set_y(Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5));
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,onMeasure: function(Width,Height) {
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGameScale();
		this.updateGamePosition();
	}
	,__class__: flixel.system.scaleModes.BaseScaleMode
}
flixel.system.scaleModes.RatioScaleMode = function() {
	flixel.system.scaleModes.BaseScaleMode.call(this);
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel.system.scaleModes.RatioScaleMode;
flixel.system.scaleModes.RatioScaleMode.__name__ = ["flixel","system","scaleModes","RatioScaleMode"];
flixel.system.scaleModes.RatioScaleMode.__super__ = flixel.system.scaleModes.BaseScaleMode;
flixel.system.scaleModes.RatioScaleMode.prototype = $extend(flixel.system.scaleModes.BaseScaleMode.prototype,{
	updateGameSize: function(Width,Height) {
		var ratio = flixel.FlxG.width / flixel.FlxG.height;
		var realRatio = Width / Height;
		if(realRatio < ratio) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel.system.scaleModes.RatioScaleMode
});
flixel.system.frontEnds = {}
flixel.system.frontEnds.BitmapFrontEnd = function() {
	this.clearCache();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel.system.frontEnds.BitmapFrontEnd;
flixel.system.frontEnds.BitmapFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapFrontEnd"];
flixel.system.frontEnds.BitmapFrontEnd.prototype = {
	inOpenFlAssets: function(bitmap) {
		var bitmapDataCache = openfl.Assets.cache.bitmapData;
		if(bitmapDataCache != null) {
			var $it0 = ((function(_e) {
				return function() {
					return _e.iterator();
				};
			})(bitmapDataCache))();
			while( $it0.hasNext() ) {
				var bd = $it0.next();
				if(bd == bitmap) return true;
			}
		}
		return false;
	}
	,clearCache: function() {
		var obj;
		if(this._cache == null) this._cache = new haxe.ds.StringMap();
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			obj = this._cache.get(key);
			if(obj != null && !obj.persist && this.inOpenFlAssets(obj.bitmap) == false) {
				this._cache.remove(key);
				obj.destroy();
				obj = null;
			}
		}
	}
	,remove: function(key) {
		if(key != null && this._cache.exists(key)) {
			var obj = this._cache.get(key);
			if(this.inOpenFlAssets(obj.bitmap) == false) {
				this._cache.remove(key);
				obj.destroy();
			}
		}
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) baseKey = "pixels";
		if(this.checkCache(baseKey)) {
			var inc = 0;
			var ukey;
			do ukey = baseKey + inc++; while(this.checkCache(ukey));
			baseKey = ukey;
		}
		return baseKey;
	}
	,getCacheKeyFor: function(bmd) {
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var data = this._cache.get(key).bitmap;
			if(data == bmd) return key;
		}
		return null;
	}
	,get: function(key) {
		return this._cache.get(key);
	}
	,addWithSpaces: function(Graphic,FrameWidth,FrameHeight,SpacingX,SpacingY,Unique,Key) {
		if(Unique == null) Unique = false;
		if(SpacingY == null) SpacingY = 1;
		if(SpacingX == null) SpacingX = 1;
		if(Graphic == null) return null;
		var region = null;
		var graphic = null;
		var isClass = true;
		var isBitmap = true;
		var isRegion = true;
		var isGraphics = true;
		if(js.Boot.__instanceof(Graphic,flixel.util.loaders.CachedGraphics)) {
			isClass = false;
			isBitmap = false;
			isRegion = false;
			isGraphics = true;
			graphic = js.Boot.__cast(Graphic , flixel.util.loaders.CachedGraphics);
			if(!Unique && (FrameWidth <= 0 && FrameHeight <= 0)) return graphic;
		} else if(js.Boot.__instanceof(Graphic,Class)) {
			isClass = true;
			isBitmap = false;
			isRegion = false;
			isGraphics = false;
		} else if(js.Boot.__instanceof(Graphic,flash.display.BitmapData)) {
			isClass = false;
			isBitmap = true;
			isRegion = false;
			isGraphics = false;
		} else if(js.Boot.__instanceof(Graphic,flixel.util.loaders.TextureRegion)) {
			isClass = false;
			isBitmap = false;
			isRegion = true;
			isGraphics = false;
			region = js.Boot.__cast(Graphic , flixel.util.loaders.TextureRegion);
		} else if(js.Boot.__instanceof(Graphic,String)) {
			isClass = false;
			isBitmap = false;
			isRegion = false;
			isGraphics = false;
		} else return null;
		var additionalKey = "";
		if(FrameWidth > 0 || FrameHeight > 0) additionalKey = "FrameSize:" + FrameWidth + "_" + FrameHeight + "_Spacing:" + SpacingX + "_" + SpacingY;
		var key = Key;
		if(key == null) {
			if(isClass) key = Type.getClassName(js.Boot.__cast(Graphic , Class)); else if(isBitmap) {
				if(!Unique) {
					key = this.getCacheKeyFor(Graphic);
					if(key == null) key = this.getUniqueKey();
				}
			} else if(isRegion) key = region.data.key; else if(isGraphics) key = graphic.key; else key = Graphic;
			key += additionalKey;
			if(Unique) key = this.getUniqueKey(key == null?"pixels":key);
		}
		if(!this.checkCache(key)) {
			var bd = null;
			if(isClass) bd = Type.createInstance(js.Boot.__cast(Graphic , Class),[0,0]); else if(isBitmap) bd = Graphic; else if(isRegion) bd = region.data.bitmap; else if(isGraphics) bd = graphic.bitmap; else bd = flixel.system.FlxAssets.getBitmapData(Graphic);
			if(FrameWidth > 0 || FrameHeight > 0) {
				var numHorizontalFrames = FrameWidth == 0?1:(bd.___textureBuffer != null?bd.___textureBuffer.width:0) / FrameWidth | 0;
				var numVerticalFrames = FrameHeight == 0?1:(bd.___textureBuffer != null?bd.___textureBuffer.height:0) / FrameHeight | 0;
				FrameWidth = FrameWidth == 0?bd.___textureBuffer != null?bd.___textureBuffer.width:0:FrameWidth;
				FrameHeight = FrameHeight == 0?bd.___textureBuffer != null?bd.___textureBuffer.height:0:FrameHeight;
				var tempBitmap = new flash.display.BitmapData((bd.___textureBuffer != null?bd.___textureBuffer.width:0) + numHorizontalFrames * SpacingX,(bd.___textureBuffer != null?bd.___textureBuffer.height:0) + numVerticalFrames * SpacingY,true,0);
				tempBitmap.lock();
				var tempRect = new flash.geom.Rectangle(0,0,FrameWidth,FrameHeight);
				var tempPoint = new flash.geom.Point();
				var _g = 0;
				while(_g < numHorizontalFrames) {
					var i = _g++;
					tempPoint.x = i * (FrameWidth + SpacingX);
					tempRect.x = i * FrameWidth;
					var _g2 = 0, _g1 = numVerticalFrames;
					while(_g2 < _g1) {
						var j = _g2++;
						tempPoint.y = j * (FrameHeight + SpacingY);
						tempRect.y = j * FrameHeight;
						tempBitmap.copyPixels(bd,tempRect,tempPoint);
					}
				}
				tempBitmap.unlock();
				bd = tempBitmap;
			}
			if(Unique) bd = bd.clone();
			var co = new flixel.util.loaders.CachedGraphics(key,bd);
			if(isClass && !Unique) co.assetsClass = Graphic; else if(!isClass && !isBitmap && !isRegion && !Unique) co.assetsKey = Graphic;
			this._cache.set(key,co);
		}
		return this._cache.get(key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) Unique = false;
		return this.addWithSpaces(Graphic,0,0,1,1,Unique,Key);
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		var key = Key;
		if(key == null) {
			key = Width + "x" + Height + ":" + Color;
			if(Unique && this.checkCache(key)) key = this.getUniqueKey(key);
		}
		if(!this.checkCache(key)) this._cache.set(key,new flixel.util.loaders.CachedGraphics(key,new flash.display.BitmapData(Width,Height,true,Color)));
		return this._cache.get(key);
	}
	,checkCache: function(Key) {
		return this._cache.exists(Key) && this._cache.get(Key) != null;
	}
	,dumpCache: function() {
	}
	,onContext: function() {
		var obj;
		if(this._cache != null) {
			var $it0 = this._cache.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				obj = this._cache.get(key);
				if(obj != null && obj.isDumped) obj.onContext();
			}
		}
	}
	,get_whitePixel: function() {
		if(this._whitePixel == null) {
			var bd = new flash.display.BitmapData(2,2,true,-1);
			this._whitePixel = new flixel.util.loaders.CachedGraphics("whitePixel",bd,true);
			this._whitePixel.get_tilesheet().tileSheet.addTileRectID(new flash.geom.Rectangle(0,0,1,1),new flash.geom.Point(0,0));
		}
		return this._whitePixel;
	}
	,__class__: flixel.system.frontEnds.BitmapFrontEnd
	,__properties__: {get_whitePixel:"get_whitePixel"}
}
flixel.system.frontEnds.CameraFrontEnd = function() {
	this.useBufferLocking = false;
	this._cameraRect = new flash.geom.Rectangle();
	this.list = new Array();
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel.system.frontEnds.CameraFrontEnd;
flixel.system.frontEnds.CameraFrontEnd.__name__ = ["flixel","system","frontEnds","CameraFrontEnd"];
flixel.system.frontEnds.CameraFrontEnd.prototype = {
	set_bgColor: function(Color) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,get_bgColor: function() {
		return flixel.FlxG.camera == null?-16777216:flixel.FlxG.camera.bgColor;
	}
	,update: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists) {
				if(camera.active) camera.update();
				if(camera.target == null) {
					camera.flashSprite.set_x(camera.x + camera._flashOffset.x);
					camera.flashSprite.set_y(camera.y + camera._flashOffset.y);
				}
				camera.flashSprite.set_visible(camera.visible);
			}
		}
	}
	,unlock: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.drawFX();
		}
	}
	,render: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.visible) camera.render();
		}
	}
	,lock: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.clearDrawStack();
			camera.canvas.get_graphics().clear();
			camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Direction);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,reset: function(NewCamera) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel.FlxG.game.removeChild(camera.flashSprite);
			camera.destroy();
		}
		this.list.splice(0,this.list.length);
		if(NewCamera == null) NewCamera = new flixel.FlxCamera(0,0,flixel.FlxG.width,flixel.FlxG.height);
		flixel.FlxG.camera = (function($this) {
			var $r;
			flixel.FlxG.game.addChildAt(NewCamera.flashSprite,flixel.FlxG.game.getChildIndex(flixel.FlxG.game._inputContainer));
			flixel.FlxG.cameras.list.push(NewCamera);
			NewCamera.ID = flixel.FlxG.cameras.list.length - 1;
			$r = NewCamera;
			return $r;
		}(this));
		NewCamera.ID = 0;
	}
	,remove: function(Camera,Destroy) {
		if(Destroy == null) Destroy = true;
		if(Camera != null && flixel.FlxG.game.contains(Camera.flashSprite)) {
			flixel.FlxG.game.removeChild(Camera.flashSprite);
			var index = flixel.util.FlxArrayUtil.indexOf_flixel_FlxCamera(flixel.FlxG.cameras.list,Camera);
			if(index >= 0) flixel.FlxG.cameras.list.splice(index,1);
		} else null;
		var _g1 = 0, _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i].ID = i;
		}
		if(Destroy) Camera.destroy();
	}
	,__class__: flixel.system.frontEnds.CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
}
flixel.system.frontEnds.ConsoleFrontEnd = function() {
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel.system.frontEnds.ConsoleFrontEnd;
flixel.system.frontEnds.ConsoleFrontEnd.__name__ = ["flixel","system","frontEnds","ConsoleFrontEnd"];
flixel.system.frontEnds.ConsoleFrontEnd.prototype = {
	addCommand: function(Aliases,ProcessFunction,Help,ParamHelp,NumParams,ParamCutoff) {
		if(ParamCutoff == null) ParamCutoff = -1;
		if(NumParams == null) NumParams = 0;
	}
	,registerObject: function(ObjectAlias,AnyObject) {
	}
	,registerFunction: function(FunctionAlias,Function) {
	}
	,__class__: flixel.system.frontEnds.ConsoleFrontEnd
}
flixel.system.frontEnds.DebuggerFrontEnd = function() {
	this.visible = false;
	this.precision = 3;
	this.drawDebug = false;
	this.toggleKeys = ["GRAVEACCENT","BACKSLASH"];
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel.system.frontEnds.DebuggerFrontEnd;
flixel.system.frontEnds.DebuggerFrontEnd.__name__ = ["flixel","system","frontEnds","DebuggerFrontEnd"];
flixel.system.frontEnds.DebuggerFrontEnd.prototype = {
	set_visible: function(Visible) {
		return this.visible = Visible;
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
		if(ToggleMode == null) ToggleMode = false;
		return null;
	}
	,resetLayout: function() {
	}
	,setLayout: function(Layout) {
	}
	,__class__: flixel.system.frontEnds.DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible"}
}
flixel.system.frontEnds.HTML5FrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel.system.frontEnds.HTML5FrontEnd;
flixel.system.frontEnds.HTML5FrontEnd.__name__ = ["flixel","system","frontEnds","HTML5FrontEnd"];
flixel.system.frontEnds.HTML5FrontEnd.prototype = {
	get_browserHeight: function() {
		return js.Browser.window.innerHeight;
	}
	,get_browserWidth: function() {
		return js.Browser.window.innerWidth;
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) this.browserPosition = new flixel.util.FlxPoint(0,0);
		this.browserPosition.set(js.Browser.window.screenX,js.Browser.window.screenY);
		return this.browserPosition;
	}
	,get_browser: function() {
		if(js.Browser.navigator.userAgent.indexOf(" OPR/") > -1) return "Opera"; else if(js.Browser.navigator.userAgent.toLowerCase().indexOf("chrome") > -1) return "Chrome"; else if(js.Browser.navigator.appName == "Netscape") return "Firefox"; else if(!!document.documentMode) return "Internet Explorer"; else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) return "Safari";
		return "Unknown";
	}
	,__class__: flixel.system.frontEnds.HTML5FrontEnd
	,__properties__: {get_browser:"get_browser",get_browserWidth:"get_browserWidth",get_browserHeight:"get_browserHeight",get_browserPosition:"get_browserPosition"}
}
flixel.system.frontEnds.InputFrontEnd = function() {
	this.list = new Array();
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel.system.frontEnds.InputFrontEnd;
flixel.system.frontEnds.InputFrontEnd.__name__ = ["flixel","system","frontEnds","InputFrontEnd"];
flixel.system.frontEnds.InputFrontEnd.prototype = {
	destroy: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.destroy();
			input = null;
		}
	}
	,onFocusLost: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onFocus: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,update: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,reset: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,__class__: flixel.system.frontEnds.InputFrontEnd
}
flixel.system.frontEnds.LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe.Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel.system.frontEnds.LogFrontEnd;
flixel.system.frontEnds.LogFrontEnd.__name__ = ["flixel","system","frontEnds","LogFrontEnd"];
flixel.system.frontEnds.LogFrontEnd.prototype = {
	processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0, _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel.system.debug.LogStyle.NORMAL);
	}
	,set_redirectTraces: function(Redirect) {
		haxe.Log.trace = Redirect?$bind(this,this.processTraceData):this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,clear: function() {
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) FireOnce = false;
	}
	,notice: function(Data) {
	}
	,error: function(Data) {
	}
	,warn: function(Data) {
	}
	,add: function(Data) {
	}
	,__class__: flixel.system.frontEnds.LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
}
haxe.Log = function() { }
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
}
flixel.system.frontEnds.PluginFrontEnd = function() {
	this.list = new Array();
	this.add_flixel_plugin_TimerManager(flixel.util.FlxTimer.manager = new flixel.plugin.TimerManager());
	this.add_flixel_plugin_TweenManager(flixel.tweens.FlxTween.manager = new flixel.plugin.TweenManager());
	this.add_flixel_plugin_PathManager(flixel.util.FlxPath.manager = new flixel.plugin.PathManager());
};
$hxClasses["flixel.system.frontEnds.PluginFrontEnd"] = flixel.system.frontEnds.PluginFrontEnd;
flixel.system.frontEnds.PluginFrontEnd.__name__ = ["flixel","system","frontEnds","PluginFrontEnd"];
flixel.system.frontEnds.PluginFrontEnd.prototype = {
	onResize: function(Width,Height) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onResize(Width,Height);
		}
	}
	,onStateSwitch: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onStateSwitch();
		}
	}
	,draw: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) plugin.draw();
		}
	}
	,update: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) plugin.update();
		}
	}
	,removeType: function(ClassType) {
		var results = false;
		var i = this.list.length - 1;
		while(i >= 0) {
			if(js.Boot.__instanceof(this.list[i],ClassType)) {
				this.list.splice(i,1);
				results = true;
			}
			i--;
		}
		return results;
	}
	,remove: function(Plugin) {
		var i = this.list.length - 1;
		while(i >= 0) {
			if(this.list[i] == Plugin) {
				this.list.splice(i,1);
				return Plugin;
			}
			i--;
		}
		return Plugin;
	}
	,get: function(ClassType) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(plugin,ClassType)) return plugin;
		}
		return null;
	}
	,add_flixel_plugin_TimerManager: function(Plugin) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_TweenManager: function(Plugin) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_PathManager: function(Plugin) {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel.util.FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,__class__: flixel.system.frontEnds.PluginFrontEnd
}
flixel.util.FlxPool_flixel_util_FlxTimer = function() {
	this._pool = [];
};
$hxClasses["flixel.util.FlxPool_flixel_util_FlxTimer"] = flixel.util.FlxPool_flixel_util_FlxTimer;
flixel.util.FlxPool_flixel_util_FlxTimer.__name__ = ["flixel","util","FlxPool_flixel_util_FlxTimer"];
flixel.util.FlxPool_flixel_util_FlxTimer.prototype = {
	get_length: function() {
		return this._pool.length;
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,put: function(obj) {
		if(obj != null && flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPool_T(this._pool,obj) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = new flixel.util.FlxTimer();
		return obj;
	}
	,__class__: flixel.util.FlxPool_flixel_util_FlxTimer
	,__properties__: {get_length:"get_length"}
}
flixel.util.FlxTimer = function() {
	this._loopsCounter = 0;
	this._timeCounter = 0;
	this.complete = null;
	this.usePooling = true;
	this.userData = null;
	this.finished = false;
	this.paused = false;
	this.loops = 0;
	this.time = 0;
};
$hxClasses["flixel.util.FlxTimer"] = flixel.util.FlxTimer;
flixel.util.FlxTimer.__name__ = ["flixel","util","FlxTimer"];
flixel.util.FlxTimer.recycle = function() {
	return flixel.util.FlxTimer.pool.get();
}
flixel.util.FlxTimer.start = function(Time,Callback,Loops) {
	if(Loops == null) Loops = 1;
	if(Time == null) Time = 1;
	var timer = flixel.util.FlxTimer.recycle();
	timer.run(Time,Callback,Loops);
	return timer;
}
flixel.util.FlxTimer.put = function(timer) {
	flixel.util.FlxTimer.pool.put(timer);
}
flixel.util.FlxTimer.prototype = {
	get_progress: function() {
		if(this.time > 0) return this._timeCounter / this.time; else return 0;
	}
	,get_elapsedLoops: function() {
		return this._loopsCounter;
	}
	,get_loopsLeft: function() {
		return this.loops - this._loopsCounter;
	}
	,get_elapsedTime: function() {
		return this._timeCounter;
	}
	,get_timeLeft: function() {
		return this.time - this._timeCounter;
	}
	,update: function() {
		this._timeCounter += flixel.FlxG.elapsed;
		while(this._timeCounter >= this.time && !this.paused && !this.finished) {
			this._timeCounter -= this.time;
			this._loopsCounter++;
			if(this.complete != null) this.complete(this);
			if(this.loops > 0 && this._loopsCounter >= this.loops) this.abort();
		}
	}
	,abort: function() {
		this.finished = true;
		if(flixel.util.FlxTimer.manager != null) flixel.util.FlxTimer.manager.remove(this,this.usePooling);
	}
	,reset: function(NewTime) {
		if(NewTime == null) NewTime = -1;
		if(NewTime < 0) NewTime = this.time;
		this.run(NewTime,this.complete,this.loops);
		return this;
	}
	,run: function(Time,Callback,Loops) {
		if(Loops == null) Loops = 1;
		if(Time == null) Time = 1;
		if(flixel.util.FlxTimer.manager != null) flixel.util.FlxTimer.manager.add(this);
		this.paused = false;
		this.finished = false;
		this.time = Math.abs(Time);
		if(Loops < 0) Loops *= -1;
		this.loops = Loops;
		this.complete = Callback;
		this._timeCounter = 0;
		this._loopsCounter = 0;
	}
	,destroy: function() {
		this.complete = null;
		this.userData = null;
	}
	,__class__: flixel.util.FlxTimer
	,__properties__: {get_timeLeft:"get_timeLeft",get_elapsedTime:"get_elapsedTime",get_loopsLeft:"get_loopsLeft",get_elapsedLoops:"get_elapsedLoops",get_progress:"get_progress"}
}
flixel.plugin = {}
flixel.plugin.FlxPlugin = function() {
	flixel.FlxBasic.call(this);
};
$hxClasses["flixel.plugin.FlxPlugin"] = flixel.plugin.FlxPlugin;
flixel.plugin.FlxPlugin.__name__ = ["flixel","plugin","FlxPlugin"];
flixel.plugin.FlxPlugin.__super__ = flixel.FlxBasic;
flixel.plugin.FlxPlugin.prototype = $extend(flixel.FlxBasic.prototype,{
	onResize: function(Width,Height) {
	}
	,onStateSwitch: function() {
	}
	,__class__: flixel.plugin.FlxPlugin
});
flixel.plugin.TimerManager = function() {
	flixel.plugin.FlxPlugin.call(this);
	this._timers = new Array();
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TimerManager"] = flixel.plugin.TimerManager;
flixel.plugin.TimerManager.__name__ = ["flixel","plugin","TimerManager"];
flixel.plugin.TimerManager.__super__ = flixel.plugin.FlxPlugin;
flixel.plugin.TimerManager.prototype = $extend(flixel.plugin.FlxPlugin.prototype,{
	onStateSwitch: function() {
		this.clear();
	}
	,clear: function() {
		while(this._timers.length > 0) {
			var timer = this._timers.pop();
			flixel.util.FlxTimer.put(timer);
		}
	}
	,remove: function(Timer,ReturnInPool) {
		if(ReturnInPool == null) ReturnInPool = true;
		flixel.util.FlxArrayUtil.fastSplice_flixel_util_FlxTimer(this._timers,Timer);
		if(ReturnInPool) flixel.util.FlxTimer.put(Timer);
	}
	,add: function(Timer) {
		if(flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxTimer(this._timers,Timer) < 0) this._timers.push(Timer);
	}
	,update: function() {
		var _g = 0, _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(!timer.paused && !timer.finished && timer.time > 0) timer.update();
		}
	}
	,destroy: function() {
		this.clear();
		this._timers = null;
		flixel.plugin.FlxPlugin.prototype.destroy.call(this);
	}
	,__class__: flixel.plugin.TimerManager
});
flixel.system.FlxCollisionType = $hxClasses["flixel.system.FlxCollisionType"] = { __ename__ : ["flixel","system","FlxCollisionType"], __constructs__ : ["NONE","OBJECT","GROUP","TILEMAP","SPRITEGROUP"] }
flixel.system.FlxCollisionType.NONE = ["NONE",0];
flixel.system.FlxCollisionType.NONE.toString = $estr;
flixel.system.FlxCollisionType.NONE.__enum__ = flixel.system.FlxCollisionType;
flixel.system.FlxCollisionType.OBJECT = ["OBJECT",1];
flixel.system.FlxCollisionType.OBJECT.toString = $estr;
flixel.system.FlxCollisionType.OBJECT.__enum__ = flixel.system.FlxCollisionType;
flixel.system.FlxCollisionType.GROUP = ["GROUP",2];
flixel.system.FlxCollisionType.GROUP.toString = $estr;
flixel.system.FlxCollisionType.GROUP.__enum__ = flixel.system.FlxCollisionType;
flixel.system.FlxCollisionType.TILEMAP = ["TILEMAP",3];
flixel.system.FlxCollisionType.TILEMAP.toString = $estr;
flixel.system.FlxCollisionType.TILEMAP.__enum__ = flixel.system.FlxCollisionType;
flixel.system.FlxCollisionType.SPRITEGROUP = ["SPRITEGROUP",4];
flixel.system.FlxCollisionType.SPRITEGROUP.toString = $estr;
flixel.system.FlxCollisionType.SPRITEGROUP.__enum__ = flixel.system.FlxCollisionType;
flixel.tweens = {}
flixel.tweens.FlxTween = function(duration,type,complete,ease) {
	if(type == null) type = 0;
	this._delayToUse = 0;
	this._secondsSinceStart = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.executions = 0;
	this.userData = null;
	this.duration = duration;
	this.set_type(type);
	this.complete = complete;
	this.ease = ease;
	this.userData = { };
};
$hxClasses["flixel.tweens.FlxTween"] = flixel.tweens.FlxTween;
flixel.tweens.FlxTween.__name__ = ["flixel","tweens","FlxTween"];
flixel.tweens.FlxTween.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.tweens.FlxTween.tween = function(Object,Values,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var fields = Reflect.fields(Values);
	if(fields.length == 1) return flixel.tweens.FlxTween.singleVar(Object,fields[0],Reflect.field(Values,fields[0]),Duration,Options); else return flixel.tweens.FlxTween.multiVar(Object,Values,Duration,Options);
}
flixel.tweens.FlxTween.singleVar = function(Object,Property,To,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.misc.VarTween(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.tween(Object,Property,To,Duration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.multiVar = function(Object,Values,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.misc.MultiVarTween(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.tween(Object,Values,Duration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.num = function(FromValue,ToValue,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.misc.NumTween(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.tween(FromValue,ToValue,Duration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.angle = function(Sprite,FromAngle,ToAngle,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.misc.AngleTween(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.tween(FromAngle,ToAngle,Duration,Options.ease,Sprite);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.color = function(Sprite,Duration,FromColor,ToColor,FromAlpha,ToAlpha,Options) {
	if(ToAlpha == null) ToAlpha = 1;
	if(FromAlpha == null) FromAlpha = 1;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.misc.ColorTween(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.tween(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Options.ease,Sprite);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.fader = function(Volume,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.sound.Fader(Options.complete,Options.type);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.fadeTo(Volume,Duration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.linearMotion = function(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.LinearMotion(Options.complete,Options.type);
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.quadMotion = function(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.QuadMotion(Options.complete,Options.type);
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.cubicMotion = function(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.CubicMotion(Options.complete,Options.type);
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.circularMotion = function(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.CircularMotion(Options.complete,Options.type);
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.linearPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.LinearPath(Options.complete,Options.type);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(DurationOrSpeed,UseDuration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.quadPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(Options == null) Options = { type : 8};
	var tween = new flixel.tweens.motion.QuadPath(Options.complete,Options.type);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setDelays(Options.startDelay,Options.loopDelay);
	tween.setMotion(DurationOrSpeed,UseDuration,Options.ease);
	flixel.tweens.FlxTween.manager.add(tween);
	return tween;
}
flixel.tweens.FlxTween.prototype = {
	set_type: function(value) {
		if(value == 0) value = 8; else if(value == 16) value = 17;
		this.backward = (value & 16) > 0;
		return this.type = value;
	}
	,set_percent: function(value) {
		return this._secondsSinceStart = this.duration * value + this._delayToUse;
	}
	,get_percent: function() {
		return Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
	}
	,set_loopDelay: function(value) {
		var dly = value != null?Math.abs(value):0;
		if(this.executions > 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.loopDelay,0);
			this._delayToUse = dly;
		}
		return this.loopDelay = dly;
	}
	,set_startDelay: function(value) {
		var dly = value != null?Math.abs(value):0;
		if(this.executions == 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.startDelay,0);
			this._delayToUse = dly;
		}
		return this.startDelay = dly;
	}
	,setDelays: function(startDelay,loopDelay) {
		if(loopDelay == null) loopDelay = 0;
		if(startDelay == null) startDelay = 0;
		this.set_startDelay(startDelay);
		this.set_loopDelay(loopDelay);
	}
	,finish: function() {
		this.executions++;
		if(this.complete != null) this.complete(this);
		var _g = this.type & -17;
		switch(_g) {
		case 1:
			this._secondsSinceStart = this.duration + this.startDelay;
			this.active = false;
			break;
		case 2:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.start();
			break;
		case 4:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.backward = !this.backward;
			if(this.backward) this.scale = 1 - this.scale;
			this.start();
			break;
		case 8:
			this._secondsSinceStart = this.duration + this.startDelay;
			this.active = false;
			flixel.tweens.FlxTween.manager.remove(this,true);
			break;
		}
		this.finished = false;
	}
	,cancel: function() {
		this.active = false;
		flixel.tweens.FlxTween.manager.remove(this);
	}
	,start: function() {
		this._secondsSinceStart = 0;
		this._delayToUse = this.executions > 0?this.loopDelay:this.startDelay;
		if(this.duration == 0) {
			this.active = false;
			return this;
		}
		this.active = true;
		return this;
	}
	,update: function() {
		this._secondsSinceStart += flixel.FlxG.elapsed;
		var delay = this.executions > 0?this.loopDelay:this.startDelay;
		this.scale = Math.max(this._secondsSinceStart - delay,0) / this.duration;
		if(this.ease != null) this.scale = this.ease(this.scale);
		if(this.backward) this.scale = 1 - this.scale;
		if(this._secondsSinceStart >= this.duration + delay) {
			this.scale = this.backward?0:1;
			this.finished = true;
		}
	}
	,destroy: function() {
		this.complete = null;
		this.ease = null;
		this.userData = null;
	}
	,__class__: flixel.tweens.FlxTween
	,__properties__: {set_type:"set_type",set_percent:"set_percent",get_percent:"get_percent",set_startDelay:"set_startDelay",set_loopDelay:"set_loopDelay"}
}
flixel.plugin.TweenManager = function() {
	flixel.plugin.FlxPlugin.call(this);
	this.list = new Array();
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TweenManager"] = flixel.plugin.TweenManager;
flixel.plugin.TweenManager.__name__ = ["flixel","plugin","TweenManager"];
flixel.plugin.TweenManager.__super__ = flixel.plugin.FlxPlugin;
flixel.plugin.TweenManager.prototype = $extend(flixel.plugin.FlxPlugin.prototype,{
	onStateSwitch: function() {
		this.clear(true);
	}
	,clear: function(Destroy) {
		if(Destroy == null) Destroy = false;
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			this.remove(tween,Destroy);
		}
		this.list = new Array();
	}
	,remove: function(Tween,Destroy) {
		if(Destroy == null) Destroy = false;
		if(Tween == null) return null;
		if(Destroy) Tween.destroy();
		Tween.active = false;
		flixel.util.FlxArrayUtil.fastSplice_flixel_tweens_FlxTween(this.list,Tween);
		return Tween;
	}
	,add: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		if(flixel.util.FlxArrayUtil.indexOf_flixel_tweens_FlxTween(this.list,Tween) > 0) return Tween;
		this.list.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,update: function() {
		var finishedTweens = null;
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(tween.active) {
				tween.update();
				if(tween.finished) {
					if(finishedTweens == null) finishedTweens = new Array();
					finishedTweens.push(tween);
				}
			}
		}
		if(finishedTweens != null) while(finishedTweens.length > 0) finishedTweens.shift().finish();
	}
	,__class__: flixel.plugin.TweenManager
});
flixel.util.FlxPool_flixel_util_FlxPath = function() {
	this._pool = [];
};
$hxClasses["flixel.util.FlxPool_flixel_util_FlxPath"] = flixel.util.FlxPool_flixel_util_FlxPath;
flixel.util.FlxPool_flixel_util_FlxPath.__name__ = ["flixel","util","FlxPool_flixel_util_FlxPath"];
flixel.util.FlxPool_flixel_util_FlxPath.prototype = {
	get_length: function() {
		return this._pool.length;
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,put: function(obj) {
		if(obj != null && flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPool_T(this._pool,obj) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = new flixel.util.FlxPath();
		return obj;
	}
	,__class__: flixel.util.FlxPool_flixel_util_FlxPath
	,__properties__: {get_length:"get_length"}
}
flixel.util.FlxPath = function() {
	this.finished = false;
	this.paused = false;
	this._autoRotate = false;
	this._inc = 1;
	this._nodeIndex = 0;
	this.autoCenter = true;
	this.angle = 0;
	this.speed = 0;
	this.usePooling = true;
};
$hxClasses["flixel.util.FlxPath"] = flixel.util.FlxPath;
flixel.util.FlxPath.__name__ = ["flixel","util","FlxPath"];
flixel.util.FlxPath.recycle = function() {
	return flixel.util.FlxPath.pool.get().reset();
}
flixel.util.FlxPath.put = function(path) {
	flixel.util.FlxPath.pool.put(path);
}
flixel.util.FlxPath.start = function(Object,Nodes,Speed,Mode,AutoRotate,UsePooling) {
	if(UsePooling == null) UsePooling = true;
	if(AutoRotate == null) AutoRotate = false;
	if(Mode == null) Mode = 0;
	if(Speed == null) Speed = 100;
	var path = flixel.util.FlxPath.recycle();
	path.run(Object,Nodes,Speed,Mode,AutoRotate,UsePooling);
	return path;
}
flixel.util.FlxPath.prototype = {
	tail: function() {
		if(this.nodes.length > 0) return this.nodes[this.nodes.length - 1];
		return null;
	}
	,head: function() {
		if(this.nodes.length > 0) return this.nodes[0];
		return null;
	}
	,removeAt: function(Index) {
		if(this.nodes.length <= 0) return null;
		if(Index >= this.nodes.length) Index = this.nodes.length - 1;
		return this.nodes.splice(Index,1)[0];
	}
	,remove: function(Node) {
		var index = flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPoint(this.nodes,Node);
		if(index >= 0) return this.nodes.splice(index,1)[0]; else return null;
	}
	,addPointAt: function(Node,Index,AsReference) {
		if(AsReference == null) AsReference = false;
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		if(AsReference) this.nodes.splice(Index,0,Node); else this.nodes.splice(Index,0,new flixel.util.FlxPoint(Node.x,Node.y));
		return this;
	}
	,addPoint: function(Node,AsReference) {
		if(AsReference == null) AsReference = false;
		if(AsReference) this.nodes.push(Node); else this.nodes.push(new flixel.util.FlxPoint(Node.x,Node.y));
		return this;
	}
	,addAt: function(X,Y,Index) {
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		this.nodes.splice(Index,0,new flixel.util.FlxPoint(X,Y));
		return this;
	}
	,add: function(X,Y) {
		this.nodes.push(new flixel.util.FlxPoint(X,Y));
		return this;
	}
	,destroy: function() {
		this.nodes = null;
		this.object = null;
		this.onComplete = null;
	}
	,abort: function() {
		this.finished = true;
		if(this.object != null) {
			this.object.velocity.set_x(0);
			this.object.velocity.set_y(0);
		}
		if(flixel.util.FlxPath.manager != null) flixel.util.FlxPath.manager.remove(this,this.usePooling);
	}
	,advancePath: function(Snap) {
		if(Snap == null) Snap = true;
		if(Snap) {
			var oldNode = this.nodes[this._nodeIndex];
			if(oldNode != null) {
				if((this._mode & 1048576) == 0) {
					this.object.set_x(oldNode.x);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_x(_g.x - this.object.get_width() * 0.5);
					}
				}
				if((this._mode & 65536) == 0) {
					this.object.set_y(oldNode.y);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_y(_g.y - this.object.get_height() * 0.5);
					}
				}
			}
		}
		var callComplete = false;
		this._nodeIndex += this._inc;
		if((this._mode & 1) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = 0;
				this.finished = callComplete = true;
			}
		} else if((this._mode & 16) > 0) {
			if(this._nodeIndex >= this.nodes.length) {
				callComplete = true;
				this._nodeIndex = 0;
			}
		} else if((this._mode & 256) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = this.nodes.length - 1;
				callComplete = true;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
			}
		} else if((this._mode & 4096) > 0) {
			if(this._inc > 0) {
				if(this._nodeIndex >= this.nodes.length) {
					this._nodeIndex = this.nodes.length - 2;
					callComplete = true;
					if(this._nodeIndex < 0) this._nodeIndex = 0;
					this._inc = -this._inc;
				}
			} else if(this._nodeIndex < 0) {
				this._nodeIndex = 1;
				callComplete = true;
				if(this._nodeIndex >= this.nodes.length) this._nodeIndex = this.nodes.length - 1;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
				this._inc = -this._inc;
			}
		} else if(this._nodeIndex >= this.nodes.length) {
			this._nodeIndex = this.nodes.length - 1;
			this.finished = callComplete = true;
		}
		if(callComplete && this.onComplete != null) this.onComplete(this);
		return this.nodes[this._nodeIndex];
	}
	,update: function() {
		flixel.util.FlxPath._point.set_x(this.object.x);
		flixel.util.FlxPath._point.set_y(this.object.y);
		if(this.autoCenter) {
			var _g = flixel.util.FlxPath._point;
			_g.set_x(_g.x + this.object.get_width() * 0.5);
			var _g = flixel.util.FlxPath._point;
			_g.set_y(_g.y + this.object.get_height() * 0.5);
		}
		var node = this.nodes[this._nodeIndex];
		var deltaX = node.x - flixel.util.FlxPath._point.x;
		var deltaY = node.y - flixel.util.FlxPath._point.y;
		var horizontalOnly = (this._mode & 65536) > 0;
		var verticalOnly = (this._mode & 1048576) > 0;
		if(horizontalOnly) {
			if((deltaX > 0?deltaX:-deltaX) < this.speed * flixel.FlxG.elapsed) node = this.advancePath();
		} else if(verticalOnly) {
			if((deltaY > 0?deltaY:-deltaY) < this.speed * flixel.FlxG.elapsed) node = this.advancePath();
		} else if(Math.sqrt(deltaX * deltaX + deltaY * deltaY) < this.speed * flixel.FlxG.elapsed) node = this.advancePath();
		if(this.speed != 0) {
			flixel.util.FlxPath._point.set_x(this.object.x);
			flixel.util.FlxPath._point.set_y(this.object.y);
			if(this.autoCenter) {
				var _g = flixel.util.FlxPath._point;
				_g.set_x(_g.x + this.object.get_width() * 0.5);
				var _g = flixel.util.FlxPath._point;
				_g.set_y(_g.y + this.object.get_height() * 0.5);
			}
			if(horizontalOnly || flixel.util.FlxPath._point.y == node.y) {
				this.object.velocity.set_x(flixel.util.FlxPath._point.x < node.x?this.speed:-this.speed);
				if(this.object.velocity.x < 0) this.angle = -90; else this.angle = 90;
				if(!horizontalOnly) this.object.velocity.set_y(0);
			} else if(verticalOnly || flixel.util.FlxPath._point.x == node.x) {
				this.object.velocity.set_y(flixel.util.FlxPath._point.y < node.y?this.speed:-this.speed);
				if(this.object.velocity.y < 0) this.angle = 0; else this.angle = 180;
				if(!verticalOnly) this.object.velocity.set_x(0);
			} else {
				this.object.velocity.set_x(flixel.util.FlxPath._point.x < node.x?this.speed:-this.speed);
				this.object.velocity.set_y(flixel.util.FlxPath._point.y < node.y?this.speed:-this.speed);
				this.angle = flixel.util.FlxAngle.getAngle(flixel.util.FlxPath._point,node);
				flixel.util.FlxAngle.rotatePoint(0,this.speed,0,0,this.angle,this.object.velocity);
			}
			if(this._autoRotate) {
				this.object.angularVelocity = 0;
				this.object.angularAcceleration = 0;
				this.object.set_angle(this.angle);
			}
			if(this.finished) this.abort();
		}
	}
	,setNode: function(NodeIndex) {
		if(NodeIndex < 0) NodeIndex = 0; else if(NodeIndex > this.nodes.length - 1) NodeIndex = this.nodes.length - 1;
		this._nodeIndex = NodeIndex;
		this.advancePath();
	}
	,restart: function() {
		if(flixel.util.FlxPath.manager != null) flixel.util.FlxPath.manager.add(this);
		this.finished = false;
		this.paused = false;
		if(this.nodes.length <= 0) this.paused = true;
		if(this._mode == 1 || this._mode == 256) {
			this._nodeIndex = this.nodes.length - 1;
			this._inc = -1;
		} else {
			this._nodeIndex = 0;
			this._inc = 1;
		}
		this.object.set_immovable(true);
		return this;
	}
	,run: function(Object,Nodes,Speed,Mode,AutoRotate,UsePooling) {
		if(UsePooling == null) UsePooling = true;
		if(AutoRotate == null) AutoRotate = false;
		if(Mode == null) Mode = 0;
		if(Speed == null) Speed = 100;
		this.usePooling = UsePooling;
		this.object = Object;
		this.nodes = Nodes;
		this.speed = Math.abs(Speed);
		this._mode = Mode;
		this._autoRotate = AutoRotate;
		this.restart();
		return this;
	}
	,reset: function() {
		this.autoCenter = true;
		return this;
	}
	,__class__: flixel.util.FlxPath
}
flixel.plugin.PathManager = function() {
	flixel.plugin.FlxPlugin.call(this);
	this._paths = new Array();
	this.set_visible(false);
};
$hxClasses["flixel.plugin.PathManager"] = flixel.plugin.PathManager;
flixel.plugin.PathManager.__name__ = ["flixel","plugin","PathManager"];
flixel.plugin.PathManager.__super__ = flixel.plugin.FlxPlugin;
flixel.plugin.PathManager.prototype = $extend(flixel.plugin.FlxPlugin.prototype,{
	onStateSwitch: function() {
		this.clear();
	}
	,clear: function() {
		while(this._paths.length > 0) {
			var path = this._paths.pop();
			flixel.util.FlxPath.put(path);
		}
	}
	,remove: function(Path,ReturnInPool) {
		if(ReturnInPool == null) ReturnInPool = true;
		flixel.util.FlxArrayUtil.fastSplice_flixel_util_FlxPath(this._paths,Path);
		if(ReturnInPool) flixel.util.FlxPath.put(Path);
	}
	,add: function(Path) {
		if(flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPath(this._paths,Path) < 0) this._paths.push(Path);
	}
	,update: function() {
		var _g = 0, _g1 = this._paths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			if(!path.paused) path.update();
		}
	}
	,destroy: function() {
		this.clear();
		this._paths = null;
		flixel.plugin.FlxPlugin.prototype.destroy.call(this);
	}
	,__class__: flixel.plugin.PathManager
});
flixel.util.FlxSave = function() {
	this.destroy();
};
$hxClasses["flixel.util.FlxSave"] = flixel.util.FlxSave;
flixel.util.FlxSave.__name__ = ["flixel","util","FlxSave"];
flixel.util.FlxSave.prototype = {
	checkBinding: function() {
		if(this._sharedObject == null) return false;
		return true;
	}
	,onDone: function(Result) {
		switch(Result) {
		case flixel.util.FlxSave.PENDING:
			null;
			break;
		case flixel.util.FlxSave.ERROR:
			null;
			break;
		}
		if(this._onComplete != null) this._onComplete(Result == flixel.util.FlxSave.SUCCESS);
		if(this._closeRequested) this.destroy();
		return Result == flixel.util.FlxSave.SUCCESS;
	}
	,erase: function() {
		if(!this.checkBinding()) return false;
		this._sharedObject.clear();
		return true;
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		if(!this.checkBinding()) return false;
		this._onComplete = OnComplete;
		var result;
		try {
			result = this._sharedObject.flush();
		} catch( e ) {
			if( js.Boot.__instanceof(e,flash.errors.Error) ) {
				return this.onDone(flixel.util.FlxSave.ERROR);
			} else throw(e);
		}
		if(result == flash.net.SharedObjectFlushStatus.PENDING) {
		}
		return this.onDone(result == flash.net.SharedObjectFlushStatus.FLUSHED?flixel.util.FlxSave.SUCCESS:flixel.util.FlxSave.PENDING);
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,bind: function(Name) {
		this.destroy();
		this.name = Name;
		try {
			this._sharedObject = flash.net.SharedObject.getLocal(this.name);
		} catch( e ) {
			if( js.Boot.__instanceof(e,flash.errors.Error) ) {
				this.destroy();
				return false;
			} else throw(e);
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,__class__: flixel.util.FlxSave
}
flixel.system.frontEnds.SoundFrontEnd = function() {
	this.volume = 1;
	this.volumeHandler = null;
	this.muted = false;
	this.volumeUpKeys = ["PLUS","NUMPADPLUS"];
	this.volumeDownKeys = ["MINUS","NUMPADMINUS"];
	this.muteKeys = ["ZERO","NUMPADZERO"];
	this.list = new flixel.group.FlxTypedGroup();
};
$hxClasses["flixel.system.frontEnds.SoundFrontEnd"] = flixel.system.frontEnds.SoundFrontEnd;
flixel.system.frontEnds.SoundFrontEnd.__name__ = ["flixel","system","frontEnds","SoundFrontEnd"];
flixel.system.frontEnds.SoundFrontEnd.prototype = {
	set_volume: function(Volume) {
		Volume = flixel.util.FlxMath.bound(Volume,0,1);
		if(this.volumeHandler != null) {
			var param = this.muted?0:Volume;
			this.volumeHandler(param);
		}
		return this.volume = Volume;
	}
	,loadSavedPrefs: function() {
		if(flixel.FlxG.save.data.volume != null) this.set_volume(flixel.FlxG.save.data.volume); else this.set_volume(0.5);
		if(flixel.FlxG.save.data.mute != null) this.muted = flixel.FlxG.save.data.mute; else this.muted = false;
	}
	,onFocus: function() {
		if(this.music != null) this.music.onFocus();
		var _g = 0, _g1 = this.list.get_members();
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocus();
		}
	}
	,onFocusLost: function() {
		if(this.music != null) this.music.onFocusLost();
		var _g = 0, _g1 = this.list.get_members();
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocusLost();
		}
	}
	,update: function() {
		if(this.music != null && this.music.active) this.music.update();
		if(this.list != null && this.list.active) this.list.update();
	}
	,destroy: function(ForceDestroy) {
		if(ForceDestroy == null) ForceDestroy = false;
		if(this.music != null && (ForceDestroy || !this.music.survive)) {
			this.music.destroy();
			this.music = null;
		}
		var _g = 0, _g1 = this.list.get_members();
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && (ForceDestroy || !sound.survive)) sound.destroy();
		}
	}
	,resume: function() {
		if(this.music != null && this.music.exists) this.music.resume();
		var _g = 0, _g1 = this.list.get_members();
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists) sound.resume();
		}
	}
	,pause: function() {
		if(this.music != null && this.music.exists && this.music.active) this.music.pause();
		var _g = 0, _g1 = this.list.get_members();
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists && sound.active) sound.pause();
		}
	}
	,stream: function(URL,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		return null;
	}
	,play: function(EmbeddedSound,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		return null;
	}
	,load: function(EmbeddedSound,Volume,Looped,AutoDestroy,AutoPlay,URL,OnComplete) {
		if(AutoPlay == null) AutoPlay = false;
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		return null;
	}
	,playMusic: function(Music,Volume,Looped) {
		if(Looped == null) Looped = true;
		if(Volume == null) Volume = 1;
	}
	,__class__: flixel.system.frontEnds.SoundFrontEnd
	,__properties__: {set_volume:"set_volume"}
}
flixel.system.frontEnds.VCRFrontEnd = function() {
	this.stepRequested = false;
	this.paused = false;
};
$hxClasses["flixel.system.frontEnds.VCRFrontEnd"] = flixel.system.frontEnds.VCRFrontEnd;
flixel.system.frontEnds.VCRFrontEnd.__name__ = ["flixel","system","frontEnds","VCRFrontEnd"];
flixel.system.frontEnds.VCRFrontEnd.prototype = {
	resume: function() {
		if(this.paused) {
			if(!flixel.FlxG.mouse.useSystemCursor) flash.ui.Mouse.hide();
			this.paused = false;
		}
	}
	,pause: function() {
		if(!this.paused) {
			if(!flixel.FlxG.mouse.useSystemCursor) flash.ui.Mouse.show();
			this.paused = true;
		}
	}
	,__class__: flixel.system.frontEnds.VCRFrontEnd
}
flixel.system.frontEnds.WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel.system.frontEnds.WatchFrontEnd;
flixel.system.frontEnds.WatchFrontEnd.__name__ = ["flixel","system","frontEnds","WatchFrontEnd"];
flixel.system.frontEnds.WatchFrontEnd.prototype = {
	removeMouse: function() {
	}
	,addMouse: function() {
	}
	,removeQuick: function(Name) {
	}
	,addQuick: function(Name,NewValue) {
	}
	,remove: function(AnyObject,VariableName) {
	}
	,add: function(AnyObject,VariableName,DisplayName) {
	}
	,__class__: flixel.system.frontEnds.WatchFrontEnd
}
flixel.FlxG = function() { }
$hxClasses["flixel.FlxG"] = flixel.FlxG;
flixel.FlxG.__name__ = ["flixel","FlxG"];
flixel.FlxG.__properties__ = {set_fullscreen:"set_fullscreen",set_scaleMode:"set_scaleMode",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_updateFramerate:"get_updateFramerate",get_state:"get_state",get_stage:"get_stage"}
flixel.FlxG.resizeGame = function(Width,Height) {
	flixel.FlxG._scaleMode.onMeasure(Width,Height);
}
flixel.FlxG.resetGame = function() {
	flixel.FlxG.game._resetGame = true;
}
flixel.FlxG.switchState = function(State) {
	flixel.FlxG.game._requestedState = State;
}
flixel.FlxG.resetState = function() {
	flixel.FlxG.game._requestedState = Type.createInstance(Type.getClass(flixel.FlxG.game._state),[]);
}
flixel.FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) ObjectOrGroup1 = flixel.FlxG.game._state;
	if(ObjectOrGroup2 == ObjectOrGroup1) ObjectOrGroup2 = null;
	flixel.system.FlxQuadTree.divisions = flixel.FlxG.worldDivisions;
	var quadTree = flixel.system.FlxQuadTree.recycle(flixel.FlxG.worldBounds.x,flixel.FlxG.worldBounds.y,flixel.FlxG.worldBounds.width,flixel.FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
}
flixel.FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 255;
	return flixel.util.FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
}
flixel.FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel.FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel.FlxObject.separate);
}
flixel.FlxG.safeDestroy = function(Object) {
	if(Object != null) Object.destroy();
	return null;
}
flixel.FlxG.openURL = function(URL,Target) {
	if(Target == null) Target = "_blank";
	flash.Lib.getURL(new flash.net.URLRequest(URL),Target);
}
flixel.FlxG.init = function(Game,Width,Height,Zoom) {
	flixel.FlxG.game = Game;
	flixel.FlxG.width = Math.abs(Width) | 0;
	flixel.FlxG.height = Math.abs(Height) | 0;
	flixel.FlxCamera.defaultZoom = Zoom;
	flixel.FlxG._scaleMode.onMeasure(flash.Lib.get_current().get_stage().get_stageWidth(),flash.Lib.get_current().get_stage().get_stageHeight());
	flixel.FlxG.keys = flixel.FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel.input.keyboard.FlxKeyboard());
	flixel.FlxG.mouse = flixel.FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel.input.mouse.FlxMouse(flixel.FlxG.game._inputContainer));
	flixel.FlxG.touches = flixel.FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel.input.touch.FlxTouchManager());
	flixel.FlxG.gamepads = flixel.FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel.input.gamepad.FlxGamepadManager());
	flixel.FlxG.save.bind("flixel");
	flixel.FlxG.sound.loadSavedPrefs();
	flixel.system.FlxAssets.init();
}
flixel.FlxG.reset = function() {
	flixel.text.pxText.PxBitmapFont.clearStorage();
	flixel.util.FlxRandom.set_globalSeed(Math.random() * 2147483647 | 0);
	flixel.FlxG.bitmap.clearCache();
	flixel.FlxG.inputs.reset();
	flixel.FlxG.sound.destroy(true);
	flixel.FlxG.timeScale = 1.0;
	flixel.FlxG.elapsed = 0;
	flixel.FlxG.worldBounds.set(-10,-10,flixel.FlxG.width + 20,flixel.FlxG.height + 20);
	flixel.FlxG.worldDivisions = 6;
}
flixel.FlxG.set_scaleMode = function(ScaleMode) {
	flixel.FlxG._scaleMode = ScaleMode;
	flixel.FlxG.game.onResize();
	return ScaleMode;
}
flixel.FlxG.get_updateFramerate = function() {
	return 1000 / flixel.FlxG.game._stepMS | 0;
}
flixel.FlxG.set_updateFramerate = function(Framerate) {
	if(Framerate < flixel.FlxG.drawFramerate) null;
	flixel.FlxG.game._stepMS = Math.abs(1000 / Framerate) | 0;
	flixel.FlxG.game._stepSeconds = flixel.FlxG.game._stepMS / 1000;
	if(flixel.FlxG.game._maxAccumulation < flixel.FlxG.game._stepMS) flixel.FlxG.game._maxAccumulation = flixel.FlxG.game._stepMS;
	return Framerate;
}
flixel.FlxG.set_drawFramerate = function(Framerate) {
	if(Framerate > (1000 / flixel.FlxG.game._stepMS | 0)) null;
	flixel.FlxG.drawFramerate = Math.abs(Framerate) | 0;
	if(flixel.FlxG.game.get_stage() != null) flixel.FlxG.game.get_stage().set_frameRate(flixel.FlxG.drawFramerate);
	flixel.FlxG.game._maxAccumulation = (2000 / flixel.FlxG.drawFramerate | 0) - 1;
	if(flixel.FlxG.game._maxAccumulation < flixel.FlxG.game._stepMS) flixel.FlxG.game._maxAccumulation = flixel.FlxG.game._stepMS;
	return Framerate;
}
flixel.FlxG.set_fullscreen = function(Value) {
	if(Value) flash.Lib.get_current().get_stage().set_displayState(flash.display.StageDisplayState.FULL_SCREEN); else flash.Lib.get_current().get_stage().set_displayState(flash.display.StageDisplayState.NORMAL);
	return flixel.FlxG.fullscreen = Value;
}
flixel.FlxG.get_stage = function() {
	return flash.Lib.get_current().get_stage();
}
flixel.FlxG.get_state = function() {
	return flixel.FlxG.game._state;
}
flixel._FlxSprite = {}
flixel._FlxSprite.GraphicDefault = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel._FlxSprite.GraphicDefault.preload != null) {
		this.___textureBuffer.width = flixel._FlxSprite.GraphicDefault.preload.get_width() | 0;
		this.___textureBuffer.height = flixel._FlxSprite.GraphicDefault.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel._FlxSprite.GraphicDefault.preload.get_width(),flixel._FlxSprite.GraphicDefault.preload.get_height());
		this.setPixels(this.rect,flixel._FlxSprite.GraphicDefault.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel._FlxSprite.GraphicDefault.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel._FlxSprite.GraphicDefault"] = flixel._FlxSprite.GraphicDefault;
flixel._FlxSprite.GraphicDefault.__name__ = ["flixel","_FlxSprite","GraphicDefault"];
flixel._FlxSprite.GraphicDefault.__super__ = flash.display.BitmapData;
flixel._FlxSprite.GraphicDefault.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel._FlxSprite.GraphicDefault
});
flixel.FlxSubState = function(BGColor) {
	if(BGColor == null) BGColor = 0;
	this._created = false;
	flixel.FlxState.call(this);
	this.closeCallback = null;
	this._bgSprite = new flixel.system.FlxBGSprite();
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel.FlxSubState;
flixel.FlxSubState.__name__ = ["flixel","FlxSubState"];
flixel.FlxSubState.__super__ = flixel.FlxState;
flixel.FlxSubState.prototype = $extend(flixel.FlxState.prototype,{
	set_bgColor: function(Value) {
		if(this._bgSprite != null) this._bgSprite.get_pixels().setPixel32(0,0,Value);
		return this._bgColor = Value;
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,close: function() {
		if(this._parentState != null) this._parentState.closeSubState();
	}
	,destroy: function() {
		flixel.FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this._parentState = null;
		this._bgSprite = null;
	}
	,draw: function() {
		this._bgSprite.draw();
		flixel.FlxState.prototype.draw.call(this);
	}
	,__class__: flixel.FlxSubState
});
flixel.animation = {}
flixel.animation.FlxBaseAnimation = function(Parent,Name) {
	this.curIndex = 0;
	this.parent = Parent;
	this.name = Name;
};
$hxClasses["flixel.animation.FlxBaseAnimation"] = flixel.animation.FlxBaseAnimation;
flixel.animation.FlxBaseAnimation.__name__ = ["flixel","animation","FlxBaseAnimation"];
flixel.animation.FlxBaseAnimation.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.animation.FlxBaseAnimation.prototype = {
	clone: function(Parent) {
		return null;
	}
	,update: function() {
	}
	,destroy: function() {
		this.parent = null;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) this.parent.set_frameIndex(Value);
		return Value;
	}
	,__class__: flixel.animation.FlxBaseAnimation
	,__properties__: {set_curIndex:"set_curIndex"}
}
flixel.animation.FlxAnimation = function(Parent,Name,Frames,FrameRate,Looped) {
	if(Looped == null) Looped = true;
	if(FrameRate == null) FrameRate = 0;
	this._frameTimer = 0;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	flixel.animation.FlxBaseAnimation.call(this,Parent,Name);
	this.set_frameRate(FrameRate);
	this._frames = Frames;
	this.looped = Looped;
};
$hxClasses["flixel.animation.FlxAnimation"] = flixel.animation.FlxAnimation;
flixel.animation.FlxAnimation.__name__ = ["flixel","animation","FlxAnimation"];
flixel.animation.FlxAnimation.__super__ = flixel.animation.FlxBaseAnimation;
flixel.animation.FlxAnimation.prototype = $extend(flixel.animation.FlxBaseAnimation.prototype,{
	get_numFrames: function() {
		return this._frames.length;
	}
	,set_curFrame: function(Frame) {
		if(Frame >= 0) {
			if(!this.looped && Frame >= this._frames.length) {
				this.finished = true;
				this.curFrame = this._frames.length - 1;
			} else this.curFrame = Frame;
		} else this.curFrame = flixel.util.FlxRandom.intRanged(0,this._frames.length - 1);
		this.set_curIndex(this._frames[this.curFrame]);
		return Frame;
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) this.delay = 1.0 / value;
		return value;
	}
	,clone: function(Parent) {
		return new flixel.animation.FlxAnimation(Parent,this.name,this._frames,this.frameRate,this.looped);
	}
	,update: function() {
		if(this.delay > 0 && (this.looped || !this.finished) && !this.paused) {
			this._frameTimer += flixel.FlxG.elapsed;
			while(this._frameTimer > this.delay) {
				this._frameTimer = this._frameTimer - this.delay;
				if(this.looped && this.curFrame == this._frames.length - 1) this.set_curFrame(0); else {
					var _g = this, _g1 = _g.curFrame;
					_g.set_curFrame(_g1 + 1);
					_g1;
				}
			}
		}
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,restart: function() {
		this.play(true);
	}
	,play: function(Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(!Force && (this.looped || !this.finished)) {
			this.paused = false;
			this.finished = false;
			this.set_curFrame(this.curFrame);
			return;
		}
		this.paused = false;
		this._frameTimer = 0;
		if(this.delay <= 0 || Frame == this._frames.length - 1) this.finished = true; else this.finished = false;
		if(Frame < 0) this.set_curFrame(flixel.util.FlxRandom.intRanged(0,this._frames.length - 1)); else if(this._frames.length > Frame) this.set_curFrame(Frame); else this.set_curFrame(0);
	}
	,destroy: function() {
		this._frames = null;
		this.name = null;
		flixel.animation.FlxBaseAnimation.prototype.destroy.call(this);
	}
	,__class__: flixel.animation.FlxAnimation
	,__properties__: $extend(flixel.animation.FlxBaseAnimation.prototype.__properties__,{set_frameRate:"set_frameRate",set_curFrame:"set_curFrame",get_numFrames:"get_numFrames"})
});
flixel.animation.FlxAnimationController = function(Sprite) {
	this.frameIndex = 0;
	this._sprite = Sprite;
	this._animations = new haxe.ds.StringMap();
};
$hxClasses["flixel.animation.FlxAnimationController"] = flixel.animation.FlxAnimationController;
flixel.animation.FlxAnimationController.__name__ = ["flixel","animation","FlxAnimationController"];
flixel.animation.FlxAnimationController.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.animation.FlxAnimationController.frameSortFunction = function(frame1,frame2) {
	var name1 = frame1.name;
	var name2 = frame2.name;
	var num1 = Std.parseInt(name1.substring(flixel.animation.FlxAnimationController.prefixLength,name1.length - flixel.animation.FlxAnimationController.postfixLength));
	var num2 = Std.parseInt(name2.substring(flixel.animation.FlxAnimationController.prefixLength,name2.length - flixel.animation.FlxAnimationController.postfixLength));
	if(num1 > num2) return 1; else if(num2 > num1) return -1;
	return 0;
}
flixel.animation.FlxAnimationController.prototype = {
	getFrameIndex: function(Frame) {
		return flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame(this._sprite.framesData.frames,Frame);
	}
	,get_frames: function() {
		return this._sprite.frames;
	}
	,set_finished: function(Value) {
		if(Value == true && this._curAnim != null) {
			this._curAnim.finished = true;
			this.set_frameIndex(this._curAnim._frames.length - 1);
		}
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) finished = this._curAnim.finished;
		return finished;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) this._curAnim.paused = Value;
		return Value;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) paused = this._curAnim.paused;
		return paused;
	}
	,set_curAnim: function(Anim) {
		if(Anim != null && Anim != this._curAnim) {
			if(this._curAnim != null) this._curAnim.stop();
			Anim.play();
		}
		return this._curAnim = Anim;
	}
	,get_curAnim: function() {
		var anim = null;
		if(this._curAnim != null && this._curAnim.delay > 0 && (this._curAnim.looped || !this._curAnim.finished)) anim = this._curAnim;
		return anim;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) animName = this._curAnim.name;
		return animName;
	}
	,set_frameName: function(Value) {
		if(this._sprite.framesData != null && this._sprite.framesData.framesHash.exists(Value)) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var frame = this._sprite.framesData.framesHash.get(Value);
			if(frame != null) this.set_frameIndex(flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame(this._sprite.framesData.frames,frame));
		}
		return Value;
	}
	,get_frameName: function() {
		return this._sprite.frame.name;
	}
	,set_frameIndex: function(Frame) {
		if(this._sprite.framesData != null) {
			Frame = Frame % this._sprite.frames;
			this._sprite.set_frame(this._sprite.framesData.frames[Frame]);
			if(this.callback != null) this.callback(this._curAnim != null?this._curAnim.name:null,this._curAnim != null?this._curAnim.curFrame:Frame,Frame);
		}
		return this.frameIndex = Frame;
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		this.set_frameIndex(flixel.util.FlxRandom.intRanged(0,this._sprite.frames - 1));
	}
	,getByName: function(Name) {
		return this._animations.get(Name);
	}
	,resume: function() {
		if(this._curAnim != null) this._curAnim.paused = false;
	}
	,pause: function() {
		if(this._curAnim != null) this._curAnim.paused = true;
	}
	,play: function(AnimName,Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(AnimName == null) {
			if(this._curAnim != null) this._curAnim.stop();
			this._curAnim = null;
		}
		if(AnimName == null || this._animations.get(AnimName) == null) return;
		if(this._curAnim != null && AnimName != this._curAnim.name) this._curAnim.stop();
		this._curAnim = this._animations.get(AnimName);
		this._curAnim.play(Force,Frame);
	}
	,addByPrefix: function(Name,Prefix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var animFrames = new Array();
			var l = this._sprite.framesData.frames.length;
			var _g = 0;
			while(_g < l) {
				var i = _g++;
				if(StringTools.startsWith(this._sprite.framesData.frames[i].name,Prefix)) animFrames.push(this._sprite.framesData.frames[i]);
			}
			if(animFrames.length > 0) {
				var name = animFrames[0].name;
				var postFix = name.substring(name.indexOf(".",Prefix.length),name.length);
				flixel.animation.FlxAnimationController.prefixLength = Prefix.length;
				flixel.animation.FlxAnimationController.postfixLength = postFix.length;
				animFrames.sort(flixel.animation.FlxAnimationController.frameSortFunction);
				var frameIndices = new Array();
				l = animFrames.length;
				var _g = 0;
				while(_g < l) {
					var i = _g++;
					frameIndices.push(flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame(this._sprite.framesData.frames,animFrames[i]));
				}
				if(frameIndices.length > 0) {
					var anim = new flixel.animation.FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
					this._animations.set(Name,anim);
				}
			}
		}
	}
	,findSpriteFrame: function(Prefix,Index,Postfix) {
		var numFrames = this._sprite.frames;
		var flxFrames = this._sprite.framesData.frames;
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			var name = flxFrames[i].name;
			if(StringTools.startsWith(name,Prefix) && StringTools.endsWith(name,Postfix)) {
				var index = Std.parseInt(name.substring(Prefix.length,name.length - Postfix.length));
				if(index != null && index == Index) return i;
			}
		}
		return -1;
	}
	,addByIndicies: function(Name,Prefix,Indicies,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = new Array();
			var l = Indicies.length;
			var _g = 0;
			while(_g < l) {
				var i = _g++;
				var indexToAdd = this.findSpriteFrame(Prefix,Indicies[i],Postfix);
				if(indexToAdd != -1) frameIndices.push(indexToAdd);
			}
			if(frameIndices.length > 0) {
				var anim = new flixel.animation.FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,addByStringIndicies: function(Name,Prefix,Indicies,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = new Array();
			var l = Indicies.length;
			var _g = 0;
			while(_g < l) {
				var i = _g++;
				var name = Prefix + Indicies[i] + Postfix;
				if(this._sprite.framesData.framesHash.exists(name)) {
					var frameToAdd = this._sprite.framesData.framesHash.get(name);
					frameIndices.push(flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame(this._sprite.framesData.frames,frameToAdd));
				}
			}
			if(frameIndices.length > 0) {
				var anim = new flixel.animation.FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,addByNames: function(Name,FrameNames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var indices = new Array();
			var l = FrameNames.length;
			var _g = 0;
			while(_g < l) {
				var i = _g++;
				var name = FrameNames[i];
				if(this._sprite.framesData.framesHash.exists(name)) {
					var frameToAdd = this._sprite.framesData.framesHash.get(name);
					indices.push(flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame(this._sprite.framesData.frames,frameToAdd));
				}
			}
			if(indices.length > 0) {
				var anim = new flixel.animation.FlxAnimation(this,Name,indices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,add: function(Name,Frames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[i] >= this._sprite.frames) Frames.splice(i,1);
			i--;
		}
		if(Frames.length > 0) {
			var anim = new flixel.animation.FlxAnimation(this,Name,Frames,FrameRate,Looped);
			this._animations.set(Name,anim);
		}
	}
	,get: function(Name) {
		return this._animations.get(Name);
	}
	,clearAnimations: function() {
		if(this._animations != null) {
			var anim;
			var $it0 = this._animations.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				anim = this._animations.get(key);
				if(anim != null) anim.destroy();
				this._animations.remove(key);
			}
		}
		this._curAnim = null;
	}
	,clearPrerotated: function() {
		if(this._prerotated != null) this._prerotated.destroy();
		this._prerotated = null;
	}
	,destroy: function() {
		this.destroyAnimations();
		this._animations = null;
		this.callback = null;
		this._sprite = null;
	}
	,destroyAnimations: function() {
		this.clearAnimations();
		this.clearPrerotated();
	}
	,createPrerotated: function(Controller) {
		this.destroyAnimations();
		Controller = Controller != null?Controller:this;
		this._prerotated = new flixel.animation.FlxPrerotatedAnimation(Controller,Controller._sprite.bakedRotationAngle);
	}
	,copyFrom: function(controller) {
		this.destroyAnimations();
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(controller._animations))();
		while( $it0.hasNext() ) {
			var anim = $it0.next();
			this.add(anim.name,anim._frames,anim.frameRate,anim.looped);
		}
		if(controller._prerotated != null) this.createPrerotated();
		if(controller.get_name() != null) this.set_name(controller.get_name());
		this.set_frameIndex(controller.frameIndex);
		return this;
	}
	,update: function() {
		if(this._curAnim != null) this._curAnim.update(); else if(this._prerotated != null) this._prerotated.set_angle(this._sprite.angle);
	}
	,__class__: flixel.animation.FlxAnimationController
	,__properties__: {set_curAnim:"set_curAnim",get_curAnim:"get_curAnim",set_frameIndex:"set_frameIndex",set_frameName:"set_frameName",get_frameName:"get_frameName",set_name:"set_name",get_name:"get_name",set_paused:"set_paused",get_paused:"get_paused",set_finished:"set_finished",get_finished:"get_finished",get_frames:"get_frames"}
}
flixel.animation.FlxPrerotatedAnimation = function(Parent,Baked) {
	this.angle = 0;
	flixel.animation.FlxBaseAnimation.call(this,Parent,"prerotated_animation");
	this.baked = Baked;
	this.rotations = Math.round(360 / Baked);
};
$hxClasses["flixel.animation.FlxPrerotatedAnimation"] = flixel.animation.FlxPrerotatedAnimation;
flixel.animation.FlxPrerotatedAnimation.__name__ = ["flixel","animation","FlxPrerotatedAnimation"];
flixel.animation.FlxPrerotatedAnimation.__super__ = flixel.animation.FlxBaseAnimation;
flixel.animation.FlxPrerotatedAnimation.prototype = $extend(flixel.animation.FlxBaseAnimation.prototype,{
	clone: function(Parent) {
		return new flixel.animation.FlxPrerotatedAnimation(Parent,this.baked);
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null) this.parent.set_frameIndex(Value);
		return Value;
	}
	,set_angle: function(Value) {
		var oldIndex = this.curIndex;
		var angleHelper = Math.floor(Value % 360);
		while(angleHelper < 0) angleHelper += 360;
		var newIndex = Math.floor(angleHelper / this.baked + 0.5);
		newIndex = newIndex % this.rotations | 0;
		if(oldIndex != newIndex) this.set_curIndex(newIndex);
		return this.angle = Value;
	}
	,__class__: flixel.animation.FlxPrerotatedAnimation
	,__properties__: $extend(flixel.animation.FlxBaseAnimation.prototype.__properties__,{set_angle:"set_angle"})
});
flixel.util.FlxPool_flixel_effects_FlxFlicker = function() {
	this._pool = [];
};
$hxClasses["flixel.util.FlxPool_flixel_effects_FlxFlicker"] = flixel.util.FlxPool_flixel_effects_FlxFlicker;
flixel.util.FlxPool_flixel_effects_FlxFlicker.__name__ = ["flixel","util","FlxPool_flixel_effects_FlxFlicker"];
flixel.util.FlxPool_flixel_effects_FlxFlicker.prototype = {
	get_length: function() {
		return this._pool.length;
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,put: function(obj) {
		if(obj != null && flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPool_T(this._pool,obj) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = new flixel.effects.FlxFlicker();
		return obj;
	}
	,__class__: flixel.util.FlxPool_flixel_effects_FlxFlicker
	,__properties__: {get_length:"get_length"}
}
flixel.effects = {}
flixel.effects.FlxFlicker = function() {
};
$hxClasses["flixel.effects.FlxFlicker"] = flixel.effects.FlxFlicker;
flixel.effects.FlxFlicker.__name__ = ["flixel","effects","FlxFlicker"];
flixel.effects.FlxFlicker.recycle = function(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
	var flicker = flixel.effects.FlxFlicker._pool.get();
	flicker.reset(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	return flicker;
}
flixel.effects.FlxFlicker.put = function(Flicker) {
	flixel.effects.FlxFlicker._pool.put(Flicker);
}
flixel.effects.FlxFlicker.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	if(flixel.effects.FlxFlicker.isFlickering(Object)) {
		if(ForceRestart) flixel.effects.FlxFlicker.stopFlickering(Object); else return;
	}
	if(Interval <= 0) Interval = flixel.FlxG.elapsed;
	var fl = flixel.effects.FlxFlicker.recycle(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	flixel.effects.FlxFlicker._boundObjects.set(Object,fl);
	fl;
	fl.start();
}
flixel.effects.FlxFlicker.isFlickering = function(Object) {
	return flixel.effects.FlxFlicker._boundObjects.h.hasOwnProperty(Object.__id__);
}
flixel.effects.FlxFlicker.stopFlickering = function(Object) {
	var boundFlicker = flixel.effects.FlxFlicker._boundObjects.h[Object.__id__];
	if(boundFlicker != null) boundFlicker.stop();
}
flixel.effects.FlxFlicker.prototype = {
	destroy: function() {
		this.object = null;
		this.timer = null;
		this.completionCallback = null;
		this.progressCallback = null;
	}
	,flickerProgress: function(Timer) {
		this.object.set_visible(!this.object.visible);
		if(this.progressCallback != null) this.progressCallback(this);
		if(Timer.loops > 0 && Timer.loops - Timer._loopsCounter == 0) {
			this.object.set_visible(this.endVisibility);
			if(this.completionCallback != null) this.completionCallback(this);
			this.release();
		}
	}
	,release: function() {
		flixel.effects.FlxFlicker._boundObjects.remove(this.object);
		flixel.effects.FlxFlicker.put(this);
	}
	,stop: function() {
		this.timer.abort();
		this.object.set_visible(true);
		this.release();
	}
	,start: function() {
		this.timer = flixel.util.FlxTimer.recycle();
		this.timer.run(this.interval,$bind(this,this.flickerProgress),this.duration / this.interval | 0);
	}
	,reset: function(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
		this.object = Object;
		this.duration = Duration;
		this.interval = Interval;
		this.completionCallback = CompletionCallback;
		this.progressCallback = ProgressCallback;
		this.endVisibility = EndVisibility;
	}
	,__class__: flixel.effects.FlxFlicker
}
flixel.group.FlxTypedGroupIterator = function(GroupMembers,filter) {
	this._groupMembers = GroupMembers;
	this._cursor = 0;
	this._filter = filter;
};
$hxClasses["flixel.group.FlxTypedGroupIterator"] = flixel.group.FlxTypedGroupIterator;
flixel.group.FlxTypedGroupIterator.__name__ = ["flixel","group","FlxTypedGroupIterator"];
flixel.group.FlxTypedGroupIterator.prototype = {
	hasNext: function() {
		while(this._cursor < this._groupMembers.length && (this._groupMembers[this._cursor] == null || this._filter != null && !this._filter(this._groupMembers[this._cursor]))) this._cursor++;
		return this._cursor < this._groupMembers.length;
	}
	,next: function() {
		return this.hasNext()?this._groupMembers[this._cursor++]:null;
	}
	,__class__: flixel.group.FlxTypedGroupIterator
}
flixel.input = {}
flixel.input.FlxSwipe = function(ID,StartPosition,EndPosition,StartTimeInTicks) {
	this.ID = ID;
	this.startPosition = StartPosition;
	this.endPosition = EndPosition;
	this._startTimeInTicks = StartTimeInTicks;
};
$hxClasses["flixel.input.FlxSwipe"] = flixel.input.FlxSwipe;
flixel.input.FlxSwipe.__name__ = ["flixel","input","FlxSwipe"];
flixel.input.FlxSwipe.prototype = {
	get_duration: function() {
		return flixel.FlxG.game.ticks - this._startTimeInTicks;
	}
	,get_angle: function() {
		return flixel.util.FlxAngle.getAngle(this.startPosition,this.endPosition);
	}
	,get_distance: function() {
		return flixel.util.FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y);
	}
	,toString: function() {
		return flixel.util.FlxStringUtil.getDebugString([{ label : "ID", value : this.ID},{ label : "start", value : this.startPosition},{ label : "end", value : this.endPosition},{ label : "distance", value : flixel.util.FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y)},{ label : "angle", value : flixel.util.FlxAngle.getAngle(this.startPosition,this.endPosition)},{ label : "duration", value : (flixel.FlxG.game.ticks - this._startTimeInTicks) / 1000}]);
	}
	,__class__: flixel.input.FlxSwipe
	,__properties__: {get_distance:"get_distance",get_angle:"get_angle",get_duration:"get_duration"}
}
flixel.input.gamepad = {}
flixel.input.gamepad.FlxGamepad = function(ID,GlobalDeadZone) {
	if(GlobalDeadZone == null) GlobalDeadZone = 0;
	this.dpadRight = false;
	this.dpadLeft = false;
	this.dpadDown = false;
	this.dpadUp = false;
	this.deadZone = 0.15;
	this.buttons = new haxe.ds.IntMap();
	this.axis = (function($this) {
		var $r;
		var _g = [];
		{
			var _g1 = 0;
			while(_g1 < 6) {
				var i = _g1++;
				_g.push(0);
			}
		}
		$r = _g;
		return $r;
	}(this));
	this.ball = new flixel.util.FlxPoint();
	this.hat = new flixel.util.FlxPoint();
	this.id = ID;
	if(GlobalDeadZone != 0) this.deadZone = GlobalDeadZone;
};
$hxClasses["flixel.input.gamepad.FlxGamepad"] = flixel.input.gamepad.FlxGamepad;
flixel.input.gamepad.FlxGamepad.__name__ = ["flixel","input","gamepad","FlxGamepad"];
flixel.input.gamepad.FlxGamepad.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.input.gamepad.FlxGamepad.prototype = {
	get_dpadRight: function() {
		return this.hat.x > 0;
	}
	,get_dpadLeft: function() {
		return this.hat.x < 0;
	}
	,get_dpadDown: function() {
		return this.hat.y > 0;
	}
	,get_dpadUp: function() {
		return this.hat.y < 0;
	}
	,anyInput: function() {
		if(this.anyButton()) return true;
		var numAxis = this.axis.length;
		var _g = 0;
		while(_g < numAxis) {
			var i = _g++;
			if(this.axis[0] != 0) return true;
		}
		if(this.ball.x != 0 || this.ball.y != 0) return true;
		if(this.hat.x != 0 || this.hat.y != 0) return true;
		return false;
	}
	,anyButton: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			if(button.current > 0) return true;
		}
		return false;
	}
	,getAxis: function(AxisID) {
		if(AxisID < 0 || AxisID >= this.axis.length) return 0;
		var v = navigator.webkitGetGamepads().item(this.id).axes[AxisID];
		if(Math.abs(v) > this.deadZone) return Math.round(v);
		return 0;
	}
	,firstJustReleasedButtonID: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			if(button.current == -1) return button.id;
		}
		return -1;
	}
	,firstJustPressedButtonID: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			if(button.current == 2) return button.id;
		}
		return -1;
	}
	,firstPressedButtonID: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			if(button.current > 0) return button.id;
		}
		return -1;
	}
	,justReleased: function(ButtonID) {
		if(this.buttons.exists(ButtonID)) return this.buttons.get(ButtonID).current == -1;
		return false;
	}
	,justPressed: function(ButtonID) {
		if(this.buttons.exists(ButtonID)) return this.buttons.get(ButtonID).current == 2;
		return false;
	}
	,pressed: function(ButtonID) {
		var v = navigator.webkitGetGamepads().item(this.id).buttons[ButtonID];
		return Math.round(v) == 1?true:false;
		return false;
	}
	,checkStatus: function(ButtonID,Status) {
		if(this.buttons.exists(ButtonID)) return this.buttons.get(ButtonID).current == Status;
		return false;
	}
	,destroy: function() {
		this.buttons = null;
		this.axis = null;
		this.hat = null;
		this.ball = null;
	}
	,reset: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			button.current = 0;
			button.last = 0;
		}
		var numAxis = this.axis.length;
		var _g = 0;
		while(_g < numAxis) {
			var i = _g++;
			this.axis[i] = 0;
		}
		this.hat.set();
		this.ball.set();
	}
	,update: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.buttons))();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			if(button.last == -1 && button.current == -1) button.current = 0; else if(button.last == 2 && button.current == 2) button.current = 1;
			button.last = button.current;
		}
	}
	,getButton: function(ButtonID) {
		var gamepadButton = this.buttons.get(ButtonID);
		if(gamepadButton == null) {
			gamepadButton = new flixel.input.gamepad.FlxGamepadButton(ButtonID);
			this.buttons.set(ButtonID,gamepadButton);
		}
		return gamepadButton;
	}
	,__class__: flixel.input.gamepad.FlxGamepad
	,__properties__: {get_dpadUp:"get_dpadUp",get_dpadDown:"get_dpadDown",get_dpadLeft:"get_dpadLeft",get_dpadRight:"get_dpadRight"}
}
flixel.input.gamepad.FlxGamepadButton = function(ID,Current,Last) {
	if(Last == null) Last = 0;
	if(Current == null) Current = 0;
	this.id = ID;
	this.current = Current;
	this.last = Last;
};
$hxClasses["flixel.input.gamepad.FlxGamepadButton"] = flixel.input.gamepad.FlxGamepadButton;
flixel.input.gamepad.FlxGamepadButton.__name__ = ["flixel","input","gamepad","FlxGamepadButton"];
flixel.input.gamepad.FlxGamepadButton.prototype = {
	reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,__class__: flixel.input.gamepad.FlxGamepadButton
}
flixel.interfaces.IFlxInput = function() { }
$hxClasses["flixel.interfaces.IFlxInput"] = flixel.interfaces.IFlxInput;
flixel.interfaces.IFlxInput.__name__ = ["flixel","interfaces","IFlxInput"];
flixel.interfaces.IFlxInput.prototype = {
	__class__: flixel.interfaces.IFlxInput
}
flixel.input.gamepad.FlxGamepadManager = function() {
	this.firstActive = null;
	this.lastActive = null;
	this._gamepads = new haxe.ds.IntMap();
};
$hxClasses["flixel.input.gamepad.FlxGamepadManager"] = flixel.input.gamepad.FlxGamepadManager;
flixel.input.gamepad.FlxGamepadManager.__name__ = ["flixel","input","gamepad","FlxGamepadManager"];
flixel.input.gamepad.FlxGamepadManager.__interfaces__ = [flixel.interfaces.IFlxInput];
flixel.input.gamepad.FlxGamepadManager.prototype = {
	set_globalDeadZone: function(DeadZone) {
		this.globalDeadZone = DeadZone;
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this._gamepads))();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			gamepad.deadZone = DeadZone;
		}
		return this.globalDeadZone;
	}
	,get_numActiveGamepads: function() {
		var count = 0;
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this._gamepads))();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			count++;
		}
		return count;
	}
	,onFocusLost: function() {
		this.reset();
	}
	,onFocus: function() {
	}
	,update: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this._gamepads))();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			gamepad.update();
		}
	}
	,reset: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this._gamepads))();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			gamepad.reset();
		}
	}
	,destroy: function() {
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this._gamepads))();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			gamepad.destroy();
		}
		this.firstActive = flixel.FlxG.safeDestroy(this.firstActive);
		this.lastActive = flixel.FlxG.safeDestroy(this.lastActive);
		this._gamepads = new haxe.ds.IntMap();
		this.numActiveGamepads = 0;
	}
	,anyJustReleased: function(ButtonID) {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.justReleased(ButtonID)) return true;
			gamepad = it.next();
		}
		return false;
	}
	,anyJustPressed: function(ButtonID) {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.justPressed(ButtonID)) return true;
			gamepad = it.next();
		}
		return false;
	}
	,anyPressed: function(ButtonID) {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.pressed(ButtonID)) return true;
			gamepad = it.next();
		}
		return false;
	}
	,anyInput: function() {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyInput()) return true;
			gamepad = it.next();
		}
		return false;
	}
	,anyButton: function() {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyButton()) return true;
			gamepad = it.next();
		}
		return false;
	}
	,getFirstActiveGamepad: function() {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyInput()) return gamepad;
			gamepad = it.next();
		}
		return null;
	}
	,getFirstActiveGamepadID: function() {
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyInput()) return gamepad.id;
			gamepad = it.next();
		}
		return -1;
	}
	,getActiveGamepads: function(GamepadArray) {
		if(GamepadArray == null) GamepadArray = [];
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyInput()) GamepadArray.push(gamepad);
			gamepad = it.next();
		}
		return GamepadArray;
	}
	,getActiveGamepadIDs: function(IDsArray) {
		if(IDsArray == null) IDsArray = [];
		var it = this._gamepads.iterator();
		var gamepad = it.next();
		while(gamepad != null) {
			if(gamepad.anyInput()) IDsArray.push(gamepad.id);
			gamepad = it.next();
		}
		return IDsArray;
	}
	,getByID: function(GamepadID) {
		var gamepad = this._gamepads.get(GamepadID);
		if(gamepad == null) {
			gamepad = new flixel.input.gamepad.FlxGamepad(GamepadID,this.globalDeadZone);
			this._gamepads.set(GamepadID,gamepad);
			this.lastActive = gamepad;
			if(this.firstActive == null) this.firstActive = gamepad;
		}
		return gamepad;
	}
	,__class__: flixel.input.gamepad.FlxGamepadManager
	,__properties__: {get_numActiveGamepads:"get_numActiveGamepads",set_globalDeadZone:"set_globalDeadZone"}
}
flixel.input.keyboard = {}
flixel.input.keyboard.FlxKey = function(Name) {
	this.last = 0;
	this.current = 0;
	this.name = Name;
};
$hxClasses["flixel.input.keyboard.FlxKey"] = flixel.input.keyboard.FlxKey;
flixel.input.keyboard.FlxKey.__name__ = ["flixel","input","keyboard","FlxKey"];
flixel.input.keyboard.FlxKey.prototype = {
	__class__: flixel.input.keyboard.FlxKey
}
flixel.input.keyboard.FlxKeyList = function(CheckStatus) {
	this.checkStatus = CheckStatus;
};
$hxClasses["flixel.input.keyboard.FlxKeyList"] = flixel.input.keyboard.FlxKeyList;
flixel.input.keyboard.FlxKeyList.__name__ = ["flixel","input","keyboard","FlxKeyList"];
flixel.input.keyboard.FlxKeyList.prototype = {
	check: function(keyCode) {
		return flixel.FlxG.keys.checkStatus(keyCode,this.checkStatus);
	}
	,get_ANY: function() {
		var key = null;
		var keyCode = 256;
		while(keyCode-- >= 0) {
			key = flixel.FlxG.keys._keyList[keyCode];
			if(key != null) {
				if(flixel.FlxG.keys.checkStatus(keyCode,this.checkStatus)) return true;
			}
		}
		return false;
	}
	,get_NUMPADPERIOD: function() {
		return flixel.FlxG.keys.checkStatus(110,this.checkStatus);
	}
	,get_NUMPADPLUS: function() {
		return flixel.FlxG.keys.checkStatus(107,this.checkStatus);
	}
	,get_NUMPADMINUS: function() {
		return flixel.FlxG.keys.checkStatus(109,this.checkStatus);
	}
	,get_NUMPADZERO: function() {
		return flixel.FlxG.keys.checkStatus(96,this.checkStatus);
	}
	,get_NUMPADNINE: function() {
		return flixel.FlxG.keys.checkStatus(105,this.checkStatus);
	}
	,get_NUMPADEIGHT: function() {
		return flixel.FlxG.keys.checkStatus(104,this.checkStatus);
	}
	,get_NUMPADSEVEN: function() {
		return flixel.FlxG.keys.checkStatus(103,this.checkStatus);
	}
	,get_NUMPADSIX: function() {
		return flixel.FlxG.keys.checkStatus(102,this.checkStatus);
	}
	,get_NUMPADFIVE: function() {
		return flixel.FlxG.keys.checkStatus(101,this.checkStatus);
	}
	,get_NUMPADFOUR: function() {
		return flixel.FlxG.keys.checkStatus(100,this.checkStatus);
	}
	,get_NUMPADTHREE: function() {
		return flixel.FlxG.keys.checkStatus(99,this.checkStatus);
	}
	,get_NUMPADTWO: function() {
		return flixel.FlxG.keys.checkStatus(98,this.checkStatus);
	}
	,get_NUMPADONE: function() {
		return flixel.FlxG.keys.checkStatus(97,this.checkStatus);
	}
	,get_F12: function() {
		return flixel.FlxG.keys.checkStatus(123,this.checkStatus);
	}
	,get_F11: function() {
		return flixel.FlxG.keys.checkStatus(122,this.checkStatus);
	}
	,get_F10: function() {
		return flixel.FlxG.keys.checkStatus(121,this.checkStatus);
	}
	,get_F9: function() {
		return flixel.FlxG.keys.checkStatus(120,this.checkStatus);
	}
	,get_F8: function() {
		return flixel.FlxG.keys.checkStatus(119,this.checkStatus);
	}
	,get_F7: function() {
		return flixel.FlxG.keys.checkStatus(118,this.checkStatus);
	}
	,get_F6: function() {
		return flixel.FlxG.keys.checkStatus(117,this.checkStatus);
	}
	,get_F5: function() {
		return flixel.FlxG.keys.checkStatus(116,this.checkStatus);
	}
	,get_F4: function() {
		return flixel.FlxG.keys.checkStatus(115,this.checkStatus);
	}
	,get_F3: function() {
		return flixel.FlxG.keys.checkStatus(114,this.checkStatus);
	}
	,get_F2: function() {
		return flixel.FlxG.keys.checkStatus(113,this.checkStatus);
	}
	,get_F1: function() {
		return flixel.FlxG.keys.checkStatus(112,this.checkStatus);
	}
	,get_TAB: function() {
		return flixel.FlxG.keys.checkStatus(9,this.checkStatus);
	}
	,get_RIGHT: function() {
		return flixel.FlxG.keys.checkStatus(39,this.checkStatus);
	}
	,get_LEFT: function() {
		return flixel.FlxG.keys.checkStatus(37,this.checkStatus);
	}
	,get_DOWN: function() {
		return flixel.FlxG.keys.checkStatus(40,this.checkStatus);
	}
	,get_UP: function() {
		return flixel.FlxG.keys.checkStatus(38,this.checkStatus);
	}
	,get_SPACE: function() {
		return flixel.FlxG.keys.checkStatus(32,this.checkStatus);
	}
	,get_ALT: function() {
		return flixel.FlxG.keys.checkStatus(18,this.checkStatus);
	}
	,get_CONTROL: function() {
		return flixel.FlxG.keys.checkStatus(17,this.checkStatus);
	}
	,get_GRAVEACCENT: function() {
		return flixel.FlxG.keys.checkStatus(192,this.checkStatus);
	}
	,get_NUMPADSLASH: function() {
		return flixel.FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_SLASH: function() {
		return flixel.FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_PERIOD: function() {
		return flixel.FlxG.keys.checkStatus(190,this.checkStatus);
	}
	,get_COMMA: function() {
		return flixel.FlxG.keys.checkStatus(188,this.checkStatus);
	}
	,get_SHIFT: function() {
		return flixel.FlxG.keys.checkStatus(16,this.checkStatus);
	}
	,get_ENTER: function() {
		return flixel.FlxG.keys.checkStatus(13,this.checkStatus);
	}
	,get_QUOTE: function() {
		return flixel.FlxG.keys.checkStatus(222,this.checkStatus);
	}
	,get_SEMICOLON: function() {
		return flixel.FlxG.keys.checkStatus(186,this.checkStatus);
	}
	,get_CAPSLOCK: function() {
		return flixel.FlxG.keys.checkStatus(20,this.checkStatus);
	}
	,get_BACKSLASH: function() {
		return flixel.FlxG.keys.checkStatus(220,this.checkStatus);
	}
	,get_RBRACKET: function() {
		return flixel.FlxG.keys.checkStatus(221,this.checkStatus);
	}
	,get_LBRACKET: function() {
		return flixel.FlxG.keys.checkStatus(219,this.checkStatus);
	}
	,get_BACKSPACE: function() {
		return flixel.FlxG.keys.checkStatus(8,this.checkStatus);
	}
	,get_DELETE: function() {
		return flixel.FlxG.keys.checkStatus(46,this.checkStatus);
	}
	,get_PLUS: function() {
		return flixel.FlxG.keys.checkStatus(187,this.checkStatus);
	}
	,get_MINUS: function() {
		return flixel.FlxG.keys.checkStatus(189,this.checkStatus);
	}
	,get_ESCAPE: function() {
		return flixel.FlxG.keys.checkStatus(27,this.checkStatus);
	}
	,get_INSERT: function() {
		return flixel.FlxG.keys.checkStatus(45,this.checkStatus);
	}
	,get_END: function() {
		return flixel.FlxG.keys.checkStatus(35,this.checkStatus);
	}
	,get_HOME: function() {
		return flixel.FlxG.keys.checkStatus(36,this.checkStatus);
	}
	,get_PAGEDOWN: function() {
		return flixel.FlxG.keys.checkStatus(34,this.checkStatus);
	}
	,get_PAGEUP: function() {
		return flixel.FlxG.keys.checkStatus(33,this.checkStatus);
	}
	,get_NINE: function() {
		return flixel.FlxG.keys.checkStatus(57,this.checkStatus);
	}
	,get_EIGHT: function() {
		return flixel.FlxG.keys.checkStatus(56,this.checkStatus);
	}
	,get_SEVEN: function() {
		return flixel.FlxG.keys.checkStatus(55,this.checkStatus);
	}
	,get_SIX: function() {
		return flixel.FlxG.keys.checkStatus(54,this.checkStatus);
	}
	,get_FIVE: function() {
		return flixel.FlxG.keys.checkStatus(53,this.checkStatus);
	}
	,get_FOUR: function() {
		return flixel.FlxG.keys.checkStatus(52,this.checkStatus);
	}
	,get_THREE: function() {
		return flixel.FlxG.keys.checkStatus(51,this.checkStatus);
	}
	,get_TWO: function() {
		return flixel.FlxG.keys.checkStatus(50,this.checkStatus);
	}
	,get_ONE: function() {
		return flixel.FlxG.keys.checkStatus(49,this.checkStatus);
	}
	,get_ZERO: function() {
		return flixel.FlxG.keys.checkStatus(48,this.checkStatus);
	}
	,get_Z: function() {
		return flixel.FlxG.keys.checkStatus(90,this.checkStatus);
	}
	,get_Y: function() {
		return flixel.FlxG.keys.checkStatus(89,this.checkStatus);
	}
	,get_X: function() {
		return flixel.FlxG.keys.checkStatus(88,this.checkStatus);
	}
	,get_W: function() {
		return flixel.FlxG.keys.checkStatus(87,this.checkStatus);
	}
	,get_V: function() {
		return flixel.FlxG.keys.checkStatus(86,this.checkStatus);
	}
	,get_U: function() {
		return flixel.FlxG.keys.checkStatus(85,this.checkStatus);
	}
	,get_T: function() {
		return flixel.FlxG.keys.checkStatus(84,this.checkStatus);
	}
	,get_S: function() {
		return flixel.FlxG.keys.checkStatus(83,this.checkStatus);
	}
	,get_R: function() {
		return flixel.FlxG.keys.checkStatus(82,this.checkStatus);
	}
	,get_Q: function() {
		return flixel.FlxG.keys.checkStatus(81,this.checkStatus);
	}
	,get_P: function() {
		return flixel.FlxG.keys.checkStatus(80,this.checkStatus);
	}
	,get_O: function() {
		return flixel.FlxG.keys.checkStatus(79,this.checkStatus);
	}
	,get_N: function() {
		return flixel.FlxG.keys.checkStatus(78,this.checkStatus);
	}
	,get_M: function() {
		return flixel.FlxG.keys.checkStatus(77,this.checkStatus);
	}
	,get_L: function() {
		return flixel.FlxG.keys.checkStatus(76,this.checkStatus);
	}
	,get_K: function() {
		return flixel.FlxG.keys.checkStatus(75,this.checkStatus);
	}
	,get_J: function() {
		return flixel.FlxG.keys.checkStatus(74,this.checkStatus);
	}
	,get_I: function() {
		return flixel.FlxG.keys.checkStatus(73,this.checkStatus);
	}
	,get_H: function() {
		return flixel.FlxG.keys.checkStatus(72,this.checkStatus);
	}
	,get_G: function() {
		return flixel.FlxG.keys.checkStatus(71,this.checkStatus);
	}
	,get_F: function() {
		return flixel.FlxG.keys.checkStatus(70,this.checkStatus);
	}
	,get_E: function() {
		return flixel.FlxG.keys.checkStatus(69,this.checkStatus);
	}
	,get_D: function() {
		return flixel.FlxG.keys.checkStatus(68,this.checkStatus);
	}
	,get_C: function() {
		return flixel.FlxG.keys.checkStatus(67,this.checkStatus);
	}
	,get_B: function() {
		return flixel.FlxG.keys.checkStatus(66,this.checkStatus);
	}
	,get_A: function() {
		return flixel.FlxG.keys.checkStatus(65,this.checkStatus);
	}
	,__class__: flixel.input.keyboard.FlxKeyList
	,__properties__: {get_A:"get_A",get_B:"get_B",get_C:"get_C",get_D:"get_D",get_E:"get_E",get_F:"get_F",get_G:"get_G",get_H:"get_H",get_I:"get_I",get_J:"get_J",get_K:"get_K",get_L:"get_L",get_M:"get_M",get_N:"get_N",get_O:"get_O",get_P:"get_P",get_Q:"get_Q",get_R:"get_R",get_S:"get_S",get_T:"get_T",get_U:"get_U",get_V:"get_V",get_W:"get_W",get_X:"get_X",get_Y:"get_Y",get_Z:"get_Z",get_ZERO:"get_ZERO",get_ONE:"get_ONE",get_TWO:"get_TWO",get_THREE:"get_THREE",get_FOUR:"get_FOUR",get_FIVE:"get_FIVE",get_SIX:"get_SIX",get_SEVEN:"get_SEVEN",get_EIGHT:"get_EIGHT",get_NINE:"get_NINE",get_PAGEUP:"get_PAGEUP",get_PAGEDOWN:"get_PAGEDOWN",get_HOME:"get_HOME",get_END:"get_END",get_INSERT:"get_INSERT",get_ESCAPE:"get_ESCAPE",get_MINUS:"get_MINUS",get_PLUS:"get_PLUS",get_DELETE:"get_DELETE",get_BACKSPACE:"get_BACKSPACE",get_LBRACKET:"get_LBRACKET",get_RBRACKET:"get_RBRACKET",get_BACKSLASH:"get_BACKSLASH",get_CAPSLOCK:"get_CAPSLOCK",get_SEMICOLON:"get_SEMICOLON",get_QUOTE:"get_QUOTE",get_ENTER:"get_ENTER",get_SHIFT:"get_SHIFT",get_COMMA:"get_COMMA",get_PERIOD:"get_PERIOD",get_SLASH:"get_SLASH",get_NUMPADSLASH:"get_NUMPADSLASH",get_GRAVEACCENT:"get_GRAVEACCENT",get_CONTROL:"get_CONTROL",get_ALT:"get_ALT",get_SPACE:"get_SPACE",get_UP:"get_UP",get_DOWN:"get_DOWN",get_LEFT:"get_LEFT",get_RIGHT:"get_RIGHT",get_TAB:"get_TAB",get_F1:"get_F1",get_F2:"get_F2",get_F3:"get_F3",get_F4:"get_F4",get_F5:"get_F5",get_F6:"get_F6",get_F7:"get_F7",get_F8:"get_F8",get_F9:"get_F9",get_F10:"get_F10",get_F11:"get_F11",get_F12:"get_F12",get_NUMPADONE:"get_NUMPADONE",get_NUMPADTWO:"get_NUMPADTWO",get_NUMPADTHREE:"get_NUMPADTHREE",get_NUMPADFOUR:"get_NUMPADFOUR",get_NUMPADFIVE:"get_NUMPADFIVE",get_NUMPADSIX:"get_NUMPADSIX",get_NUMPADSEVEN:"get_NUMPADSEVEN",get_NUMPADEIGHT:"get_NUMPADEIGHT",get_NUMPADNINE:"get_NUMPADNINE",get_NUMPADZERO:"get_NUMPADZERO",get_NUMPADMINUS:"get_NUMPADMINUS",get_NUMPADPLUS:"get_NUMPADPLUS",get_NUMPADPERIOD:"get_NUMPADPERIOD",get_ANY:"get_ANY"}
}
flixel.input.keyboard.FlxKeyboard = function() {
	this.enabled = true;
	this._keyLookup = new haxe.ds.StringMap();
	this._keyList = new Array();
	flixel.util.FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey(this._keyList,256);
	var i;
	i = 65;
	while(i <= 90) {
		this.addKey(String.fromCharCode(i),i);
		i++;
	}
	i = 48;
	this.addKey("ZERO",i++);
	this.addKey("ONE",i++);
	this.addKey("TWO",i++);
	this.addKey("THREE",i++);
	this.addKey("FOUR",i++);
	this.addKey("FIVE",i++);
	this.addKey("SIX",i++);
	this.addKey("SEVEN",i++);
	this.addKey("EIGHT",i++);
	this.addKey("NINE",i++);
	i = 96;
	this.addKey("NUMPADZERO",i++);
	this.addKey("NUMPADONE",i++);
	this.addKey("NUMPADTWO",i++);
	this.addKey("NUMPADTHREE",i++);
	this.addKey("NUMPADFOUR",i++);
	this.addKey("NUMPADFIVE",i++);
	this.addKey("NUMPADSIX",i++);
	this.addKey("NUMPADSEVEN",i++);
	this.addKey("NUMPADEIGHT",i++);
	this.addKey("NUMPADNINE",i++);
	this.addKey("PAGEUP",33);
	this.addKey("PAGEDOWN",34);
	this.addKey("HOME",36);
	this.addKey("END",35);
	this.addKey("INSERT",45);
	i = 1;
	while(i <= 12) this.addKey("F" + i,111 + i++);
	this.addKey("ESCAPE",27);
	this.addKey("MINUS",189);
	this.addKey("PLUS",187);
	this.addKey("DELETE",46);
	this.addKey("BACKSPACE",8);
	this.addKey("LBRACKET",219);
	this.addKey("RBRACKET",221);
	this.addKey("BACKSLASH",220);
	this.addKey("CAPSLOCK",20);
	this.addKey("SEMICOLON",186);
	this.addKey("QUOTE",222);
	this.addKey("ENTER",13);
	this.addKey("SHIFT",16);
	this.addKey("COMMA",188);
	this.addKey("PERIOD",190);
	this.addKey("SLASH",191);
	this.addKey("NUMPADSLASH",191);
	this.addKey("GRAVEACCENT",192);
	this.addKey("CONTROL",17);
	this.addKey("ALT",18);
	this.addKey("SPACE",32);
	this.addKey("UP",38);
	this.addKey("DOWN",40);
	this.addKey("LEFT",37);
	this.addKey("RIGHT",39);
	this.addKey("TAB",9);
	this.addKey("NUMPADMINUS",109);
	this.addKey("NUMPADPLUS",107);
	this.addKey("NUMPADPERIOD",110);
	flash.Lib.get_current().get_stage().addEventListener(flash.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
	flash.Lib.get_current().get_stage().addEventListener(flash.events.KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
	this.pressed = new flixel.input.keyboard.FlxKeyList(1);
	this.justPressed = new flixel.input.keyboard.FlxKeyList(2);
	this.justReleased = new flixel.input.keyboard.FlxKeyList(-1);
};
$hxClasses["flixel.input.keyboard.FlxKeyboard"] = flixel.input.keyboard.FlxKeyboard;
flixel.input.keyboard.FlxKeyboard.__name__ = ["flixel","input","keyboard","FlxKeyboard"];
flixel.input.keyboard.FlxKeyboard.__interfaces__ = [flixel.interfaces.IFlxInput];
flixel.input.keyboard.FlxKeyboard.prototype = {
	playback: function(Record) {
		var i = 0;
		var l = Record.length;
		var o;
		var o2;
		while(i < l) {
			o = Record[i++];
			o2 = this._keyList[o.code];
			o2.current = o.value;
		}
	}
	,record: function() {
		var data = null;
		var i = 0;
		while(i < 256) {
			var key = this._keyList[i++];
			if(key == null || key.current == 0) continue;
			if(data == null) data = new Array();
			data.push(new flixel.system.replay.CodeValuePair(i - 1,key.current));
		}
		return data;
	}
	,onFocusLost: function() {
		this.reset();
	}
	,onFocus: function() {
	}
	,updateKeyStates: function(KeyCode,Down) {
		var obj = this._keyList[KeyCode];
		if(obj != null) {
			if(obj.current > 0) {
				if(Down) obj.current = 1; else obj.current = -1;
			} else if(Down) obj.current = 2; else obj.current = 0;
		}
	}
	,inKeyArray: function(KeyArray,KeyCode) {
		if(KeyArray == null) return false; else {
			var _g = 0;
			while(_g < KeyArray.length) {
				var keyString = KeyArray[_g];
				++_g;
				if(keyString == "ANY" || this._keyLookup.get(keyString) == KeyCode) return true;
			}
		}
		return false;
	}
	,onKeyDown: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(this.enabled) this.updateKeyStates(c,true);
	}
	,onKeyUp: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(!this.enabled) return;
		if(this.inKeyArray(flixel.FlxG.sound.muteKeys,c)) {
			flixel.FlxG.sound.muted = !flixel.FlxG.sound.muted;
			if(flixel.FlxG.sound.volumeHandler != null) flixel.FlxG.sound.volumeHandler(flixel.FlxG.sound.muted?0:flixel.FlxG.sound.volume);
			if(flixel.FlxG.game.soundTray != null) flixel.FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel.FlxG.sound.volumeDownKeys,c)) {
			flixel.FlxG.sound.muted = false;
			var _g = flixel.FlxG.sound;
			_g.set_volume(_g.volume - 0.1);
			if(flixel.FlxG.game.soundTray != null) flixel.FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel.FlxG.sound.volumeUpKeys,c)) {
			flixel.FlxG.sound.muted = false;
			var _g = flixel.FlxG.sound;
			_g.set_volume(_g.volume + 0.1);
			if(flixel.FlxG.game.soundTray != null) flixel.FlxG.game.soundTray.show();
		}
		this.updateKeyStates(c,false);
	}
	,checkKeyStatus: function(KeyArray,Status) {
		if(KeyArray == null) return false;
		var _g = 0;
		while(_g < KeyArray.length) {
			var code = KeyArray[_g];
			++_g;
			var key;
			code = code.toUpperCase();
			key = this._keyList[this._keyLookup.get(code)];
			if(key != null) {
				if(key.current == Status) return true; else if(Status == 1 && key.current == 2) return true; else if(Status == 0 && key.current == -1) return true;
			}
		}
		return false;
	}
	,update: function() {
		var _g = 0, _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key == null) continue;
			if(key.last == -1 && key.current == -1) key.current = 0; else if(key.last == 2 && key.current == 2) key.current = 1;
			key.last = key.current;
		}
	}
	,addKey: function(KeyName,KeyCode) {
		this._keyLookup.set(KeyName,KeyCode);
		this._keyList[KeyCode] = new flixel.input.keyboard.FlxKey(KeyName);
	}
	,reset: function() {
		var _g = 0, _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.current = 0;
				key.last = 0;
			}
		}
	}
	,destroy: function() {
		this._keyList = null;
		this._keyLookup = null;
	}
	,getIsDown: function() {
		var keysDown = new Array();
		var _g = 0, _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current > 0) keysDown.push(key);
		}
		return keysDown;
	}
	,getKeyCode: function(KeyName) {
		return this._keyLookup.get(KeyName);
	}
	,checkStatus: function(KeyCode,Status) {
		var k = this._keyList[KeyCode];
		if(k != null) {
			if(k.current == Status) return true; else if(Status == 1 && k.current == 2) return true; else if(Status == 0 && k.current == -1) return true;
		}
		return false;
	}
	,anyJustReleased: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,-1);
	}
	,anyJustPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,2);
	}
	,anyPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,1);
	}
	,__class__: flixel.input.keyboard.FlxKeyboard
}
flixel.input.mouse = {}
flixel.input.mouse._FlxMouse = {}
flixel.input.mouse._FlxMouse.GraphicCursor = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel.input.mouse._FlxMouse.GraphicCursor.preload != null) {
		this.___textureBuffer.width = flixel.input.mouse._FlxMouse.GraphicCursor.preload.get_width() | 0;
		this.___textureBuffer.height = flixel.input.mouse._FlxMouse.GraphicCursor.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel.input.mouse._FlxMouse.GraphicCursor.preload.get_width(),flixel.input.mouse._FlxMouse.GraphicCursor.preload.get_height());
		this.setPixels(this.rect,flixel.input.mouse._FlxMouse.GraphicCursor.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel.input.mouse._FlxMouse.GraphicCursor.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel.input.mouse._FlxMouse.GraphicCursor"] = flixel.input.mouse._FlxMouse.GraphicCursor;
flixel.input.mouse._FlxMouse.GraphicCursor.__name__ = ["flixel","input","mouse","_FlxMouse","GraphicCursor"];
flixel.input.mouse._FlxMouse.GraphicCursor.__super__ = flash.display.BitmapData;
flixel.input.mouse._FlxMouse.GraphicCursor.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel.input.mouse._FlxMouse.GraphicCursor
});
flixel.input.mouse.FlxMouse = function(CursorContainer) {
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.screenY = 0;
	this.screenX = 0;
	this.wheel = 0;
	flixel.util.FlxPoint.call(this);
	this.cursorContainer = CursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._point = new flixel.util.FlxPoint();
	this._globalScreenPosition = new flixel.util.FlxPoint();
	this._leftButton = new flixel.input.mouse.FlxMouseButton(-1);
	var stage = flash.Lib.get_current().get_stage();
	stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN,($_=this._leftButton,$bind($_,$_.onDown)));
	stage.addEventListener(flash.events.MouseEvent.MOUSE_UP,($_=this._leftButton,$bind($_,$_.onUp)));
	stage.addEventListener(flash.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
	flash.ui.Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel.input.mouse.FlxMouse;
flixel.input.mouse.FlxMouse.__name__ = ["flixel","input","mouse","FlxMouse"];
flixel.input.mouse.FlxMouse.__interfaces__ = [flixel.interfaces.IFlxInput];
flixel.input.mouse.FlxMouse.__super__ = flixel.util.FlxPoint;
flixel.input.mouse.FlxMouse.prototype = $extend(flixel.util.FlxPoint.prototype,{
	playback: function(Record) {
		this._leftButton.current = Record.button;
		this.wheel = Record.wheel;
		this._globalScreenPosition.copyFrom(Record);
		this.updateCursor();
	}
	,record: function() {
		if(this._lastX == this._globalScreenPosition.x && this._lastY == this._globalScreenPosition.y && this._leftButton.current == 0 && this._lastWheel == this.wheel) return null;
		this._lastX = Math.floor(this._globalScreenPosition.x);
		this._lastY = Math.floor(this._globalScreenPosition.y);
		this._lastWheel = this.wheel;
		return new flixel.system.replay.MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,set_visible: function(Value) {
		if(Value) {
			if(this.useSystemCursor) flash.ui.Mouse.show(); else {
				if(this._cursor == null) this.load();
				this.cursorContainer.set_visible(true);
				flash.ui.Mouse.hide();
			}
		} else {
			this.cursorContainer.set_visible(false);
			flash.ui.Mouse.hide();
		}
		return this.visible = Value;
	}
	,set_useSystemCursor: function(Value) {
		if(Value) this.showSystemCursor(); else this.hideSystemCursor();
		return this.useSystemCursor = Value;
	}
	,hideSystemCursor: function() {
		flash.ui.Mouse.hide();
		if(this.visible) this.cursorContainer.set_visible(true);
	}
	,showSystemCursor: function() {
		flash.ui.Mouse.show();
		this.cursorContainer.set_visible(false);
	}
	,get_justReleased: function() {
		return this._leftButton.justReleased();
	}
	,get_justPressed: function() {
		return this._leftButton.justPressed();
	}
	,get_pressed: function() {
		return this._leftButton.current > 0;
	}
	,onMouseWheel: function(FlashEvent) {
		this._wheelUsed = true;
		this.wheel = FlashEvent.delta;
	}
	,updateCursor: function() {
		this.getScreenPosition(null,this._point);
		this.screenX = this._point.x | 0;
		this.screenY = this._point.y | 0;
		this.getWorldPosition(null,this);
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) this.set_visible(false);
		flash.ui.Mouse.show();
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,update: function() {
		this._globalScreenPosition.set_x(Math.floor(flixel.FlxG.game.get_mouseX()));
		this._globalScreenPosition.set_y(Math.floor(flixel.FlxG.game.get_mouseY()));
		if(this.visible) {
			this.cursorContainer.set_x(this._globalScreenPosition.x);
			this.cursorContainer.set_y(this._globalScreenPosition.y);
		}
		this.updateCursor();
		this._leftButton.update();
		if(!this._wheelUsed) this.wheel = 0;
		this._wheelUsed = false;
	}
	,reset: function() {
		this._leftButton.reset();
	}
	,destroy: function() {
		this.cursorContainer = null;
		this._cursor = null;
		this._point = null;
		this._globalScreenPosition = null;
		this._leftButton = flixel.FlxG.safeDestroy(this._leftButton);
		if(this._cursorBitmapData != null) {
			this._cursorBitmapData.dispose();
			this._cursorBitmapData = null;
		}
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		if(point == null) point = new flixel.util.FlxPoint();
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		if(point == null) point = new flixel.util.FlxPoint();
		this.getScreenPosition(Camera,this._point);
		point.set(this._point.x + Camera.scroll.x,this._point.y + Camera.scroll.y);
		return point;
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) this.load(); else {
				this.cursorContainer.removeChild(this._cursor);
				this._cursor = null;
			}
		}
	}
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) YOffset = 0;
		if(XOffset == null) XOffset = 0;
		if(Scale == null) Scale = 1;
		if(this._cursor != null) this.cursorContainer.removeChild(this._cursor);
		if(Graphic == null) Graphic = new flixel.input.mouse._FlxMouse.GraphicCursor(0,0);
		if(js.Boot.__instanceof(Graphic,Class)) this._cursor = Type.createInstance(Graphic,[]); else if(js.Boot.__instanceof(Graphic,flash.display.BitmapData)) this._cursor = new flash.display.Bitmap(js.Boot.__cast(Graphic , flash.display.BitmapData)); else if(js.Boot.__instanceof(Graphic,String)) this._cursor = new flash.display.Bitmap(flixel.system.FlxAssets.getBitmapData(Graphic)); else this._cursor = new flash.display.Bitmap(new flixel.input.mouse._FlxMouse.GraphicCursor(0,0));
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,__class__: flixel.input.mouse.FlxMouse
	,__properties__: $extend(flixel.util.FlxPoint.prototype.__properties__,{set_visible:"set_visible",set_useSystemCursor:"set_useSystemCursor",get_pressed:"get_pressed",get_justPressed:"get_justPressed",get_justReleased:"get_justReleased"})
});
flixel.input.mouse.FlxMouseButton = function(ID) {
	this.last = 0;
	this.current = 0;
	this._ID = ID;
	this._justPressedPosition = new flixel.util.FlxPoint();
};
$hxClasses["flixel.input.mouse.FlxMouseButton"] = flixel.input.mouse.FlxMouseButton;
flixel.input.mouse.FlxMouseButton.__name__ = ["flixel","input","mouse","FlxMouseButton"];
flixel.input.mouse.FlxMouseButton.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.input.mouse.FlxMouseButton.prototype = {
	justReleased: function() {
		return this.current == -1 || this.current == -2;
	}
	,justPressed: function() {
		return this.current == 2 || this.current == -2;
	}
	,pressed: function() {
		return this.current > 0;
	}
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,onUp: function(FlashEvent) {
		if(this.current == 2) this.current = -2; else if(this.current > 0) this.current = -1; else this.current = 0;
	}
	,onDown: function(FlashEvent) {
		if(this.current > 0) this.current = 1; else this.current = 2;
	}
	,destroy: function() {
		this._justPressedPosition = null;
	}
	,update: function() {
		if(this.last == -1 && this.current == -1) this.current = 0; else if(this.last == 2 && this.current == 2) this.current = 1; else if(this.last == -2 && this.current == -2) this.current = 0;
		this.last = this.current;
		if(this.current == 2 || this.current == -2) {
			this._justPressedPosition.set(flixel.FlxG.mouse.screenX,flixel.FlxG.mouse.screenY);
			this._justPressedTimeInTicks = flixel.FlxG.game.ticks;
		} else if(this.current == -1 || this.current == -2) flixel.FlxG.swipes.push(new flixel.input.FlxSwipe(this._ID,this._justPressedPosition,flixel.FlxG.mouse.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,__class__: flixel.input.mouse.FlxMouseButton
}
flixel.input.touch = {}
flixel.input.touch.FlxTouch = function(X,Y,PointID) {
	if(PointID == null) PointID = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._last = 0;
	this._current = 0;
	this.screenY = 0;
	this.screenX = 0;
	flixel.util.FlxPoint.call(this);
	this._point = new flixel.util.FlxPoint();
	this._globalScreenPosition = new flixel.util.FlxPoint();
	this._justPressedPosition = new flixel.util.FlxPoint();
	this._flashPoint = new flash.geom.Point();
	this.updatePosition(X,Y);
	this.touchPointID = PointID;
};
$hxClasses["flixel.input.touch.FlxTouch"] = flixel.input.touch.FlxTouch;
flixel.input.touch.FlxTouch.__name__ = ["flixel","input","touch","FlxTouch"];
flixel.input.touch.FlxTouch.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.input.touch.FlxTouch.__super__ = flixel.util.FlxPoint;
flixel.input.touch.FlxTouch.prototype = $extend(flixel.util.FlxPoint.prototype,{
	get_isActive: function() {
		return this._current != 0;
	}
	,get_justReleased: function() {
		return this._current == -1;
	}
	,get_justPressed: function() {
		return this._current == 2;
	}
	,get_pressed: function() {
		return this._current > 0;
	}
	,updatePosition: function(X,Y) {
		this._flashPoint.x = X;
		this._flashPoint.y = Y;
		this._flashPoint = flixel.FlxG.game.globalToLocal(this._flashPoint);
		this._globalScreenPosition.set_x(this._flashPoint.x);
		this._globalScreenPosition.set_y(this._flashPoint.y);
		this.updateCursor();
	}
	,updateCursor: function() {
		var camera = flixel.FlxG.camera;
		this.screenX = Math.floor((this._globalScreenPosition.x - camera.x) / camera.zoom);
		this.screenY = Math.floor((this._globalScreenPosition.y - camera.y) / camera.zoom);
		this.set_x(this.screenX + camera.scroll.x);
		this.set_y(this.screenY + camera.scroll.y);
	}
	,update: function() {
		if(this._last == -1 && this._current == -1) this._current = 0; else if(this._last == 2 && this._current == 2) this._current = 1;
		this._last = this._current;
		if(this._current == 2) {
			this._justPressedPosition.set(this.screenX,this.screenY);
			this._justPressedTimeInTicks = flixel.FlxG.game.ticks;
		} else if(this._current == -1) flixel.FlxG.swipes.push(new flixel.input.FlxSwipe(this.touchPointID,this._justPressedPosition,this.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,deactivate: function() {
		this._current = 0;
		this._last = 0;
	}
	,reset: function(X,Y,PointID) {
		this.updatePosition(X,Y);
		this.touchPointID = PointID;
		this._current = 0;
		this._last = 0;
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		if(js.Boot.__instanceof(ObjectOrGroup,flixel.group.FlxTypedGroup)) {
			var i = 0;
			var results = false;
			var basic;
			var grp = ObjectOrGroup;
			var members = grp.get_members();
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists && this.overlaps(basic,Camera)) {
					results = true;
					break;
				}
			}
			return results;
		}
		return (js.Boot.__cast(ObjectOrGroup , flixel.FlxObject)).overlapsPoint(this,true,Camera);
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		if(point == null) point = new flixel.util.FlxPoint();
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel.FlxG.camera;
		if(point == null) point = new flixel.util.FlxPoint();
		this.getScreenPosition(Camera,this._point);
		point.set_x(this._point.x + Camera.scroll.x);
		point.set_y(this._point.y + Camera.scroll.y);
		return point;
	}
	,destroy: function() {
		this._point = null;
		this._globalScreenPosition = null;
		this._flashPoint = null;
		this._justPressedPosition = null;
	}
	,__class__: flixel.input.touch.FlxTouch
	,__properties__: $extend(flixel.util.FlxPoint.prototype.__properties__,{get_pressed:"get_pressed",get_justPressed:"get_justPressed",get_justReleased:"get_justReleased",get_isActive:"get_isActive"})
});
flixel.input.touch.FlxTouchManager = function() {
	this.list = new Array();
	this._inactiveTouches = new Array();
	this._touchesCache = new haxe.ds.IntMap();
	flixel.input.touch.FlxTouchManager.maxTouchPoints = flash.ui.Multitouch.maxTouchPoints;
	flash.ui.Multitouch.set_inputMode(flash.ui.MultitouchInputMode.TOUCH_POINT);
	flash.Lib.get_current().get_stage().addEventListener("touchBegin",$bind(this,this.handleTouchBegin));
	flash.Lib.get_current().get_stage().addEventListener("touchEnd",$bind(this,this.handleTouchEnd));
	flash.Lib.get_current().get_stage().addEventListener("touchMove",$bind(this,this.handleTouchMove));
};
$hxClasses["flixel.input.touch.FlxTouchManager"] = flixel.input.touch.FlxTouchManager;
flixel.input.touch.FlxTouchManager.__name__ = ["flixel","input","touch","FlxTouchManager"];
flixel.input.touch.FlxTouchManager.__interfaces__ = [flixel.interfaces.IFlxInput];
flixel.input.touch.FlxTouchManager.prototype = {
	onFocusLost: function() {
		this.reset();
	}
	,onFocus: function() {
	}
	,update: function() {
		var i = this.list.length - 1;
		var touch;
		while(i >= 0) {
			touch = this.list[i];
			if(touch._current == 0) {
				touch.deactivate();
				this._touchesCache.remove(touch.touchPointID);
				this.list.splice(i,1);
				this._inactiveTouches.push(touch);
			} else touch.update();
			i--;
		}
	}
	,recycle: function(X,Y,PointID) {
		if(this._inactiveTouches.length > 0) {
			var touch = this._inactiveTouches.pop();
			touch.reset(X,Y,PointID);
			return this.add(touch);
		}
		return this.add(new flixel.input.touch.FlxTouch(X,Y,PointID));
	}
	,add: function(Touch) {
		this.list.push(Touch);
		this._touchesCache.set(Touch.touchPointID,Touch);
		return Touch;
	}
	,handleTouchMove: function(FlashEvent) {
		var touch = this._touchesCache.get(FlashEvent.touchPointID);
		if(touch != null) touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
	}
	,handleTouchEnd: function(FlashEvent) {
		var touch = this._touchesCache.get(FlashEvent.touchPointID);
		if(touch != null) {
			if(touch._current > 0) touch._current = -1; else touch._current = 0;
		}
	}
	,handleTouchBegin: function(FlashEvent) {
		var touch = this._touchesCache.get(FlashEvent.touchPointID);
		if(touch != null) {
			touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
			if(touch._current > 0) touch._current = 1; else touch._current = 2;
		} else {
			touch = this.recycle(FlashEvent.stageX,FlashEvent.stageY,FlashEvent.touchPointID);
			touch._current = 2;
		}
	}
	,reset: function() {
		var $it0 = this._touchesCache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._touchesCache.remove(key);
		}
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.deactivate();
			this._inactiveTouches.push(touch);
		}
		this.list.splice(0,this.list.length);
	}
	,justReleased: function(TouchArray) {
		if(TouchArray == null) TouchArray = new Array();
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == -1) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,justStarted: function(TouchArray) {
		if(TouchArray == null) TouchArray = new Array();
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == 2) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,destroy: function() {
		var _g = 0, _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this.list = null;
		var _g = 0, _g1 = this._inactiveTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this._inactiveTouches = null;
		this._touchesCache = null;
	}
	,getFirst: function() {
		if(this.list[0] != null) return this.list[0]; else return null;
	}
	,getByID: function(TouchPointID) {
		return this._touchesCache.get(TouchPointID);
	}
	,__class__: flixel.input.touch.FlxTouchManager
}
flixel.system._FlxAssets = {}
flixel.system._FlxAssets.FontDefault = function() {
	flash.text.Font.call(this);
};
$hxClasses["flixel.system._FlxAssets.FontDefault"] = flixel.system._FlxAssets.FontDefault;
flixel.system._FlxAssets.FontDefault.__name__ = ["flixel","system","_FlxAssets","FontDefault"];
flixel.system._FlxAssets.FontDefault.__super__ = flash.text.Font;
flixel.system._FlxAssets.FontDefault.prototype = $extend(flash.text.Font.prototype,{
	__class__: flixel.system._FlxAssets.FontDefault
});
flixel.system.BeepSound = function(stream,context) {
	flash.media.Sound.call(this,stream,context);
};
$hxClasses["flixel.system.BeepSound"] = flixel.system.BeepSound;
flixel.system.BeepSound.__name__ = ["flixel","system","BeepSound"];
flixel.system.BeepSound.__super__ = flash.media.Sound;
flixel.system.BeepSound.prototype = $extend(flash.media.Sound.prototype,{
	__class__: flixel.system.BeepSound
});
flixel.system.GraphicLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel.system.GraphicLogo.preload != null) {
		this.___textureBuffer.width = flixel.system.GraphicLogo.preload.get_width() | 0;
		this.___textureBuffer.height = flixel.system.GraphicLogo.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel.system.GraphicLogo.preload.get_width(),flixel.system.GraphicLogo.preload.get_height());
		this.setPixels(this.rect,flixel.system.GraphicLogo.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel.system.GraphicLogo.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel.system.GraphicLogo"] = flixel.system.GraphicLogo;
flixel.system.GraphicLogo.__name__ = ["flixel","system","GraphicLogo"];
flixel.system.GraphicLogo.__super__ = flash.display.BitmapData;
flixel.system.GraphicLogo.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel.system.GraphicLogo
});
flixel.system.FlxAssets = function() { }
$hxClasses["flixel.system.FlxAssets"] = flixel.system.FlxAssets;
flixel.system.FlxAssets.__name__ = ["flixel","system","FlxAssets"];
flixel.system.FlxAssets.init = function() {
	flash.text.Font.registerFont(flixel.system._FlxAssets.FontDefault);
}
flixel.system.FlxAssets.drawLogo = function(graph) {
	graph.beginFill(47394);
	graph.moveTo(50,13);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(87,51);
	graph.lineTo(51,87);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(13,50);
	graph.lineTo(50,13);
	graph.endFill();
	graph.beginFill(16761138);
	graph.moveTo(0,0);
	graph.lineTo(25,0);
	graph.lineTo(50,13);
	graph.lineTo(13,50);
	graph.lineTo(0,25);
	graph.lineTo(0,0);
	graph.endFill();
	graph.beginFill(16066382);
	graph.moveTo(100,0);
	graph.lineTo(75,0);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(100,25);
	graph.lineTo(100,0);
	graph.endFill();
	graph.beginFill(3555839);
	graph.moveTo(0,100);
	graph.lineTo(25,100);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(0,75);
	graph.lineTo(0,100);
	graph.endFill();
	graph.beginFill(314875);
	graph.moveTo(100,100);
	graph.lineTo(75,100);
	graph.lineTo(51,87);
	graph.lineTo(87,51);
	graph.lineTo(100,75);
	graph.lineTo(100,100);
	graph.endFill();
}
flixel.system.FlxAssets.getBitmapData = function(id) {
	return openfl.Assets.getBitmapData(id,false);
}
flixel.system.FlxAssets.cacheSounds = function() {
}
flixel.system.FlxBGSprite = function() {
	flixel.FlxSprite.call(this);
	this.makeGraphic(1,1,0,true,flixel.FlxG.bitmap.getUniqueKey("bg_graphic_"));
	this.scrollFactor.set();
};
$hxClasses["flixel.system.FlxBGSprite"] = flixel.system.FlxBGSprite;
flixel.system.FlxBGSprite.__name__ = ["flixel","system","FlxBGSprite"];
flixel.system.FlxBGSprite.__super__ = flixel.FlxSprite;
flixel.system.FlxBGSprite.prototype = $extend(flixel.FlxSprite.prototype,{
	draw: function() {
		if(this.cameras == null) this.cameras = flixel.FlxG.cameras.list;
		var camera;
		var i = 0;
		var l = this.cameras.length;
		var drawItem;
		var currDrawData;
		var currIndex;
		var useAlpha = this.alpha < 1;
		while(i < l) {
			camera = this.cameras[i++];
			if(!camera.visible || !camera.exists) continue;
			drawItem = camera.getDrawStackItem(this.cachedGraphics,useAlpha);
			currDrawData = drawItem.drawData;
			currIndex = drawItem.position;
			this._point.set_x(camera.width * 0.5);
			this._point.set_y(camera.height * 0.5);
			var csx = camera.width;
			var ssy = 0;
			var ssx = 0;
			var csy = camera.height;
			currDrawData[currIndex++] = this._point.x;
			currDrawData[currIndex++] = this._point.y;
			currDrawData[currIndex++] = this.frame.tileID;
			currDrawData[currIndex++] = csx;
			currDrawData[currIndex++] = ssx;
			currDrawData[currIndex++] = -ssy;
			currDrawData[currIndex++] = csy;
			if(useAlpha) currDrawData[currIndex++] = this.alpha;
			drawItem.position = currIndex;
		}
	}
	,__class__: flixel.system.FlxBGSprite
});
flixel.system.FlxList = function() {
	this.object = null;
	this.next = null;
	this.exists = true;
};
$hxClasses["flixel.system.FlxList"] = flixel.system.FlxList;
flixel.system.FlxList.__name__ = ["flixel","system","FlxList"];
flixel.system.FlxList.recycle = function() {
	if(flixel.system.FlxList._cachedListsHead != null) {
		var cachedList = flixel.system.FlxList._cachedListsHead;
		flixel.system.FlxList._cachedListsHead = flixel.system.FlxList._cachedListsHead.next;
		flixel.system.FlxList._NUM_CACHED_FLX_LIST--;
		cachedList.exists = true;
		cachedList.next = null;
		return cachedList;
	} else return new flixel.system.FlxList();
}
flixel.system.FlxList.clearCache = function() {
	while(flixel.system.FlxList._cachedListsHead != null) {
		var node = flixel.system.FlxList._cachedListsHead;
		flixel.system.FlxList._cachedListsHead = flixel.system.FlxList._cachedListsHead.next;
		node.object = null;
		node.next = null;
	}
	flixel.system.FlxList._NUM_CACHED_FLX_LIST = 0;
}
flixel.system.FlxList.prototype = {
	destroy: function() {
		if(!this.exists) return;
		this.object = null;
		if(this.next != null) this.next.destroy();
		this.exists = false;
		this.next = flixel.system.FlxList._cachedListsHead;
		flixel.system.FlxList._cachedListsHead = this;
		flixel.system.FlxList._NUM_CACHED_FLX_LIST++;
	}
	,__class__: flixel.system.FlxList
}
flixel.system.FlxPreloader = function() {
	NMEPreloader.call(this);
};
$hxClasses["flixel.system.FlxPreloader"] = flixel.system.FlxPreloader;
flixel.system.FlxPreloader.__name__ = ["flixel","system","FlxPreloader"];
flixel.system.FlxPreloader.__super__ = NMEPreloader;
flixel.system.FlxPreloader.prototype = $extend(NMEPreloader.prototype,{
	__class__: flixel.system.FlxPreloader
});
flixel.system.FlxQuadTree = function(X,Y,Width,Height,Parent) {
	flixel.util.FlxRect.call(this,X,Y,Width,Height);
	this.reset(X,Y,Width,Height,Parent);
};
$hxClasses["flixel.system.FlxQuadTree"] = flixel.system.FlxQuadTree;
flixel.system.FlxQuadTree.__name__ = ["flixel","system","FlxQuadTree"];
flixel.system.FlxQuadTree.recycle = function(X,Y,Width,Height,Parent) {
	if(flixel.system.FlxQuadTree._cachedTreesHead != null) {
		var cachedTree = flixel.system.FlxQuadTree._cachedTreesHead;
		flixel.system.FlxQuadTree._cachedTreesHead = flixel.system.FlxQuadTree._cachedTreesHead.next;
		flixel.system.FlxQuadTree._NUM_CACHED_QUAD_TREES--;
		cachedTree.reset(X,Y,Width,Height,Parent);
		return cachedTree;
	} else return new flixel.system.FlxQuadTree(X,Y,Width,Height,Parent);
}
flixel.system.FlxQuadTree.clearCache = function() {
	while(flixel.system.FlxQuadTree._cachedTreesHead != null) {
		var node = flixel.system.FlxQuadTree._cachedTreesHead;
		flixel.system.FlxQuadTree._cachedTreesHead = flixel.system.FlxQuadTree._cachedTreesHead.next;
		node.next = null;
	}
	flixel.system.FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
}
flixel.system.FlxQuadTree.__super__ = flixel.util.FlxRect;
flixel.system.FlxQuadTree.prototype = $extend(flixel.util.FlxRect.prototype,{
	overlapNode: function() {
		var overlapProcessed = false;
		var checkObject;
		while(flixel.system.FlxQuadTree._iterator != null) {
			if(flixel.system.FlxQuadTree._object == null || (!flixel.system.FlxQuadTree._object.exists || flixel.system.FlxQuadTree._object.allowCollisions <= 0)) break;
			checkObject = flixel.system.FlxQuadTree._iterator.object;
			if(flixel.system.FlxQuadTree._object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0) {
				flixel.system.FlxQuadTree._iterator = flixel.system.FlxQuadTree._iterator.next;
				continue;
			}
			flixel.system.FlxQuadTree._objectHullX = flixel.system.FlxQuadTree._object.x < flixel.system.FlxQuadTree._object.last.x?flixel.system.FlxQuadTree._object.x:flixel.system.FlxQuadTree._object.last.x;
			flixel.system.FlxQuadTree._objectHullY = flixel.system.FlxQuadTree._object.y < flixel.system.FlxQuadTree._object.last.y?flixel.system.FlxQuadTree._object.y:flixel.system.FlxQuadTree._object.last.y;
			flixel.system.FlxQuadTree._objectHullWidth = flixel.system.FlxQuadTree._object.x - flixel.system.FlxQuadTree._object.last.x;
			flixel.system.FlxQuadTree._objectHullWidth = flixel.system.FlxQuadTree._object.get_width() + (flixel.system.FlxQuadTree._objectHullWidth > 0?flixel.system.FlxQuadTree._objectHullWidth:-flixel.system.FlxQuadTree._objectHullWidth);
			flixel.system.FlxQuadTree._objectHullHeight = flixel.system.FlxQuadTree._object.y - flixel.system.FlxQuadTree._object.last.y;
			flixel.system.FlxQuadTree._objectHullHeight = flixel.system.FlxQuadTree._object.get_height() + (flixel.system.FlxQuadTree._objectHullHeight > 0?flixel.system.FlxQuadTree._objectHullHeight:-flixel.system.FlxQuadTree._objectHullHeight);
			flixel.system.FlxQuadTree._checkObjectHullX = checkObject.x < checkObject.last.x?checkObject.x:checkObject.last.x;
			flixel.system.FlxQuadTree._checkObjectHullY = checkObject.y < checkObject.last.y?checkObject.y:checkObject.last.y;
			flixel.system.FlxQuadTree._checkObjectHullWidth = checkObject.x - checkObject.last.x;
			flixel.system.FlxQuadTree._checkObjectHullWidth = checkObject.get_width() + (flixel.system.FlxQuadTree._checkObjectHullWidth > 0?flixel.system.FlxQuadTree._checkObjectHullWidth:-flixel.system.FlxQuadTree._checkObjectHullWidth);
			flixel.system.FlxQuadTree._checkObjectHullHeight = checkObject.y - checkObject.last.y;
			flixel.system.FlxQuadTree._checkObjectHullHeight = checkObject.get_height() + (flixel.system.FlxQuadTree._checkObjectHullHeight > 0?flixel.system.FlxQuadTree._checkObjectHullHeight:-flixel.system.FlxQuadTree._checkObjectHullHeight);
			if(flixel.system.FlxQuadTree._objectHullX + flixel.system.FlxQuadTree._objectHullWidth > flixel.system.FlxQuadTree._checkObjectHullX && flixel.system.FlxQuadTree._objectHullX < flixel.system.FlxQuadTree._checkObjectHullX + flixel.system.FlxQuadTree._checkObjectHullWidth && flixel.system.FlxQuadTree._objectHullY + flixel.system.FlxQuadTree._objectHullHeight > flixel.system.FlxQuadTree._checkObjectHullY && flixel.system.FlxQuadTree._objectHullY < flixel.system.FlxQuadTree._checkObjectHullY + flixel.system.FlxQuadTree._checkObjectHullHeight) {
				if(flixel.system.FlxQuadTree._processingCallback == null || flixel.system.FlxQuadTree._processingCallback(flixel.system.FlxQuadTree._object,checkObject)) {
					overlapProcessed = true;
					if(flixel.system.FlxQuadTree._notifyCallback != null) flixel.system.FlxQuadTree._notifyCallback(flixel.system.FlxQuadTree._object,checkObject);
				}
			}
			if(flixel.system.FlxQuadTree._iterator != null) flixel.system.FlxQuadTree._iterator = flixel.system.FlxQuadTree._iterator.next;
		}
		return overlapProcessed;
	}
	,execute: function() {
		var overlapProcessed = false;
		var iterator;
		if(this._headA.object != null) {
			iterator = this._headA;
			while(iterator != null) {
				flixel.system.FlxQuadTree._object = iterator.object;
				if(flixel.system.FlxQuadTree._useBothLists) flixel.system.FlxQuadTree._iterator = this._headB; else flixel.system.FlxQuadTree._iterator = iterator.next;
				if(flixel.system.FlxQuadTree._object.exists && flixel.system.FlxQuadTree._object.allowCollisions > 0 && flixel.system.FlxQuadTree._iterator != null && flixel.system.FlxQuadTree._iterator.object != null && flixel.system.FlxQuadTree._iterator.object.exists && this.overlapNode()) overlapProcessed = true;
				iterator = iterator.next;
			}
		}
		if(this._northWestTree != null && this._northWestTree.execute()) overlapProcessed = true;
		if(this._northEastTree != null && this._northEastTree.execute()) overlapProcessed = true;
		if(this._southEastTree != null && this._southEastTree.execute()) overlapProcessed = true;
		if(this._southWestTree != null && this._southWestTree.execute()) overlapProcessed = true;
		return overlapProcessed;
	}
	,addToList: function() {
		var ot;
		if(flixel.system.FlxQuadTree._list == 0) {
			if(this._tailA.object != null) {
				ot = this._tailA;
				this._tailA = flixel.system.FlxList.recycle();
				ot.next = this._tailA;
			}
			this._tailA.object = flixel.system.FlxQuadTree._object;
		} else {
			if(this._tailB.object != null) {
				ot = this._tailB;
				this._tailB = flixel.system.FlxList.recycle();
				ot.next = this._tailB;
			}
			this._tailB.object = flixel.system.FlxQuadTree._object;
		}
		if(!this._canSubdivide) return;
		if(this._northWestTree != null) this._northWestTree.addToList();
		if(this._northEastTree != null) this._northEastTree.addToList();
		if(this._southEastTree != null) this._southEastTree.addToList();
		if(this._southWestTree != null) this._southWestTree.addToList();
	}
	,addObject: function() {
		if(!this._canSubdivide || this._leftEdge >= flixel.system.FlxQuadTree._objectLeftEdge && this._rightEdge <= flixel.system.FlxQuadTree._objectRightEdge && this._topEdge >= flixel.system.FlxQuadTree._objectTopEdge && this._bottomEdge <= flixel.system.FlxQuadTree._objectBottomEdge) {
			this.addToList();
			return;
		}
		if(flixel.system.FlxQuadTree._objectLeftEdge > this._leftEdge && flixel.system.FlxQuadTree._objectRightEdge < this._midpointX) {
			if(flixel.system.FlxQuadTree._objectTopEdge > this._topEdge && flixel.system.FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northWestTree == null) this._northWestTree = flixel.system.FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northWestTree.addObject();
				return;
			}
			if(flixel.system.FlxQuadTree._objectTopEdge > this._midpointY && flixel.system.FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southWestTree == null) this._southWestTree = flixel.system.FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southWestTree.addObject();
				return;
			}
		}
		if(flixel.system.FlxQuadTree._objectLeftEdge > this._midpointX && flixel.system.FlxQuadTree._objectRightEdge < this._rightEdge) {
			if(flixel.system.FlxQuadTree._objectTopEdge > this._topEdge && flixel.system.FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northEastTree == null) this._northEastTree = flixel.system.FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northEastTree.addObject();
				return;
			}
			if(flixel.system.FlxQuadTree._objectTopEdge > this._midpointY && flixel.system.FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southEastTree == null) this._southEastTree = flixel.system.FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southEastTree.addObject();
				return;
			}
		}
		if(flixel.system.FlxQuadTree._objectRightEdge > this._leftEdge && flixel.system.FlxQuadTree._objectLeftEdge < this._midpointX && flixel.system.FlxQuadTree._objectBottomEdge > this._topEdge && flixel.system.FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northWestTree == null) this._northWestTree = flixel.system.FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northWestTree.addObject();
		}
		if(flixel.system.FlxQuadTree._objectRightEdge > this._midpointX && flixel.system.FlxQuadTree._objectLeftEdge < this._rightEdge && flixel.system.FlxQuadTree._objectBottomEdge > this._topEdge && flixel.system.FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northEastTree == null) this._northEastTree = flixel.system.FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northEastTree.addObject();
		}
		if(flixel.system.FlxQuadTree._objectRightEdge > this._midpointX && flixel.system.FlxQuadTree._objectLeftEdge < this._rightEdge && flixel.system.FlxQuadTree._objectBottomEdge > this._midpointY && flixel.system.FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southEastTree == null) this._southEastTree = flixel.system.FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southEastTree.addObject();
		}
		if(flixel.system.FlxQuadTree._objectRightEdge > this._leftEdge && flixel.system.FlxQuadTree._objectLeftEdge < this._midpointX && flixel.system.FlxQuadTree._objectBottomEdge > this._midpointY && flixel.system.FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southWestTree == null) this._southWestTree = flixel.system.FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southWestTree.addObject();
		}
	}
	,add: function(ObjectOrGroup,list) {
		flixel.system.FlxQuadTree._list = list;
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.SPRITEGROUP) ObjectOrGroup = Reflect.field(ObjectOrGroup,"group");
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.GROUP) {
			var i = 0;
			var basic;
			var collisionType;
			var group = ObjectOrGroup;
			var members = group.get_members();
			var l = group.length;
			while(i < l) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					collisionType = basic.collisionType;
					if(collisionType == flixel.system.FlxCollisionType.SPRITEGROUP) basic = Reflect.field(ObjectOrGroup,"group");
					if(collisionType == flixel.system.FlxCollisionType.GROUP) this.add(basic,list); else if(collisionType == flixel.system.FlxCollisionType.OBJECT || collisionType == flixel.system.FlxCollisionType.TILEMAP) {
						flixel.system.FlxQuadTree._object = js.Boot.__cast(basic , flixel.FlxObject);
						if(flixel.system.FlxQuadTree._object.exists && flixel.system.FlxQuadTree._object.allowCollisions != 0) {
							flixel.system.FlxQuadTree._objectLeftEdge = flixel.system.FlxQuadTree._object.x;
							flixel.system.FlxQuadTree._objectTopEdge = flixel.system.FlxQuadTree._object.y;
							flixel.system.FlxQuadTree._objectRightEdge = flixel.system.FlxQuadTree._object.x + flixel.system.FlxQuadTree._object.get_width();
							flixel.system.FlxQuadTree._objectBottomEdge = flixel.system.FlxQuadTree._object.y + flixel.system.FlxQuadTree._object.get_height();
							this.addObject();
						}
					}
				}
			}
		} else {
			flixel.system.FlxQuadTree._object = js.Boot.__cast(ObjectOrGroup , flixel.FlxObject);
			if(flixel.system.FlxQuadTree._object.exists && flixel.system.FlxQuadTree._object.allowCollisions != 0) {
				flixel.system.FlxQuadTree._objectLeftEdge = flixel.system.FlxQuadTree._object.x;
				flixel.system.FlxQuadTree._objectTopEdge = flixel.system.FlxQuadTree._object.y;
				flixel.system.FlxQuadTree._objectRightEdge = flixel.system.FlxQuadTree._object.x + flixel.system.FlxQuadTree._object.get_width();
				flixel.system.FlxQuadTree._objectBottomEdge = flixel.system.FlxQuadTree._object.y + flixel.system.FlxQuadTree._object.get_height();
				this.addObject();
			}
		}
	}
	,load: function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
		this.add(ObjectOrGroup1,0);
		if(ObjectOrGroup2 != null) {
			this.add(ObjectOrGroup2,1);
			flixel.system.FlxQuadTree._useBothLists = true;
		} else flixel.system.FlxQuadTree._useBothLists = false;
		flixel.system.FlxQuadTree._notifyCallback = NotifyCallback;
		flixel.system.FlxQuadTree._processingCallback = ProcessCallback;
	}
	,destroy: function() {
		if(this._headA != null) this._headA.destroy();
		this._headA = null;
		if(this._tailA != null) this._tailA.destroy();
		this._tailA = null;
		if(this._headB != null) this._headB.destroy();
		this._headB = null;
		if(this._tailB != null) this._tailB.destroy();
		this._tailB = null;
		if(this._northWestTree != null) this._northWestTree.destroy();
		this._northWestTree = null;
		if(this._northEastTree != null) this._northEastTree.destroy();
		this._northEastTree = null;
		if(this._southEastTree != null) this._southEastTree.destroy();
		this._southEastTree = null;
		if(this._southWestTree != null) this._southWestTree.destroy();
		this._southWestTree = null;
		flixel.system.FlxQuadTree._object = null;
		flixel.system.FlxQuadTree._processingCallback = null;
		flixel.system.FlxQuadTree._notifyCallback = null;
		this.exists = false;
		this.next = flixel.system.FlxQuadTree._cachedTreesHead;
		flixel.system.FlxQuadTree._cachedTreesHead = this;
		flixel.system.FlxQuadTree._NUM_CACHED_QUAD_TREES++;
	}
	,reset: function(X,Y,Width,Height,Parent) {
		this.exists = true;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		this;
		this._headA = this._tailA = flixel.system.FlxList.recycle();
		this._headB = this._tailB = flixel.system.FlxList.recycle();
		if(Parent != null) {
			var iterator;
			var ot;
			if(Parent._headA.object != null) {
				iterator = Parent._headA;
				while(iterator != null) {
					if(this._tailA.object != null) {
						ot = this._tailA;
						this._tailA = flixel.system.FlxList.recycle();
						ot.next = this._tailA;
					}
					this._tailA.object = iterator.object;
					iterator = iterator.next;
				}
			}
			if(Parent._headB.object != null) {
				iterator = Parent._headB;
				while(iterator != null) {
					if(this._tailB.object != null) {
						ot = this._tailB;
						this._tailB = flixel.system.FlxList.recycle();
						ot.next = this._tailB;
					}
					this._tailB.object = iterator.object;
					iterator = iterator.next;
				}
			}
		} else flixel.system.FlxQuadTree._min = Math.floor((this.width + this.height) / (2 * flixel.system.FlxQuadTree.divisions));
		this._canSubdivide = this.width > flixel.system.FlxQuadTree._min || this.height > flixel.system.FlxQuadTree._min;
		this._northWestTree = null;
		this._northEastTree = null;
		this._southEastTree = null;
		this._southWestTree = null;
		this._leftEdge = this.x;
		this._rightEdge = this.x + this.width;
		this._halfWidth = this.width / 2;
		this._midpointX = this._leftEdge + this._halfWidth;
		this._topEdge = this.y;
		this._bottomEdge = this.y + this.height;
		this._halfHeight = this.height / 2;
		this._midpointY = this._topEdge + this._halfHeight;
	}
	,__class__: flixel.system.FlxQuadTree
});
flixel.system.FlxSound = function() {
	this._alreadyPaused = false;
	this._volumeAdjust = 1.0;
	flixel.FlxBasic.call(this);
	this.reset();
};
$hxClasses["flixel.system.FlxSound"] = flixel.system.FlxSound;
flixel.system.FlxSound.__name__ = ["flixel","system","FlxSound"];
flixel.system.FlxSound.__super__ = flixel.FlxBasic;
flixel.system.FlxSound.prototype = $extend(flixel.FlxBasic.prototype,{
	setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,onFocusLost: function() {
		this._alreadyPaused = this._paused;
		this.pause();
	}
	,onFocus: function() {
		if(!this._alreadyPaused) this.resume();
	}
	,gotID3: function(event) {
		this.name = this._sound.id3.songName;
		this.artist = this._sound.id3.artist;
		this._sound.removeEventListener(flash.events.Event.ID3,$bind(this,this.gotID3));
	}
	,cleanup: function(destroySound,resetPosition,resetFading) {
		if(resetFading == null) resetFading = true;
		if(resetPosition == null) resetPosition = true;
		if(destroySound) {
			this.reset();
			return;
		}
		if(this._channel != null) {
			this._channel.removeEventListener(flash.events.Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		this.set_active(false);
		if(resetPosition) {
			this._position = 0;
			this._paused = false;
		}
	}
	,stopped: function(event) {
		if(this.onComplete != null) this.onComplete();
		if(this._looped) {
			this.cleanup(false);
			this.play();
		} else this.cleanup(this.autoDestroy);
	}
	,startSound: function(Position) {
		var numLoops = this._looped && Position == 0?9999:0;
		this._position = Position;
		this._paused = false;
		this._channel = this._sound.play(this._position,numLoops,this._transform);
		if(this._channel != null) {
			this._channel.addEventListener(flash.events.Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this.set_active(true);
		} else {
			this.set_exists(false);
			this.set_active(false);
		}
	}
	,updateTransform: function() {
		this._transform.volume = (flixel.FlxG.sound.muted?0:1) * flixel.FlxG.sound.volume * this._volume * this._volumeAdjust;
		if(this._channel != null) this._channel.set_soundTransform(this._transform);
	}
	,getActualVolume: function() {
		return this._volume * this._volumeAdjust;
	}
	,set_volume: function(Volume) {
		this._volume = Volume;
		if(this._volume < 0) this._volume = 0; else if(this._volume > 1) this._volume = 1;
		this.updateTransform();
		return Volume;
	}
	,get_volume: function() {
		return this._volume;
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,fadeIn: function(Duration,From,To) {
		if(To == null) To = 1;
		if(From == null) From = 0;
		this.set_volume(From);
		flixel.tweens.FlxTween.singleVar(this,"volume",To,Duration);
	}
	,fadeOut: function(Duration,To) {
		if(To == null) To = 0;
		flixel.tweens.FlxTween.singleVar(this,"volume",To,Duration);
	}
	,stop: function() {
		this.cleanup(this.autoDestroy,true,true);
	}
	,pause: function() {
		if(!this.get_playing()) return;
		this._position = this._channel.position;
		this._paused = true;
		this.cleanup(false,false,false);
	}
	,resume: function() {
		if(this._paused) this.startSound(this._position);
	}
	,play: function(ForceRestart) {
		if(ForceRestart == null) ForceRestart = false;
		if(!this.exists) return;
		if(ForceRestart) this.cleanup(false,true,true); else if(this.get_playing()) return;
		if(this._paused) this.resume(); else this.startSound(0);
	}
	,proximity: function(X,Y,TargetObject,Radius,Pan) {
		if(Pan == null) Pan = true;
		this.x = X;
		this.y = Y;
		this._target = TargetObject;
		this._radius = Radius;
		this._proximityPan = Pan;
		return this;
	}
	,loadStream: function(SoundURL,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		this._sound = new flash.media.Sound();
		this._sound.addEventListener(flash.events.Event.ID3,$bind(this,this.gotID3));
		this._sound.load(new flash.net.URLRequest(SoundURL));
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,loadEmbedded: function(EmbeddedSound,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		if(js.Boot.__instanceof(EmbeddedSound,flash.media.Sound)) this._sound = EmbeddedSound; else if(js.Boot.__instanceof(EmbeddedSound,Class)) this._sound = Type.createInstance(EmbeddedSound,[]); else if(js.Boot.__instanceof(EmbeddedSound,String)) this._sound = openfl.Assets.getSound(EmbeddedSound);
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,kill: function() {
		flixel.FlxBasic.prototype.kill.call(this);
		this.cleanup(false);
	}
	,update: function() {
		if(!this.get_playing()) return;
		this._position = this._channel.position;
		var radialMultiplier = 1.0;
		var fadeMultiplier = 1.0;
		if(this._target != null) {
			radialMultiplier = flixel.util.FlxMath.getDistance(new flixel.util.FlxPoint(this._target.x,this._target.y),new flixel.util.FlxPoint(this.x,this.y)) / this._radius;
			if(radialMultiplier < 0) radialMultiplier = 0;
			if(radialMultiplier > 1) radialMultiplier = 1;
			radialMultiplier = 1 - radialMultiplier;
			if(this._proximityPan) {
				var d = (this.x - this._target.x) / this._radius;
				if(d < -1) d = -1; else if(d > 1) d = 1;
				this._transform.pan = d;
			}
		}
		this._volumeAdjust = radialMultiplier * fadeMultiplier;
		this.updateTransform();
		if(this._transform.volume > 0) {
			this.amplitudeLeft = this._channel.leftPeak / this._transform.volume;
			this.amplitudeRight = this._channel.rightPeak / this._transform.volume;
			this.amplitude = (this.amplitudeLeft + this.amplitudeRight) * 0.5;
		} else {
			this.amplitudeLeft = 0;
			this.amplitudeRight = 0;
			this.amplitude = 0;
		}
	}
	,destroy: function() {
		this._transform = null;
		this.set_exists(false);
		this.set_active(false);
		this._target = null;
		this.name = null;
		this.artist = null;
		if(this._channel != null) {
			this._channel.removeEventListener(flash.events.Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		if(this._sound != null) {
			this._sound.removeEventListener(flash.events.Event.ID3,$bind(this,this.gotID3));
			this._sound = null;
		}
		this.onComplete = null;
		flixel.FlxBasic.prototype.destroy.call(this);
	}
	,reset: function() {
		this.destroy();
		this.x = 0;
		this.y = 0;
		this._position = 0;
		this._paused = false;
		this._volume = 1.0;
		this._volumeAdjust = 1.0;
		this._looped = false;
		this._target = null;
		this._radius = 0;
		this._proximityPan = false;
		this.set_visible(false);
		this.amplitude = 0;
		this.amplitudeLeft = 0;
		this.amplitudeRight = 0;
		this.autoDestroy = false;
		if(this._transform == null) this._transform = new flash.media.SoundTransform();
		this._transform.pan = 0;
	}
	,set_pan: function(pan) {
		return this._transform.pan = pan;
	}
	,get_pan: function() {
		return this._transform.pan;
	}
	,__class__: flixel.system.FlxSound
	,__properties__: $extend(flixel.FlxBasic.prototype.__properties__,{set_pan:"set_pan",get_pan:"get_pan",get_playing:"get_playing",set_volume:"set_volume",get_volume:"get_volume"})
});
flixel.system.FlixelSound = function(stream,context) {
	flash.media.Sound.call(this,stream,context);
};
$hxClasses["flixel.system.FlixelSound"] = flixel.system.FlixelSound;
flixel.system.FlixelSound.__name__ = ["flixel","system","FlixelSound"];
flixel.system.FlixelSound.__super__ = flash.media.Sound;
flixel.system.FlixelSound.prototype = $extend(flash.media.Sound.prototype,{
	__class__: flixel.system.FlixelSound
});
flixel.system.FlxSplash = function(NextState) {
	this._curPart = 0;
	this._nextState = NextState;
	flixel.FlxState.call(this);
};
$hxClasses["flixel.system.FlxSplash"] = flixel.system.FlxSplash;
flixel.system.FlxSplash.__name__ = ["flixel","system","FlxSplash"];
flixel.system.FlxSplash.__super__ = flixel.FlxState;
flixel.system.FlxSplash.prototype = $extend(flixel.FlxState.prototype,{
	onComplete: function(Tween) {
		flixel.FlxG.cameras.set_bgColor(this._cachedBgColor);
		flixel.FlxG.fixedTimestep = this._cachedTimestep;
		flixel.FlxG.autoPause = this._cachedAutoPause;
		flixel.FlxG.keys.enabled = true;
		flash.Lib.get_current().get_stage().removeChild(this._sprite);
		flash.Lib.get_current().get_stage().removeChild(this._text);
		flixel.FlxG.game._requestedState = Type.createInstance(this._nextState,[]);
		flixel.FlxG.game._gameJustStarted = true;
	}
	,drawLightBlue: function() {
		this._gfx.beginFill(314875);
		this._gfx.moveTo(50,50);
		this._gfx.lineTo(25,50);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(50,25);
		this._gfx.lineTo(50,50);
		this._gfx.endFill();
	}
	,drawBlue: function() {
		this._gfx.beginFill(3555839);
		this._gfx.moveTo(-50,50);
		this._gfx.lineTo(-25,50);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-50,25);
		this._gfx.lineTo(-50,50);
		this._gfx.endFill();
	}
	,drawRed: function() {
		this._gfx.beginFill(16066382);
		this._gfx.moveTo(50,-50);
		this._gfx.lineTo(25,-50);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(50,-25);
		this._gfx.lineTo(50,-50);
		this._gfx.endFill();
	}
	,drawYellow: function() {
		this._gfx.beginFill(16761138);
		this._gfx.moveTo(-50,-50);
		this._gfx.lineTo(-25,-50);
		this._gfx.lineTo(0,-37);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(-50,-25);
		this._gfx.lineTo(-50,-50);
		this._gfx.endFill();
	}
	,drawGreen: function() {
		this._gfx.beginFill(47394);
		this._gfx.moveTo(0,-37);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(0,-37);
		this._gfx.endFill();
	}
	,timerCallback: function(Timer) {
		this._functions[this._curPart]();
		this._text.set_textColor(this._colors[this._curPart]);
		this._text.set_text("HaxeFlixel");
		this._curPart++;
		if(this._curPart == 5) {
			flixel.tweens.FlxTween.multiVar(this._sprite,{ alpha : 0},3.0,{ ease : flixel.tweens.FlxEase.quadOut, complete : $bind(this,this.onComplete)});
			flixel.tweens.FlxTween.multiVar(this._text,{ alpha : 0},3.0,{ ease : flixel.tweens.FlxEase.quadOut});
		}
	}
	,create: function() {
		this._cachedBgColor = flixel.FlxG.cameras.get_bgColor();
		flixel.FlxG.cameras.set_bgColor(-16777216);
		this._cachedTimestep = flixel.FlxG.fixedTimestep;
		flixel.FlxG.fixedTimestep = false;
		this._cachedAutoPause = flixel.FlxG.autoPause;
		flixel.FlxG.autoPause = false;
		flixel.FlxG.keys.enabled = false;
		this._times = [0.041,0.184,0.334,0.495,0.636];
		this._colors = [47394,16761138,16066382,3555839,314875];
		this._functions = [$bind(this,this.drawGreen),$bind(this,this.drawYellow),$bind(this,this.drawRed),$bind(this,this.drawBlue),$bind(this,this.drawLightBlue)];
		var _g = 0, _g1 = this._times;
		while(_g < _g1.length) {
			var time = _g1[_g];
			++_g;
			flixel.util.FlxTimer.start(time,$bind(this,this.timerCallback));
		}
		var stageWidth = flash.Lib.get_current().get_stage().get_stageWidth();
		var stageHeight = flash.Lib.get_current().get_stage().get_stageHeight();
		this._sprite = new flash.display.Sprite();
		flash.Lib.get_current().get_stage().addChild(this._sprite);
		this._gfx = this._sprite.get_graphics();
		this._text = new flash.text.TextField();
		this._text.selectable = false;
		this._text.embedFonts = true;
		var dtf = new flash.text.TextFormat(flixel.system.FlxAssets.FONT_DEFAULT,16,16777215);
		dtf.align = flash.text.TextFormatAlign.CENTER;
		this._text.set_defaultTextFormat(dtf);
		this._text.set_text("HaxeFlixel");
		flash.Lib.get_current().get_stage().addChild(this._text);
		this.onResize(stageWidth,stageHeight);
		flixel.FlxG.sound.load(flixel.system.FlixelSound).play();
	}
	,onResize: function(Width,Height) {
		flixel.FlxState.prototype.onResize.call(this,Width,Height);
		this._sprite.set_x(Width / 2);
		this._sprite.set_y(Height / 2 - 20 * flixel.FlxG.game.get_scaleY());
		this._text.set_width(Width / flixel.FlxG.game.get_scaleX());
		this._text.set_x(0);
		this._text.set_y(this._sprite.get_y() + 80 * flixel.FlxG.game.get_scaleY());
		this._sprite.set_scaleX(this._text.set_scaleX(flixel.FlxG.game.get_scaleX()));
		this._sprite.set_scaleY(this._text.set_scaleY(flixel.FlxG.game.get_scaleY()));
	}
	,destroy: function() {
		this._nextState = null;
		this._sprite = null;
		this._gfx = null;
		this._text = null;
		this._times = null;
		this._colors = null;
		this._functions = null;
		flixel.FlxState.prototype.destroy.call(this);
	}
	,__class__: flixel.system.FlxSplash
});
flixel.system.debug = {}
flixel.system.debug.ButtonAlignment = $hxClasses["flixel.system.debug.ButtonAlignment"] = { __ename__ : ["flixel","system","debug","ButtonAlignment"], __constructs__ : ["LEFT","MIDDLE","RIGHT"] }
flixel.system.debug.ButtonAlignment.LEFT = ["LEFT",0];
flixel.system.debug.ButtonAlignment.LEFT.toString = $estr;
flixel.system.debug.ButtonAlignment.LEFT.__enum__ = flixel.system.debug.ButtonAlignment;
flixel.system.debug.ButtonAlignment.MIDDLE = ["MIDDLE",1];
flixel.system.debug.ButtonAlignment.MIDDLE.toString = $estr;
flixel.system.debug.ButtonAlignment.MIDDLE.__enum__ = flixel.system.debug.ButtonAlignment;
flixel.system.debug.ButtonAlignment.RIGHT = ["RIGHT",2];
flixel.system.debug.ButtonAlignment.RIGHT.toString = $estr;
flixel.system.debug.ButtonAlignment.RIGHT.__enum__ = flixel.system.debug.ButtonAlignment;
flixel.system.debug.DebuggerLayout = $hxClasses["flixel.system.debug.DebuggerLayout"] = { __ename__ : ["flixel","system","debug","DebuggerLayout"], __constructs__ : ["STANDARD","MICRO","BIG","TOP","LEFT","RIGHT"] }
flixel.system.debug.DebuggerLayout.STANDARD = ["STANDARD",0];
flixel.system.debug.DebuggerLayout.STANDARD.toString = $estr;
flixel.system.debug.DebuggerLayout.STANDARD.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.DebuggerLayout.MICRO = ["MICRO",1];
flixel.system.debug.DebuggerLayout.MICRO.toString = $estr;
flixel.system.debug.DebuggerLayout.MICRO.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.DebuggerLayout.BIG = ["BIG",2];
flixel.system.debug.DebuggerLayout.BIG.toString = $estr;
flixel.system.debug.DebuggerLayout.BIG.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.DebuggerLayout.TOP = ["TOP",3];
flixel.system.debug.DebuggerLayout.TOP.toString = $estr;
flixel.system.debug.DebuggerLayout.TOP.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.DebuggerLayout.LEFT = ["LEFT",4];
flixel.system.debug.DebuggerLayout.LEFT.toString = $estr;
flixel.system.debug.DebuggerLayout.LEFT.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.DebuggerLayout.RIGHT = ["RIGHT",5];
flixel.system.debug.DebuggerLayout.RIGHT.toString = $estr;
flixel.system.debug.DebuggerLayout.RIGHT.__enum__ = flixel.system.debug.DebuggerLayout;
flixel.system.debug.LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {
	if(OpenConsole == null) OpenConsole = false;
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Size == null) Size = 12;
	if(Color == null) Color = "FFFFFF";
	if(Prefix == null) Prefix = "";
	this.prefix = Prefix;
	this.color = Color;
	this.size = Size;
	this.bold = Bold;
	this.italic = Italic;
	this.underlined = Underlined;
	this.errorSound = ErrorSound;
	this.openConsole = OpenConsole;
	this.callbackFunction = CallbackFunction;
};
$hxClasses["flixel.system.debug.LogStyle"] = flixel.system.debug.LogStyle;
flixel.system.debug.LogStyle.__name__ = ["flixel","system","debug","LogStyle"];
flixel.system.debug.LogStyle.prototype = {
	__class__: flixel.system.debug.LogStyle
}
flixel.system.layer = {}
flixel.system.layer.DrawStackItem = function() {
	this.antialiasing = false;
	this.initialized = false;
	this.useAlpha = false;
	this.position = 0;
	this.drawData = new Array();
};
$hxClasses["flixel.system.layer.DrawStackItem"] = flixel.system.layer.DrawStackItem;
flixel.system.layer.DrawStackItem.__name__ = ["flixel","system","layer","DrawStackItem"];
flixel.system.layer.DrawStackItem.prototype = {
	dispose: function() {
		this.graphics = null;
		this.drawData = null;
		this.next = null;
	}
	,reset: function() {
		this.graphics = null;
		this.initialized = false;
		this.antialiasing = false;
		this.position = 0;
	}
	,__class__: flixel.system.layer.DrawStackItem
}
flixel.system.layer.Region = function(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.startX = startX;
	this.startY = startY;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacingX = spacingX;
	this.spacingY = spacingY;
	this.width = width;
	this.height = height;
};
$hxClasses["flixel.system.layer.Region"] = flixel.system.layer.Region;
flixel.system.layer.Region.__name__ = ["flixel","system","layer","Region"];
flixel.system.layer.Region.prototype = {
	clone: function() {
		return new flixel.system.layer.Region(this.startX,this.startY,this.tileWidth,this.tileHeight,this.spacingX,this.spacingY,this.width,this.height);
	}
	,get_numCols: function() {
		var num = 1;
		if(this.tileWidth != 0) num = (this.width + this.spacingX) / (this.tileWidth + this.spacingX) | 0;
		return num;
	}
	,get_numRows: function() {
		var num = 1;
		if(this.tileHeight != 0) num = (this.height + this.spacingY) / (this.tileHeight + this.spacingY) | 0;
		return num;
	}
	,get_numTiles: function() {
		return this.get_numRows() * this.get_numCols();
	}
	,__class__: flixel.system.layer.Region
	,__properties__: {get_numTiles:"get_numTiles",get_numRows:"get_numRows",get_numCols:"get_numCols"}
}
flixel.system.layer.TileSheetData = function(Bitmap) {
	this.bitmap = Bitmap;
	this.tileSheet = new flixel.system.layer.TileSheetExt(this.bitmap);
	this.flxSpriteFrames = new haxe.ds.StringMap();
	this.flxFrames = new haxe.ds.StringMap();
	this.frameNames = new Array();
};
$hxClasses["flixel.system.layer.TileSheetData"] = flixel.system.layer.TileSheetData;
flixel.system.layer.TileSheetData.__name__ = ["flixel","system","layer","TileSheetData"];
flixel.system.layer.TileSheetData.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.system.layer.TileSheetData.prototype = {
	destroyFrameBitmapDatas: function() {
		var numFrames = this.frameNames.length;
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			this.flxFrames.get(this.frameNames[i]).destroyBitmapDatas();
		}
	}
	,addTexturePackerFrame: function(frameData,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		var key = frameData.name;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var texFrame = new flixel.system.layer.frames.FlxFrame(this);
		texFrame.trimmed = frameData.trimmed;
		texFrame.rotated = frameData.rotated;
		texFrame.name = key;
		texFrame.sourceSize.copyFrom(frameData.sourceSize);
		texFrame.offset.copyFrom(frameData.offset);
		texFrame.center.set(0,0);
		texFrame.frame = frameData.frame.clone();
		if(frameData.rotated) {
			texFrame.center.set(texFrame.frame.height * 0.5 + texFrame.offset.x,texFrame.frame.width * 0.5 + texFrame.offset.y);
			texFrame.additionalAngle = -90.0;
		} else texFrame.center.set(texFrame.frame.width * 0.5 + texFrame.offset.x,texFrame.frame.height * 0.5 + texFrame.offset.y);
		texFrame.tileID = this.tileSheet.addTileRectID(texFrame.frame,new flash.geom.Point(0.5 * texFrame.frame.width,0.5 * texFrame.frame.height));
		this.flxFrames.set(key,texFrame);
		this.frameNames.push(key);
		return texFrame;
	}
	,getTexturePackerFrames: function(data,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		if(this.flxSpriteFrames.exists(data.assetName)) return this.flxSpriteFrames.get(data.assetName);
		data.parseData();
		var frame;
		var packerFrames = new flixel.system.layer.frames.FlxSpriteFrames(data.assetName);
		var l = data.frames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			frame = this.addTexturePackerFrame(data.frames[i],startX,startY);
			packerFrames.addFrame(frame);
		}
		this.flxSpriteFrames.set(data.assetName,packerFrames);
		return packerFrames;
	}
	,onContext: function(bitmap) {
		this.bitmap = bitmap;
		var newSheet = new flixel.system.layer.TileSheetExt(bitmap);
		newSheet.rebuildFromOld(this.tileSheet);
		this.tileSheet = newSheet;
	}
	,destroy: function() {
		this.bitmap = null;
		this.tileSheet.destroy();
		this.tileSheet = null;
		var $it0 = ((function(_e) {
			return function() {
				return _e.iterator();
			};
		})(this.flxSpriteFrames))();
		while( $it0.hasNext() ) {
			var spriteData = $it0.next();
			spriteData.destroy();
		}
		var $it1 = ((function(_e1) {
			return function() {
				return _e1.iterator();
			};
		})(this.flxSpriteFrames))();
		while( $it1.hasNext() ) {
			var frames = $it1.next();
			frames.destroy();
		}
		this.flxSpriteFrames = null;
		var $it2 = ((function(_e2) {
			return function() {
				return _e2.iterator();
			};
		})(this.flxFrames))();
		while( $it2.hasNext() ) {
			var frame = $it2.next();
			frame.destroy();
		}
		this.flxFrames = null;
		this.frameNames = null;
	}
	,addTileRect: function(tileRect,point) {
		return this.tileSheet.addTileRectID(tileRect,point);
	}
	,containsFrame: function(key) {
		return this.flxFrames.exists(key);
	}
	,addSpriteSheetFrame: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var frame = new flixel.system.layer.frames.FlxFrame(this);
		frame.tileID = this.tileSheet.addTileRectID(rect,point);
		frame.name = key;
		frame.frame = rect;
		frame.rotated = false;
		frame.trimmed = false;
		frame.sourceSize.set(rect.width,rect.height);
		frame.offset.set(0,0);
		frame.center.set(0.5 * rect.width,0.5 * rect.height);
		this.flxFrames.set(key,frame);
		this.frameNames.push(key);
		return frame;
	}
	,containsSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		return this.flxSpriteFrames.exists(key);
	}
	,getKeyForSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		return width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
	}
	,getSpriteSheetFrameKey: function(rect,point) {
		return rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
	}
	,getSpriteSheetFrames: function(region,origin) {
		var bitmapWidth = region.width;
		var bitmapHeight = region.height;
		var startX = region.startX;
		var startY = region.startY;
		var endX = startX + bitmapWidth;
		var endY = startY + bitmapHeight;
		var xSpacing = region.spacingX;
		var ySpacing = region.spacingY;
		var width = region.tileWidth == 0?bitmapWidth:region.tileWidth;
		var height = region.tileHeight == 0?bitmapHeight:region.tileHeight;
		var pointX = 0.5 * width;
		var pointY = 0.5 * height;
		if(origin != null) {
			pointX = origin.x;
			pointY = origin.y;
		}
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		if(this.flxSpriteFrames.exists(key)) return this.flxSpriteFrames.get(key);
		var numRows = region.get_numRows();
		var numCols = region.get_numCols();
		var tempPoint = origin;
		if(origin == null) tempPoint = new flash.geom.Point(pointX,pointY);
		var spriteData = new flixel.system.layer.frames.FlxSpriteFrames(key);
		var frame;
		var tempRect;
		var spacedWidth = width + xSpacing;
		var spacedHeight = height + ySpacing;
		var _g1 = 0, _g = numRows;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0, _g2 = numCols;
			while(_g3 < _g2) {
				var i = _g3++;
				tempRect = new flash.geom.Rectangle(startX + i * spacedWidth,startY + j * spacedHeight,width,height);
				frame = this.addSpriteSheetFrame(tempRect,tempPoint);
				spriteData.addFrame(frame);
			}
		}
		this.flxSpriteFrames.set(key,spriteData);
		return spriteData;
	}
	,getFrame: function(name) {
		return this.flxFrames.get(name);
	}
	,__class__: flixel.system.layer.TileSheetData
}
openfl.display = {}
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,drawTiles: function(graphics,tileData,smooth,flags) {
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags);
	}
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = new flash.geom.Point();
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new flash.geom.Rectangle(rectangle.get_left() / this.__bitmap.get_width(),rectangle.get_top() / this.__bitmap.get_height(),rectangle.get_right() / this.__bitmap.get_width(),rectangle.get_bottom() / this.__bitmap.get_height()));
		return this.__tileRects.length - 1;
	}
	,__class__: openfl.display.Tilesheet
}
flixel.system.layer.TileSheetExt = function(bitmap) {
	openfl.display.Tilesheet.call(this,bitmap);
	this.tileIDs = new haxe.ds.StringMap();
	this.tileOrder = new Array();
	this.numTiles = 0;
};
$hxClasses["flixel.system.layer.TileSheetExt"] = flixel.system.layer.TileSheetExt;
flixel.system.layer.TileSheetExt.__name__ = ["flixel","system","layer","TileSheetExt"];
flixel.system.layer.TileSheetExt.__super__ = openfl.display.Tilesheet;
flixel.system.layer.TileSheetExt.prototype = $extend(openfl.display.Tilesheet.prototype,{
	destroy: function() {
		this.tileOrder = null;
		if(this.tileIDs != null) {
			var $it0 = ((function(_e) {
				return function() {
					return _e.iterator();
				};
			})(this.tileIDs))();
			while( $it0.hasNext() ) {
				var tileObj = $it0.next();
				tileObj.destroy();
			}
		}
		this.tileIDs = null;
	}
	,addTileRectID: function(rect,point) {
		var key = this.getKey(rect,point);
		if(this.tileIDs.exists(key)) return this.tileIDs.get(key).id;
		this.addTileRect(rect,point);
		var tileID = this.numTiles;
		this.numTiles++;
		this.tileOrder[tileID] = key;
		this.tileIDs.set(key,new flixel.system.layer.RectPointTileID(tileID,rect,point));
		return tileID;
	}
	,getKey: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_";
		if(point != null) key = key + point.x + "_" + point.y;
		return key;
	}
	,rebuildFromOld: function(old) {
		var num = old.tileOrder.length;
		var _g = 0;
		while(_g < num) {
			var i = _g++;
			var tileName = old.tileOrder[i];
			var tileObj = old.tileIDs.get(tileName);
			this.addTileRect(tileObj.rect,tileObj.point);
		}
		this.tileIDs = old.tileIDs;
		this.tileOrder = old.tileOrder;
		this.numTiles = old.numTiles;
		old.tileIDs = null;
		old.tileOrder = null;
		old.destroy();
	}
	,__class__: flixel.system.layer.TileSheetExt
});
flixel.system.layer.RectPointTileID = function(id,rect,point) {
	this.id = id;
	this.rect = rect;
	this.point = point;
};
$hxClasses["flixel.system.layer.RectPointTileID"] = flixel.system.layer.RectPointTileID;
flixel.system.layer.RectPointTileID.__name__ = ["flixel","system","layer","RectPointTileID"];
flixel.system.layer.RectPointTileID.prototype = {
	destroy: function() {
		this.rect = null;
		this.point = null;
	}
	,__class__: flixel.system.layer.RectPointTileID
}
flixel.system.layer.frames = {}
flixel.system.layer.frames.FlxFrame = function(tileSheet) {
	this.additionalAngle = 0;
	this.tileID = -1;
	this.trimmed = false;
	this.rotated = false;
	this._tileSheet = tileSheet;
	this.additionalAngle = 0;
	this.sourceSize = new flixel.util.FlxPoint();
	this.offset = new flixel.util.FlxPoint();
	this.center = new flixel.util.FlxPoint();
};
$hxClasses["flixel.system.layer.frames.FlxFrame"] = flixel.system.layer.frames.FlxFrame;
flixel.system.layer.frames.FlxFrame.__name__ = ["flixel","system","layer","frames","FlxFrame"];
flixel.system.layer.frames.FlxFrame.prototype = {
	destroyBitmapDatas: function() {
		if(this._bitmapData != null) {
			this._bitmapData.dispose();
			this._bitmapData = null;
		}
		if(this._hReversedBitmapData != null) {
			this._hReversedBitmapData.dispose();
			this._hReversedBitmapData = null;
		}
		if(this._vReversedBitmapData != null) {
			this._vReversedBitmapData.dispose();
			this._vReversedBitmapData = null;
		}
		if(this._hvReversedBitmapData != null) {
			this._hvReversedBitmapData.dispose();
			this._hvReversedBitmapData = null;
		}
	}
	,destroy: function() {
		this.name = null;
		this.frame = null;
		this.sourceSize = null;
		this.offset = null;
		this.center = null;
		this._tileSheet = null;
		this.destroyBitmapDatas();
	}
	,getHVReversedBitmap: function() {
		if(this._hvReversedBitmapData != null) return this._hvReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel.system.layer.frames.FlxFrame.MATRIX.identity();
		flixel.system.layer.frames.FlxFrame.MATRIX.scale(-1,-1);
		flixel.system.layer.frames.FlxFrame.MATRIX.translate(this.sourceSize.x | 0,this.sourceSize.y | 0);
		this._hvReversedBitmapData = new flash.display.BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hvReversedBitmapData.draw(normalFrame,flixel.system.layer.frames.FlxFrame.MATRIX);
		return this._hvReversedBitmapData;
	}
	,getVReversedBitmap: function() {
		if(this._vReversedBitmapData != null) return this._vReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel.system.layer.frames.FlxFrame.MATRIX.identity();
		flixel.system.layer.frames.FlxFrame.MATRIX.scale(1,-1);
		flixel.system.layer.frames.FlxFrame.MATRIX.translate(0,this.sourceSize.y | 0);
		this._vReversedBitmapData = new flash.display.BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._vReversedBitmapData.draw(normalFrame,flixel.system.layer.frames.FlxFrame.MATRIX);
		return this._vReversedBitmapData;
	}
	,getHReversedBitmap: function() {
		if(this._hReversedBitmapData != null) return this._hReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel.system.layer.frames.FlxFrame.MATRIX.identity();
		flixel.system.layer.frames.FlxFrame.MATRIX.scale(-1,1);
		flixel.system.layer.frames.FlxFrame.MATRIX.translate(this.sourceSize.x | 0,0);
		this._hReversedBitmapData = new flash.display.BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hReversedBitmapData.draw(normalFrame,flixel.system.layer.frames.FlxFrame.MATRIX);
		return this._hReversedBitmapData;
	}
	,getBitmap: function() {
		if(this._bitmapData != null) return this._bitmapData;
		this._bitmapData = new flash.display.BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		if(this.rotated) {
			var temp = new flash.display.BitmapData(this.frame.width | 0,this.frame.height | 0,true,0);
			flixel.system.layer.frames.FlxFrame.POINT.x = flixel.system.layer.frames.FlxFrame.POINT.y = 0;
			temp.copyPixels(this._tileSheet.bitmap,this.frame,flixel.system.layer.frames.FlxFrame.POINT);
			flixel.system.layer.frames.FlxFrame.MATRIX.identity();
			flixel.system.layer.frames.FlxFrame.MATRIX.translate(-0.5 * this.frame.width,-0.5 * this.frame.height);
			flixel.system.layer.frames.FlxFrame.MATRIX.rotate(-90. * flixel.util.FlxAngle.TO_RAD);
			flixel.system.layer.frames.FlxFrame.MATRIX.translate(this.offset.x + 0.5 * this.frame.height,this.offset.y + 0.5 * this.frame.width);
			this._bitmapData.draw(temp,flixel.system.layer.frames.FlxFrame.MATRIX);
			temp.dispose();
		} else {
			flixel.system.layer.frames.FlxFrame.POINT.x = this.offset.x;
			flixel.system.layer.frames.FlxFrame.POINT.y = this.offset.y;
			this._bitmapData.copyPixels(this._tileSheet.bitmap,this.frame,flixel.system.layer.frames.FlxFrame.POINT);
		}
		return this._bitmapData;
	}
	,__class__: flixel.system.layer.frames.FlxFrame
}
flixel.system.layer.frames.FlxSpriteFrames = function(name) {
	this.name = name;
	this.frames = [];
	this.framesHash = new haxe.ds.StringMap();
};
$hxClasses["flixel.system.layer.frames.FlxSpriteFrames"] = flixel.system.layer.frames.FlxSpriteFrames;
flixel.system.layer.frames.FlxSpriteFrames.__name__ = ["flixel","system","layer","frames","FlxSpriteFrames"];
flixel.system.layer.frames.FlxSpriteFrames.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.system.layer.frames.FlxSpriteFrames.prototype = {
	destroy: function() {
		this.frames = null;
		this.framesHash = null;
		this.name = null;
	}
	,addFrame: function(frame) {
		this.frames.push(frame);
		this.framesHash.set(frame.name,frame);
	}
	,__class__: flixel.system.layer.frames.FlxSpriteFrames
}
flixel.system.replay = {}
flixel.system.replay.CodeValuePair = function(Code,Value) {
	if(Value == null) Value = 0;
	if(Code == null) Code = 0;
	this.code = Code;
	this.value = Value;
};
$hxClasses["flixel.system.replay.CodeValuePair"] = flixel.system.replay.CodeValuePair;
flixel.system.replay.CodeValuePair.__name__ = ["flixel","system","replay","CodeValuePair"];
flixel.system.replay.CodeValuePair.prototype = {
	__class__: flixel.system.replay.CodeValuePair
}
flixel.system.replay.FlxReplay = function() {
	this.seed = 0;
	this.frame = 0;
	this.frameCount = 0;
	this.finished = false;
	this._frames = null;
	this._capacity = 0;
	this._marker = 0;
};
$hxClasses["flixel.system.replay.FlxReplay"] = flixel.system.replay.FlxReplay;
flixel.system.replay.FlxReplay.__name__ = ["flixel","system","replay","FlxReplay"];
flixel.system.replay.FlxReplay.prototype = {
	init: function() {
		this._capacity = 100;
		this._frames = new Array();
		flixel.util.FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		this.frameCount = 0;
	}
	,rewind: function() {
		this._marker = 0;
		this.frame = 0;
		this.finished = false;
	}
	,playNextFrame: function() {
		flixel.FlxG.inputs.reset();
		if(this._marker >= this.frameCount) {
			this.finished = true;
			return;
		}
		if(this._frames[this._marker].frame != this.frame++) return;
		var fr = this._frames[this._marker++];
		if(fr.keys != null) flixel.FlxG.keys.playback(fr.keys);
		if(fr.mouse != null) flixel.FlxG.mouse.playback(fr.mouse);
	}
	,recordFrame: function() {
		var continueFrame = true;
		var keysRecord = flixel.FlxG.keys.record();
		if(keysRecord == null) continueFrame = false;
		var mouseRecord = flixel.FlxG.mouse.record();
		if(mouseRecord == null) continueFrame = false;
		if(continueFrame) {
			this.frame++;
			return;
		}
		var frameRecorded = new flixel.system.replay.FrameRecord().create(this.frame++);
		frameRecorded.mouse = mouseRecord;
		frameRecorded.keys = keysRecord;
		this._frames[this.frameCount++] = frameRecorded;
		if(this.frameCount >= this._capacity) {
			this._capacity *= 2;
			flixel.util.FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		}
	}
	,save: function() {
		if(this.frameCount <= 0) return null;
		var output = this.seed + "\n";
		var i = 0;
		while(i < this.frameCount) output += this._frames[i++].save() + "\n";
		return output;
	}
	,load: function(FileContents) {
		this.init();
		var lines = FileContents.split("\n");
		this.seed = Std.parseInt(lines[0]);
		var line;
		var i = 1;
		var l = lines.length;
		while(i < l) {
			line = lines[i++];
			if(line.length > 3) {
				this._frames[this.frameCount++] = new flixel.system.replay.FrameRecord().load(line);
				if(this.frameCount >= this._capacity) {
					this._capacity *= 2;
					flixel.util.FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
				}
			}
		}
		this.rewind();
	}
	,create: function(Seed) {
		this.destroy();
		this.init();
		this.seed = Seed;
		this.rewind();
	}
	,destroy: function() {
		if(this._frames == null) return;
		var i = this.frameCount - 1;
		while(i >= 0) this._frames[i--].destroy();
		this._frames = null;
	}
	,__class__: flixel.system.replay.FlxReplay
}
flixel.system.replay.FrameRecord = function() {
	this.frame = 0;
	this.keys = null;
	this.mouse = null;
};
$hxClasses["flixel.system.replay.FrameRecord"] = flixel.system.replay.FrameRecord;
flixel.system.replay.FrameRecord.__name__ = ["flixel","system","replay","FrameRecord"];
flixel.system.replay.FrameRecord.prototype = {
	load: function(Data) {
		var i;
		var l;
		var array = Data.split("k");
		this.frame = Std.parseInt(array[0]);
		array = array[1].split("m");
		var keyData = array[0];
		var mouseData = array[1];
		if(keyData.length > 0) {
			array = keyData.split(",");
			var keyPair;
			i = 0;
			l = array.length;
			while(i < l) {
				keyPair = array[i++].split(":");
				if(keyPair.length == 2) {
					if(this.keys == null) this.keys = new Array();
					this.keys.push(new flixel.system.replay.CodeValuePair(Std.parseInt(keyPair[0]),Std.parseInt(keyPair[1])));
				}
			}
		}
		if(mouseData.length > 0) {
			array = mouseData.split(",");
			if(array.length >= 4) this.mouse = new flixel.system.replay.MouseRecord(Std.parseInt(array[0]),Std.parseInt(array[1]),Std.parseInt(array[2]),Std.parseInt(array[3]));
		}
		return this;
	}
	,save: function() {
		var output = this.frame + "k";
		if(this.keys != null) {
			var object;
			var i = 0;
			var l = this.keys.length;
			while(i < l) {
				if(i > 0) output += ",";
				object = this.keys[i++];
				output += object.code + ":" + object.value;
			}
		}
		output += "m";
		if(this.mouse != null) output += this.mouse.x + "," + this.mouse.y + "," + this.mouse.button + "," + this.mouse.wheel;
		return output;
	}
	,destroy: function() {
		this.keys = null;
		this.mouse = null;
	}
	,create: function(Frame,Keys,Mouse) {
		this.frame = Math.floor(Frame);
		this.keys = Keys;
		this.mouse = Mouse;
		return this;
	}
	,__class__: flixel.system.replay.FrameRecord
}
flixel.system.replay.MouseRecord = function(X,Y,Button,Wheel) {
	flixel.util.FlxPoint.call(this,X,Y);
	this.button = Button;
	this.wheel = Wheel;
};
$hxClasses["flixel.system.replay.MouseRecord"] = flixel.system.replay.MouseRecord;
flixel.system.replay.MouseRecord.__name__ = ["flixel","system","replay","MouseRecord"];
flixel.system.replay.MouseRecord.__super__ = flixel.util.FlxPoint;
flixel.system.replay.MouseRecord.prototype = $extend(flixel.util.FlxPoint.prototype,{
	__class__: flixel.system.replay.MouseRecord
});
flixel.system.ui = {}
flixel.system.ui.FlxFocusLostScreen = function() {
	flash.display.Sprite.call(this);
	this.draw();
	var logo = new flash.display.Sprite();
	flixel.system.FlxAssets.drawLogo(logo.get_graphics());
	logo.set_scaleX(logo.set_scaleY(0.2));
	logo.set_x(logo.set_y(5));
	logo.alpha = 0.35;
	this.addChild(logo);
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxFocusLostScreen"] = flixel.system.ui.FlxFocusLostScreen;
flixel.system.ui.FlxFocusLostScreen.__name__ = ["flixel","system","ui","FlxFocusLostScreen"];
flixel.system.ui.FlxFocusLostScreen.__super__ = flash.display.Sprite;
flixel.system.ui.FlxFocusLostScreen.prototype = $extend(flash.display.Sprite.prototype,{
	draw: function() {
		var gfx = this.get_graphics();
		var screenWidth = flixel.FlxCamera.defaultZoom * flixel.FlxG.width * flixel.FlxG.game.get_scaleX() | 0;
		var screenHeight = flixel.FlxCamera.defaultZoom * flixel.FlxG.height * flixel.FlxG.game.get_scaleY() | 0;
		gfx.clear();
		gfx.moveTo(0,0);
		gfx.beginFill(0,0.5);
		gfx.drawRect(0,0,screenWidth,screenHeight);
		gfx.endFill();
		var halfWidth = screenWidth / 2 | 0;
		var halfHeight = screenHeight / 2 | 0;
		var helper = Math.min(halfWidth,halfHeight) / 3 | 0;
		gfx.moveTo(halfWidth - helper,halfHeight - helper);
		gfx.beginFill(16777215,0.65);
		gfx.lineTo(halfWidth + helper,halfHeight);
		gfx.lineTo(halfWidth - helper,halfHeight + helper);
		gfx.lineTo(halfWidth - helper,halfHeight - helper);
		gfx.endFill();
		this.set_scaleX(1 / flixel.FlxG.game.get_scaleX());
		this.set_scaleY(1 / flixel.FlxG.game.get_scaleY());
	}
	,__class__: flixel.system.ui.FlxFocusLostScreen
});
flixel.system.ui.FlxSoundTray = function() {
	this._defaultScale = 2.0;
	this._width = 80;
	flash.display.Sprite.call(this);
	this.set_visible(false);
	this.set_scaleX(this._defaultScale);
	this.set_scaleY(this._defaultScale);
	var tmp = new flash.display.Bitmap(new flash.display.BitmapData(this._width,30,true,2130706432));
	this.screenCenter();
	this.addChild(tmp);
	var text = new flash.text.TextField();
	text.set_width(tmp.get_width());
	text.set_height(tmp.get_height());
	text.multiline = true;
	text.set_wordWrap(true);
	text.selectable = false;
	var dtf = new flash.text.TextFormat(flixel.system.FlxAssets.FONT_DEFAULT,8,16777215);
	dtf.align = flash.text.TextFormatAlign.CENTER;
	text.set_defaultTextFormat(dtf);
	this.addChild(text);
	text.set_text("VOLUME");
	text.set_y(16);
	var bx = 10;
	var by = 14;
	this._bars = new Array();
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tmp = new flash.display.Bitmap(new flash.display.BitmapData(4,i + 1,false,-1));
		tmp.set_x(bx);
		tmp.set_y(by);
		this.addChild(tmp);
		this._bars.push(tmp);
		bx += 6;
		by--;
	}
	this.set_y(-this.get_height());
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxSoundTray"] = flixel.system.ui.FlxSoundTray;
flixel.system.ui.FlxSoundTray.__name__ = ["flixel","system","ui","FlxSoundTray"];
flixel.system.ui.FlxSoundTray.__super__ = flash.display.Sprite;
flixel.system.ui.FlxSoundTray.prototype = $extend(flash.display.Sprite.prototype,{
	screenCenter: function() {
		this.set_scaleX(this._defaultScale / flixel.FlxG.game.get_scaleX());
		this.set_scaleY(this._defaultScale / flixel.FlxG.game.get_scaleY());
		this.set_x((0.5 * (flash.Lib.get_current().get_stage().get_stageWidth() - this._width * this._defaultScale) - flixel.FlxG.game.get_x()) / flixel.FlxG.game.get_scaleX());
	}
	,show: function(Silent) {
		if(Silent == null) Silent = false;
		if(!Silent) flixel.FlxG.sound.load(flixel.system.BeepSound).play();
		this._timer = 1;
		this.set_y(0);
		this.set_visible(true);
		this.active = true;
		var globalVolume = Math.round(flixel.FlxG.sound.volume * 10);
		if(flixel.FlxG.sound.muted) globalVolume = 0;
		var _g1 = 0, _g = this._bars.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < globalVolume) this._bars[i].alpha = 1; else this._bars[i].alpha = 0.5;
		}
	}
	,update: function(MS) {
		if(this._timer > 0) this._timer -= MS / 1000; else if(this.get_y() > -this.get_height()) {
			var _g = this;
			_g.set_y(_g.get_y() - MS / 1000 * flixel.FlxG.height * 2);
			if(this.get_y() <= -this.get_height()) {
				this.set_visible(false);
				this.active = false;
				flixel.FlxG.save.data.mute = flixel.FlxG.sound.muted;
				flixel.FlxG.save.data.volume = flixel.FlxG.sound.volume;
				flixel.FlxG.save.flush();
			}
		}
	}
	,__class__: flixel.system.ui.FlxSoundTray
});
flixel.system.ui.FlxSystemButton = function(Icon,UpHandler,ToggleMode) {
	if(ToggleMode == null) ToggleMode = false;
	this._mouseDown = false;
	this.toggled = false;
	this.toggleMode = false;
	this.enabled = true;
	flash.display.Sprite.call(this);
	if(Icon != null) {
		this._icon = new flash.display.Bitmap(Icon);
		this.addChild(this._icon);
	}
	this.upHandler = UpHandler;
	this.toggleMode = ToggleMode;
	this.addEventListener(flash.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	this.addEventListener(flash.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	this.addEventListener(flash.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	this.addEventListener(flash.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
};
$hxClasses["flixel.system.ui.FlxSystemButton"] = flixel.system.ui.FlxSystemButton;
flixel.system.ui.FlxSystemButton.__name__ = ["flixel","system","ui","FlxSystemButton"];
flixel.system.ui.FlxSystemButton.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.system.ui.FlxSystemButton.__super__ = flash.display.Sprite;
flixel.system.ui.FlxSystemButton.prototype = $extend(flash.display.Sprite.prototype,{
	set_toggled: function(Value) {
		if(this.toggleMode) this.alpha = Value?0.3:1;
		return this.toggled = Value;
	}
	,onMouseOut: function(E) {
		this.alpha += 0.2;
	}
	,onMouseOver: function(E) {
		this.alpha -= 0.2;
	}
	,onMouseDown: function(E) {
		this._mouseDown = true;
	}
	,onMouseUp: function(E) {
		if(this.enabled && this._mouseDown) {
			this.set_toggled(!this.toggled);
			this._mouseDown = false;
			if(this.upHandler != null) this.upHandler();
		}
	}
	,destroy: function() {
		this.removeEventListener(flash.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		this.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		this.removeEventListener(flash.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeEventListener(flash.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		this._icon = null;
		this.upHandler = null;
	}
	,changeIcon: function(Icon) {
		if(this._icon != null) this.removeChild(this._icon);
		this._icon = new flash.display.Bitmap(Icon);
		this.addChild(this._icon);
	}
	,__class__: flixel.system.ui.FlxSystemButton
	,__properties__: $extend(flash.display.Sprite.prototype.__properties__,{set_toggled:"set_toggled"})
});
flixel.text.FlxTextFormat = function(FontColor,Bold,Italic,BorderColor,Start,End) {
	if(End == null) End = -1;
	if(Start == null) Start = -1;
	this.end = -1;
	this.start = -1;
	if(FontColor != null) FontColor &= 16777215;
	if(BorderColor != null) BorderColor &= 16777215;
	this.format = new flash.text.TextFormat(null,null,FontColor,Bold,Italic);
	if(Start > -1) this.start = Start;
	if(End > -1) this.end = End;
	this.borderColor = BorderColor == null?0:BorderColor;
};
$hxClasses["flixel.text.FlxTextFormat"] = flixel.text.FlxTextFormat;
flixel.text.FlxTextFormat.__name__ = ["flixel","text","FlxTextFormat"];
flixel.text.FlxTextFormat.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.text.FlxTextFormat.prototype = {
	destroy: function() {
		this.format = null;
	}
	,__class__: flixel.text.FlxTextFormat
}
flixel.text.pxText = {}
flixel.text.pxText.PxBitmapFont = function() {
	this._maxHeight = 0;
	this._bgTileID = -1;
	this._num_letters = 0;
	this._point = new flash.geom.Point();
	this._glyphs = new haxe.ds.IntMap();
};
$hxClasses["flixel.text.pxText.PxBitmapFont"] = flixel.text.pxText.PxBitmapFont;
flixel.text.pxText.PxBitmapFont.__name__ = ["flixel","text","pxText","PxBitmapFont"];
flixel.text.pxText.PxBitmapFont.store = function(PxHandle,PxFont) {
	flixel.text.pxText.PxBitmapFont._storedFonts.set(PxHandle,PxFont);
}
flixel.text.pxText.PxBitmapFont.fetch = function(PxHandle) {
	var f = flixel.text.pxText.PxBitmapFont._storedFonts.get(PxHandle);
	return f;
}
flixel.text.pxText.PxBitmapFont.clearStorage = function() {
	var $it0 = flixel.text.pxText.PxBitmapFont._storedFonts.iterator();
	while( $it0.hasNext() ) {
		var font = $it0.next();
		font.dispose();
	}
	flixel.text.pxText.PxBitmapFont._storedFonts = new haxe.ds.StringMap();
}
flixel.text.pxText.PxBitmapFont.prototype = {
	setCachedGraphics: function(value) {
		if(this.cachedGraphics != null && this.cachedGraphics != value) {
			var _g = this.cachedGraphics, _g1 = _g.useCount;
			_g.set_useCount(_g1 - 1);
			_g1;
		}
		if(this.cachedGraphics != value && value != null) {
			var _g = value, _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		this.cachedGraphics = value;
	}
	,get_numLetters: function() {
		return this._num_letters;
	}
	,get_bgTileID: function() {
		return this._bgTileID;
	}
	,get_pixels: function() {
		if(!this.cachedGraphics.isDumped) return this.cachedGraphics.bitmap;
		return null;
	}
	,getFontHeight: function() {
		return this._maxHeight;
	}
	,getTextWidth: function(PxText,PxLetterSpacing,PxFontScale) {
		if(PxFontScale == null) PxFontScale = 1;
		if(PxLetterSpacing == null) PxLetterSpacing = 0;
		var w = 0;
		var textLength = PxText.length;
		var _g1 = 0, _g = textLength;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			if(this._glyphs.exists(charCode)) w += this._glyphs.get(charCode).xadvance;
		}
		w = Math.round(w * PxFontScale);
		if(textLength > 1) w += (textLength - 1) * PxLetterSpacing;
		return w;
	}
	,render: function(DrawData,PxText,PxColor,PxSecondColor,PxAlpha,PxOffsetX,PxOffsetY,PxLetterSpacing,PxScale,PxUseColor) {
		if(PxUseColor == null) PxUseColor = true;
		var colorMultiplier = 1 / 255;
		var red = colorMultiplier;
		var green = colorMultiplier;
		var blue = colorMultiplier;
		if(PxUseColor) {
			red = (PxColor >> 16) * colorMultiplier;
			green = (PxColor >> 8 & 255) * colorMultiplier;
			blue = (PxColor & 255) * colorMultiplier;
		}
		PxSecondColor &= 16777215;
		red *= PxSecondColor >> 16;
		green *= PxSecondColor >> 8 & 255;
		blue *= PxSecondColor & 255;
		this._point.x = PxOffsetX;
		this._point.y = PxOffsetY;
		var glyph;
		var glyphWidth;
		var _g1 = 0, _g = PxText.length;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			glyph = this._glyphs.get(charCode);
			if(this._glyphs.exists(charCode)) {
				glyphWidth = glyph.xadvance;
				DrawData.push(glyph.tileID);
				DrawData.push(this._point.x + glyph.xoffset * PxScale);
				DrawData.push(this._point.y + glyph.yoffset * PxScale);
				DrawData.push(red);
				DrawData.push(green);
				DrawData.push(blue);
				this._point.x += glyphWidth * PxScale + PxLetterSpacing;
			}
		}
	}
	,setGlyph: function(Tiles,PxCharID,PxRect,PxOffsetX,PxOffsetY,PxAdvanceX) {
		if(PxAdvanceX == null) PxAdvanceX = 0;
		if(PxOffsetY == null) PxOffsetY = 0;
		if(PxOffsetX == null) PxOffsetX = 0;
		var tileID = Tiles.tileSheet.addTileRectID(PxRect,flixel.text.pxText.PxBitmapFont.ZERO_POINT);
		var symbol = new flixel.text.pxText.PxFontSymbol();
		symbol.tileID = tileID;
		symbol.xoffset = PxOffsetX;
		symbol.yoffset = PxOffsetY;
		symbol.xadvance = PxAdvanceX;
		this._glyphs.set(PxCharID,symbol);
		this._num_letters++;
		if(Math.floor(PxRect.height) + PxOffsetY > this._maxHeight) this._maxHeight = Math.floor(PxRect.height) + PxOffsetY;
	}
	,dispose: function() {
		this._symbols = null;
		this._tileRects = null;
		this.setCachedGraphics(null);
		this._region = null;
		this._glyphs = null;
	}
	,prepareAngelCodeBitmapData: function(PxBitmapData,PxXMLData,PxSymbols) {
		var chars = null;
		var $it0 = PxXMLData.elements();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			if(node.get_nodeName() == "font") {
				var $it1 = node.elements();
				while( $it1.hasNext() ) {
					var nodeChild = $it1.next();
					if(nodeChild.get_nodeName() == "chars") {
						chars = nodeChild;
						break;
					}
				}
			}
		}
		var symbol;
		var maxX = 0;
		var maxY = 0;
		if(chars != null) {
			var $it2 = chars.elements();
			while( $it2.hasNext() ) {
				var node = $it2.next();
				if(node.get_nodeName() == "char") {
					symbol = new flixel.text.pxText._PxBitmapFont.HelperSymbol();
					symbol.x = Std.parseInt(node.get("x"));
					symbol.y = Std.parseInt(node.get("y"));
					symbol.width = Std.parseInt(node.get("width"));
					symbol.height = Std.parseInt(node.get("height"));
					symbol.xoffset = Std.parseInt(node.get("xoffset"));
					symbol.yoffset = Std.parseInt(node.get("yoffset"));
					symbol.xadvance = Std.parseInt(node.get("xadvance"));
					symbol.charCode = Std.parseInt(node.get("id"));
					PxSymbols.push(symbol);
					maxX = symbol.x + symbol.width;
					maxY = symbol.y + symbol.height;
				}
			}
		}
		return PxBitmapData;
	}
	,preparePixelizerBitmapData: function(PxBitmapData,PxRects) {
		var bgColor = PxBitmapData.getPixel(0,0);
		var cy = 0;
		var cx;
		while(cy < (PxBitmapData.___textureBuffer != null?PxBitmapData.___textureBuffer.height:0)) {
			var rowHeight = 0;
			cx = 0;
			while(cx < (PxBitmapData.___textureBuffer != null?PxBitmapData.___textureBuffer.width:0)) {
				if((PxBitmapData.getPixel(cx,cy) | 0) != bgColor) {
					var gx = cx;
					var gy = cy;
					while((PxBitmapData.getPixel(gx,cy) | 0) != bgColor) gx++;
					while((PxBitmapData.getPixel(cx,gy) | 0) != bgColor) gy++;
					var gw = gx - cx;
					var gh = gy - cy;
					PxRects.push(new flash.geom.Rectangle(cx,cy,gw,gh));
					if(gh > rowHeight) rowHeight = gh;
					if(gh > this._maxHeight) this._maxHeight = gh;
					cx += gw;
				}
				cx++;
			}
			cy += rowHeight + 1;
		}
		PxBitmapData.floodFill(0,0,0);
		return PxBitmapData;
	}
	,reset: function() {
		this.dispose();
		this._maxHeight = 0;
		this._glyphs = new haxe.ds.IntMap();
		this._bgTileID = -1;
		this._symbols = null;
		this._tileRects = null;
		this._glyphString = "";
	}
	,updateGlyphData: function(Tiles) {
		this._glyphs = new haxe.ds.IntMap();
		var rect;
		if(this._symbols != null) {
			this._glyphString = "";
			var point = new flash.geom.Point();
			var bd;
			var charString;
			var _g = 0, _g1 = this._symbols;
			while(_g < _g1.length) {
				var symbol = _g1[_g];
				++_g;
				rect = new flash.geom.Rectangle();
				rect.x = symbol.x;
				rect.y = symbol.y;
				rect.width = symbol.width;
				rect.height = symbol.height;
				point.x = symbol.xoffset;
				point.y = symbol.yoffset;
				charString = String.fromCharCode(symbol.charCode);
				this._glyphString += charString;
				var xadvance = symbol.xadvance;
				var charWidth = xadvance;
				if(rect.width > xadvance) {
					charWidth = symbol.width;
					point.x = 0;
				}
				if(charString != " " && charString != "") this.setGlyph(Tiles,symbol.charCode,rect,Math.floor(point.x),Math.floor(point.y),charWidth); else this.setGlyph(Tiles,symbol.charCode,rect,Math.floor(point.x),1,charWidth);
			}
		} else if(this._tileRects != null) {
			var _g1 = 0, _g = this._tileRects.length;
			while(_g1 < _g) {
				var letterID = _g1++;
				rect = this._tileRects[letterID];
				this.setGlyph(Tiles,HxOverrides.cca(this._glyphString,letterID),rect,0,0,rect.width | 0);
			}
		}
	}
	,loadAngelCode: function(pBitmapData,pXMLData) {
		this.reset();
		if(pBitmapData != null && pXMLData != null) {
			this._symbols = new Array();
			var result = this.prepareAngelCodeBitmapData(pBitmapData,pXMLData,this._symbols);
			var key = flixel.FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel.FlxG.bitmap.add(result,false,key));
			this.updateGlyphData(this.cachedGraphics.get_tilesheet());
		}
		return this;
	}
	,loadPixelizer: function(PxBitmapData,PxLetters) {
		this.reset();
		this._glyphString = PxLetters;
		if(PxBitmapData != null) {
			this._tileRects = [];
			var result = this.preparePixelizerBitmapData(PxBitmapData,this._tileRects);
			var key = flixel.FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel.FlxG.bitmap.add(result,false,key));
			this._region = new flixel.system.layer.Region();
			this._region.width = this.cachedGraphics.bitmap.get_width();
			this._region.height = this.cachedGraphics.bitmap.get_height();
			var currRect;
			this.updateGlyphData(this.cachedGraphics.get_tilesheet());
		}
		return this;
	}
	,__class__: flixel.text.pxText.PxBitmapFont
	,__properties__: {get_numLetters:"get_numLetters",get_pixels:"get_pixels",get_bgTileID:"get_bgTileID"}
}
flixel.text.pxText._PxBitmapFont = {}
flixel.text.pxText._PxBitmapFont.HelperSymbol = function() {
};
$hxClasses["flixel.text.pxText._PxBitmapFont.HelperSymbol"] = flixel.text.pxText._PxBitmapFont.HelperSymbol;
flixel.text.pxText._PxBitmapFont.HelperSymbol.__name__ = ["flixel","text","pxText","_PxBitmapFont","HelperSymbol"];
flixel.text.pxText._PxBitmapFont.HelperSymbol.prototype = {
	__class__: flixel.text.pxText._PxBitmapFont.HelperSymbol
}
flixel.text.pxText.PxFontSymbol = function() {
};
$hxClasses["flixel.text.pxText.PxFontSymbol"] = flixel.text.pxText.PxFontSymbol;
flixel.text.pxText.PxFontSymbol.__name__ = ["flixel","text","pxText","PxFontSymbol"];
flixel.text.pxText.PxFontSymbol.prototype = {
	__class__: flixel.text.pxText.PxFontSymbol
}
flixel.tile = {}
flixel.tile.FlxTile = function(Tilemap,Index,Width,Height,Visible,AllowCollisions) {
	this.mapIndex = 0;
	this.callbackFunction = null;
	flixel.FlxObject.call(this,0,0,Width,Height);
	this.set_immovable(true);
	this.set_moves(false);
	this.filter = null;
	this.tilemap = Tilemap;
	this.index = Index;
	this.set_visible(Visible);
	this.allowCollisions = AllowCollisions;
};
$hxClasses["flixel.tile.FlxTile"] = flixel.tile.FlxTile;
flixel.tile.FlxTile.__name__ = ["flixel","tile","FlxTile"];
flixel.tile.FlxTile.__super__ = flixel.FlxObject;
flixel.tile.FlxTile.prototype = $extend(flixel.FlxObject.prototype,{
	destroy: function() {
		this.callbackFunction = null;
		this.tilemap = null;
		flixel.FlxObject.prototype.destroy.call(this);
	}
	,__class__: flixel.tile.FlxTile
});
flixel.tile.FlxTileblock = function(X,Y,Width,Height) {
	flixel.FlxSprite.call(this,X,Y);
	this.makeGraphic(Width,Height,0,true);
	this.set_active(false);
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxTileblock"] = flixel.tile.FlxTileblock;
flixel.tile.FlxTileblock.__name__ = ["flixel","tile","FlxTileblock"];
flixel.tile.FlxTileblock.__super__ = flixel.FlxSprite;
flixel.tile.FlxTileblock.prototype = $extend(flixel.FlxSprite.prototype,{
	loadTiles: function(TileGraphic,TileWidth,TileHeight,Empties) {
		if(Empties == null) Empties = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		if(TileGraphic == null) return this;
		var sprite = new flixel.FlxSprite().loadGraphic(TileGraphic,true,false,TileWidth,TileHeight);
		var spriteWidth = sprite.get_width() | 0;
		var spriteHeight = sprite.get_height() | 0;
		var total = sprite.frames + Empties;
		var regen = false;
		if(this.get_width() % sprite.get_width() != 0) {
			this.set_width((this.get_width() / spriteWidth + 1 | 0) * spriteWidth);
			regen = true;
		}
		if(this.get_height() % sprite.get_height() != 0) {
			this.set_height((this.get_height() / spriteHeight + 1 | 0) * spriteHeight);
			regen = true;
		}
		if(regen) this.makeGraphic(this.get_width() | 0,this.get_height() | 0,0,true); else flixel.util.FlxSpriteUtil.fill(this,0);
		var row = 0;
		var column;
		var destinationX;
		var destinationY = 0;
		var widthInTiles = this.get_width() / spriteWidth | 0;
		var heightInTiles = this.get_height() / spriteHeight | 0;
		while(row < heightInTiles) {
			destinationX = 0;
			column = 0;
			while(column < widthInTiles) {
				if((flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * total > Empties) {
					sprite.animation.randomFrame();
					sprite.calcFrame(true);
					this.stamp(sprite,destinationX,destinationY);
				}
				destinationX += spriteWidth;
				column++;
			}
			destinationY += spriteHeight;
			row++;
		}
		sprite.destroy();
		return this;
	}
	,__class__: flixel.tile.FlxTileblock
});
flixel.tile.GraphicAuto = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel.tile.GraphicAuto.preload != null) {
		this.___textureBuffer.width = flixel.tile.GraphicAuto.preload.get_width() | 0;
		this.___textureBuffer.height = flixel.tile.GraphicAuto.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel.tile.GraphicAuto.preload.get_width(),flixel.tile.GraphicAuto.preload.get_height());
		this.setPixels(this.rect,flixel.tile.GraphicAuto.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel.tile.GraphicAuto.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel.tile.GraphicAuto"] = flixel.tile.GraphicAuto;
flixel.tile.GraphicAuto.__name__ = ["flixel","tile","GraphicAuto"];
flixel.tile.GraphicAuto.__super__ = flash.display.BitmapData;
flixel.tile.GraphicAuto.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel.tile.GraphicAuto
});
flixel.tile.GraphicAutoAlt = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel.tile.GraphicAutoAlt.preload != null) {
		this.___textureBuffer.width = flixel.tile.GraphicAutoAlt.preload.get_width() | 0;
		this.___textureBuffer.height = flixel.tile.GraphicAutoAlt.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel.tile.GraphicAutoAlt.preload.get_width(),flixel.tile.GraphicAutoAlt.preload.get_height());
		this.setPixels(this.rect,flixel.tile.GraphicAutoAlt.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel.tile.GraphicAutoAlt.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel.tile.GraphicAutoAlt"] = flixel.tile.GraphicAutoAlt;
flixel.tile.GraphicAutoAlt.__name__ = ["flixel","tile","GraphicAutoAlt"];
flixel.tile.GraphicAutoAlt.__super__ = flash.display.BitmapData;
flixel.tile.GraphicAutoAlt.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel.tile.GraphicAutoAlt
});
flixel.tile.FlxTilemap = function() {
	this._startingIndex = 0;
	this._scaledTileHeight = 0;
	this._scaledTileWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	this.scaleY = 1.0;
	this.scaleX = 1.0;
	this.tileScaleHack = 1.01;
	this.totalTiles = 0;
	this.heightInTiles = 0;
	this.widthInTiles = 0;
	this.auto = 0;
	flixel.FlxObject.call(this);
	this.collisionType = flixel.system.FlxCollisionType.TILEMAP;
	this._buffers = new Array();
	this._flashPoint = new flash.geom.Point();
	this._tileWidth = 0;
	this._tileHeight = 0;
	this.set_immovable(true);
	this.set_moves(false);
	this._startingIndex = 0;
	this._helperPoint = new flash.geom.Point();
};
$hxClasses["flixel.tile.FlxTilemap"] = flixel.tile.FlxTilemap;
flixel.tile.FlxTilemap.__name__ = ["flixel","tile","FlxTilemap"];
flixel.tile.FlxTilemap.__super__ = flixel.FlxObject;
flixel.tile.FlxTilemap.prototype = $extend(flixel.FlxObject.prototype,{
	set_scaleY: function(Scale) {
		Scale = Math.abs(Scale);
		this.scaleY = Scale;
		this._scaledTileHeight = this._tileHeight * Scale;
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		if(this.cameras != null) {
			var i = 0;
			var l = this.cameras.length;
			while(i < l) {
				if(this._buffers[i] != null) this._buffers[i].updateRows(this._tileHeight,this.heightInTiles,Scale,this.cameras[i]);
				i++;
			}
		}
		return Scale;
	}
	,set_scaleX: function(Scale) {
		Scale = Math.abs(Scale);
		this.scaleX = Scale;
		this._scaledTileWidth = this._tileWidth * Scale;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		if(this.cameras != null) {
			var i = 0;
			var l = this.cameras.length;
			while(i < l) {
				if(this._buffers[i] != null) this._buffers[i].updateColumns(this._tileWidth,this.widthInTiles,Scale,this.cameras[i]);
				i++;
			}
		}
		return Scale;
	}
	,set_forceComplexRender: function(Value) {
		var i = 0;
		var l;
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._buffers[i1].forceComplexRender = Value;
			}
		}
		return flixel.FlxObject.prototype.set_forceComplexRender.call(this,Value);
	}
	,autoTile: function(Index) {
		if(this._data[Index] == 0) return;
		this._data[Index] = 0;
		if(Index - this.widthInTiles < 0 || this._data[Index - this.widthInTiles] > 0) this._data[Index] += 1;
		if(Index % this.widthInTiles >= this.widthInTiles - 1 || this._data[Index + 1] > 0) this._data[Index] += 2;
		if((Index + this.widthInTiles | 0) >= this.totalTiles || this._data[Index + this.widthInTiles] > 0) this._data[Index] += 4;
		if(Index % this.widthInTiles <= 0 || this._data[Index - 1] > 0) this._data[Index] += 8;
		if(this.auto == 2 && this._data[Index] == 15) {
			if(Index % this.widthInTiles > 0 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles - 1] <= 0) this._data[Index] = 1;
			if(Index % this.widthInTiles > 0 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles - 1] <= 0) this._data[Index] = 2;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles + 1] <= 0) this._data[Index] = 4;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles + 1] <= 0) this._data[Index] = 8;
		}
		this._data[Index] += 1;
	}
	,updateTile: function(Index) {
		var tile = this._tileObjects[this._data[Index]];
		if(tile == null || !tile.visible) {
			this._rectIDs[Index] = -1;
			return;
		}
		this._rectIDs[Index] = this.framesData.frames[this._data[Index] - this._startingIndex].tileID;
	}
	,walkPath: function(Data,Start,Points) {
		Points.push(new flixel.util.FlxPoint(this.x + Math.floor(Start % this.widthInTiles) * this._scaledTileWidth + this._scaledTileWidth * 0.5,this.y + Math.floor(Start / this.widthInTiles) * this._scaledTileHeight + this._scaledTileHeight * 0.5));
		if(Data[Start] == 0) return;
		var left = Start % this.widthInTiles > 0;
		var right = Start % this.widthInTiles < this.widthInTiles - 1;
		var up = Start / this.widthInTiles > 0;
		var down = Start / this.widthInTiles < this.heightInTiles - 1;
		var current = Data[Start];
		var i;
		if(up) {
			i = Start - this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right) {
			i = Start + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(down) {
			i = Start + this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left) {
			i = Start - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && right) {
			i = Start - this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right && down) {
			i = Start + this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left && down) {
			i = Start + this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && left) {
			i = Start - this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		return;
	}
	,computePathDistance: function(StartIndex,EndIndex,WideDiagonal) {
		var mapSize = this.widthInTiles * this.heightInTiles;
		var distances = new Array();
		flixel.util.FlxArrayUtil.setLength_Int(distances,mapSize);
		var i = 0;
		while(i < mapSize) {
			if(this._tileObjects[this._data[i]].allowCollisions != 0) distances[i] = -2; else distances[i] = -1;
			i++;
		}
		distances[StartIndex] = 0;
		var distance = 1;
		var neighbors = [StartIndex];
		var current;
		var currentIndex;
		var left;
		var right;
		var up;
		var down;
		var currentLength;
		var foundEnd = false;
		while(neighbors.length > 0) {
			current = neighbors;
			neighbors = new Array();
			i = 0;
			currentLength = current.length;
			while(i < currentLength) {
				currentIndex = current[i++];
				if(currentIndex == (EndIndex | 0)) {
					foundEnd = true;
					neighbors = [];
					break;
				}
				left = currentIndex % this.widthInTiles > 0;
				right = currentIndex % this.widthInTiles < this.widthInTiles - 1;
				up = currentIndex / this.widthInTiles > 0;
				down = currentIndex / this.widthInTiles < this.heightInTiles - 1;
				var index;
				if(up) {
					index = currentIndex - this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right) {
					index = currentIndex + 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(down) {
					index = currentIndex + this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left) {
					index = currentIndex - 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && right) {
					index = currentIndex - this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right && down) {
					index = currentIndex + this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left && down) {
					index = currentIndex + this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && left) {
					index = currentIndex - this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
			}
			distance++;
		}
		if(!foundEnd) distances = null;
		return distances;
	}
	,raySimplifyPath: function(Points) {
		var source = Points[0];
		var lastIndex = -1;
		var node;
		var i = 1;
		var l = Points.length;
		while(i < l) {
			node = Points[i++];
			if(node == null) continue;
			if(this.ray(source,node,this._point)) {
				if(lastIndex >= 0) Points[lastIndex] = null;
			} else source = Points[lastIndex];
			lastIndex = i - 1;
		}
	}
	,simplifyPath: function(Points) {
		var deltaPrevious;
		var deltaNext;
		var last = Points[0];
		var node;
		var i = 1;
		var l = Points.length - 1;
		while(i < l) {
			node = Points[i];
			deltaPrevious = (node.x - last.x) / (node.y - last.y);
			deltaNext = (node.x - Points[i + 1].x) / (node.y - Points[i + 1].y);
			if(last.x == Points[i + 1].x || last.y == Points[i + 1].y || deltaPrevious == deltaNext) Points[i] = null; else last = node;
			i++;
		}
	}
	,drawTilemap: function(Buffer,Camera) {
		this._helperPoint.x = this.x - Camera.scroll.x * this.scrollFactor.x;
		this._helperPoint.y = this.y - Camera.scroll.y * this.scrollFactor.y;
		var tileID;
		var drawX;
		var drawY;
		var hackScaleX = this.tileScaleHack * this.scaleX;
		var hackScaleY = this.tileScaleHack * this.scaleY;
		var drawItem = Camera.getDrawStackItem(this.cachedGraphics,false);
		var currDrawData = drawItem.drawData;
		var currIndex = drawItem.position;
		this._point.set_x(Camera.scroll.x * this.scrollFactor.x - this.x);
		this._point.set_y(Camera.scroll.y * this.scrollFactor.y - this.y);
		var screenXInTiles = Math.floor(this._point.x / this._scaledTileWidth);
		var screenYInTiles = Math.floor(this._point.y / this._scaledTileHeight);
		var screenRows = Buffer.rows;
		var screenColumns = Buffer.columns;
		if(screenXInTiles < 0) screenXInTiles = 0;
		if(screenXInTiles > this.widthInTiles - screenColumns) screenXInTiles = this.widthInTiles - screenColumns;
		if(screenYInTiles < 0) screenYInTiles = 0;
		if(screenYInTiles > this.heightInTiles - screenRows) screenYInTiles = this.heightInTiles - screenRows;
		var rowIndex = screenYInTiles * this.widthInTiles + screenXInTiles;
		this._flashPoint.y = 0;
		var row = 0;
		var column;
		var columnIndex;
		var tile;
		while(row < screenRows) {
			columnIndex = rowIndex;
			column = 0;
			this._flashPoint.x = 0;
			while(column < screenColumns) {
				tileID = this._rectIDs[columnIndex];
				if(tileID != -1) {
					drawX = this._helperPoint.x + columnIndex % this.widthInTiles * this._scaledTileWidth;
					drawY = this._helperPoint.y + Math.floor(columnIndex / this.widthInTiles) * this._scaledTileHeight;
					currDrawData[currIndex++] = Math.floor(drawX);
					currDrawData[currIndex++] = Math.floor(drawY);
					currDrawData[currIndex++] = tileID;
					currDrawData[currIndex++] = hackScaleX;
					currDrawData[currIndex++] = 0;
					currDrawData[currIndex++] = 0;
					currDrawData[currIndex++] = hackScaleY;
				}
				column++;
				columnIndex++;
			}
			rowIndex += this.widthInTiles;
			row++;
		}
		drawItem.position = currIndex;
		Buffer.x = screenXInTiles * this._scaledTileWidth;
		Buffer.y = screenYInTiles * this._scaledTileHeight;
	}
	,updateBuffers: function() {
		var i = 0;
		var l;
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._buffers[i1].destroy();
			}
			this._buffers = null;
		}
		this._buffers = new Array();
	}
	,tileToFlxSprite: function(X,Y,NewTile) {
		if(NewTile == null) NewTile = 0;
		var rowIndex = X + Y * this.widthInTiles;
		var rect = null;
		var tile = this._tileObjects[this._data[rowIndex]];
		if(tile == null || !tile.visible) {
		} else {
			var rx = (this._data[rowIndex] - this._startingIndex) * (this._tileWidth + this.region.spacingX);
			var ry = 0;
			if(rx >= this.region.width) {
				ry = (rx / this.region.width | 0) * (this._tileHeight + this.region.spacingY);
				rx %= this.region.width;
			}
			rect = new flash.geom.Rectangle(rx + this.region.startX,ry + this.region.startY,this._tileWidth,this._tileHeight);
		}
		var pt = new flash.geom.Point(0,0);
		var tileSprite = new flixel.FlxSprite();
		tileSprite.makeGraphic(this._tileWidth,this._tileHeight,0,true);
		tileSprite.set_x(X * this._tileWidth + this.x);
		tileSprite.set_y(Y * this._tileHeight + this.y);
		tileSprite.scale.set_x(this.scaleX);
		tileSprite.scale.set_y(this.scaleY);
		if(rect != null) tileSprite.get_pixels().copyPixels(this.cachedGraphics.bitmap,rect,pt);
		tileSprite.dirty = true;
		tileSprite.updateFrameData();
		if(NewTile >= 0) this.setTile(X,Y,NewTile);
		return tileSprite;
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null && this._tileWidth >= 1 && this._tileHeight >= 1) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,new flash.geom.Point(0,0));
			this._rectIDs = new Array();
			flixel.util.FlxArrayUtil.setLength_Int(this._rectIDs,this.totalTiles);
			var i = 0;
			while(i < this.totalTiles) this.updateTile(i++);
		}
	}
	,rayHit: function(Start,End,Resolution) {
		if(Resolution == null) Resolution = 1;
		var Result = null;
		var step = this._scaledTileWidth;
		if(this._scaledTileHeight < this._scaledTileWidth) step = this._scaledTileHeight;
		step /= Resolution;
		var deltaX = End.x - Start.x;
		var deltaY = End.y - Start.y;
		var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var steps = Math.ceil(distance / step);
		var stepX = deltaX / steps;
		var stepY = deltaY / steps;
		var curX = Start.x - stepX - this.x;
		var curY = Start.y - stepY - this.y;
		var tileX;
		var tileY;
		var i = 0;
		while(i < steps) {
			curX += stepX;
			curY += stepY;
			if(curX < 0 || curX > this.get_width() || curY < 0 || curY > this.get_height()) {
				i++;
				continue;
			}
			tileX = Math.floor(curX / this._scaledTileWidth);
			tileY = Math.floor(curY / this._scaledTileHeight);
			if(this._tileObjects[this._data[tileY * this.widthInTiles + tileX]].allowCollisions != 0) {
				tileX *= this._scaledTileWidth | 0;
				tileY *= this._scaledTileHeight | 0;
				var rx = 0;
				var ry = 0;
				var q;
				var lx = curX - stepX;
				var ly = curY - stepY;
				q = tileX;
				if(deltaX < 0) q += this._scaledTileWidth;
				rx = q;
				ry = ly + stepY * ((q - lx) / stepX);
				if(ry > tileY && ry < tileY + this._scaledTileHeight) {
					if(Result == null) Result = new flixel.util.FlxPoint();
					Result.set_x(rx);
					Result.set_y(ry);
					return Result;
				}
				q = tileY;
				if(deltaY < 0) q += this._scaledTileHeight;
				rx = lx + stepX * ((q - ly) / stepY);
				ry = q;
				if(rx > tileX && rx < tileX + this._scaledTileWidth) {
					if(Result == null) Result = new flixel.util.FlxPoint();
					Result.set_x(rx);
					Result.set_y(ry);
					return Result;
				}
				return null;
			}
			i++;
		}
		return null;
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) Resolution = 1;
		var step = this._scaledTileWidth;
		if(this._scaledTileHeight < this._scaledTileWidth) step = this._scaledTileHeight;
		step /= Resolution;
		var deltaX = End.x - Start.x;
		var deltaY = End.y - Start.y;
		var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var steps = Math.ceil(distance / step);
		var stepX = deltaX / steps;
		var stepY = deltaY / steps;
		var curX = Start.x - stepX - this.x;
		var curY = Start.y - stepY - this.y;
		var tileX;
		var tileY;
		var i = 0;
		while(i < steps) {
			curX += stepX;
			curY += stepY;
			if(curX < 0 || curX > this.get_width() || curY < 0 || curY > this.get_height()) {
				i++;
				continue;
			}
			tileX = Math.floor(curX / this._scaledTileWidth);
			tileY = Math.floor(curY / this._scaledTileHeight);
			if(this._tileObjects[this._data[tileY * this.widthInTiles + tileX]].allowCollisions != 0) {
				tileX *= this._scaledTileWidth | 0;
				tileY *= this._scaledTileHeight | 0;
				var rx = 0;
				var ry = 0;
				var q;
				var lx = curX - stepX;
				var ly = curY - stepY;
				q = tileX;
				if(deltaX < 0) q += this._scaledTileWidth;
				rx = q;
				ry = ly + stepY * ((q - lx) / stepX);
				if(ry > tileY && ry < tileY + this._scaledTileHeight) {
					if(Result != null) {
						Result.set_x(rx);
						Result.set_y(ry);
					}
					return false;
				}
				q = tileY;
				if(deltaY < 0) q += this._scaledTileHeight;
				rx = lx + stepX * ((q - ly) / stepY);
				ry = q;
				if(rx > tileX && rx < tileX + this._scaledTileWidth) {
					if(Result != null) {
						Result.set_x(rx);
						Result.set_y(ry);
					}
					return false;
				}
				return true;
			}
			i++;
		}
		return true;
	}
	,getBounds: function(Bounds) {
		if(Bounds == null) Bounds = new flixel.util.FlxRect();
		return (function($this) {
			var $r;
			Bounds.x = $this.x;
			Bounds.y = $this.y;
			Bounds.width = $this.get_width();
			Bounds.height = $this.get_height();
			$r = Bounds;
			return $r;
		}(this));
	}
	,follow: function(Camera,Border,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = true;
		if(Border == null) Border = 0;
		if(Camera == null) Camera = flixel.FlxG.camera;
		Camera.setBounds(this.x + Border * this._scaledTileWidth,this.y + Border * this._scaledTileHeight,this.get_width() - Border * this._scaledTileWidth * 2,this.get_height() - Border * this._scaledTileHeight * 2,UpdateWorld);
	}
	,setTileProperties: function(Tile,AllowCollisions,Callback,CallbackFilter,Range) {
		if(Range == null) Range = 1;
		if(AllowCollisions == null) AllowCollisions = 4369;
		if(Range <= 0) Range = 1;
		var tile;
		var i = Tile;
		var l = Tile + Range;
		while(i < l) {
			tile = this._tileObjects[i++];
			tile.allowCollisions = AllowCollisions;
			tile.callbackFunction = Callback;
			tile.filter = CallbackFilter;
		}
	}
	,setTileByIndex: function(Index,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(Index >= this._data.length) return false;
		var ok = true;
		this._data[Index] = Tile;
		if(!UpdateGraphics) return ok;
		this.setDirty();
		if(this.auto == 0) {
			this.updateTile(Index);
			return ok;
		}
		var i;
		var row = (Index / this.widthInTiles | 0) - 1;
		var rowLength = row + 3;
		var column = Index % this.widthInTiles - 1;
		var columnHeight = column + 3;
		while(row < rowLength) {
			column = columnHeight - 3;
			while(column < columnHeight) {
				if(row >= 0 && row < this.heightInTiles && column >= 0 && column < this.widthInTiles) {
					i = row * this.widthInTiles + column;
					this.autoTile(i);
					this.updateTile(i);
				}
				column++;
			}
			row++;
		}
		return ok;
	}
	,setTile: function(X,Y,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(X >= this.widthInTiles || Y >= this.heightInTiles) return false;
		return this.setTileByIndex(Y * this.widthInTiles + X,Tile,UpdateGraphics);
	}
	,getTileCoords: function(Index,Midpoint) {
		if(Midpoint == null) Midpoint = true;
		var array = null;
		var point;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				point = new flixel.util.FlxPoint(this.x + (i % this.widthInTiles | 0) * this._scaledTileWidth,this.y + (i / this.widthInTiles | 0) * this._scaledTileHeight);
				if(Midpoint) {
					var _g = point;
					_g.set_x(_g.x + this._scaledTileWidth * 0.5);
					var _g = point;
					_g.set_y(_g.y + this._scaledTileHeight * 0.5);
				}
				if(array == null) array = new Array();
				array.push(point);
			}
			i++;
		}
		return array;
	}
	,getTileInstances: function(Index) {
		var array = null;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				if(array == null) array = [];
				array.push(i);
			}
			i++;
		}
		return array;
	}
	,getTileCollisions: function(Index) {
		return this._tileObjects[Index].allowCollisions;
	}
	,getTileByIndex: function(Index) {
		return this._data[Index];
	}
	,getTile: function(X,Y) {
		return this._data[Y * this.widthInTiles + X];
	}
	,overlapsPoint: function(WorldPoint,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return this._tileObjects[this._data[Math.floor(Math.floor((WorldPoint.y - this.y) / this._scaledTileHeight) * this.widthInTiles + (WorldPoint.x - this.x) / this._scaledTileWidth)]].allowCollisions > 0;
		if(Camera == null) Camera = flixel.FlxG.camera;
		WorldPoint.set_x(WorldPoint.x - Camera.scroll.x);
		WorldPoint.set_y(WorldPoint.y - Camera.scroll.y);
		this.getScreenXY(this._point,Camera);
		return this._tileObjects[this._data[((WorldPoint.y - WorldPoint.y) / this._scaledTileHeight | 0) * this.widthInTiles + (WorldPoint.x - WorldPoint.x) / this._scaledTileWidth | 0]].allowCollisions > 0;
	}
	,overlapsWithCallback: function(Object,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) FlipCallbackParams = false;
		var results = false;
		var X = this.x;
		var Y = this.y;
		if(Position != null) {
			X = Position.x;
			Y = Position.y;
		}
		var selectionX = Math.floor((Object.x - X) / this._scaledTileWidth);
		var selectionY = Math.floor((Object.y - Y) / this._scaledTileHeight);
		var selectionWidth = selectionX + Math.ceil(Object.get_width() / this._scaledTileWidth) + 1;
		var selectionHeight = selectionY + Math.ceil(Object.get_height() / this._scaledTileHeight) + 1;
		selectionWidth = flixel.util.FlxMath.bound(selectionWidth,0,this.widthInTiles) | 0;
		selectionHeight = flixel.util.FlxMath.bound(selectionHeight,0,this.heightInTiles) | 0;
		var rowStart = selectionY * this.widthInTiles;
		var row = selectionY;
		var column;
		var tile;
		var overlapFound;
		var deltaX = X - this.last.x;
		var deltaY = Y - this.last.y;
		while(row < selectionHeight) {
			column = selectionX;
			while(column < selectionWidth) {
				var dataIndex = this._data[rowStart + column];
				if(dataIndex < 0) {
					column++;
					continue;
				}
				tile = this._tileObjects[dataIndex];
				tile.set_width(this._scaledTileWidth);
				tile.set_height(this._scaledTileHeight);
				tile.set_x(X + column * tile.get_width());
				tile.set_y(Y + row * tile.get_height());
				tile.last.set_x(tile.x - deltaX);
				tile.last.set_y(tile.y - deltaY);
				overlapFound = Object.x + Object.get_width() > tile.x && Object.x < tile.x + tile.get_width() && Object.y + Object.get_height() > tile.y && Object.y < tile.y + tile.get_height();
				if(tile.allowCollisions != 0) {
					if(Callback != null) {
						if(FlipCallbackParams) overlapFound = Callback(Object,tile); else overlapFound = Callback(tile,Object);
					}
				}
				if(overlapFound) {
					if(tile.callbackFunction != null && (tile.filter == null || js.Boot.__instanceof(Object,tile.filter))) {
						tile.mapIndex = rowStart + column;
						tile.callbackFunction(tile,Object);
					}
					if(tile.allowCollisions != 0) results = true;
				}
				column++;
			}
			rowStart += this.widthInTiles;
			row++;
		}
		return results;
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var objType = ObjectOrGroup.collisionType;
		if(ObjectOrGroup.collisionType == flixel.system.FlxCollisionType.SPRITEGROUP) {
			ObjectOrGroup = Reflect.field(ObjectOrGroup,"group");
			objType = flixel.system.FlxCollisionType.GROUP;
		}
		if(objType == flixel.system.FlxCollisionType.GROUP) {
			var results = false;
			var basic;
			var i = 0;
			var grp = ObjectOrGroup;
			var members = grp.get_members();
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					objType = basic.collisionType;
					if(objType == flixel.system.FlxCollisionType.OBJECT || objType == flixel.system.FlxCollisionType.TILEMAP) {
						this._point.set_x(X);
						this._point.set_y(Y);
						if(this.overlapsWithCallback(js.Boot.__cast(basic , flixel.FlxObject),null,false,this._point)) results = true;
					} else if(this.overlapsAt(X,Y,basic,InScreenSpace,Camera)) results = true;
				}
			}
			return results;
		} else if(objType == flixel.system.FlxCollisionType.OBJECT || objType == flixel.system.FlxCollisionType.TILEMAP) {
			this._point.set_x(X);
			this._point.set_y(Y);
			return this.overlapsWithCallback(js.Boot.__cast(ObjectOrGroup , flixel.FlxObject),null,false,this._point);
		}
		return false;
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var objType = ObjectOrGroup.collisionType;
		if(objType == flixel.system.FlxCollisionType.SPRITEGROUP) {
			ObjectOrGroup = Reflect.field(ObjectOrGroup,"group");
			objType = flixel.system.FlxCollisionType.GROUP;
		}
		if(objType == flixel.system.FlxCollisionType.GROUP) {
			var results = false;
			var basic;
			var i = 0;
			var grp = ObjectOrGroup;
			var members = grp.get_members();
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					objType = basic.collisionType;
					if(objType == flixel.system.FlxCollisionType.OBJECT || objType == flixel.system.FlxCollisionType.TILEMAP) {
						if(this.overlapsWithCallback(js.Boot.__cast(basic , flixel.FlxObject))) results = true;
					} else if(this.overlaps(basic,InScreenSpace,Camera)) results = true;
				}
			}
			return results;
		} else if(objType == flixel.system.FlxCollisionType.OBJECT || objType == flixel.system.FlxCollisionType.TILEMAP) return this.overlapsWithCallback(js.Boot.__cast(ObjectOrGroup , flixel.FlxObject));
		return false;
	}
	,findPath: function(Start,End,Simplify,RaySimplify,WideDiagonal) {
		if(WideDiagonal == null) WideDiagonal = true;
		if(RaySimplify == null) RaySimplify = false;
		if(Simplify == null) Simplify = true;
		var startIndex = ((Start.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((Start.x - this.x) / this._scaledTileWidth | 0);
		var endIndex = ((End.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((End.x - this.x) / this._scaledTileWidth | 0);
		if(this._tileObjects[this._data[startIndex]].allowCollisions > 0 || this._tileObjects[this._data[endIndex]].allowCollisions > 0) return null;
		var distances = this.computePathDistance(startIndex,endIndex,WideDiagonal);
		if(distances == null) return null;
		var points = new Array();
		this.walkPath(distances,endIndex,points);
		var node;
		node = points[points.length - 1];
		node.set_x(Start.x);
		node.set_y(Start.y);
		node = points[0];
		node.set_x(End.x);
		node.set_y(End.y);
		if(Simplify) this.simplifyPath(points);
		if(RaySimplify) this.raySimplifyPath(points);
		var path = [];
		var i = points.length - 1;
		while(i >= 0) {
			node = points[i--];
			if(node != null) path.push(node);
		}
		return path;
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) Dirty = true;
		var i = 0;
		var l = this._buffers.length;
		while(i < l) this._buffers[i++].dirty = Dirty;
	}
	,getData: function(Simple) {
		if(Simple == null) Simple = false;
		if(!Simple) return this._data;
		var i = 0;
		var l = this._data.length;
		var data = new Array();
		flixel.util.FlxArrayUtil.setLength_Int(data,l);
		while(i < l) {
			data[i] = this._tileObjects[this._data[i]].allowCollisions > 0?1:0;
			i++;
		}
		return data;
	}
	,draw: function() {
		if(this.cameras == null) this.cameras = flixel.FlxG.cameras.list;
		var camera;
		var buffer;
		var i = 0;
		var l = this.cameras.length;
		while(i < l) {
			camera = this.cameras[i];
			if(!camera.visible || !camera.exists) continue;
			if(this._buffers[i] == null) {
				this._buffers[i] = new flixel.tile.FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scaleX,this.scaleY);
				this._buffers[i].forceComplexRender = this.forceComplexRender;
			}
			buffer = this._buffers[i++];
			buffer.dirty = true;
			this.drawTilemap(buffer,camera);
		}
	}
	,setCustomTileMappings: function(mappings,randomIndices,randomChoices,randomLambda) {
		this.customTileRemap = mappings;
		this._randomIndices = randomIndices;
		this._randomChoices = randomChoices;
		this._randomLambda = randomLambda;
		if(this._randomIndices != null && (this._randomChoices == null || this._randomChoices.length == 0)) throw "You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.";
	}
	,loadMap: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) CollideIndex = 1;
		if(DrawIndex == null) DrawIndex = 1;
		if(StartingIndex == null) StartingIndex = 0;
		if(AutoTile == null) AutoTile = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		this.auto = AutoTile;
		this._startingIndex = StartingIndex <= 0?0:StartingIndex;
		if(js.Boot.__instanceof(MapData,String)) {
			this._data = new Array();
			var columns;
			var rows = MapData.split("\n");
			this.heightInTiles = rows.length;
			this.widthInTiles = 0;
			var row = 0;
			var column;
			while(row < this.heightInTiles) {
				columns = rows[row++].split(",");
				if(columns.length <= 1) {
					this.heightInTiles = this.heightInTiles - 1;
					continue;
				}
				if(this.widthInTiles == 0) this.widthInTiles = columns.length;
				column = 0;
				while(column < this.widthInTiles) this._data.push(Std.parseInt(columns[column++]));
			}
		} else if(js.Boot.__instanceof(MapData,Array)) this._data = MapData; else throw "Unexpected MapData format '" + Std.string(Type["typeof"](MapData)) + "' passed into loadMap. Map data must be CSV string or Array<Int>.";
		var i;
		this.totalTiles = this._data.length;
		if(this.auto > 0) {
			this._startingIndex = 1;
			DrawIndex = 1;
			CollideIndex = 1;
			i = 0;
			while(i < this.totalTiles) this.autoTile(i++);
		}
		if(this.customTileRemap != null) {
			i = 0;
			while(i < this.totalTiles) {
				var old_index = this._data[i];
				var new_index = old_index;
				if(old_index < this.customTileRemap.length) new_index = this.customTileRemap[old_index];
				this._data[i] = new_index;
				i++;
			}
		}
		if(this._randomIndices != null) {
			var randLambda = this._randomLambda != null?this._randomLambda:flixel.util.FlxRandom["float"];
			i = 0;
			while(i < this.totalTiles) {
				var old_index = this._data[i];
				var j = 0;
				var new_index = old_index;
				var _g = 0, _g1 = this._randomIndices;
				while(_g < _g1.length) {
					var rand = _g1[_g];
					++_g;
					if(old_index == rand) {
						var k = randLambda() * this._randomChoices[j].length | 0;
						new_index = this._randomChoices[j][k];
					}
					j++;
				}
				this._data[i] = new_index;
				i++;
			}
		}
		this.set_cachedGraphics(flixel.FlxG.bitmap.add(TileGraphic));
		this._tileWidth = TileWidth;
		if(this._tileWidth <= 0) this._tileWidth = this.cachedGraphics.bitmap.get_height();
		this._tileHeight = TileHeight;
		if(this._tileHeight <= 0) this._tileHeight = this._tileWidth;
		if(!js.Boot.__instanceof(TileGraphic,flixel.util.loaders.TextureRegion)) {
			this.region = new flixel.system.layer.Region(0,0,this._tileWidth,this._tileHeight);
			this.region.width = (this.cachedGraphics.bitmap.get_width() / this._tileWidth | 0) * this._tileWidth;
			this.region.height = (this.cachedGraphics.bitmap.get_height() / this._tileHeight | 0) * this._tileHeight;
		} else {
			var spriteRegion = TileGraphic;
			this.region = spriteRegion.region.clone();
			if(this.region.tileWidth > 0) this._tileWidth = this.region.tileWidth; else this.region.tileWidth = this._tileWidth;
			if(this.region.tileHeight > 0) this._tileHeight = this.region.tileWidth; else this.region.tileHeight = this._tileHeight;
		}
		this._tileObjects = new Array();
		var length = this.region.get_numTiles();
		length += this._startingIndex;
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			this._tileObjects[i1] = new flixel.tile.FlxTile(this,i1,this._tileWidth,this._tileHeight,i1 >= DrawIndex,i1 >= CollideIndex?this.allowCollisions:0);
		}
		this._scaledTileWidth = this._tileWidth * this.scaleX;
		this._scaledTileHeight = this._tileHeight * this.scaleY;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		this.updateFrameData();
		return this;
	}
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		var i = 0;
		var l;
		if(this._tileObjects != null) {
			l = this._tileObjects.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._tileObjects[i1].destroy();
			}
			this._tileObjects = null;
		}
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._buffers[i1].destroy();
			}
			this._buffers = null;
		}
		this._data = null;
		this._helperPoint = null;
		this._rectIDs = null;
		flixel.FlxObject.prototype.destroy.call(this);
	}
	,__class__: flixel.tile.FlxTilemap
	,__properties__: $extend(flixel.FlxObject.prototype.__properties__,{set_scaleX:"set_scaleX",set_scaleY:"set_scaleY"})
});
flixel.tile.FlxTilemapBuffer = function(TileWidth,TileHeight,WidthInTiles,HeightInTiles,Camera,ScaleX,ScaleY) {
	if(ScaleY == null) ScaleY = 1.0;
	if(ScaleX == null) ScaleX = 1.0;
	this.forceComplexRender = false;
	this.updateColumns(TileWidth,WidthInTiles,ScaleX,Camera);
	this.updateRows(TileHeight,HeightInTiles,ScaleY,Camera);
	this.dirty = true;
};
$hxClasses["flixel.tile.FlxTilemapBuffer"] = flixel.tile.FlxTilemapBuffer;
flixel.tile.FlxTilemapBuffer.__name__ = ["flixel","tile","FlxTilemapBuffer"];
flixel.tile.FlxTilemapBuffer.prototype = {
	updateRows: function(TileHeight,HeightInTiles,ScaleY,Camera) {
		if(ScaleY == null) ScaleY = 1.0;
		if(HeightInTiles < 0) HeightInTiles = 0;
		if(Camera == null) Camera = flixel.FlxG.camera;
		this.rows = Math.ceil(Camera.height / (TileHeight * ScaleY)) + 1;
		if(this.rows > HeightInTiles) this.rows = HeightInTiles;
		this.height = this.rows * TileHeight * ScaleY | 0;
	}
	,updateColumns: function(TileWidth,WidthInTiles,ScaleX,Camera) {
		if(ScaleX == null) ScaleX = 1.0;
		if(WidthInTiles < 0) WidthInTiles = 0;
		if(Camera == null) Camera = flixel.FlxG.camera;
		this.columns = Math.ceil(Camera.width / (TileWidth * ScaleX)) + 1;
		if(this.columns > WidthInTiles) this.columns = WidthInTiles;
		this.width = this.columns * TileWidth * ScaleX | 0;
	}
	,destroy: function() {
	}
	,__class__: flixel.tile.FlxTilemapBuffer
}
flixel.tweens.FlxEase = function() { }
$hxClasses["flixel.tweens.FlxEase"] = flixel.tweens.FlxEase;
flixel.tweens.FlxEase.__name__ = ["flixel","tweens","FlxEase"];
flixel.tweens.FlxEase.quadIn = function(t) {
	return t * t;
}
flixel.tweens.FlxEase.quadOut = function(t) {
	return -t * (t - 2);
}
flixel.tweens.FlxEase.quadInOut = function(t) {
	return t <= .5?t * t * 2:1 - --t * t * 2;
}
flixel.tweens.FlxEase.cubeIn = function(t) {
	return t * t * t;
}
flixel.tweens.FlxEase.cubeOut = function(t) {
	return 1 + --t * t * t;
}
flixel.tweens.FlxEase.cubeInOut = function(t) {
	return t <= .5?t * t * t * 4:1 + --t * t * t * 4;
}
flixel.tweens.FlxEase.quartIn = function(t) {
	return t * t * t * t;
}
flixel.tweens.FlxEase.quartOut = function(t) {
	return 1 - (t -= 1) * t * t * t;
}
flixel.tweens.FlxEase.quartInOut = function(t) {
	return t <= .5?t * t * t * t * 8:(1 - (t = t * 2 - 2) * t * t * t) / 2 + .5;
}
flixel.tweens.FlxEase.quintIn = function(t) {
	return t * t * t * t * t;
}
flixel.tweens.FlxEase.quintOut = function(t) {
	return (t = t - 1) * t * t * t * t + 1;
}
flixel.tweens.FlxEase.quintInOut = function(t) {
	return (t *= 2) < 1?t * t * t * t * t / 2:((t -= 2) * t * t * t * t + 2) / 2;
}
flixel.tweens.FlxEase.sineIn = function(t) {
	return -Math.cos(flixel.tweens.FlxEase.PI2 * t) + 1;
}
flixel.tweens.FlxEase.sineOut = function(t) {
	return Math.sin(flixel.tweens.FlxEase.PI2 * t);
}
flixel.tweens.FlxEase.sineInOut = function(t) {
	return -Math.cos(Math.PI * t) / 2 + .5;
}
flixel.tweens.FlxEase.bounceIn = function(t) {
	t = 1 - t;
	if(t < flixel.tweens.FlxEase.B1) return 1 - 7.5625 * t * t;
	if(t < flixel.tweens.FlxEase.B2) return 1 - (7.5625 * (t - flixel.tweens.FlxEase.B3) * (t - flixel.tweens.FlxEase.B3) + .75);
	if(t < flixel.tweens.FlxEase.B4) return 1 - (7.5625 * (t - flixel.tweens.FlxEase.B5) * (t - flixel.tweens.FlxEase.B5) + .9375);
	return 1 - (7.5625 * (t - flixel.tweens.FlxEase.B6) * (t - flixel.tweens.FlxEase.B6) + .984375);
}
flixel.tweens.FlxEase.bounceOut = function(t) {
	if(t < flixel.tweens.FlxEase.B1) return 7.5625 * t * t;
	if(t < flixel.tweens.FlxEase.B2) return 7.5625 * (t - flixel.tweens.FlxEase.B3) * (t - flixel.tweens.FlxEase.B3) + .75;
	if(t < flixel.tweens.FlxEase.B4) return 7.5625 * (t - flixel.tweens.FlxEase.B5) * (t - flixel.tweens.FlxEase.B5) + .9375;
	return 7.5625 * (t - flixel.tweens.FlxEase.B6) * (t - flixel.tweens.FlxEase.B6) + .984375;
}
flixel.tweens.FlxEase.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < flixel.tweens.FlxEase.B1) return (1 - 7.5625 * t * t) / 2;
		if(t < flixel.tweens.FlxEase.B2) return (1 - (7.5625 * (t - flixel.tweens.FlxEase.B3) * (t - flixel.tweens.FlxEase.B3) + .75)) / 2;
		if(t < flixel.tweens.FlxEase.B4) return (1 - (7.5625 * (t - flixel.tweens.FlxEase.B5) * (t - flixel.tweens.FlxEase.B5) + .9375)) / 2;
		return (1 - (7.5625 * (t - flixel.tweens.FlxEase.B6) * (t - flixel.tweens.FlxEase.B6) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < flixel.tweens.FlxEase.B1) return 7.5625 * t * t / 2 + .5;
	if(t < flixel.tweens.FlxEase.B2) return (7.5625 * (t - flixel.tweens.FlxEase.B3) * (t - flixel.tweens.FlxEase.B3) + .75) / 2 + .5;
	if(t < flixel.tweens.FlxEase.B4) return (7.5625 * (t - flixel.tweens.FlxEase.B5) * (t - flixel.tweens.FlxEase.B5) + .9375) / 2 + .5;
	return (7.5625 * (t - flixel.tweens.FlxEase.B6) * (t - flixel.tweens.FlxEase.B6) + .984375) / 2 + .5;
}
flixel.tweens.FlxEase.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
}
flixel.tweens.FlxEase.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
}
flixel.tweens.FlxEase.circInOut = function(t) {
	return t <= .5?(Math.sqrt(1 - t * t * 4) - 1) / -2:(Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
}
flixel.tweens.FlxEase.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
}
flixel.tweens.FlxEase.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
}
flixel.tweens.FlxEase.expoInOut = function(t) {
	return t < .5?Math.pow(2,10 * (t * 2 - 1)) / 2:(-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
}
flixel.tweens.FlxEase.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
}
flixel.tweens.FlxEase.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
}
flixel.tweens.FlxEase.backInOut = function(t) {
	t *= 2;
	if(t < 1) return t * t * (2.70158 * t - 1.70158) / 2;
	t--;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
}
flixel.tweens.FlxEase.elasticIn = function(t) {
	return -(flixel.tweens.FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,10 * (t -= 1)) * Math.sin((t - flixel.tweens.FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel.tweens.FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel.tweens.FlxEase.ELASTIC_PERIOD));
}
flixel.tweens.FlxEase.elasticOut = function(t) {
	return flixel.tweens.FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - flixel.tweens.FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel.tweens.FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel.tweens.FlxEase.ELASTIC_PERIOD) + 1;
}
flixel.tweens.FlxEase.elasticInOut = function(t) {
	if(t < 0.5) return -0.5 * (Math.pow(2,10 * (t -= 0.5)) * Math.sin((t - flixel.tweens.FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel.tweens.FlxEase.ELASTIC_PERIOD));
	return Math.pow(2,-10 * (t -= 0.5)) * Math.sin((t - flixel.tweens.FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel.tweens.FlxEase.ELASTIC_PERIOD) * 0.5 + 1;
}
flixel.tweens.misc = {}
flixel.tweens.misc.AngleTween = function(Complete,type) {
	if(type == null) type = 0;
	this.angle = 0;
	flixel.tweens.FlxTween.call(this,0,type,Complete,null);
};
$hxClasses["flixel.tweens.misc.AngleTween"] = flixel.tweens.misc.AngleTween;
flixel.tweens.misc.AngleTween.__name__ = ["flixel","tweens","misc","AngleTween"];
flixel.tweens.misc.AngleTween.__super__ = flixel.tweens.FlxTween;
flixel.tweens.misc.AngleTween.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		this.angle = (this._start + this._range * this.scale) % 360;
		if(this.angle < 0) this.angle += 360;
		if(this.sprite != null) this.sprite.set_angle(this.angle);
	}
	,tween: function(FromAngle,ToAngle,Duration,Ease,Sprite) {
		this._start = this.angle = FromAngle;
		var d = ToAngle - this.angle;
		var a = Math.abs(d);
		if(a > 181) this._range = (360 - a) * (d > 0?-1:1); else if(a < 179) this._range = d; else this._range = flixel.util.FlxRandom.floatRanged(180,-180);
		this.duration = Duration;
		this.ease = Ease;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.misc.AngleTween
});
flixel.tweens.misc.ColorTween = function(Complete,type) {
	if(type == null) type = 0;
	this.alpha = 1;
	flixel.tweens.FlxTween.call(this,0,type,Complete);
};
$hxClasses["flixel.tweens.misc.ColorTween"] = flixel.tweens.misc.ColorTween;
flixel.tweens.misc.ColorTween.__name__ = ["flixel","tweens","misc","ColorTween"];
flixel.tweens.misc.ColorTween.__super__ = flixel.tweens.FlxTween;
flixel.tweens.misc.ColorTween.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		this.alpha = this._startA + this._rangeA * this.scale;
		this.red = (this._startR + this._rangeR * this.scale) * 255 | 0;
		this.green = (this._startG + this._rangeG * this.scale) * 255 | 0;
		this.blue = (this._startB + this._rangeB * this.scale) * 255 | 0;
		this.color = this.red << 16 | this.green << 8 | this.blue;
		if(this.sprite != null) {
			this.sprite.set_color(this.color);
			this.sprite.set_alpha(this.alpha);
		}
	}
	,tween: function(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Ease,Sprite) {
		if(ToAlpha == null) ToAlpha = 1;
		if(FromAlpha == null) FromAlpha = 1;
		FromColor &= 16777215;
		ToColor &= 16777215;
		this.color = FromColor;
		this.red = FromColor >> 16 & 255;
		this.green = FromColor >> 8 & 255;
		this.blue = FromColor & 255;
		this._startR = this.red / 255;
		this._startG = this.green / 255;
		this._startB = this.blue / 255;
		this._rangeR = (ToColor >> 16 & 255) / 255 - this._startR;
		this._rangeG = (ToColor >> 8 & 255) / 255 - this._startG;
		this._rangeB = (ToColor & 255) / 255 - this._startB;
		this._startA = this.alpha = FromAlpha;
		this._rangeA = ToAlpha - this.alpha;
		this.duration = Duration;
		this.ease = Ease;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,destroy: function() {
		flixel.tweens.FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,__class__: flixel.tweens.misc.ColorTween
});
flixel.tweens.misc.MultiVarTween = function(complete,type) {
	if(type == null) type = 0;
	this._vars = new Array();
	this._start = new Array();
	this._range = new Array();
	flixel.tweens.FlxTween.call(this,0,type,complete);
};
$hxClasses["flixel.tweens.misc.MultiVarTween"] = flixel.tweens.misc.MultiVarTween;
flixel.tweens.misc.MultiVarTween.__name__ = ["flixel","tweens","misc","MultiVarTween"];
flixel.tweens.misc.MultiVarTween.__super__ = flixel.tweens.FlxTween;
flixel.tweens.misc.MultiVarTween.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	initialize: function() {
		var p;
		var fields;
		if(Reflect.isObject(this._properties)) fields = Reflect.fields(this._properties); else throw "Unsupported MultiVar properties container - use Object containing key/value pairs.";
		var _g = 0;
		while(_g < fields.length) {
			var p1 = fields[_g];
			++_g;
			if(Reflect.getProperty(this._object,p1) == null) throw "The Object does not have the property \"" + p1 + "\", or it is not accessible.";
			var a = Reflect.getProperty(this._object,p1);
			if(Math.isNaN(a)) throw "The property \"" + p1 + "\" is not numeric.";
			this._vars.push(p1);
			this._start.push(a);
			this._range.push(Reflect.getProperty(this._properties,p1) - a);
		}
	}
	,update: function() {
		if(this._vars.length < 1) this.initialize();
		flixel.tweens.FlxTween.prototype.update.call(this);
		var i = this._vars.length;
		while(i-- > 0) if(this._object != null) Reflect.setProperty(this._object,this._vars[i],this._start[i] + this._range[i] * this.scale);
	}
	,tween: function(object,properties,duration,ease) {
		this._object = object;
		this._properties = properties;
		this.duration = duration;
		this.ease = ease;
		flixel.util.FlxArrayUtil.setLength_String(this._vars,0);
		flixel.util.FlxArrayUtil.setLength_Float(this._start,0);
		flixel.util.FlxArrayUtil.setLength_Float(this._range,0);
		this.start();
		return this;
	}
	,destroy: function() {
		flixel.tweens.FlxTween.prototype.destroy.call(this);
		this._object = null;
		this._properties = null;
		this._vars = null;
		this._start = null;
		this._range = null;
	}
	,__class__: flixel.tweens.misc.MultiVarTween
});
flixel.tweens.misc.NumTween = function(complete,type) {
	if(type == null) type = 0;
	this.value = 0;
	flixel.tweens.FlxTween.call(this,0,type,complete);
};
$hxClasses["flixel.tweens.misc.NumTween"] = flixel.tweens.misc.NumTween;
flixel.tweens.misc.NumTween.__name__ = ["flixel","tweens","misc","NumTween"];
flixel.tweens.misc.NumTween.__super__ = flixel.tweens.FlxTween;
flixel.tweens.misc.NumTween.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		this.value = this._start + this._range * this.scale;
	}
	,tween: function(fromValue,toValue,duration,ease) {
		this._start = this.value = fromValue;
		this._range = toValue - this.value;
		this.duration = duration;
		this.ease = ease;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.misc.NumTween
});
flixel.tweens.misc.VarTween = function(complete,type) {
	if(type == null) type = 0;
	flixel.tweens.FlxTween.call(this,0,type,complete);
};
$hxClasses["flixel.tweens.misc.VarTween"] = flixel.tweens.misc.VarTween;
flixel.tweens.misc.VarTween.__name__ = ["flixel","tweens","misc","VarTween"];
flixel.tweens.misc.VarTween.__super__ = flixel.tweens.FlxTween;
flixel.tweens.misc.VarTween.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		Reflect.setProperty(this._object,this._property,this._start + this._range * this.scale);
	}
	,tween: function(object,property,to,duration,ease) {
		this._object = object;
		this.ease = ease;
		if(!Reflect.isObject(object)) throw "A valid object was not passed.";
		this._property = property;
		if(Reflect.getProperty(this._object,property) == null) throw "The Object does not have the property\"" + property + "\", or it is not accessible.";
		var a = Reflect.getProperty(this._object,property);
		if(Math.isNaN(a)) throw "The property \"" + property + "\" is not numeric.";
		this._start = a;
		this._range = to - this._start;
		this.duration = duration;
		this.start();
		return this;
	}
	,destroy: function() {
		flixel.tweens.FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,__class__: flixel.tweens.misc.VarTween
});
flixel.tweens.motion = {}
flixel.tweens.motion.Motion = function(duration,complete,type,ease) {
	if(type == null) type = 0;
	this.y = 0;
	this.x = 0;
	flixel.tweens.FlxTween.call(this,duration,type,complete,ease);
};
$hxClasses["flixel.tweens.motion.Motion"] = flixel.tweens.motion.Motion;
flixel.tweens.motion.Motion.__name__ = ["flixel","tweens","motion","Motion"];
flixel.tweens.motion.Motion.__super__ = flixel.tweens.FlxTween;
flixel.tweens.motion.Motion.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	postUpdate: function() {
		if(this._object != null) this._object.setPosition(this.x,this.y);
	}
	,update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		this.postUpdate();
	}
	,setObject: function(object) {
		this._object = object;
		this._object.set_immovable(true);
		return this;
	}
	,destroy: function() {
		flixel.tweens.FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,__class__: flixel.tweens.motion.Motion
});
flixel.tweens.motion.CircularMotion = function(complete,type) {
	if(type == null) type = 0;
	this._centerX = this._centerY = 0;
	this._radius = this.angle = 0;
	this._angleStart = this._angleFinish = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
};
$hxClasses["flixel.tweens.motion.CircularMotion"] = flixel.tweens.motion.CircularMotion;
flixel.tweens.motion.CircularMotion.__name__ = ["flixel","tweens","motion","CircularMotion"];
flixel.tweens.motion.CircularMotion.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.CircularMotion.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	get_circumference: function() {
		return this._radius * (Math.PI * 2);
	}
	,update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		this.angle = this._angleStart + this._angleFinish * this.scale;
		this.x = this._centerX + Math.cos(this.angle) * this._radius;
		this.y = this._centerY + Math.sin(this.angle) * this._radius;
		if(this.finished) this.postUpdate();
	}
	,setMotion: function(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Ease) {
		if(UseDuration == null) UseDuration = true;
		this._centerX = CenterX;
		this._centerY = CenterY;
		this._radius = Radius;
		this.angle = this._angleStart = Angle * Math.PI / -180;
		this._angleFinish = Math.PI * 2 * (Clockwise?1:-1);
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this._radius * (Math.PI * 2) / DurationOrSpeed;
		this.ease = Ease;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.motion.CircularMotion
	,__properties__: $extend(flixel.tweens.motion.Motion.prototype.__properties__,{get_circumference:"get_circumference"})
});
flixel.tweens.motion.CubicMotion = function(complete,type) {
	if(type == null) type = 0;
	this._fromX = this._fromY = this._toX = this._toY = 0;
	this._aX = this._aY = this._bX = this._bY = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
};
$hxClasses["flixel.tweens.motion.CubicMotion"] = flixel.tweens.motion.CubicMotion;
flixel.tweens.motion.CubicMotion.__name__ = ["flixel","tweens","motion","CubicMotion"];
flixel.tweens.motion.CubicMotion.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.CubicMotion.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		this.x = this.scale * this.scale * this.scale * (this._toX + 3 * (this._aX - this._bX) - this._fromX) + 3 * this.scale * this.scale * (this._fromX - 2 * this._aX + this._bX) + 3 * this.scale * (this._aX - this._fromX) + this._fromX;
		this.y = this.scale * this.scale * this.scale * (this._toY + 3 * (this._aY - this._bY) - this._fromY) + 3 * this.scale * this.scale * (this._fromY - 2 * this._aY + this._bY) + 3 * this.scale * (this._aY - this._fromY) + this._fromY;
		if(this.finished) this.postUpdate();
	}
	,setMotion: function(fromX,fromY,aX,aY,bX,bY,toX,toY,duration,ease) {
		this.x = this._fromX = fromX;
		this.y = this._fromY = fromY;
		this._aX = aX;
		this._aY = aY;
		this._bX = bX;
		this._bY = bY;
		this._toX = toX;
		this._toY = toY;
		this.duration = duration;
		this.ease = ease;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.motion.CubicMotion
});
flixel.tweens.motion.LinearMotion = function(complete,type) {
	if(type == null) type = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
	this._fromX = this._fromY = this._moveX = this._moveY = 0;
	this._distance = -1;
};
$hxClasses["flixel.tweens.motion.LinearMotion"] = flixel.tweens.motion.LinearMotion;
flixel.tweens.motion.LinearMotion.__name__ = ["flixel","tweens","motion","LinearMotion"];
flixel.tweens.motion.LinearMotion.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.LinearMotion.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	get_distance: function() {
		if(this._distance >= 0) return this._distance;
		return this._distance = Math.sqrt(this._moveX * this._moveX + this._moveY * this._moveY);
	}
	,update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		this.x = this._fromX + this._moveX * this.scale;
		this.y = this._fromY + this._moveY * this.scale;
		if(this.x == this._fromX + this._moveX && this.y == this._fromY + this._moveY && this.active && this._secondsSinceStart >= this.duration) this.finished = true;
		if(this.finished) this.postUpdate();
	}
	,setMotion: function(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Ease) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._moveX = ToX - FromX;
		this._moveY = ToY - FromY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.ease = Ease;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.motion.LinearMotion
	,__properties__: $extend(flixel.tweens.motion.Motion.prototype.__properties__,{get_distance:"get_distance"})
});
flixel.tweens.motion.LinearPath = function(complete,type) {
	if(type == null) type = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
	this.points = new Array();
	this._pointD = new Array();
	this._pointT = new Array();
	this.distance = this._speed = this._index = 0;
	this._pointD[0] = this._pointT[0] = 0;
};
$hxClasses["flixel.tweens.motion.LinearPath"] = flixel.tweens.motion.LinearPath;
flixel.tweens.motion.LinearPath.__name__ = ["flixel","tweens","motion","LinearPath"];
flixel.tweens.motion.LinearPath.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.LinearPath.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	updatePath: function() {
		if(this.points.length < 2) throw "A LinearPath must have at least 2 points to operate.";
		if(this._pointD.length == this._pointT.length) return;
		var i = 0;
		while(i < this.points.length) this._pointT[i] = this._pointD[i++] / this.distance;
	}
	,update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		var td;
		var tt;
		if(this.points == null) return;
		if(!this.backward) {
			if(this._index < this.points.length - 1) while(this.scale > this._pointT[this._index + 1]) {
				this._index++;
				if(this._index == this.points.length - 1) {
					this._index -= 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index + 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		} else {
			if(this._index > 0) while(this.scale < this._pointT[this._index - 1]) {
				this._index -= 1;
				if(this._index == 0) {
					this._index += 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index - 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index - 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		}
		flixel.tweens.motion.Motion.prototype.postUpdate.call(this);
	}
	,start: function() {
		this._index = this.backward?this.points.length - 1:0;
		flixel.tweens.motion.Motion.prototype.start.call(this);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this.points.length == 0) throw "No points have been added to the path yet.";
		return this.points[index % this.points.length];
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(this._last != null) {
			this.distance += Math.sqrt((x - this._last.x) * (x - this._last.x) + (y - this._last.y) * (y - this._last.y));
			this._pointD[this.points.length] = this.distance;
		}
		this.points[this.points.length] = this._last = new flixel.util.FlxPoint(x,y);
		return this;
	}
	,setMotion: function(DurationOrSpeed,UseDuration,Ease) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this.distance / DurationOrSpeed;
		} else {
			this.duration = this.distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.ease = Ease;
		this.start();
		return this;
	}
	,destroy: function() {
		flixel.tweens.motion.Motion.prototype.destroy.call(this);
		this.points = null;
		this._pointD = null;
		this._pointT = null;
		this._last = null;
		this._prevPoint = null;
		this._nextPoint = null;
	}
	,__class__: flixel.tweens.motion.LinearPath
});
flixel.tweens.motion.QuadMotion = function(complete,type) {
	if(type == null) type = 0;
	this._distance = -1;
	this._fromX = this._fromY = this._toX = this._toY = 0;
	this._controlX = this._controlY = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
};
$hxClasses["flixel.tweens.motion.QuadMotion"] = flixel.tweens.motion.QuadMotion;
flixel.tweens.motion.QuadMotion.__name__ = ["flixel","tweens","motion","QuadMotion"];
flixel.tweens.motion.QuadMotion.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.QuadMotion.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	get_distance: function() {
		if(this._distance >= 0) return this._distance;
		var a = flixel.tweens.motion.QuadMotion.point;
		var b = flixel.tweens.motion.QuadMotion.point2;
		a.set_x(this.x - 2 * this._controlX + this._toX);
		a.set_y(this.y - 2 * this._controlY + this._toY);
		b.set_x(2 * this._controlX - 2 * this.x);
		b.set_y(2 * this._controlY - 2 * this.y);
		var A = 4 * (a.x * a.x + a.y * a.y), B = 4 * (a.x * b.x + a.y * b.y), C = b.x * b.x + b.y * b.y, ABC = 2 * Math.sqrt(A + B + C), A2 = Math.sqrt(A), A32 = 2 * A * A2, C2 = 2 * Math.sqrt(C), BA = B / A2;
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		this.x = this._fromX * (1 - this.scale) * (1 - this.scale) + this._controlX * 2 * (1 - this.scale) * this.scale + this._toX * this.scale * this.scale;
		this.y = this._fromY * (1 - this.scale) * (1 - this.scale) + this._controlY * 2 * (1 - this.scale) * this.scale + this._toY * this.scale * this.scale;
		if(this.finished) this.postUpdate();
	}
	,setMotion: function(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Ease) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._controlX = ControlX;
		this._controlY = ControlY;
		this._toX = ToX;
		this._toY = ToY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.ease = Ease;
		this.start();
		return this;
	}
	,__class__: flixel.tweens.motion.QuadMotion
	,__properties__: $extend(flixel.tweens.motion.Motion.prototype.__properties__,{get_distance:"get_distance"})
});
flixel.tweens.motion.QuadPath = function(complete,type) {
	if(type == null) type = 0;
	flixel.tweens.motion.Motion.call(this,0,complete,type,null);
	this._points = new Array();
	this._curveD = new Array();
	this._curveT = new Array();
	this._distance = this._speed = this._index = this._numSegs = 0;
	this._updateCurve = true;
};
$hxClasses["flixel.tweens.motion.QuadPath"] = flixel.tweens.motion.QuadPath;
flixel.tweens.motion.QuadPath.__name__ = ["flixel","tweens","motion","QuadPath"];
flixel.tweens.motion.QuadPath.__super__ = flixel.tweens.motion.Motion;
flixel.tweens.motion.QuadPath.prototype = $extend(flixel.tweens.motion.Motion.prototype,{
	getCurveLength: function(start,control,finish) {
		var a = flixel.tweens.motion.QuadPath._Point, b = flixel.tweens.motion.QuadPath._Point2;
		a.set_x(start.x - 2 * control.x + finish.x);
		a.set_y(start.y - 2 * control.y + finish.y);
		b.set_x(2 * control.x - 2 * start.x);
		b.set_y(2 * control.y - 2 * start.y);
		var A = 4 * (a.x * a.x + a.y * a.y), B = 4 * (a.x * b.x + a.y * b.y), C = b.x * b.x + b.y * b.y, ABC = 2 * Math.sqrt(A + B + C), A2 = Math.sqrt(A), A32 = 2 * A * A2, C2 = 2 * Math.sqrt(C), BA = B / A2;
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,updatePath: function() {
		if((this._points.length - 1) % 2 != 0 || this._points.length < 3) throw "A QuadPath must have at least 3 points to operate and number of points must be a odd.";
		if(!this._updateCurve) return;
		this._updateCurve = false;
		var i = 0;
		var j = 0;
		this._distance = 0;
		this._numSegs = (this._points.length - 1) / 2 | 0;
		while(i < this._numSegs) {
			j = i * 2;
			this._curveD[i] = this.getCurveLength(this._points[j],this._points[j + 1],this._points[j + 2]);
			this._distance += this._curveD[i++];
		}
		i = 0;
		var d = 0;
		while(i < this._numSegs) {
			d += this._curveD[i];
			this._curveT[i++] = d / this._distance;
		}
		this._curveT[this._numSegs - 1] = 1;
		this._curveT.unshift(0);
	}
	,update: function() {
		flixel.tweens.motion.Motion.prototype.update.call(this);
		var td;
		var tt;
		if(!this.backward && this._points != null) {
			if(this._index < this._numSegs - 1) while(this.scale > this._curveT[this._index + 1]) {
				this._index++;
				if(this._index == this._numSegs - 1) break;
			}
			td = this._curveT[this._index];
			tt = this._curveT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2 + 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		} else if(this._points != null) {
			if(this._index > 0) while(this.scale < this._curveT[this._index]) {
				this._index--;
				if(this._index == 0) break;
			}
			td = this._curveT[this._index + 1];
			tt = this._curveT[this._index] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2 + 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		}
		flixel.tweens.motion.Motion.prototype.postUpdate.call(this);
	}
	,start: function() {
		this._index = this.backward?this._numSegs - 1:0;
		flixel.tweens.motion.Motion.prototype.start.call(this);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this._points.length == 0) throw "No points have been added to the path yet.";
		return this._points[index % this._points.length];
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this._updateCurve = true;
		this._points[this._points.length] = new flixel.util.FlxPoint(x,y);
		return this;
	}
	,setMotion: function(DurationOrSpeed,UseDuration,Ease) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this._distance / DurationOrSpeed;
		} else {
			this.duration = this._distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.ease = Ease;
		this.start();
		return this;
	}
	,destroy: function() {
		flixel.tweens.motion.Motion.prototype.destroy.call(this);
		this._points = null;
		this._curveD = null;
		this._curveT = null;
		this._a = null;
		this._b = null;
		this._c = null;
	}
	,__class__: flixel.tweens.motion.QuadPath
});
flixel.tweens.sound = {}
flixel.tweens.sound.Fader = function(complete,type) {
	if(type == null) type = 0;
	flixel.tweens.FlxTween.call(this,0,type,complete);
};
$hxClasses["flixel.tweens.sound.Fader"] = flixel.tweens.sound.Fader;
flixel.tweens.sound.Fader.__name__ = ["flixel","tweens","sound","Fader"];
flixel.tweens.sound.Fader.__super__ = flixel.tweens.FlxTween;
flixel.tweens.sound.Fader.prototype = $extend(flixel.tweens.FlxTween.prototype,{
	update: function() {
		flixel.tweens.FlxTween.prototype.update.call(this);
		flixel.FlxG.sound.set_volume(this._start + this._range * this.scale);
	}
	,fadeTo: function(volume,duration,ease) {
		if(volume < 0) volume = 0;
		this._start = flixel.FlxG.sound.volume;
		this._range = volume - this._start;
		this.duration = duration;
		this.ease = ease;
		this.start();
	}
	,__class__: flixel.tweens.sound.Fader
});
flixel.ui = {}
flixel.ui.FlxTypedButton = function(X,Y,Label,OnClick) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._pressedMouse = false;
	this.allowHighlightOnMobile = false;
	this.allowSwiping = true;
	flixel.FlxSprite.call(this,X,Y);
	this.loadGraphic(flixel.ui._FlxTypedButton.GraphicButton,true,false,80,20);
	this.onUp = new flixel.ui._FlxTypedButton.FlxButtonEvent(OnClick);
	this.onDown = new flixel.ui._FlxTypedButton.FlxButtonEvent();
	this.onOver = new flixel.ui._FlxTypedButton.FlxButtonEvent();
	this.onOut = new flixel.ui._FlxTypedButton.FlxButtonEvent();
	this.labelAlphas = [0.8,1.0,0.5];
	this.labelOffsets = [new flixel.util.FlxPoint(),new flixel.util.FlxPoint(),new flixel.util.FlxPoint(0,1)];
	this.set_status(0);
	this.scrollFactor.set();
	flash.Lib.get_current().get_stage().addEventListener(flash.events.MouseEvent.MOUSE_UP,$bind(this,this.onUpEventListener));
};
$hxClasses["flixel.ui.FlxTypedButton"] = flixel.ui.FlxTypedButton;
flixel.ui.FlxTypedButton.__name__ = ["flixel","ui","FlxTypedButton"];
flixel.ui.FlxTypedButton.__super__ = flixel.FlxSprite;
flixel.ui.FlxTypedButton.prototype = $extend(flixel.FlxSprite.prototype,{
	onOutHandler: function() {
		this.set_status(0);
		this.onOut.fire();
	}
	,onOverHandler: function() {
		this.set_status(1);
		this.onOver.fire();
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.onDown.fire();
	}
	,onUpHandler: function() {
		this.set_status(0);
		this._pressedMouse = false;
		this._pressedTouch = null;
		this.onUp.fire();
	}
	,onUpEventListener: function(E) {
		if(this.visible && this.exists && this.active && this.status == 2) this.onUpHandler();
	}
	,set_status: function(Value) {
		if(this.labelAlphas.length > Value && this.label != null) this.label.set_alpha(this.alpha * this.labelAlphas[Value]);
		return this.status = Value;
	}
	,updateStatus: function(Overlap,JustPressed,Pressed,Touch) {
		if(Overlap) {
			if(JustPressed) {
				this._pressedTouch = Touch;
				if(Touch == null) this._pressedMouse = true;
				this.onDownHandler();
			} else if(this.status == 0) {
				if(this.allowSwiping && Pressed) this.onDownHandler(); else this.onOverHandler();
			}
		} else if(this.status != 0) this.onOutHandler();
		if(this._pressedTouch != null && this._pressedTouch._current == -1) this.onUpHandler();
	}
	,updateButton: function() {
		if(this.cameras == null) this.cameras = flixel.FlxG.cameras.list;
		var overlapFound = false;
		var _g = 0, _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel.FlxG.mouse.getWorldPosition(camera,this._point);
			if(this.overlapsPoint(this._point,true,camera)) {
				overlapFound = true;
				this.updateStatus(true,flixel.FlxG.mouse._leftButton.justPressed(),flixel.FlxG.mouse._leftButton.current > 0);
				break;
			}
			var _g2 = 0, _g3 = flixel.FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				touch.getWorldPosition(camera,this._point);
				if(this.overlapsPoint(this._point,true,camera)) {
					overlapFound = true;
					this.updateStatus(true,touch._current == 2,touch._current > 0,touch);
					break;
				}
			}
		}
		if(!overlapFound) this.updateStatus(false,false,false);
	}
	,draw: function() {
		flixel.FlxSprite.prototype.draw.call(this);
		if(this.label != null) {
			this.label.cameras = this.cameras;
			this.label.draw();
		}
	}
	,update: function() {
		flixel.FlxSprite.prototype.update.call(this);
		if(!this.visible) return;
		this.updateButton();
		if(this.label != null) {
			this.label.set_x(this.x);
			this.label.set_y(this.y);
			var _g = this.label;
			_g.set_x(_g.x + this.labelOffsets[this.status].x);
			var _g = this.label;
			_g.set_y(_g.y + this.labelOffsets[this.status].y);
			this.label.scrollFactor = this.scrollFactor;
		}
		var nextFrame = this.status;
		this.set_frame(this.framesData.frames[nextFrame]);
	}
	,destroy: function() {
		this.label = flixel.FlxG.safeDestroy(this.label);
		this.onUp = flixel.FlxG.safeDestroy(this.onUp);
		this.onDown = flixel.FlxG.safeDestroy(this.onDown);
		this.onOver = flixel.FlxG.safeDestroy(this.onOver);
		this.onOut = flixel.FlxG.safeDestroy(this.onOut);
		this.labelOffsets = null;
		this.labelAlphas = null;
		this._pressedTouch = null;
		flash.Lib.get_current().get_stage().removeEventListener(flash.events.MouseEvent.MOUSE_UP,$bind(this,this.onUpEventListener));
		flixel.FlxSprite.prototype.destroy.call(this);
	}
	,__class__: flixel.ui.FlxTypedButton
	,__properties__: $extend(flixel.FlxSprite.prototype.__properties__,{set_status:"set_status"})
});
flixel.ui.FlxButton = function(X,Y,Label,OnClick) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	flixel.ui.FlxTypedButton.call(this,X,Y,Label,OnClick);
	if(Label != null) {
		var _g = 0, _g1 = this.labelOffsets;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point.set(point.x - 1,point.y + 3);
		}
		this.label = new flixel.text.FlxText(X + this.labelOffsets[0].x,Y + this.labelOffsets[0].y,80,Label);
		this.label.setFormat(null,8,3355443,"center");
		this.label.set_alpha(this.labelAlphas[this.status]);
	}
};
$hxClasses["flixel.ui.FlxButton"] = flixel.ui.FlxButton;
flixel.ui.FlxButton.__name__ = ["flixel","ui","FlxButton"];
flixel.ui.FlxButton.__super__ = flixel.ui.FlxTypedButton;
flixel.ui.FlxButton.prototype = $extend(flixel.ui.FlxTypedButton.prototype,{
	resetHelpers: function() {
		flixel.ui.FlxTypedButton.prototype.resetHelpers.call(this);
		if(this.label != null) {
			this.label.set_width(this.label.frameWidth = this.get_width() | 0);
			this.label.set_size(this.label.get_size());
		}
	}
	,__class__: flixel.ui.FlxButton
});
flixel.ui._FlxTypedButton = {}
flixel.ui._FlxTypedButton.GraphicButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	flash.display.BitmapData.call(this,width,height,transparent,fillRGBA);
	var currentType = Type.getClass(this);
	if(flixel.ui._FlxTypedButton.GraphicButton.preload != null) {
		this.___textureBuffer.width = flixel.ui._FlxTypedButton.GraphicButton.preload.get_width() | 0;
		this.___textureBuffer.height = flixel.ui._FlxTypedButton.GraphicButton.preload.get_height() | 0;
		this.rect = new flash.geom.Rectangle(0,0,flixel.ui._FlxTypedButton.GraphicButton.preload.get_width(),flixel.ui._FlxTypedButton.GraphicButton.preload.get_height());
		this.setPixels(this.rect,flixel.ui._FlxTypedButton.GraphicButton.preload.getPixels(this.rect));
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	} else {
		var byteArray = flash.utils.ByteArray.fromBytes(haxe.Resource.getBytes(flixel.ui._FlxTypedButton.GraphicButton.resourceName));
		if(onload != null && !js.Boot.__instanceof(onload,Bool)) this.__loadFromBytes(byteArray,null,onload); else this.__loadFromBytes(byteArray,null,null);
	}
};
$hxClasses["flixel.ui._FlxTypedButton.GraphicButton"] = flixel.ui._FlxTypedButton.GraphicButton;
flixel.ui._FlxTypedButton.GraphicButton.__name__ = ["flixel","ui","_FlxTypedButton","GraphicButton"];
flixel.ui._FlxTypedButton.GraphicButton.__super__ = flash.display.BitmapData;
flixel.ui._FlxTypedButton.GraphicButton.prototype = $extend(flash.display.BitmapData.prototype,{
	__class__: flixel.ui._FlxTypedButton.GraphicButton
});
flixel.ui._FlxTypedButton.FlxButtonEvent = function(Callback,sound) {
	this.callback = Callback;
	this.sound = sound;
};
$hxClasses["flixel.ui._FlxTypedButton.FlxButtonEvent"] = flixel.ui._FlxTypedButton.FlxButtonEvent;
flixel.ui._FlxTypedButton.FlxButtonEvent.__name__ = ["flixel","ui","_FlxTypedButton","FlxButtonEvent"];
flixel.ui._FlxTypedButton.FlxButtonEvent.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.ui._FlxTypedButton.FlxButtonEvent.prototype = {
	fire: function() {
		if(this.callback != null) this.callback();
		if(this.sound != null) this.sound.play(true);
	}
	,destroy: function() {
		this.callback = null;
		this.sound = flixel.FlxG.safeDestroy(this.sound);
	}
	,__class__: flixel.ui._FlxTypedButton.FlxButtonEvent
}
flixel.util.FlxAngle = function() { }
$hxClasses["flixel.util.FlxAngle"] = flixel.util.FlxAngle;
flixel.util.FlxAngle.__name__ = ["flixel","util","FlxAngle"];
flixel.util.FlxAngle.rotatePoint = function(X,Y,PivotX,PivotY,Angle,point) {
	var sin = 0;
	var cos = 0;
	var radians = Angle * -flixel.util.FlxAngle.TO_RAD;
	while(radians < -Math.PI) radians += Math.PI * 2;
	while(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		sin = 1.27323954 * radians + .405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	} else {
		sin = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	}
	radians += Math.PI / 2;
	if(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		cos = 1.27323954 * radians + 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	} else {
		cos = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	}
	var dx = X - PivotX;
	var dy = Y - PivotY;
	if(point == null) point = new flixel.util.FlxPoint();
	point.set_x(PivotX + cos * dx - sin * dy);
	point.set_y(PivotY - sin * dx - cos * dy);
	return point;
}
flixel.util.FlxAngle.getAngle = function(Point1,Point2) {
	var x = Point2.x - Point1.x;
	var y = Point2.y - Point1.y;
	var angle = 0;
	if(x != 0 || y != 0) {
		var c1 = Math.PI * 0.25;
		var c2 = 3 * c1;
		var ay = y < 0?-y:y;
		if(x >= 0) angle = c1 - c1 * ((x - ay) / (x + ay)); else angle = c2 - c1 * ((x + ay) / (ay - x));
		angle = (y < 0?-angle:angle) * flixel.util.FlxAngle.TO_DEG;
		if(angle > 90) angle = angle - 270; else angle += 90;
	}
	return angle;
}
flixel.util.FlxAngle.sinCosGenerator = function(length,sinAmplitude,cosAmplitude,frequency) {
	if(frequency == null) frequency = 1.0;
	if(cosAmplitude == null) cosAmplitude = 1.0;
	if(sinAmplitude == null) sinAmplitude = 1.0;
	var sin = sinAmplitude;
	var cos = cosAmplitude;
	var frq = frequency * Math.PI / length;
	flixel.util.FlxAngle.cosTable = new Array();
	flixel.util.FlxAngle.sinTable = new Array();
	var _g = 0;
	while(_g < length) {
		var c = _g++;
		cos -= sin * frq;
		sin += cos * frq;
		flixel.util.FlxAngle.cosTable[c] = cos;
		flixel.util.FlxAngle.sinTable[c] = sin;
	}
}
flixel.util.FlxAngle.wrapAngle = function(angle) {
	var result = angle | 0;
	if(angle > 180) result = -180; else if(angle < -180) result = 180;
	return result;
}
flixel.util.FlxAngle.angleLimit = function(angle,min,max) {
	var result = angle;
	if(angle > max) result = max; else if(angle < min) result = min;
	return result;
}
flixel.util.FlxAngle.asDegrees = function(radians) {
	return radians * flixel.util.FlxAngle.TO_DEG;
}
flixel.util.FlxAngle.asRadians = function(degrees) {
	return degrees * flixel.util.FlxAngle.TO_RAD;
}
flixel.util.FlxAngle.angleBetween = function(SpriteA,SpriteB,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = SpriteB.x + SpriteB.origin.x - (SpriteA.x + SpriteA.origin.x);
	var dy = SpriteB.y + SpriteB.origin.y - (SpriteA.y + SpriteA.origin.y);
	if(AsDegrees) return Math.atan2(dy,dx) * flixel.util.FlxAngle.TO_DEG; else return Math.atan2(dy,dx);
}
flixel.util.FlxAngle.angleBetweenPoint = function(Sprite,Target,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = Target.x - (Sprite.x + Sprite.origin.x);
	var dy = Target.y - (Sprite.y + Sprite.origin.y);
	if(AsDegrees) return Math.atan2(dy,dx) * flixel.util.FlxAngle.TO_DEG; else return Math.atan2(dy,dx);
}
flixel.util.FlxAngle.angleBetweenMouse = function(Object,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	if(Object == null) return 0;
	var p = Object.getScreenXY();
	var dx = flixel.FlxG.mouse.screenX - p.x;
	var dy = flixel.FlxG.mouse.screenY - p.y;
	if(AsDegrees) return Math.atan2(dy,dx) * flixel.util.FlxAngle.TO_DEG; else return Math.atan2(dy,dx);
}
flixel.util.FlxAngle.angleBetweenTouch = function(Object,Touch,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var p = Object.getScreenXY();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	if(AsDegrees) return Math.atan2(dy,dx) * flixel.util.FlxAngle.TO_DEG; else return Math.atan2(dy,dx);
}
flixel.util.FlxAngle.getCartesianCoords = function(Radius,Angle,point) {
	var p = point;
	if(p == null) p = new flixel.util.FlxPoint();
	p.set_x(Radius * Math.cos(Angle * flixel.util.FlxAngle.TO_RAD));
	p.set_y(Radius * Math.sin(Angle * flixel.util.FlxAngle.TO_RAD));
	return p;
}
flixel.util.FlxAngle.getPolarCoords = function(X,Y,point) {
	var p = point;
	if(p == null) p = new flixel.util.FlxPoint();
	p.set_x(Math.sqrt(X * X + Y * Y));
	p.set_y(Math.atan2(Y,X) * flixel.util.FlxAngle.TO_DEG);
	return p;
}
flixel.util.FlxArrayUtil = function() { }
$hxClasses["flixel.util.FlxArrayUtil"] = flixel.util.FlxArrayUtil;
flixel.util.FlxArrayUtil.__name__ = ["flixel","util","FlxArrayUtil"];
flixel.util.FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat = function(array,element) {
	var index = flixel.util.FlxArrayUtil.indexOf_fastSplice_T(array,element);
	if(index >= 0) {
		array[index] = array[array.length - 1];
		array.pop();
	}
	return array;
}
flixel.util.FlxArrayUtil.setLength_flixel_system_replay_FrameRecord = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.indexOf_flixel_group_FlxTypedGroup_T = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_flixel_FlxCamera = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.setLength_Int = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.fastSplice_flixel_tweens_FlxTween = function(array,element) {
	var index = flixel.util.FlxArrayUtil.indexOf_fastSplice_T(array,element);
	if(index >= 0) {
		array[index] = array[array.length - 1];
		array.pop();
	}
	return array;
}
flixel.util.FlxArrayUtil.indexOf_flixel_tweens_FlxTween = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.setLength_Float = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.setLength_String = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
}
flixel.util.FlxArrayUtil.fastSplice_flixel_util_FlxTimer = function(array,element) {
	var index = flixel.util.FlxArrayUtil.indexOf_fastSplice_T(array,element);
	if(index >= 0) {
		array[index] = array[array.length - 1];
		array.pop();
	}
	return array;
}
flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxTimer = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPoint = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.fastSplice_flixel_util_FlxPath = function(array,element) {
	var index = flixel.util.FlxArrayUtil.indexOf_fastSplice_T(array,element);
	if(index >= 0) {
		array[index] = array[array.length - 1];
		array.pop();
	}
	return array;
}
flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPath = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPool_T = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_flixel_system_layer_frames_FlxFrame = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_Float = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_fastSplice_T = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxArrayUtil.indexOf_Int = function(array,whatToFind,fromIndex) {
	if(fromIndex == null) fromIndex = 0;
	var index = -1;
	var len = array.length;
	var _g = fromIndex;
	while(_g < len) {
		var i = _g++;
		if(array[i] == whatToFind) {
			index = i;
			break;
		}
	}
	return index;
}
flixel.util.FlxBitmapDataPool = function() { }
$hxClasses["flixel.util.FlxBitmapDataPool"] = flixel.util.FlxBitmapDataPool;
flixel.util.FlxBitmapDataPool.__name__ = ["flixel","util","FlxBitmapDataPool"];
flixel.util.FlxBitmapDataPool.__properties__ = {set_maxLength:"set_maxLength"}
flixel.util.FlxBitmapDataPool.get = function(w,h,transparent,fillColor,exactSize) {
	if(exactSize == null) exactSize = false;
	if(transparent == null) transparent = true;
	var res = null;
	var node = flixel.util.FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		if(bmd.get_transparent() == transparent && (bmd.___textureBuffer != null?bmd.___textureBuffer.width:0) >= w && (bmd.___textureBuffer != null?bmd.___textureBuffer.height:0) >= h && (!exactSize || exactSize && (bmd.___textureBuffer != null?bmd.___textureBuffer.width:0) == w && (bmd.___textureBuffer != null?bmd.___textureBuffer.height:0) == h)) {
			res = bmd;
			if(node.prev != null) node.prev.next = node.next;
			if(node.next != null) node.next.prev = node.prev;
			if(node == flixel.util.FlxBitmapDataPool._head) flixel.util.FlxBitmapDataPool._head = node.next;
			if(node == flixel.util.FlxBitmapDataPool._tail) flixel.util.FlxBitmapDataPool._tail = node.prev;
			node = null;
			flixel.util.FlxBitmapDataPool.$length--;
			break;
		}
		node = node.next;
	}
	if(res != null) {
		if(fillColor != null) {
			flixel.util.FlxBitmapDataPool._rect.x = 0;
			flixel.util.FlxBitmapDataPool._rect.y = 0;
			flixel.util.FlxBitmapDataPool._rect.width = w;
			flixel.util.FlxBitmapDataPool._rect.height = h;
			res.fillRect(flixel.util.FlxBitmapDataPool._rect,fillColor);
		}
	} else res = new flash.display.BitmapData(w,h,transparent,fillColor != null?fillColor:-1);
	return res;
}
flixel.util.FlxBitmapDataPool.put = function(bmd) {
	if(flixel.util.FlxBitmapDataPool.$length >= flixel.util.FlxBitmapDataPool.maxLength) {
		var last = flixel.util.FlxBitmapDataPool._tail;
		last.bmd.dispose();
		if(last.prev != null) {
			last.prev.next = null;
			flixel.util.FlxBitmapDataPool._tail = last.prev;
		}
		last = null;
		flixel.util.FlxBitmapDataPool.$length--;
	}
	var node = new flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode(bmd);
	node.next = flixel.util.FlxBitmapDataPool._head;
	if(flixel.util.FlxBitmapDataPool._head == null) flixel.util.FlxBitmapDataPool._head = flixel.util.FlxBitmapDataPool._tail = node; else {
		flixel.util.FlxBitmapDataPool._head = node;
		node.next.prev = node;
	}
	flixel.util.FlxBitmapDataPool.$length++;
}
flixel.util.FlxBitmapDataPool.clear = function() {
	var node = flixel.util.FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		bmd.dispose();
		bmd = null;
		node = node.next;
	}
	flixel.util.FlxBitmapDataPool.$length = 0;
	flixel.util.FlxBitmapDataPool._head = flixel.util.FlxBitmapDataPool._tail = null;
}
flixel.util.FlxBitmapDataPool.set_maxLength = function(value) {
	if(flixel.util.FlxBitmapDataPool.maxLength != value) {
		var node = flixel.util.FlxBitmapDataPool._tail;
		while(node != null && flixel.util.FlxBitmapDataPool.$length > value) {
			var bmd = node.bmd;
			bmd.dispose();
			bmd = null;
			node = node.prev;
			flixel.util.FlxBitmapDataPool.$length--;
		}
	}
	return flixel.util.FlxBitmapDataPool.maxLength = value;
}
flixel.util._FlxBitmapDataPool = {}
flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode = function(bmd,prev,next) {
	this.bmd = bmd;
	this.prev = prev;
	this.next = next;
};
$hxClasses["flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode"] = flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode;
flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode.__name__ = ["flixel","util","_FlxBitmapDataPool","FlxBitmapDataPoolNode"];
flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode.prototype = {
	__class__: flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode
}
flixel.util.FlxCollision = function() { }
$hxClasses["flixel.util.FlxCollision"] = flixel.util.FlxCollision;
flixel.util.FlxCollision.__name__ = ["flixel","util","FlxCollision"];
flixel.util.FlxCollision.pixelPerfectCheck = function(Contact,Target,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	var considerRotation = Contact.angle != 0 || Target.angle != 0;
	Camera = Camera != null?Camera:flixel.FlxG.camera;
	flixel.util.FlxCollision.pointA.x = Contact.x - (Camera.scroll.x * Contact.scrollFactor.x | 0) - Contact.offset.x;
	flixel.util.FlxCollision.pointA.y = Contact.y - (Camera.scroll.y * Contact.scrollFactor.y | 0) - Contact.offset.y;
	flixel.util.FlxCollision.pointB.x = Target.x - (Camera.scroll.x * Target.scrollFactor.x | 0) - Target.offset.x;
	flixel.util.FlxCollision.pointB.y = Target.y - (Camera.scroll.y * Target.scrollFactor.y | 0) - Target.offset.y;
	if(considerRotation) {
		flixel.util.FlxCollision.centerA.setTo(Contact.origin.x,Contact.origin.y);
		flixel.util.FlxCollision.centerB.setTo(Target.origin.x,Target.origin.y);
		flixel.util.FlxCollision.boundsA.x = flixel.util.FlxCollision.pointA.x + flixel.util.FlxCollision.centerA.x - flixel.util.FlxCollision.centerA.get_length();
		flixel.util.FlxCollision.boundsA.y = flixel.util.FlxCollision.pointA.y + flixel.util.FlxCollision.centerA.y - flixel.util.FlxCollision.centerA.get_length();
		flixel.util.FlxCollision.boundsA.width = flixel.util.FlxCollision.centerA.get_length() * 2;
		flixel.util.FlxCollision.boundsA.height = flixel.util.FlxCollision.boundsA.width;
		flixel.util.FlxCollision.boundsB.x = flixel.util.FlxCollision.pointB.x + flixel.util.FlxCollision.centerB.x - flixel.util.FlxCollision.centerB.get_length();
		flixel.util.FlxCollision.boundsB.y = flixel.util.FlxCollision.pointB.y + flixel.util.FlxCollision.centerB.y - flixel.util.FlxCollision.centerB.get_length();
		flixel.util.FlxCollision.boundsB.width = flixel.util.FlxCollision.centerB.get_length() * 2;
		flixel.util.FlxCollision.boundsB.height = flixel.util.FlxCollision.boundsB.width;
	} else {
		flixel.util.FlxCollision.boundsA.x = flixel.util.FlxCollision.pointA.x;
		flixel.util.FlxCollision.boundsA.y = flixel.util.FlxCollision.pointA.y;
		flixel.util.FlxCollision.boundsA.width = Contact.frameWidth;
		flixel.util.FlxCollision.boundsA.height = Contact.frameHeight;
		flixel.util.FlxCollision.boundsB.x = flixel.util.FlxCollision.pointB.x;
		flixel.util.FlxCollision.boundsB.y = flixel.util.FlxCollision.pointB.y;
		flixel.util.FlxCollision.boundsB.width = Target.frameWidth;
		flixel.util.FlxCollision.boundsB.height = Target.frameHeight;
	}
	var intersect = flixel.util.FlxCollision.boundsA.intersection(flixel.util.FlxCollision.boundsB);
	if(intersect.isEmpty() || intersect.width < 1 || intersect.height < 1) return false;
	flixel.util.FlxCollision.matrixA.identity();
	flixel.util.FlxCollision.matrixA.translate(-(intersect.x - flixel.util.FlxCollision.boundsA.x),-(intersect.y - flixel.util.FlxCollision.boundsA.y));
	flixel.util.FlxCollision.matrixB.identity();
	flixel.util.FlxCollision.matrixB.translate(-(intersect.x - flixel.util.FlxCollision.boundsB.x),-(intersect.y - flixel.util.FlxCollision.boundsB.y));
	Contact.calcFrame(true);
	Target.calcFrame(true);
	var testA = Contact.framePixels;
	var testB = Target.framePixels;
	var overlapWidth = intersect.width | 0;
	var overlapHeight = intersect.height | 0;
	if(considerRotation) {
		flixel.util.FlxCollision.testMatrix.identity();
		flixel.util.FlxCollision.testMatrix.translate(-Contact.origin.x,-Contact.origin.y);
		flixel.util.FlxCollision.testMatrix.rotate(Contact.angle * flixel.util.FlxAngle.TO_RAD);
		flixel.util.FlxCollision.testMatrix.translate(flixel.util.FlxCollision.boundsA.width / 2,flixel.util.FlxCollision.boundsA.height / 2);
		var testA2 = flixel.util.FlxBitmapDataPool.get(Math.floor(flixel.util.FlxCollision.boundsA.width),Math.floor(flixel.util.FlxCollision.boundsA.height),true,0,false);
		testA2.draw(testA,flixel.util.FlxCollision.testMatrix,null,null,null,false);
		testA = testA2;
		flixel.util.FlxCollision.testMatrix.identity();
		flixel.util.FlxCollision.testMatrix.translate(-Target.origin.x,-Target.origin.y);
		flixel.util.FlxCollision.testMatrix.rotate(Target.angle * flixel.util.FlxAngle.TO_RAD);
		flixel.util.FlxCollision.testMatrix.translate(flixel.util.FlxCollision.boundsB.width / 2,flixel.util.FlxCollision.boundsB.height / 2);
		var testB2 = flixel.util.FlxBitmapDataPool.get(Math.floor(flixel.util.FlxCollision.boundsB.width),Math.floor(flixel.util.FlxCollision.boundsB.height),true,0,false);
		testB2.draw(testB,flixel.util.FlxCollision.testMatrix,null,null,null,false);
		testB = testB2;
	}
	flixel.util.FlxCollision.boundsA.x = -flixel.util.FlxCollision.matrixA.tx | 0;
	flixel.util.FlxCollision.boundsA.y = -flixel.util.FlxCollision.matrixA.ty | 0;
	flixel.util.FlxCollision.boundsA.width = overlapWidth;
	flixel.util.FlxCollision.boundsA.height = overlapHeight;
	flixel.util.FlxCollision.boundsB.x = -flixel.util.FlxCollision.matrixB.tx | 0;
	flixel.util.FlxCollision.boundsB.y = -flixel.util.FlxCollision.matrixB.ty | 0;
	flixel.util.FlxCollision.boundsB.width = overlapWidth;
	flixel.util.FlxCollision.boundsB.height = overlapHeight;
	var pixelsA = testA.getPixels(flixel.util.FlxCollision.boundsA);
	var pixelsB = testB.getPixels(flixel.util.FlxCollision.boundsB);
	var hit = false;
	var alphaA = 0;
	var alphaB = 0;
	var overlapPixels = overlapWidth * overlapHeight;
	var alphaIdx = 0;
	var _g1 = 0, _g = Math.ceil(overlapPixels / 2);
	while(_g1 < _g) {
		var i = _g1++;
		alphaIdx = i << 3;
		alphaA = pixelsA[alphaIdx];
		alphaB = pixelsB[alphaIdx];
		if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
			hit = true;
			break;
		}
	}
	if(!hit) {
		var _g1 = 0, _g = overlapPixels >> 1;
		while(_g1 < _g) {
			var i = _g1++;
			alphaIdx = (i << 3) + 4;
			alphaA = pixelsA[alphaIdx];
			alphaB = pixelsB[alphaIdx];
			if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
				hit = true;
				break;
			}
		}
	}
	if(considerRotation) {
		flixel.util.FlxBitmapDataPool.put(testA);
		flixel.util.FlxBitmapDataPool.put(testB);
	}
	return hit;
}
flixel.util.FlxCollision.pixelPerfectPointCheck = function(PointX,PointY,Target,AlphaTolerance) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	if(flixel.util.FlxMath.pointInCoordinates(PointX,PointY,Math.floor(Target.x),Math.floor(Target.y),Target.get_width() | 0,Target.get_height() | 0) == false) return false;
	var test = Target.getFlxFrameBitmapData();
	var pixelAlpha = 0;
	pixelAlpha = test.getPixel32(Math.floor(PointX - Target.x),Math.floor(PointY - Target.y)) >> 24 & 255;
	pixelAlpha = pixelAlpha * Target.alpha | 0;
	if(pixelAlpha >= AlphaTolerance) return true; else return false;
}
flixel.util.FlxCollision.createCameraWall = function(Camera,Placement,Thickness,AdjustWorldBounds) {
	if(AdjustWorldBounds == null) AdjustWorldBounds = false;
	var left = null;
	var right = null;
	var top = null;
	var bottom = null;
	switch(Placement) {
	case 0:
		left = new flixel.tile.FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel.tile.FlxTileblock(Math.floor(Camera.x + Camera.width),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel.tile.FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y - Thickness),Camera.width + Thickness * 2,Thickness);
		bottom = new flixel.tile.FlxTileblock(Math.floor(Camera.x - Thickness),Camera.height,Camera.width + Thickness * 2,Thickness);
		if(AdjustWorldBounds) flixel.FlxG.worldBounds.set(Camera.x - Thickness,Camera.y - Thickness,Camera.width + Thickness * 2,Camera.height + Thickness * 2);
		break;
	case 1:
		left = new flixel.tile.FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel.tile.FlxTileblock(Math.floor(Camera.x + Camera.width - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel.tile.FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y),Camera.width,Thickness);
		bottom = new flixel.tile.FlxTileblock(Math.floor(Camera.x),Camera.height - Thickness,Camera.width,Thickness);
		if(AdjustWorldBounds) flixel.FlxG.worldBounds.set(Camera.x,Camera.y,Camera.width,Camera.height);
		break;
	}
	var result = new flixel.group.FlxGroup(4);
	result.add(left);
	result.add(right);
	result.add(top);
	result.add(bottom);
	return result;
}
flixel.util.FlxColor = function() { }
$hxClasses["flixel.util.FlxColor"] = flixel.util.FlxColor;
flixel.util.FlxColor.__name__ = ["flixel","util","FlxColor"];
flixel.util.FlxColorUtil = function() { }
$hxClasses["flixel.util.FlxColorUtil"] = flixel.util.FlxColorUtil;
flixel.util.FlxColorUtil.__name__ = ["flixel","util","FlxColorUtil"];
flixel.util.FlxColorUtil.makeFromARGB = function(Alpha,Red,Green,Blue) {
	if(Alpha == null) Alpha = 1.0;
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (Red & 255) << 16 | (Green & 255) << 8 | Blue & 255;
}
flixel.util.FlxColorUtil.makeFromHSBA = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) Alpha = 1.0;
	var red;
	var green;
	var blue;
	if(Saturation == 0.0) {
		red = Brightness;
		green = Brightness;
		blue = Brightness;
	} else {
		if(Hue == 360) Hue = 0;
		var slice = Hue / 60 | 0;
		var hf = Hue / 60 - slice;
		var aa = Brightness * (1 - Saturation);
		var bb = Brightness * (1 - Saturation * hf);
		var cc = Brightness * (1 - Saturation * (1.0 - hf));
		switch(slice) {
		case 0:
			red = Brightness;
			green = cc;
			blue = aa;
			break;
		case 1:
			red = bb;
			green = Brightness;
			blue = aa;
			break;
		case 2:
			red = aa;
			green = Brightness;
			blue = cc;
			break;
		case 3:
			red = aa;
			green = bb;
			blue = Brightness;
			break;
		case 4:
			red = cc;
			green = aa;
			blue = Brightness;
			break;
		case 5:
			red = Brightness;
			green = aa;
			blue = bb;
			break;
		default:
			red = 0;
			green = 0;
			blue = 0;
		}
	}
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
}
flixel.util.FlxColorUtil.getARGB = function(Color,Results) {
	var red = Color >> 16 & 255;
	var green = Color >> 8 & 255;
	var blue = Color & 255;
	var alpha = flixel.util.FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { red : red, green : green, blue : blue, alpha : alpha};
	return { red : red, green : green, blue : blue, alpha : alpha};
}
flixel.util.FlxColorUtil.getHSBA = function(Color,Results) {
	var hue;
	var saturation;
	var brightness;
	var alpha;
	var red = (Color >> 16 & 255) / 255;
	var green = (Color >> 8 & 255) / 255;
	var blue = (Color & 255) / 255;
	var m = red > green?red:green;
	var dmax = m > blue?m:blue;
	m = red > green?green:red;
	var dmin = m > blue?blue:m;
	var range = dmax - dmin;
	brightness = flixel.util.FlxMath.roundDecimal(dmax,4);
	saturation = 0;
	hue = 0;
	if(dmax != 0) saturation = flixel.util.FlxMath.roundDecimal(range / dmax,4);
	if(saturation != 0) {
		if(red == dmax) hue = (green - blue) / range; else if(green == dmax) hue = 2 + (blue - red) / range; else if(blue == dmax) hue = 4 + (red - green) / range;
		hue *= 60;
		if(hue < 0) hue += 360;
	}
	alpha = flixel.util.FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
	return { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
}
flixel.util.FlxColorUtil.getAlpha = function(Color) {
	return Color >> 24 & 255;
}
flixel.util.FlxColorUtil.getAlphaFloat = function(Color) {
	var f = Color >> 24 & 255;
	return f / 255;
}
flixel.util.FlxColorUtil.getRed = function(Color) {
	return Color >> 16 & 255;
}
flixel.util.FlxColorUtil.getGreen = function(Color) {
	return Color >> 8 & 255;
}
flixel.util.FlxColorUtil.getBlue = function(Color) {
	return Color & 255;
}
flixel.util.FlxColorUtil.getRandomColor = function(Min,Max,Alpha) {
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	return flixel.util.FlxRandom.color(Min,Max,Alpha);
}
flixel.util.FlxColorUtil.getColor32 = function(Alpha,Red,Green,Blue) {
	return Alpha << 24 | Red << 16 | Green << 8 | Blue;
}
flixel.util.FlxColorUtil.getColor24 = function(Red,Green,Blue) {
	return Red << 16 | Green << 8 | Blue;
}
flixel.util.FlxColorUtil.getHSVColorWheel = function(Alpha) {
	if(Alpha == null) Alpha = 255;
	var colors = new Array();
	var _g = 0;
	while(_g < 360) {
		var c = _g++;
		colors[c] = flixel.util.FlxColorUtil.HSVtoARGB(c,1.0,1.0,Alpha);
	}
	return colors;
}
flixel.util.FlxColorUtil.getComplementHarmony = function(Color) {
	var hsv = flixel.util.FlxColorUtil.RGBtoHSV(Color);
	var opposite = flixel.util.FlxMath.wrapValue(hsv.hue | 0,180,359);
	return flixel.util.FlxColorUtil.HSVtoARGB(opposite,1.0,1.0);
}
flixel.util.FlxColorUtil.getAnalogousHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel.util.FlxColorUtil.RGBtoHSV(Color);
	if(Threshold > 359 || Threshold < 0) null;
	var warmer = flixel.util.FlxMath.wrapValue(hsv.hue | 0,359 - Threshold,359);
	var colder = flixel.util.FlxMath.wrapValue(hsv.hue | 0,Threshold,359);
	return { color1 : Color, color2 : flixel.util.FlxColorUtil.HSVtoARGB(warmer,1.0,1.0), color3 : flixel.util.FlxColorUtil.HSVtoARGB(colder,1.0,1.0), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
}
flixel.util.FlxColorUtil.getSplitComplementHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel.util.FlxColorUtil.RGBtoHSV(Color);
	if(Threshold >= 359 || Threshold <= 0) null;
	var opposite = flixel.util.FlxMath.wrapValue(hsv.hue | 0,180,359);
	var warmer = flixel.util.FlxMath.wrapValue(hsv.hue | 0,opposite - Threshold,359);
	var colder = flixel.util.FlxMath.wrapValue(hsv.hue | 0,opposite + Threshold,359);
	return { color1 : Color, color2 : flixel.util.FlxColorUtil.HSVtoARGB(warmer,hsv.saturation,hsv.value), color3 : flixel.util.FlxColorUtil.HSVtoARGB(colder,hsv.saturation,hsv.value), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
}
flixel.util.FlxColorUtil.getTriadicHarmony = function(Color) {
	var hsv = flixel.util.FlxColorUtil.RGBtoHSV(Color);
	var triadic1 = flixel.util.FlxMath.wrapValue(hsv.hue | 0,120,359);
	var triadic2 = flixel.util.FlxMath.wrapValue(triadic1,120,359);
	return { color1 : Color, color2 : flixel.util.FlxColorUtil.HSVtoARGB(triadic1,1.0,1.0), color3 : flixel.util.FlxColorUtil.HSVtoARGB(triadic2,1.0,1.0)};
}
flixel.util.FlxColorUtil.getColorInfo = function(Color) {
	var argb = flixel.util.FlxColorUtil.getARGB(Color,null);
	var hsl = flixel.util.FlxColorUtil.RGBtoHSV(Color);
	var result = flixel.util.FlxColorUtil.ARGBtoHexString(Color) + "\n";
	result += "Alpha: " + argb.alpha + " Red: " + argb.red + " Green: " + argb.green + " Blue: " + argb.blue + "\n";
	result += "Hue: " + hsl.hue + " Saturation: " + hsl.saturation + " Lightnes: " + hsl.lightness;
	return result;
}
flixel.util.FlxColorUtil.ARGBtoHexString = function(Color) {
	var argb = flixel.util.FlxColorUtil.getARGB(Color,null);
	return "0x" + flixel.util.FlxColorUtil.colorToHexString(argb.alpha | 0) + flixel.util.FlxColorUtil.colorToHexString(argb.red) + flixel.util.FlxColorUtil.colorToHexString(argb.green) + flixel.util.FlxColorUtil.colorToHexString(argb.blue);
}
flixel.util.FlxColorUtil.ARGBtoWebString = function(Color) {
	var argb = flixel.util.FlxColorUtil.getARGB(Color,null);
	return "#" + flixel.util.FlxColorUtil.colorToHexString(argb.red) + flixel.util.FlxColorUtil.colorToHexString(argb.green) + flixel.util.FlxColorUtil.colorToHexString(argb.blue);
}
flixel.util.FlxColorUtil.colorToHexString = function(Color) {
	var digits = "0123456789ABCDEF";
	var lsd = Color % 16;
	var msd = (Color - lsd) / 16;
	return digits.charAt(msd | 0) + digits.charAt(lsd | 0);
}
flixel.util.FlxColorUtil.HSVtoARGB = function(H,S,V,Alpha) {
	if(Alpha == null) Alpha = 255;
	var result = 0;
	if(S == 0.0) result = Alpha << 24 | (V * 255 | 0) << 16 | (V * 255 | 0) << 8 | (V * 255 | 0); else {
		H = H / 60.0;
		var f = H - (H | 0);
		var p = V * (1.0 - S);
		var q = V * (1.0 - S * f);
		var t = V * (1.0 - S * (1.0 - f));
		var _g = H | 0;
		switch(_g) {
		case 0:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 1:
			result = Alpha << 24 | (q * 255 | 0) << 16 | (V * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 2:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (V * 255 | 0) << 8 | (t * 255 | 0);
			break;
		case 3:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 4:
			result = Alpha << 24 | (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 5:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
			break;
		default:
			null;
		}
	}
	return result;
}
flixel.util.FlxColorUtil.RGBtoHSV = function(Color) {
	var rgb = flixel.util.FlxColorUtil.getARGB(Color,null);
	var red = rgb.red / 255;
	var green = rgb.green / 255;
	var blue = rgb.blue / 255;
	var min = Math.min(red,Math.min(green,blue));
	var max = Math.max(red,Math.max(green,blue));
	var delta = max - min;
	var lightness = (max + min) / 2;
	var hue = 0;
	var saturation;
	if(delta == 0) {
		hue = 0;
		saturation = 0;
	} else {
		if(lightness < 0.5) saturation = delta / (max + min); else saturation = delta / (2 - max - min);
		var delta_r = ((max - red) / 6 + delta / 2) / delta;
		var delta_g = ((max - green) / 6 + delta / 2) / delta;
		var delta_b = ((max - blue) / 6 + delta / 2) / delta;
		if(red == max) hue = delta_b - delta_g; else if(green == max) hue = 1 / 3 + delta_r - delta_b; else if(blue == max) hue = 2 / 3 + delta_g - delta_r;
		if(hue < 0) hue += 1;
		if(hue > 1) hue -= 1;
	}
	hue *= 360;
	hue = Math.round(hue);
	return { hue : hue, saturation : saturation, lightness : lightness, value : lightness};
}
flixel.util.FlxColorUtil.ARGBtoRGB = function(Color) {
	return (Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255;
}
flixel.util.FlxColorUtil.interpolateColor = function(Color1,Color2,Steps,CurrentStep,Alpha) {
	if(Alpha == null) Alpha = 255;
	var src1 = flixel.util.FlxColorUtil.getARGB(Color1,null);
	var src2 = flixel.util.FlxColorUtil.getARGB(Color2,null);
	var r = (src2.red - src1.red) * CurrentStep / Steps + src1.red | 0;
	var g = (src2.green - src1.green) * CurrentStep / Steps + src1.green | 0;
	var b = (src2.blue - src1.blue) * CurrentStep / Steps + src1.blue | 0;
	return Alpha << 24 | r << 16 | g << 8 | b;
}
flixel.util.FlxColorUtil.interpolateColorWithRGB = function(Color,R2,G2,B2,Steps,CurrentStep) {
	var src = flixel.util.FlxColorUtil.getARGB(Color,null);
	var r = (R2 - src.red) * CurrentStep / Steps + src.red | 0;
	var g = (G2 - src.green) * CurrentStep / Steps + src.green | 0;
	var b = (B2 - src.blue) * CurrentStep / Steps + src.blue | 0;
	return r << 16 | g << 8 | b;
}
flixel.util.FlxColorUtil.interpolateRGB = function(R1,G1,B1,R2,G2,B2,Steps,CurrentStep) {
	var r = (R2 - R1) * CurrentStep / Steps + R1 | 0;
	var g = (G2 - G1) * CurrentStep / Steps + G1 | 0;
	var b = (B2 - B1) * CurrentStep / Steps + B1 | 0;
	return r << 16 | g << 8 | b;
}
flixel.util.FlxColorUtil.darken = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel.util.FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel.util.FlxColorUtil.getAlphaFloat(Color);
	Factor = 1 - Factor;
	r = r * Factor | 0;
	g = g * Factor | 0;
	b = b * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
}
flixel.util.FlxColorUtil.brighten = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel.util.FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel.util.FlxColorUtil.getAlphaFloat(Color);
	r += (255 - r) * Factor | 0;
	g += (255 - g) * Factor | 0;
	b += (255 - b) * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
}
flixel.util.FlxMath = function() { }
$hxClasses["flixel.util.FlxMath"] = flixel.util.FlxMath;
flixel.util.FlxMath.__name__ = ["flixel","util","FlxMath"];
flixel.util.FlxMath.roundDecimal = function(Value,Precision) {
	var mult = 1;
	var _g = 0;
	while(_g < Precision) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(Value * mult) / mult;
}
flixel.util.FlxMath.bound = function(Value,Min,Max) {
	var lowerBound = Value < Min?Min:Value;
	return lowerBound > Max?Max:lowerBound;
}
flixel.util.FlxMath.lerp = function(Min,Max,Ratio) {
	return Min + Ratio * (Max - Min);
}
flixel.util.FlxMath.inBounds = function(Value,Min,Max) {
	return Value > Min && Value < Max;
}
flixel.util.FlxMath.isOdd = function(n) {
	if(((n | 0) & 1) != 0) return true; else return false;
}
flixel.util.FlxMath.isEven = function(n) {
	if(((n | 0) & 1) != 0) return false; else return true;
}
flixel.util.FlxMath.numericComparison = function(num1,num2) {
	if(num2 > num1) return -1; else if(num1 > num2) return 1;
	return 0;
}
flixel.util.FlxMath.pointInCoordinates = function(pointX,pointY,rectX,rectY,rectWidth,rectHeight) {
	if(pointX >= rectX && pointX <= rectX + rectWidth) {
		if(pointY >= rectY && pointY <= rectY + rectHeight) return true;
	}
	return false;
}
flixel.util.FlxMath.pointInFlxRect = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y && pointY <= rect.get_bottom()) return true;
	return false;
}
flixel.util.FlxMath.mouseInFlxRect = function(useWorldCoords,rect) {
	if(rect == null) return true;
	if(useWorldCoords) return flixel.util.FlxMath.pointInFlxRect(Math.floor(flixel.FlxG.mouse.x),Math.floor(flixel.FlxG.mouse.y),rect); else return flixel.util.FlxMath.pointInFlxRect(flixel.FlxG.mouse.screenX,flixel.FlxG.mouse.screenY,rect);
}
flixel.util.FlxMath.pointInRectangle = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y && pointY <= rect.get_bottom()) return true;
	return false;
}
flixel.util.FlxMath.maxAdd = function(value,amount,max,min) {
	if(min == null) min = 0;
	value += amount;
	if(value > max) value = max; else if(value <= min) value = min;
	return value;
}
flixel.util.FlxMath.wrapValue = function(value,amount,max) {
	var diff;
	value = Math.abs(value) | 0;
	amount = Math.abs(amount) | 0;
	max = Math.abs(max) | 0;
	diff = (value + amount) % max;
	return diff;
}
flixel.util.FlxMath.dotProduct = function(ax,ay,bx,by) {
	return ax * bx + ay * by;
}
flixel.util.FlxMath.vectorLength = function(dx,dy) {
	return Math.sqrt(dx * dx + dy * dy);
}
flixel.util.FlxMath.getDistance = function(Point1,Point2) {
	var dx = Point1.x - Point2.x;
	var dy = Point1.y - Point2.y;
	return Math.sqrt(dx * dx + dy * dy);
}
flixel.util.FlxMath.distanceBetween = function(SpriteA,SpriteB) {
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	return Math.sqrt(dx * dx + dy * dy) | 0;
}
flixel.util.FlxMath.isDistanceWithin = function(SpriteA,SpriteB,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
}
flixel.util.FlxMath.distanceToPoint = function(Sprite,Target) {
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	return Math.sqrt(dx * dx + dy * dy) | 0;
}
flixel.util.FlxMath.isDistanceToPointWithin = function(Sprite,Target,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
}
flixel.util.FlxMath.distanceToMouse = function(Sprite) {
	var dx = Sprite.x + Sprite.origin.x - flixel.FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel.FlxG.mouse.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
}
flixel.util.FlxMath.isDistanceToMouseWithin = function(Sprite,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - flixel.FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel.FlxG.mouse.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
}
flixel.util.FlxMath.distanceToTouch = function(Sprite,Touch) {
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
}
flixel.util.FlxMath.isDistanceToTouchWithin = function(Sprite,Touch,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
}
flixel.util.FlxMath.getDecimals = function(Number) {
	var helperArray = Std.string(Number).split(".");
	var decimals = 0;
	if(helperArray.length > 1) decimals = helperArray[1].length;
	return decimals;
}
flixel.util.FlxMath.equal = function(aValueA,aValueB,aDiff) {
	if(aDiff == null) aDiff = 0.00001;
	return Math.abs(aValueA - aValueB) <= aDiff;
}
flixel.util.FlxPool = function() {
	this._pool = [];
};
$hxClasses["flixel.util.FlxPool"] = flixel.util.FlxPool;
flixel.util.FlxPool.__name__ = ["flixel","util","FlxPool"];
flixel.util.FlxPool.prototype = {
	get_length: function() {
		return this._pool.length;
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,put: function(obj) {
		if(obj != null && flixel.util.FlxArrayUtil.indexOf_flixel_util_FlxPool_T(this._pool,obj) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = new flixel.util.FlxPool.T();
		return obj;
	}
	,__class__: flixel.util.FlxPool
	,__properties__: {get_length:"get_length"}
}
flixel.util.FlxRandom = function() { }
$hxClasses["flixel.util.FlxRandom"] = flixel.util.FlxRandom;
flixel.util.FlxRandom.__name__ = ["flixel","util","FlxRandom"];
flixel.util.FlxRandom.__properties__ = {set_globalSeed:"set_globalSeed"}
flixel.util.FlxRandom.getObject_getRandom_T = function(Objects,StartIndex,EndIndex) {
	if(EndIndex == null) EndIndex = 0;
	if(StartIndex == null) StartIndex = 0;
	var selected = null;
	if(Objects.length != 0) {
		if(StartIndex < 0) StartIndex = 0;
		if(EndIndex < StartIndex) {
			StartIndex = StartIndex + EndIndex;
			EndIndex = StartIndex - EndIndex;
			StartIndex = StartIndex - EndIndex;
		}
		if(EndIndex <= 0 || EndIndex > Objects.length - 1) EndIndex = Objects.length - 1;
		selected = Objects[flixel.util.FlxRandom.intRanged(StartIndex,EndIndex)];
	}
	return selected;
}
flixel.util.FlxRandom.shuffleArray_shuffle_T = function(Objects,HowManyTimes) {
	HowManyTimes = Math.max(HowManyTimes,0) | 0;
	var tempObject = null;
	var _g = 0;
	while(_g < HowManyTimes) {
		var i = _g++;
		flixel.util.FlxRandom._intHelper2 = flixel.util.FlxRandom.intRanged(0,Objects.length - 1);
		flixel.util.FlxRandom._intHelper3 = flixel.util.FlxRandom.intRanged(0,Objects.length - 1);
		tempObject = Objects[flixel.util.FlxRandom._intHelper2];
		Objects[flixel.util.FlxRandom._intHelper2] = Objects[flixel.util.FlxRandom._intHelper3];
		Objects[flixel.util.FlxRandom._intHelper3] = tempObject;
	}
	return Objects;
}
flixel.util.FlxRandom.set_globalSeed = function(NewSeed) {
	if(NewSeed < 1) NewSeed = 1;
	if(NewSeed > 2147483647) NewSeed = 2147483647;
	flixel.util.FlxRandom._internalSeed = NewSeed;
	flixel.util.FlxRandom.globalSeed = NewSeed;
	return flixel.util.FlxRandom.globalSeed;
}
flixel.util.FlxRandom.resetGlobalSeed = function() {
	return flixel.util.FlxRandom.set_globalSeed(Math.random() * 2147483647 | 0);
}
flixel.util.FlxRandom["int"] = function() {
	return flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
}
flixel.util.FlxRandom["float"] = function() {
	return (flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647;
}
flixel.util.FlxRandom.intRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 2147483647;
	if(Min == null) Min = 0;
	if(Min == Max) flixel.util.FlxRandom._intHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel.util.FlxRandom._intHelper = Math.floor(Min + (flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); else do flixel.util.FlxRandom._intHelper = Math.floor(Min + (flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); while(flixel.util.FlxArrayUtil.indexOf_Int(Excludes,flixel.util.FlxRandom._intHelper) >= 0);
	}
	return flixel.util.FlxRandom._intHelper;
}
flixel.util.FlxRandom.floatRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 1;
	if(Min == null) Min = 0;
	if(Min == Max) flixel.util.FlxRandom._floatHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel.util.FlxRandom._floatHelper = Min + (flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); else do flixel.util.FlxRandom._floatHelper = Min + (flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); while(flixel.util.FlxArrayUtil.indexOf_Float(Excludes,flixel.util.FlxRandom._floatHelper) >= 0);
	}
	return flixel.util.FlxRandom._floatHelper;
}
flixel.util.FlxRandom.chanceRoll = function(Chance) {
	if(Chance == null) Chance = 50;
	return flixel.util.FlxRandom.floatRanged(0,100) < Chance;
}
flixel.util.FlxRandom.sign = function(Chance) {
	if(Chance == null) Chance = 50;
	return flixel.util.FlxRandom.floatRanged(0,100) < Chance?1:-1;
}
flixel.util.FlxRandom.weightedPick = function(WeightsArray) {
	flixel.util.FlxRandom._floatHelper = 0;
	var _g = 0;
	while(_g < WeightsArray.length) {
		var i = WeightsArray[_g];
		++_g;
		flixel.util.FlxRandom._floatHelper += i;
	}
	flixel.util.FlxRandom._floatHelper = flixel.util.FlxRandom.floatRanged(0,flixel.util.FlxRandom._floatHelper);
	var _g1 = 0, _g = WeightsArray.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(flixel.util.FlxRandom._floatHelper < WeightsArray[i]) {
			flixel.util.FlxRandom._intHelper = i;
			break;
		}
		flixel.util.FlxRandom._floatHelper -= WeightsArray[i];
	}
	return flixel.util.FlxRandom._intHelper;
}
flixel.util.FlxRandom.color = function(Min,Max,Alpha,GreyScale) {
	if(GreyScale == null) GreyScale = false;
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	if(Min < 0) Min = 0;
	if(Min > 255) Min = 255;
	if(Max < 0) Max = 0;
	if(Max > 255) Max = 255;
	if(Alpha < 0) Alpha = 0;
	if(Alpha > 255) Alpha = 255;
	if(Max < Min) {
		Min = Min + Max;
		Max = Min - Max;
		Min = Min - Max;
	}
	flixel.util.FlxRandom._red = flixel.util.FlxRandom.intRanged(Min,Max);
	flixel.util.FlxRandom._green = GreyScale?flixel.util.FlxRandom._red:flixel.util.FlxRandom.intRanged(Min,Max);
	flixel.util.FlxRandom._blue = GreyScale?flixel.util.FlxRandom._red:flixel.util.FlxRandom.intRanged(Min,Max);
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (flixel.util.FlxRandom._red & 255) << 16 | (flixel.util.FlxRandom._green & 255) << 8 | flixel.util.FlxRandom._blue & 255;
}
flixel.util.FlxRandom.colorExt = function(RedMinimum,RedMaximum,GreenMinimum,GreenMaximum,BlueMinimum,BlueMaximum,AlphaMinimum,AlphaMaximum) {
	if(AlphaMaximum == null) AlphaMaximum = -1;
	if(AlphaMinimum == null) AlphaMinimum = -1;
	if(BlueMaximum == null) BlueMaximum = 255;
	if(BlueMinimum == null) BlueMinimum = 0;
	if(GreenMaximum == null) GreenMaximum = 255;
	if(GreenMinimum == null) GreenMinimum = 0;
	if(RedMaximum == null) RedMaximum = 255;
	if(RedMinimum == null) RedMinimum = 0;
	if(RedMinimum < 0) RedMinimum = 0;
	if(RedMinimum > 255) RedMinimum = 255;
	if(RedMaximum < 0) RedMaximum = 0;
	if(RedMaximum > 255) RedMaximum = 255;
	if(GreenMinimum < 0) GreenMinimum = 0;
	if(GreenMinimum > 255) GreenMinimum = 255;
	if(GreenMaximum < 0) GreenMaximum = 0;
	if(GreenMaximum > 255) GreenMaximum = 255;
	if(BlueMinimum < 0) BlueMinimum = 0;
	if(BlueMinimum > 255) BlueMinimum = 255;
	if(BlueMaximum < 0) BlueMaximum = 0;
	if(BlueMaximum > 255) BlueMaximum = 255;
	if(AlphaMinimum == -1) AlphaMinimum = 255;
	if(AlphaMaximum == -1) AlphaMaximum = 255;
	if(AlphaMinimum < 0) AlphaMinimum = 0;
	if(AlphaMinimum > 255) AlphaMinimum = 255;
	if(AlphaMaximum < 0) AlphaMaximum = 0;
	if(AlphaMaximum > 255) AlphaMaximum = 255;
	flixel.util.FlxRandom._red = flixel.util.FlxRandom.intRanged(RedMinimum,RedMaximum);
	flixel.util.FlxRandom._green = flixel.util.FlxRandom.intRanged(GreenMinimum,GreenMaximum);
	flixel.util.FlxRandom._blue = flixel.util.FlxRandom.intRanged(BlueMinimum,BlueMaximum);
	flixel.util.FlxRandom._alpha = flixel.util.FlxRandom.intRanged(AlphaMinimum,AlphaMaximum);
	return flixel.util.FlxColorUtil.makeFromARGB(flixel.util.FlxRandom._alpha,flixel.util.FlxRandom._red,flixel.util.FlxRandom._green,flixel.util.FlxRandom._blue);
}
flixel.util.FlxRandom.generate = function() {
	return flixel.util.FlxRandom._internalSeed = flixel.util.FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
}
flixel.util.FlxSort = function() { }
$hxClasses["flixel.util.FlxSort"] = flixel.util.FlxSort;
flixel.util.FlxSort.__name__ = ["flixel","util","FlxSort"];
flixel.util.FlxSort.byY = function(Order,Obj1,Obj2) {
	return flixel.util.FlxSort.byValues(Order,Obj1.y,Obj2.y);
}
flixel.util.FlxSort.byValues = function(Order,Value1,Value2) {
	var result = 0;
	if(Value1 < Value2) result = Order; else if(Value1 > Value2) result = -Order;
	return result;
}
var js = {}
js.Browser = function() { }
$hxClasses["js.Browser"] = js.Browser;
js.Browser.__name__ = ["js","Browser"];
js.Browser.getLocalStorage = function() {
	try {
		var s = js.Browser.window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
}
js.Boot = function() { }
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
}
js.Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0, _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof(console) != "undefined" && console.log != null) console.log(msg);
}
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2, _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				str += (i1 > 0?",":"") + js.Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) { ;
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
}
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0, _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
}
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					if(cl == Array) return o.__enum__ == null;
					return true;
				}
				if(js.Boot.__interfLoop(o.__class__,cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
}
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
}
flixel.util.FlxSpriteUtil = function() { }
$hxClasses["flixel.util.FlxSpriteUtil"] = flixel.util.FlxSpriteUtil;
flixel.util.FlxSpriteUtil.__name__ = ["flixel","util","FlxSpriteUtil"];
flixel.util.FlxSpriteUtil.alphaMask = function(output,source,mask) {
	var data = null;
	if(js.Boot.__instanceof(source,String)) data = flixel.system.FlxAssets.getBitmapData(source); else if(js.Boot.__instanceof(source,Class)) data = Type.createInstance(source,[]).bitmapData; else if(js.Boot.__instanceof(source,flash.display.BitmapData)) data = (js.Boot.__cast(source , flash.display.BitmapData)).clone(); else return null;
	var maskData = null;
	if(js.Boot.__instanceof(mask,String)) maskData = flixel.system.FlxAssets.getBitmapData(mask); else if(js.Boot.__instanceof(mask,Class)) maskData = Type.createInstance(mask,[]).bitmapData; else if(js.Boot.__instanceof(mask,flash.display.BitmapData)) maskData = mask; else return null;
	data.copyChannel(maskData,new flash.geom.Rectangle(0,0,data.___textureBuffer != null?data.___textureBuffer.width:0,data.___textureBuffer != null?data.___textureBuffer.height:0),new flash.geom.Point(),8,8);
	output.set_pixels(data);
	return output;
}
flixel.util.FlxSpriteUtil.alphaMaskFlxSprite = function(sprite,mask,output) {
	sprite.calcFrame(true);
	var data = sprite.get_pixels().clone();
	data.copyChannel(mask.get_pixels(),new flash.geom.Rectangle(0,0,sprite.get_width(),sprite.get_height()),new flash.geom.Point(),8,8);
	output.set_pixels(data);
	return output;
}
flixel.util.FlxSpriteUtil.screenWrap = function(sprite,Left,Right,Top,Bottom) {
	if(Bottom == null) Bottom = true;
	if(Top == null) Top = true;
	if(Right == null) Right = true;
	if(Left == null) Left = true;
	if(Left && sprite.x + sprite.frameWidth <= 0) sprite.set_x(flixel.FlxG.width); else if(Right && sprite.x >= flixel.FlxG.width) sprite.set_x(0);
	if(Top && sprite.y + sprite.frameHeight <= 0) sprite.set_y(flixel.FlxG.height); else if(Bottom && sprite.y >= flixel.FlxG.height) sprite.set_y(0);
	return sprite;
}
flixel.util.FlxSpriteUtil.space = function(objects,startX,startY,horizontalSpacing,verticalSpacing,spaceFromBounds) {
	if(spaceFromBounds == null) spaceFromBounds = false;
	if(verticalSpacing == null) verticalSpacing = 0;
	if(horizontalSpacing == null) horizontalSpacing = 0;
	var prevWidth = 0;
	var prevHeight = 0;
	var _g1 = 0, _g = objects.length;
	while(_g1 < _g) {
		var i = _g1++;
		var object = objects[i];
		if(spaceFromBounds) {
			object.set_x(startX + prevWidth + i * horizontalSpacing);
			object.set_y(startY + prevHeight + i * verticalSpacing);
		} else {
			object.set_x(startX + i * horizontalSpacing);
			object.set_y(startY + i * verticalSpacing);
		}
	}
}
flixel.util.FlxSpriteUtil.screenCenter = function(object,xAxis,yAxis) {
	if(yAxis == null) yAxis = true;
	if(xAxis == null) xAxis = true;
	if(xAxis) object.set_x(flixel.FlxG.width / 2 - object.get_width() / 2);
	if(yAxis) object.set_y(flixel.FlxG.height / 2 - object.get_height() / 2);
	return object;
}
flixel.util.FlxSpriteUtil.drawLine = function(sprite,StartX,StartY,EndX,EndY,lineStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	flixel.util.FlxSpriteUtil.flashGfx.beginFill(0,flixel.util.FlxColorUtil.getAlphaFloat(0));
	flixel.util.FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel.util.FlxSpriteUtil.flashGfx.lineTo(EndX,EndY);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawRect = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	flixel.util.FlxSpriteUtil.flashGfx.drawRect(X,Y,Width,Height);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawRoundRect = function(sprite,X,Y,Width,Height,EllipseWidth,EllipseHeight,Color,lineStyle,fillStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	flixel.util.FlxSpriteUtil.flashGfx.drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawCircle = function(sprite,X,Y,Radius,Color,lineStyle,fillStyle,drawStyle) {
	if(Color == null) Color = -1;
	if(Radius == null) Radius = -1;
	if(Y == null) Y = -1;
	if(X == null) X = -1;
	if(X == -1 || Y == -1) {
		var midPoint = sprite.getGraphicMidpoint();
		if(X == -1) X = midPoint.x;
		if(Y == -1) Y = midPoint.y;
	}
	if(Radius < 1) {
		var minVal = Math.min(sprite.frameWidth,sprite.frameHeight);
		Radius = minVal / 2;
	}
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	flixel.util.FlxSpriteUtil.flashGfx.drawCircle(X,Y,Radius);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawEllipse = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	flixel.util.FlxSpriteUtil.flashGfx.drawEllipse(X,Y,Width,Height);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawTriangle = function(sprite,X,Y,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	flixel.util.FlxSpriteUtil.flashGfx.moveTo(X + Height / 2,Y);
	flixel.util.FlxSpriteUtil.flashGfx.lineTo(X + Height,Height + Y);
	flixel.util.FlxSpriteUtil.flashGfx.lineTo(X,Height + Y);
	flixel.util.FlxSpriteUtil.flashGfx.lineTo(X + Height / 2,Y);
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.drawPolygon = function(sprite,Vertices,Color,lineStyle,fillStyle,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
	var p = Vertices.shift();
	flixel.util.FlxSpriteUtil.flashGfx.moveTo(p.x,p.y);
	var _g = 0;
	while(_g < Vertices.length) {
		var p1 = Vertices[_g];
		++_g;
		flixel.util.FlxSpriteUtil.flashGfx.lineTo(p1.x,p1.y);
	}
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
}
flixel.util.FlxSpriteUtil.beginDraw = function(Color,lineStyle,fillStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.clear();
	flixel.util.FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel.util.FlxSpriteUtil.flashGfx.beginFill(flixel.util.FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel.util.FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel.util.FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel.util.FlxColorUtil.getAlphaFloat(Color));
}
flixel.util.FlxSpriteUtil.endDraw = function(sprite,drawStyle) {
	flixel.util.FlxSpriteUtil.flashGfx.endFill();
	flixel.util.FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
}
flixel.util.FlxSpriteUtil.updateSpriteGraphic = function(sprite,drawStyle) {
	if(drawStyle == null) drawStyle = { smoothing : false}; else if(drawStyle.smoothing == null) drawStyle.smoothing = false;
	sprite.get_pixels().draw(flixel.util.FlxSpriteUtil.flashGfxSprite,drawStyle.matrix,drawStyle.colorTransform,drawStyle.blendMode,drawStyle.clipRect,drawStyle.smoothing);
	sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
}
flixel.util.FlxSpriteUtil.setLineStyle = function(lineStyle) {
	if(lineStyle != null) {
		var color;
		var alpha;
		if(lineStyle.color == null) {
			color = 0;
			alpha = 1;
		} else {
			color = flixel.util.FlxColorUtil.ARGBtoRGB(lineStyle.color);
			alpha = flixel.util.FlxColorUtil.getAlphaFloat(lineStyle.color);
		}
		if(lineStyle.pixelHinting == null) lineStyle.pixelHinting = false;
		if(lineStyle.miterLimit == null) lineStyle.miterLimit = 3;
		flixel.util.FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color,alpha,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
}
flixel.util.FlxSpriteUtil.fill = function(sprite,Color) {
	sprite.get_pixels().fillRect(sprite.get_pixels().rect,Color);
	if(sprite.get_pixels() != sprite.framePixels) sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
}
flixel.util.FlxSpriteUtil.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	flixel.effects.FlxFlicker.flicker(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
	return Object;
}
flixel.util.FlxSpriteUtil.isFlickering = function(Object) {
	return flixel.effects.FlxFlicker.isFlickering(Object);
}
flixel.util.FlxSpriteUtil.stopFlickering = function(Object) {
	flixel.effects.FlxFlicker.stopFlickering(Object);
	return Object;
}
flixel.util.FlxSpriteUtil.fadeIn = function(sprite,Duration,ResetAlpha,OnComplete) {
	if(ResetAlpha) sprite.set_alpha(0);
	flixel.tweens.FlxTween.color(sprite,Duration,sprite.color,sprite.color,sprite.alpha,1,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
}
flixel.util.FlxSpriteUtil.fadeOut = function(sprite,Duration,FadeToBlack,OnComplete) {
	flixel.tweens.FlxTween.color(sprite,Duration,sprite.color,FadeToBlack?-16777216:sprite.color,sprite.alpha,0,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
}
flixel.util.FlxStringUtil = function() { }
$hxClasses["flixel.util.FlxStringUtil"] = flixel.util.FlxStringUtil;
flixel.util.FlxStringUtil.__name__ = ["flixel","util","FlxStringUtil"];
flixel.util.FlxStringUtil.formatTicks = function(StartTicks,EndTicks) {
	return Math.abs(EndTicks - StartTicks) / 1000 + "s";
}
flixel.util.FlxStringUtil.formatTime = function(Seconds,ShowMS) {
	if(ShowMS == null) ShowMS = false;
	var timeString = (Seconds / 60 | 0) + ":";
	var timeStringHelper = (Seconds | 0) % 60;
	if(timeStringHelper < 10) timeString += "0";
	timeString += timeStringHelper;
	if(ShowMS) {
		timeString += ".";
		timeStringHelper = (Seconds - (Seconds | 0)) * 100 | 0;
		if(timeStringHelper < 10) timeString += "0";
		timeString += timeStringHelper;
	}
	return timeString;
}
flixel.util.FlxStringUtil.formatArray = function(AnyArray) {
	var string = "";
	if(AnyArray != null && AnyArray.length > 0) {
		string = Std.string(AnyArray[0]);
		var i = 1;
		var l = AnyArray.length;
		while(i < l) string += ", " + Std.string(AnyArray[i++]);
	}
	return string;
}
flixel.util.FlxStringUtil.formatStringMap = function(AnyMap) {
	var string = "";
	var $it0 = AnyMap.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		string += Std.string(key);
		string += ", ";
	}
	return string.substring(0,string.length - 2);
}
flixel.util.FlxStringUtil.formatMoney = function(Amount,ShowDecimal,EnglishStyle) {
	if(EnglishStyle == null) EnglishStyle = true;
	if(ShowDecimal == null) ShowDecimal = true;
	var helper;
	var amount = Math.floor(Amount);
	var string = "";
	var comma = "";
	var zeroes = "";
	while(amount > 0) {
		if(string.length > 0 && comma.length <= 0) {
			if(EnglishStyle) comma = ","; else comma = ".";
		}
		zeroes = "";
		helper = amount - Math.floor(amount / 1000) * 1000;
		amount = Math.floor(amount / 1000);
		if(amount > 0) {
			if(helper < 100) zeroes += "0";
			if(helper < 10) zeroes += "0";
		}
		string = zeroes + helper + comma + string;
	}
	if(ShowDecimal) {
		amount = (Amount * 100 | 0) - (Amount | 0) * 100;
		string += (EnglishStyle?".":",") + amount;
		if(amount < 10) string += "0";
	}
	return string;
}
flixel.util.FlxStringUtil.filterDigits = function(Input) {
	var output = new StringBuf();
	var _g1 = 0, _g = Input.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = HxOverrides.cca(Input,i);
		if(c >= 48 && c <= 57) output.b += String.fromCharCode(c);
	}
	return output.b;
}
flixel.util.FlxStringUtil.htmlFormat = function(Text,Size,Color,Bold,Italic,Underlined) {
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Color == null) Color = "FFFFFF";
	if(Size == null) Size = 12;
	var prefix = "<font size='" + Size + "' color='#" + Color + "'>";
	var suffix = "</font>";
	if(Bold) {
		prefix = "<b>" + prefix;
		suffix = suffix + "</b>";
	}
	if(Italic) {
		prefix = "<i>" + prefix;
		suffix = suffix + "</i>";
	}
	if(Underlined) {
		prefix = "<u>" + prefix;
		suffix = suffix + "</u>";
	}
	return prefix + Text + suffix;
}
flixel.util.FlxStringUtil.getDomain = function(url) {
	var urlStart = url.indexOf("://") + 3;
	var urlEnd = url.indexOf("/",urlStart);
	var home = url.substring(urlStart,urlEnd);
	var LastDot = home.lastIndexOf(".") - 1;
	var domEnd = home.lastIndexOf(".",LastDot) + 1;
	home = home.substring(domEnd,home.length);
	home = home.split(":")[0];
	return home == ""?"local":home;
}
flixel.util.FlxStringUtil.sameClassName = function(Obj1,Obj2,Simple) {
	if(Simple == null) Simple = true;
	return (function($this) {
		var $r;
		var cl;
		if(js.Boot.__instanceof(Obj1,Class)) cl = Obj1; else cl = Type.getClass(Obj1);
		var s = Type.getClassName(cl);
		if(s != null) {
			s = StringTools.replace(s,"::",".");
			if(Simple) s = HxOverrides.substr(s,s.lastIndexOf(".") + 1,null);
		}
		$r = s;
		return $r;
	}(this)) == (function($this) {
		var $r;
		var cl;
		if(js.Boot.__instanceof(Obj2,Class)) cl = Obj2; else cl = Type.getClass(Obj2);
		var s = Type.getClassName(cl);
		if(s != null) {
			s = StringTools.replace(s,"::",".");
			if(Simple) s = HxOverrides.substr(s,s.lastIndexOf(".") + 1,null);
		}
		$r = s;
		return $r;
	}(this));
}
flixel.util.FlxStringUtil.toIntArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var iArray = new Array();
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			iArray.push(Std.parseInt(str));
		}
		return iArray;
	}
	return null;
}
flixel.util.FlxStringUtil.toFloatArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var fArray = new Array();
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			fArray.push(Std.parseFloat(str));
		}
		return fArray;
	}
	return null;
}
flixel.util.FlxStringUtil.arrayToCSV = function(Data,Width,Invert) {
	if(Invert == null) Invert = false;
	var row = 0;
	var column;
	var csv = "";
	var Height = Data.length / Width | 0;
	var index;
	var offset = 0;
	while(row < Height) {
		column = 0;
		while(column < Width) {
			index = Data[offset];
			if(Invert) {
				if(index == 0) index = 1; else if(index == 1) index = 0;
			}
			if(column == 0) {
				if(row == 0) csv += index; else csv += "\n" + index;
			} else csv += ", " + index;
			column++;
			offset++;
		}
		row++;
	}
	return csv;
}
flixel.util.FlxStringUtil.bitmapToCSV = function(Bitmap,Invert,Scale,ColorMap) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	if(Scale < 1) Scale = 1;
	if(Scale > 1) {
		var bd = Bitmap;
		Bitmap = new flash.display.BitmapData((Bitmap.___textureBuffer != null?Bitmap.___textureBuffer.width:0) * Scale,(Bitmap.___textureBuffer != null?Bitmap.___textureBuffer.height:0) * Scale);
		var bdW = bd.___textureBuffer != null?bd.___textureBuffer.width:0;
		var bdH = bd.___textureBuffer != null?bd.___textureBuffer.height:0;
		var pCol = 0;
		var _g = 0;
		while(_g < bdW) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < bdH) {
				var j = _g1++;
				pCol = bd.getPixel(i,j);
				var _g2 = 0;
				while(_g2 < Scale) {
					var k = _g2++;
					var _g3 = 0;
					while(_g3 < Scale) {
						var m = _g3++;
						Bitmap.setPixel(i * Scale + k,j * Scale + m,pCol);
					}
				}
			}
		}
	}
	var row = 0;
	var column;
	var pixel;
	var csv = "";
	var bitmapWidth = Bitmap.___textureBuffer != null?Bitmap.___textureBuffer.width:0;
	var bitmapHeight = Bitmap.___textureBuffer != null?Bitmap.___textureBuffer.height:0;
	while(row < bitmapHeight) {
		column = 0;
		while(column < bitmapWidth) {
			pixel = Bitmap.getPixel(column,row);
			if(ColorMap != null) pixel = flixel.util.FlxArrayUtil.indexOf_Int(ColorMap,pixel); else if(Invert && pixel > 0 || !Invert && pixel == 0) pixel = 1; else pixel = 0;
			if(column == 0) {
				if(row == 0) csv += pixel; else csv += "\n" + pixel;
			} else csv += ", " + pixel;
			column++;
		}
		row++;
	}
	return csv;
}
flixel.util.FlxStringUtil.imageToCSV = function(ImageFile,Invert,Scale) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	var tempBitmapData;
	if(js.Boot.__instanceof(ImageFile,String)) tempBitmapData = flixel.system.FlxAssets.getBitmapData(ImageFile); else tempBitmapData = Type.createInstance(ImageFile,[]).bitmapData;
	return flixel.util.FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale);
}
flixel.util.FlxStringUtil.getDebugString = function(LabelValuePairs) {
	var output = "(";
	var _g = 0;
	while(_g < LabelValuePairs.length) {
		var pair = LabelValuePairs[_g];
		++_g;
		output += pair.label + ": ";
		var value = pair.value;
		if(js.Boot.__instanceof(value,Float)) value = flixel.util.FlxMath.roundDecimal(value,flixel.FlxG["debugger"].precision);
		output += Std.string(value) + " | ";
	}
	output = StringTools.trim(HxOverrides.substr(output,0,output.length - 2));
	return output + ")";
}
flixel.util.FlxVelocity = function() { }
$hxClasses["flixel.util.FlxVelocity"] = flixel.util.FlxVelocity;
flixel.util.FlxVelocity.__name__ = ["flixel","util","FlxVelocity"];
flixel.util.FlxVelocity.moveTowardsObject = function(Source,Dest,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel.util.FlxAngle.angleBetween(Source,Dest,null);
	if(MaxTime > 0) {
		var d = flixel.util.FlxMath.distanceBetween(Source,Dest);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
}
flixel.util.FlxVelocity.accelerateTowardsObject = function(Source,Dest,Speed,MaxXSpeed,MaxYSpeed) {
	var a = flixel.util.FlxAngle.angleBetween(Source,Dest,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Speed | 0);
	Source.acceleration.set_y(Math.sin(a) * Speed | 0);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
}
flixel.util.FlxVelocity.moveTowardsMouse = function(Source,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel.util.FlxAngle.angleBetweenMouse(Source);
	if(MaxTime > 0) {
		var d = flixel.util.FlxMath.distanceToMouse(Source);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
}
flixel.util.FlxVelocity.moveTowardsTouch = function(Source,Touch,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel.util.FlxAngle.angleBetweenTouch(Source,Touch,null);
	if(MaxTime > 0) {
		var d = flixel.util.FlxMath.distanceToTouch(Source,Touch);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
}
flixel.util.FlxVelocity.accelerateTowardsMouse = function(Source,Speed,MaxXSpeed,MaxYSpeed) {
	var a = flixel.util.FlxAngle.angleBetweenMouse(Source);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Speed | 0);
	Source.acceleration.set_y(Math.sin(a) * Speed | 0);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
}
flixel.util.FlxVelocity.accelerateTowardsTouch = function(Source,Touch,Speed,MaxXSpeed,MaxYSpeed) {
	var a = flixel.util.FlxAngle.angleBetweenTouch(Source,Touch,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Speed | 0);
	Source.acceleration.set_y(Math.sin(a) * Speed | 0);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
}
flixel.util.FlxVelocity.moveTowardsPoint = function(Source,Target,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel.util.FlxAngle.angleBetweenPoint(Source,Target);
	if(MaxTime > 0) {
		var d = flixel.util.FlxMath.distanceToPoint(Source,Target);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
}
flixel.util.FlxVelocity.accelerateTowardsPoint = function(Source,Target,Speed,MaxXSpeed,MaxYSpeed) {
	var a = flixel.util.FlxAngle.angleBetweenPoint(Source,Target);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Speed | 0);
	Source.acceleration.set_y(Math.sin(a) * Speed | 0);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
}
flixel.util.FlxVelocity.velocityFromAngle = function(Angle,Speed) {
	var a = Angle * flixel.util.FlxAngle.TO_RAD;
	var result = new flixel.util.FlxPoint();
	result.set_x(Math.cos(a) * Speed | 0);
	result.set_y(Math.sin(a) * Speed | 0);
	return result;
}
flixel.util.FlxVelocity.velocityFromFacing = function(Parent,Speed) {
	var a = 0;
	if(Parent.facing == 1) a = 180 * flixel.util.FlxAngle.TO_RAD; else if(Parent.facing == 16) a = 0 * flixel.util.FlxAngle.TO_RAD; else if(Parent.facing == 256) a = -90 * flixel.util.FlxAngle.TO_RAD; else if(Parent.facing == 4096) a = 90 * flixel.util.FlxAngle.TO_RAD;
	var result = new flixel.util.FlxPoint();
	result.set_x(Math.cos(a) * Speed | 0);
	result.set_y(Math.sin(a) * Speed | 0);
	return result;
}
flixel.util.FlxVelocity.computeVelocity = function(Velocity,Acceleration,Drag,Max) {
	if(Acceleration != 0) Velocity += Acceleration * flixel.FlxG.elapsed; else if(Drag != 0) {
		var drag = Drag * flixel.FlxG.elapsed;
		if(Velocity - drag > 0) Velocity = Velocity - drag; else if(Velocity + drag < 0) Velocity += drag; else Velocity = 0;
	}
	if(Velocity != 0 && Max != 0) {
		if(Velocity > Max) Velocity = Max; else if(Velocity < -Max) Velocity = -Max;
	}
	return Velocity;
}
flixel.util.loaders = {}
flixel.util.loaders.CachedGraphics = function(Key,Bitmap,Persist) {
	if(Persist == null) Persist = false;
	this.useCount = 0;
	this.isDumped = false;
	this.destroyOnNoUse = false;
	this.persist = false;
	this.key = Key;
	this.bitmap = Bitmap;
	this.persist = Persist;
};
$hxClasses["flixel.util.loaders.CachedGraphics"] = flixel.util.loaders.CachedGraphics;
flixel.util.loaders.CachedGraphics.__name__ = ["flixel","util","loaders","CachedGraphics"];
flixel.util.loaders.CachedGraphics.prototype = {
	set_destroyOnNoUse: function(Value) {
		if(Value && this.useCount == 0 && this.key != null && !this.persist) flixel.FlxG.bitmap.remove(this.key);
		return this.destroyOnNoUse = Value;
	}
	,set_useCount: function(Value) {
		if(Value <= 0 && this.destroyOnNoUse && !this.persist) flixel.FlxG.bitmap.remove(this.key);
		return this.useCount = Value;
	}
	,get_canBeDumped: function() {
		return this.assetsClass != null || this.assetsKey != null;
	}
	,getBitmapFromSystem: function() {
		var newBitmap = null;
		if(this.assetsClass != null) newBitmap = Type.createInstance(js.Boot.__cast(this.assetsClass , Class),[]); else if(this.assetsKey != null) newBitmap = openfl.Assets.getBitmapData(this.assetsKey,false);
		return newBitmap;
	}
	,get_tilesheet: function() {
		if(this._tilesheet == null) {
			if(this.isDumped) this.onContext();
			this._tilesheet = new flixel.system.layer.TileSheetData(this.bitmap);
		}
		return this._tilesheet;
	}
	,destroy: function() {
		if(this.bitmap != null) {
			this.bitmap.dispose();
			this.bitmap = null;
		}
		this.data = flixel.FlxG.safeDestroy(this.data);
		this._tilesheet = flixel.FlxG.safeDestroy(this._tilesheet);
		this.key = null;
		this.assetsKey = null;
		this.assetsClass = null;
	}
	,getRegionForFrame: function(FrameName) {
		var region = new flixel.util.loaders.TextureRegion(this);
		var frame = this.get_tilesheet().flxFrames.get(FrameName);
		if(frame != null) {
			region.region.startX = frame.frame.x | 0;
			region.region.startY = frame.frame.y | 0;
			region.region.width = frame.frame.width | 0;
			region.region.height = frame.frame.height | 0;
		}
		return region;
	}
	,onContext: function() {
		if(this.isDumped) {
			this.undump();
			this.dump();
		}
	}
	,undump: function() {
	}
	,dump: function() {
	}
	,__class__: flixel.util.loaders.CachedGraphics
	,__properties__: {set_destroyOnNoUse:"set_destroyOnNoUse",get_canBeDumped:"get_canBeDumped",get_tilesheet:"get_tilesheet",set_useCount:"set_useCount"}
}
flixel.util.loaders.TextureAtlasFrame = function() {
	this.offset = null;
	this.sourceSize = null;
	this.trimmed = false;
	this.rotated = false;
	this.frame = null;
	this.name = null;
};
$hxClasses["flixel.util.loaders.TextureAtlasFrame"] = flixel.util.loaders.TextureAtlasFrame;
flixel.util.loaders.TextureAtlasFrame.__name__ = ["flixel","util","loaders","TextureAtlasFrame"];
flixel.util.loaders.TextureAtlasFrame.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.util.loaders.TextureAtlasFrame.prototype = {
	destroy: function() {
		this.name = null;
		this.frame = null;
		this.sourceSize = null;
		this.offset = null;
	}
	,__class__: flixel.util.loaders.TextureAtlasFrame
}
flixel.util.loaders.TexturePackerData = function(Description,AssetName) {
	this.assetName = AssetName;
	this.description = Description;
	this.frames = new Array();
	this.parseData();
};
$hxClasses["flixel.util.loaders.TexturePackerData"] = flixel.util.loaders.TexturePackerData;
flixel.util.loaders.TexturePackerData.__name__ = ["flixel","util","loaders","TexturePackerData"];
flixel.util.loaders.TexturePackerData.__interfaces__ = [flixel.interfaces.IFlxDestroyable];
flixel.util.loaders.TexturePackerData.prototype = {
	destroy: function() {
		var _g = 0, _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame = flixel.FlxG.safeDestroy(frame);
		}
		this.frames = null;
		this.assetName = null;
		this.asset = null;
	}
	,parseData: function() {
		if(this.frames.length != 0) return;
		if(this.assetName == null || this.description == null) return;
		this.asset = flixel.FlxG.bitmap.add(this.assetName).bitmap;
		var data = haxe.Json.parse(openfl.Assets.getText(this.description));
		var _g = 0, _g1 = Lambda.array(data.frames);
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var texFrame = new flixel.util.loaders.TextureAtlasFrame();
			texFrame.trimmed = frame.trimmed;
			texFrame.rotated = frame.rotated;
			texFrame.name = frame.filename;
			texFrame.sourceSize = new flixel.util.FlxPoint(frame.sourceSize.w,frame.sourceSize.h);
			texFrame.offset = new flixel.util.FlxPoint(0,0);
			texFrame.offset.set(frame.spriteSourceSize.x,frame.spriteSourceSize.y);
			if(frame.rotated) texFrame.frame = new flash.geom.Rectangle(frame.frame.x,frame.frame.y,frame.frame.h,frame.frame.w); else texFrame.frame = new flash.geom.Rectangle(frame.frame.x,frame.frame.y,frame.frame.w,frame.frame.h);
			this.frames.push(texFrame);
		}
	}
	,__class__: flixel.util.loaders.TexturePackerData
}
flixel.util.loaders.TextureRegion = function(data,startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.data = data;
	if(width <= 0) width = data.bitmap.get_width();
	if(height <= 0) height = data.bitmap.get_height();
	this.region = new flixel.system.layer.Region(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height);
};
$hxClasses["flixel.util.loaders.TextureRegion"] = flixel.util.loaders.TextureRegion;
flixel.util.loaders.TextureRegion.__name__ = ["flixel","util","loaders","TextureRegion"];
flixel.util.loaders.TextureRegion.prototype = {
	destroy: function() {
		this.data = null;
		this.region = null;
	}
	,clone: function() {
		return new flixel.util.loaders.TextureRegion(this.data,this.region.startX,this.region.startY,this.region.tileWidth,this.region.tileHeight,this.region.spacingX,this.region.spacingY,this.region.width,this.region.height);
	}
	,__class__: flixel.util.loaders.TextureRegion
}
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","Lambda"] }
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Lambda = function(v) { var $x = ["Lambda",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.CallStack = function() { }
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.exceptionStack = function() {
	return [];
}
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
}
haxe.CallStack.itemToString = function(b,s) {
	var $e = (s);
	switch( $e[1] ) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = $e[2];
		b.b += "module ";
		b.b += Std.string(m);
		break;
	case 2:
		var line = $e[4], file = $e[3], s1 = $e[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += Std.string(file);
		b.b += " line ";
		b.b += Std.string(line);
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = $e[3], cname = $e[2];
		b.b += Std.string(cname);
		b.b += ".";
		b.b += Std.string(meth);
		break;
	case 4:
		var n = $e[2];
		b.b += "local function #";
		b.b += Std.string(n);
		break;
	}
}
haxe.Json = function() {
};
$hxClasses["haxe.Json"] = haxe.Json;
haxe.Json.__name__ = ["haxe","Json"];
haxe.Json.parse = function(text) {
	return new haxe.Json().doParse(text);
}
haxe.Json.prototype = {
	parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45, digit = !minus, zero = c == 48;
		var point = false, e = false, pm = false, end = false;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 48:
				if(zero && !point) this.invalidNumber(start);
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) this.invalidNumber(start);
				if(minus) minus = false;
				digit = true;
				zero = false;
				break;
			case 46:
				if(minus || point) this.invalidNumber(start);
				digit = false;
				point = true;
				break;
			case 101:case 69:
				if(minus || zero || e) this.invalidNumber(start);
				digit = false;
				e = true;
				break;
			case 43:case 45:
				if(!e || pm) this.invalidNumber(start);
				digit = false;
				pm = true;
				break;
			default:
				if(!digit) this.invalidNumber(start);
				this.pos--;
				end = true;
			}
			if(end) break;
		}
		var f = Std.parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
		var i = f | 0;
		return i == f?i:f;
	}
	,invalidNumber: function(start) {
		throw "Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start);
	}
	,parseString: function() {
		var start = this.pos;
		var buf = new StringBuf();
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) break;
			if(c == 92) {
				buf.addSub(this.str,start,this.pos - start - 1);
				c = this.str.charCodeAt(this.pos++);
				switch(c) {
				case 114:
					buf.b += "\r";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 98:
					buf.b += "";
					break;
				case 102:
					buf.b += "";
					break;
				case 47:case 92:case 34:
					buf.b += String.fromCharCode(c);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw "Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1);
				}
				start = this.pos;
			} else if(c != c) throw "Unclosed string";
		}
		buf.addSub(this.str,start,this.pos - start - 1);
		return buf.b;
	}
	,parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 32:case 13:case 10:case 9:
				break;
			case 123:
				var obj = { }, field = null, comma = null;
				while(true) {
					var c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 32:case 13:case 10:case 9:
						break;
					case 125:
						if(field != null || comma == false) this.invalidChar();
						return obj;
					case 58:
						if(field == null) this.invalidChar();
						obj[field] = this.parseRec();
						field = null;
						comma = true;
						break;
					case 44:
						if(comma) comma = false; else this.invalidChar();
						break;
					case 34:
						if(comma) this.invalidChar();
						field = this.parseString();
						break;
					default:
						this.invalidChar();
					}
				}
				break;
			case 91:
				var arr = [], comma = null;
				while(true) {
					var c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 32:case 13:case 10:case 9:
						break;
					case 93:
						if(comma == false) this.invalidChar();
						return arr;
					case 44:
						if(comma) comma = false; else this.invalidChar();
						break;
					default:
						if(comma) this.invalidChar();
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 116:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return true;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save;
					this.invalidChar();
				}
				return null;
			case 34:
				return this.parseString();
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 45:
				return this.parseNumber(c);
			default:
				this.invalidChar();
			}
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw "Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos;
	}
	,doParse: function(str) {
		this.str = str;
		this.pos = 0;
		return this.parseRec();
	}
	,__class__: haxe.Json
}
haxe.Resource = function() { }
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.listNames = function() {
	var names = new Array();
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		names.push(x.name);
	}
	return names;
}
haxe.Resource.getString = function(name) {
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.Unserializer.run(x.data);
			return b.toString();
		}
	}
	return null;
}
haxe.Resource.getBytes = function(name) {
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe.io.Bytes.ofString(x.str);
			return haxe.Unserializer.run(x.data);
		}
	}
	return null;
}
haxe.Serializer = function() {
	this.buf = new StringBuf();
	this.cache = new Array();
	this.useCache = haxe.Serializer.USE_CACHE;
	this.useEnumIndex = haxe.Serializer.USE_ENUM_INDEX;
	this.shash = new haxe.ds.StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe.Serializer;
haxe.Serializer.__name__ = ["haxe","Serializer"];
haxe.Serializer.run = function(v) {
	var s = new haxe.Serializer();
	s.serialize(v);
	return s.toString();
}
haxe.Serializer.prototype = {
	serialize: function(v) {
		var _g = Type["typeof"](v);
		var $e = (_g);
		switch( $e[1] ) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			if(v == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += Std.string(v);
			break;
		case 2:
			if(Math.isNaN(v)) this.buf.b += "k"; else if(!Math.isFinite(v)) this.buf.b += Std.string(v < 0?"m":"p"); else {
				this.buf.b += "d";
				this.buf.b += Std.string(v);
			}
			break;
		case 3:
			this.buf.b += Std.string(v?"t":"f");
			break;
		case 6:
			var c = $e[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) return;
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v.length;
				var _g1 = 0;
				while(_g1 < l) {
					var i = _g1++;
					if(v[i] == null) ucount++; else {
						if(ucount > 0) {
							if(ucount == 1) this.buf.b += "n"; else {
								this.buf.b += "u";
								this.buf.b += Std.string(ucount);
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) this.buf.b += "n"; else {
						this.buf.b += "u";
						this.buf.b += Std.string(ucount);
					}
				}
				this.buf.b += "h";
				break;
			case List:
				this.buf.b += "l";
				var v1 = v;
				var $it0 = v1.iterator();
				while( $it0.hasNext() ) {
					var i = $it0.next();
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(HxOverrides.dateStr(d));
				break;
			case haxe.ds.StringMap:
				this.buf.b += "b";
				var v1 = v;
				var $it1 = v1.keys();
				while( $it1.hasNext() ) {
					var k = $it1.next();
					this.serializeString(k);
					this.serialize(v1.get(k));
				}
				this.buf.b += "h";
				break;
			case haxe.ds.IntMap:
				this.buf.b += "q";
				var v1 = v;
				var $it2 = v1.keys();
				while( $it2.hasNext() ) {
					var k = $it2.next();
					this.buf.b += ":";
					this.buf.b += Std.string(k);
					this.serialize(v1.get(k));
				}
				this.buf.b += "h";
				break;
			case haxe.ds.ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var $it3 = v1.keys();
				while( $it3.hasNext() ) {
					var k = $it3.next();
					var id = Reflect.field(k,"__id__");
					Reflect.deleteField(k,"__id__");
					this.serialize(k);
					k.__id__ = id;
					this.serialize(v1.h[k.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe.io.Bytes:
				var v1 = v;
				var i = 0;
				var max = v1.length - 2;
				var charsBuf = new StringBuf();
				var b64 = haxe.Serializer.BASE64;
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					charsBuf.b += Std.string(b64.charAt(b1 >> 2));
					charsBuf.b += Std.string(b64.charAt((b1 << 4 | b2 >> 4) & 63));
					charsBuf.b += Std.string(b64.charAt((b2 << 2 | b3 >> 6) & 63));
					charsBuf.b += Std.string(b64.charAt(b3 & 63));
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					charsBuf.b += Std.string(b64.charAt(b1 >> 2));
					charsBuf.b += Std.string(b64.charAt((b1 << 4 | b2 >> 4) & 63));
					charsBuf.b += Std.string(b64.charAt(b2 << 2 & 63));
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					charsBuf.b += Std.string(b64.charAt(b1 >> 2));
					charsBuf.b += Std.string(b64.charAt(b1 << 4 & 63));
				}
				var chars = charsBuf.b;
				this.buf.b += "s";
				this.buf.b += Std.string(chars.length);
				this.buf.b += ":";
				this.buf.b += Std.string(chars);
				break;
			default:
				this.cache.pop();
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					this.cache.push(v);
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					this.cache.push(v);
					this.serializeFields(v);
				}
			}
			break;
		case 4:
			if(this.useCache && this.serializeRef(v)) return;
			this.buf.b += "o";
			this.serializeFields(v);
			break;
		case 7:
			var e = $e[2];
			if(this.useCache && this.serializeRef(v)) return;
			this.cache.pop();
			this.buf.b += Std.string(this.useEnumIndex?"j":"w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else this.serializeString(v[0]);
			this.buf.b += ":";
			var l = v.length;
			this.buf.b += Std.string(l - 2);
			var _g1 = 2;
			while(_g1 < l) {
				var i = _g1++;
				this.serialize(v[i]);
			}
			this.cache.push(v);
			break;
		case 5:
			throw "Cannot serialize function";
			break;
		default:
			throw "Cannot serialize " + Std.string(v);
		}
	}
	,serializeFields: function(v) {
		var _g = 0, _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0, _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += Std.string(i);
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += Std.string(x);
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = StringTools.urlEncode(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += Std.string(s);
	}
	,toString: function() {
		return this.buf.b;
	}
	,__class__: haxe.Serializer
}
haxe._Template = {}
haxe._Template.TemplateExpr = $hxClasses["haxe._Template.TemplateExpr"] = { __ename__ : ["haxe","_Template","TemplateExpr"], __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"] }
haxe._Template.TemplateExpr.OpVar = function(v) { var $x = ["OpVar",0,v]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpExpr = function(expr) { var $x = ["OpExpr",1,expr]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpIf = function(expr,eif,eelse) { var $x = ["OpIf",2,expr,eif,eelse]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpStr = function(str) { var $x = ["OpStr",3,str]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpBlock = function(l) { var $x = ["OpBlock",4,l]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpForeach = function(expr,loop) { var $x = ["OpForeach",5,expr,loop]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe._Template.TemplateExpr.OpMacro = function(name,params) { var $x = ["OpMacro",6,name,params]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; }
haxe.Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) throw "Unexpected '" + Std.string(tokens.first().s) + "'";
};
$hxClasses["haxe.Template"] = haxe.Template;
haxe.Template.__name__ = ["haxe","Template"];
haxe.Template.prototype = {
	run: function(e) {
		var $e = (e);
		switch( $e[1] ) {
		case 0:
			var v = $e[2];
			this.buf.b += Std.string(Std.string(this.resolve(v)));
			break;
		case 1:
			var e1 = $e[2];
			this.buf.b += Std.string(Std.string(e1()));
			break;
		case 2:
			var eelse = $e[4], eif = $e[3], e1 = $e[2];
			var v = e1();
			if(v == null || v == false) {
				if(eelse != null) this.run(eelse);
			} else this.run(eif);
			break;
		case 3:
			var str = $e[2];
			this.buf.b += Std.string(str);
			break;
		case 4:
			var l = $e[2];
			var $it0 = l.iterator();
			while( $it0.hasNext() ) {
				var e1 = $it0.next();
				this.run(e1);
			}
			break;
		case 5:
			var loop = $e[3], e1 = $e[2];
			var v = e1();
			try {
				var x = $iterator(v)();
				if(x.hasNext == null) throw null;
				v = x;
			} catch( e2 ) {
				try {
					if(v.hasNext == null) throw null;
				} catch( e3 ) {
					throw "Cannot iter on " + Std.string(v);
				}
			}
			this.stack.push(this.context);
			var v1 = v;
			while( v1.hasNext() ) {
				var ctx = v1.next();
				this.context = ctx;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = $e[3], m = $e[2];
			var v = Reflect.field(this.macros,m);
			var pl = new Array();
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var $it1 = params.iterator();
			while( $it1.hasNext() ) {
				var p = $it1.next();
				var $e = (p);
				switch( $e[1] ) {
				case 0:
					var v1 = $e[2];
					pl.push(this.resolve(v1));
					break;
				default:
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				this.buf.b += Std.string(Std.string(v.apply(this.macros,pl)));
			} catch( e1 ) {
				var plstr = (function($this) {
					var $r;
					try {
						$r = pl.join(",");
					} catch( e2 ) {
						$r = "???";
					}
					return $r;
				}(this));
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e1) + ")";
				throw msg;
			}
			break;
		}
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) throw "<eof>";
		if(p.s) return this.makeConst(p.p);
		switch(p.p) {
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) throw p1.p;
			if(p1.p == ")") return e1;
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") throw p2.p;
			return (function($this) {
				var $r;
				switch(p1.p) {
				case "+":
					$r = function() {
						return e1() + e2();
					};
					break;
				case "-":
					$r = function() {
						return e1() - e2();
					};
					break;
				case "*":
					$r = function() {
						return e1() * e2();
					};
					break;
				case "/":
					$r = function() {
						return e1() / e2();
					};
					break;
				case ">":
					$r = function() {
						return e1() > e2();
					};
					break;
				case "<":
					$r = function() {
						return e1() < e2();
					};
					break;
				case ">=":
					$r = function() {
						return e1() >= e2();
					};
					break;
				case "<=":
					$r = function() {
						return e1() <= e2();
					};
					break;
				case "==":
					$r = function() {
						return e1() == e2();
					};
					break;
				case "!=":
					$r = function() {
						return e1() != e2();
					};
					break;
				case "&&":
					$r = function() {
						return e1() && e2();
					};
					break;
				case "||":
					$r = function() {
						return e1() || e2();
					};
					break;
				default:
					$r = (function($this) {
						var $r;
						throw "Unknown operation " + p1.p;
						return $r;
					}($this));
				}
				return $r;
			}(this));
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				return v == null || v == false;
			};
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw p.p;
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") return e;
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) throw field.p;
		var f = field.p;
		haxe.Template.expr_trim.match(f);
		f = haxe.Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeConst: function(v) {
		haxe.Template.expr_trim.match(v);
		v = haxe.Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe.Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe.Template.expr_float.match(v)) {
			var f = Std.parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,parseExpr: function(data) {
		var l = new List();
		var expr = data;
		while(haxe.Template.expr_splitter.match(data)) {
			var p = haxe.Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			var p1 = haxe.Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe.Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) l.add({ p : data, s : true});
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) throw l.first().p;
		} catch( s ) {
			if( js.Boot.__instanceof(s,String) ) {
				throw "Unexpected '" + s + "' in " + expr;
			} else throw(s);
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw "Error : " + Std.string(exc) + " in " + expr;
			}
		};
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) return haxe._Template.TemplateExpr.OpStr(p);
		if(t.l != null) {
			var pe = new List();
			var _g = 0, _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe._Template.TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) throw "Unclosed 'if'";
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") throw "Unclosed 'else'";
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe._Template.TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t1 = tokens.pop();
			if(t1 == null || t1.p != "end") throw "Unclosed 'foreach'";
			return haxe._Template.TemplateExpr.OpForeach(e,efor);
		}
		if(haxe.Template.expr_splitter.match(p)) return haxe._Template.TemplateExpr.OpExpr(this.parseExpr(p));
		return haxe._Template.TemplateExpr.OpVar(p);
	}
	,parseBlock: function(tokens) {
		var l = new List();
		while(true) {
			var t = tokens.first();
			if(t == null) break;
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) break;
			l.add(this.parse(tokens));
		}
		if(l.length == 1) return l.first();
		return haxe._Template.TemplateExpr.OpBlock(l);
	}
	,parseTokens: function(data) {
		var tokens = new List();
		while(haxe.Template.splitter.match(data)) {
			var p = haxe.Template.splitter.matchedPos();
			if(p.pos > 0) tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe.Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			while(npar > 0) {
				var c = HxOverrides.cca(data,parp);
				if(c == 40) npar++; else if(c == 41) npar--; else if(c == null) throw "Unclosed macro parenthesis";
				parp++;
			}
			var params = HxOverrides.substr(data,p.pos + p.len,parp - (p.pos + p.len) - 1).split(",");
			tokens.add({ p : haxe.Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) tokens.add({ p : data, s : true, l : null});
		return tokens;
	}
	,resolve: function(v) {
		if(Reflect.hasField(this.context,v)) return Reflect.field(this.context,v);
		var $it0 = this.stack.iterator();
		while( $it0.hasNext() ) {
			var ctx = $it0.next();
			if(Reflect.hasField(ctx,v)) return Reflect.field(ctx,v);
		}
		if(v == "__current__") return this.context;
		return Reflect.field(haxe.Template.globals,v);
	}
	,execute: function(context,macros) {
		this.macros = macros == null?{ }:macros;
		this.context = context;
		this.stack = new List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,__class__: haxe.Template
}
haxe.Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0, _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
}
haxe.Unserializer.run = function(v) {
	return new haxe.Unserializer(v).unserialize();
}
haxe.Unserializer.prototype = {
	unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			var p1 = this.pos;
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = StringTools.urlDecode(s);
			this.scache.push(s);
			return s;
		case 107:
			return Math.NaN;
		case 109:
			return Math.NEGATIVE_INFINITY;
		case 112:
			return Math.POSITIVE_INFINITY;
		case 97:
			var buf = this.buf;
			var a = new Array();
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) throw "Invalid reference";
			return this.cache[n];
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) throw "Invalid string reference";
			return this.scache[n];
		case 120:
			throw this.unserialize();
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o = Type.createEmptyInstance(cl);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) throw "Enum not found " + name;
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) throw "Enum not found " + name;
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl)[index];
			if(tag == null) throw "Unknown enum index " + name + "@" + index;
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe.ds.StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h = new haxe.ds.IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				h.set(i,this.unserialize());
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) throw "Invalid IntMap format";
			return h;
		case 77:
			var h = new haxe.ds.ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 118:
			var d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
			this.cache.push(d);
			this.pos += 19;
			return d;
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid bytes length";
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i + (len - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o = Type.createEmptyInstance(cl);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) throw "Invalid custom data";
			return o;
		default:
		}
		this.pos--;
		throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) throw "Invalid enum format";
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = new Array();
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw "Invalid object";
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!js.Boot.__instanceof(k,String)) throw "Invalid object key";
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_) {
			return null;
		}}; else this.resolver = r;
	}
	,__class__: haxe.Unserializer
}
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,__class__: haxe.ds.IntMap
}
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,remove: function(key) {
		var id = key.__id__;
		if(!this.h.hasOwnProperty(id)) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,set: function(key,value) {
		var id = key.__id__ != null?key.__id__:key.__id__ = ++haxe.ds.ObjectMap.count;
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe.ds.ObjectMap
}
haxe.io = {}
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
}
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var _g1 = 0, _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = s.charCodeAt(i);
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
}
haxe.io.Bytes.prototype = {
	toString: function() {
		return this.readString(0,this.length);
	}
	,readString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c2 = b[i++];
				var c3 = b[i++];
				s += fcc((c & 15) << 18 | (c2 & 127) << 12 | c3 << 6 & 127 | b[i++] & 127);
			}
		}
		return s;
	}
	,__class__: haxe.io.Bytes
}
haxe.io.Eof = function() { }
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
}
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] }
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; }
openfl.AssetCache = function() {
	this.enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.prototype = {
	clear: function() {
		this.bitmapData = new haxe.ds.StringMap();
		this.font = new haxe.ds.StringMap();
		this.sound = new haxe.ds.StringMap();
	}
	,__class__: openfl.AssetCache
}
openfl.Assets = function() { }
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.exists = function(id,type) {
	openfl.Assets.initialize();
	if(type == null) type = openfl.AssetType.BINARY;
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
}
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.bitmapData.exists(id)) {
		var bitmapData = openfl.Assets.cache.bitmapData.get(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.IMAGE)) {
			if(library.isLocal(symbolName,openfl.AssetType.IMAGE)) {
				var bitmapData = library.getBitmapData(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.bitmapData.set(id,bitmapData);
				return bitmapData;
			} else haxe.Log.trace("[openfl.Assets] BitmapData asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 116, className : "openfl.Assets", methodName : "getBitmapData"});
		} else haxe.Log.trace("[openfl.Assets] There is no BitmapData asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 122, className : "openfl.Assets", methodName : "getBitmapData"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "openfl.Assets", methodName : "getBitmapData"});
	return null;
}
openfl.Assets.getBytes = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.BINARY)) {
			if(library.isLocal(symbolName,openfl.AssetType.BINARY)) return library.getBytes(symbolName); else haxe.Log.trace("[openfl.Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 165, className : "openfl.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 171, className : "openfl.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "openfl.Assets", methodName : "getBytes"});
	return null;
}
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.font.exists(id)) return openfl.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.FONT)) {
			if(library.isLocal(symbolName,openfl.AssetType.FONT)) {
				var font = library.getFont(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[openfl.Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 228, className : "openfl.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 234, className : "openfl.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "openfl.Assets", methodName : "getFont"});
	return null;
}
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return openfl.Assets.libraries.get(name);
}
openfl.Assets.getMovieClip = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MOVIE_CLIP)) {
			if(library.isLocal(symbolName,openfl.AssetType.MOVIE_CLIP)) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 290, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 296, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 302, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
}
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MUSIC)) {
			if(library.isLocal(symbolName,openfl.AssetType.MUSIC)) {
				var sound = library.getMusic(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.sound.set(id,sound);
				return sound;
			} else haxe.Log.trace("[openfl.Assets] Sound asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 359, className : "openfl.Assets", methodName : "getMusic"});
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 365, className : "openfl.Assets", methodName : "getMusic"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 371, className : "openfl.Assets", methodName : "getMusic"});
	return null;
}
openfl.Assets.getPath = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[openfl.Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 406, className : "openfl.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 412, className : "openfl.Assets", methodName : "getPath"});
	return null;
}
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.SOUND)) {
			if(library.isLocal(symbolName,openfl.AssetType.SOUND)) {
				var sound = library.getSound(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.sound.set(id,sound);
				return sound;
			} else haxe.Log.trace("[openfl.Assets] Sound asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "openfl.Assets", methodName : "getSound"});
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "openfl.Assets", methodName : "getSound"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "openfl.Assets", methodName : "getSound"});
	return null;
}
openfl.Assets.getText = function(id) {
	var bytes = openfl.Assets.getBytes(id);
	if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
}
openfl.Assets.initialize = function() {
	if(!openfl.Assets.initialized) {
		openfl.Assets.registerLibrary("default",new DefaultAssetLibrary());
		openfl.Assets.initialized = true;
	}
}
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled) {
		if(type == openfl.AssetType.IMAGE || type == null) {
			if(openfl.Assets.cache.bitmapData.exists(id)) return true;
		}
		if(type == openfl.AssetType.FONT || type == null) {
			if(openfl.Assets.cache.font.exists(id)) return true;
		}
		if(type == openfl.AssetType.SOUND || type == openfl.AssetType.MUSIC || type == null) {
			if(openfl.Assets.cache.sound.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
}
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return true;
}
openfl.Assets.isValidSound = function(sound) {
	return true;
}
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.bitmapData.exists(id)) {
		var bitmapData = openfl.Assets.cache.bitmapData.get(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.IMAGE)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadBitmapData(symbolName,function(bitmapData) {
				openfl.Assets.cache.bitmapData.set(id,bitmapData);
				handler(bitmapData);
			}); else library.loadBitmapData(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no BitmapData asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 663, className : "openfl.Assets", methodName : "loadBitmapData"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 669, className : "openfl.Assets", methodName : "loadBitmapData"});
	handler(null);
}
openfl.Assets.loadBytes = function(id,handler) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.BINARY)) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 699, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 705, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
}
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.font.exists(id)) {
		handler(openfl.Assets.cache.font.get(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.FONT)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadFont(symbolName,function(font) {
				openfl.Assets.cache.font.set(id,font);
				handler(font);
			}); else library.loadFont(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 756, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 762, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
}
openfl.Assets.loadLibrary = function(name,handler) {
	openfl.Assets.initialize();
	var data = openfl.Assets.getText("libraries/" + name + ".dat");
	if(data != null && data != "") {
		var unserializer = new haxe.Unserializer(data);
		unserializer.setResolver({ resolveEnum : openfl.Assets.resolveEnum, resolveClass : openfl.Assets.resolveClass});
		var library = unserializer.unserialize();
		openfl.Assets.libraries.set(name,library);
		library.load(handler);
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 792, className : "openfl.Assets", methodName : "loadLibrary"});
}
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) {
			handler(sound);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MUSIC)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadMusic(symbolName,function(sound) {
				openfl.Assets.cache.sound.set(id,sound);
				handler(sound);
			}); else library.loadMusic(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 847, className : "openfl.Assets", methodName : "loadMusic"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 853, className : "openfl.Assets", methodName : "loadMusic"});
	handler(null);
}
openfl.Assets.loadMovieClip = function(id,handler) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MOVIE_CLIP)) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 883, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 889, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
}
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) {
			handler(sound);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.SOUND)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadSound(symbolName,function(sound) {
				openfl.Assets.cache.sound.set(id,sound);
				handler(sound);
			}); else library.loadSound(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 946, className : "openfl.Assets", methodName : "loadSound"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 952, className : "openfl.Assets", methodName : "loadSound"});
	handler(null);
}
openfl.Assets.loadText = function(id,handler) {
	openfl.Assets.initialize();
	var callback = function(bytes) {
		if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
	};
	openfl.Assets.loadBytes(id,callback);
}
openfl.Assets.registerLibrary = function(name,library) {
	if(openfl.Assets.libraries.exists(name)) openfl.Assets.unloadLibrary(name);
	openfl.Assets.libraries.set(name,library);
}
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
}
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
}
openfl.Assets.unloadLibrary = function(name) {
	openfl.Assets.initialize();
	var keys = openfl.Assets.cache.bitmapData.keys();
	while( keys.hasNext() ) {
		var key = keys.next();
		var libraryName = key.substring(0,key.indexOf(":"));
		var symbolName = HxOverrides.substr(key,key.indexOf(":") + 1,null);
		if(libraryName == name) openfl.Assets.cache.bitmapData.remove(key);
	}
	openfl.Assets.libraries.remove(name);
}
openfl.AssetData = function() {
};
$hxClasses["openfl.AssetData"] = openfl.AssetData;
openfl.AssetData.__name__ = ["openfl","AssetData"];
openfl.AssetData.prototype = {
	__class__: openfl.AssetData
}
openfl.AssetType = $hxClasses["openfl.AssetType"] = { __ename__ : ["openfl","AssetType"], __constructs__ : ["BINARY","FONT","IMAGE","MOVIE_CLIP","MUSIC","SOUND","TEMPLATE","TEXT"] }
openfl.AssetType.BINARY = ["BINARY",0];
openfl.AssetType.BINARY.toString = $estr;
openfl.AssetType.BINARY.__enum__ = openfl.AssetType;
openfl.AssetType.FONT = ["FONT",1];
openfl.AssetType.FONT.toString = $estr;
openfl.AssetType.FONT.__enum__ = openfl.AssetType;
openfl.AssetType.IMAGE = ["IMAGE",2];
openfl.AssetType.IMAGE.toString = $estr;
openfl.AssetType.IMAGE.__enum__ = openfl.AssetType;
openfl.AssetType.MOVIE_CLIP = ["MOVIE_CLIP",3];
openfl.AssetType.MOVIE_CLIP.toString = $estr;
openfl.AssetType.MOVIE_CLIP.__enum__ = openfl.AssetType;
openfl.AssetType.MUSIC = ["MUSIC",4];
openfl.AssetType.MUSIC.toString = $estr;
openfl.AssetType.MUSIC.__enum__ = openfl.AssetType;
openfl.AssetType.SOUND = ["SOUND",5];
openfl.AssetType.SOUND.toString = $estr;
openfl.AssetType.SOUND.__enum__ = openfl.AssetType;
openfl.AssetType.TEMPLATE = ["TEMPLATE",6];
openfl.AssetType.TEMPLATE.toString = $estr;
openfl.AssetType.TEMPLATE.__enum__ = openfl.AssetType;
openfl.AssetType.TEXT = ["TEXT",7];
openfl.AssetType.TEXT.toString = $estr;
openfl.AssetType.TEXT.__enum__ = openfl.AssetType;
var states = {}
states.GamesState = function(MaxSize) {
	base.State.call(this,MaxSize);
};
$hxClasses["states.GamesState"] = states.GamesState;
states.GamesState.__name__ = ["states","GamesState"];
states.GamesState.__super__ = base.State;
states.GamesState.prototype = $extend(base.State.prototype,{
	create: function() {
		this.games = new flixel.group.FlxGroup();
		this.games.add(new covers.NaomiCover(50,450));
		this.games.add(new covers.PsychoCover(450,450));
		this.add(new Banner());
		this.add(new Navbar(300));
		this.add(this.games);
		base.State.prototype.create.call(this);
	}
	,__class__: states.GamesState
});
states.IndexState = function(MaxSize) {
	base.State.call(this,MaxSize);
};
$hxClasses["states.IndexState"] = states.IndexState;
states.IndexState.__name__ = ["states","IndexState"];
states.IndexState.__super__ = base.State;
states.IndexState.prototype = $extend(base.State.prototype,{
	update: function() {
		base.State.prototype.update.call(this);
	}
	,destroy: function() {
		base.State.prototype.destroy.call(this);
	}
	,create: function() {
		flixel.FlxG.mouse.set_visible(true);
		this.text = new flixel.text.FlxText(0,400,1024,base.TextDatabase.getValue("home.main"),15);
		this.text.set_x((flixel.FlxG.width - this.text.get_textField().get_textWidth()) / 2);
		this.add(new Banner());
		this.add(new Navbar(300));
		this.add(this.text);
		base.State.prototype.create.call(this);
	}
	,__class__: states.IndexState
});
states._TeamState = {}
states._TeamState.RenatoImpl = function(y) {
	base.Developer.call(this,y,"Renato \"Totoro\" Lui Geh","Code and Web Design","Appreciator of fine canned beans.","assets/images/devs/renato.png");
};
$hxClasses["states._TeamState.RenatoImpl"] = states._TeamState.RenatoImpl;
states._TeamState.RenatoImpl.__name__ = ["states","_TeamState","RenatoImpl"];
states._TeamState.RenatoImpl.__super__ = base.Developer;
states._TeamState.RenatoImpl.prototype = $extend(base.Developer.prototype,{
	__class__: states._TeamState.RenatoImpl
});
states._TeamState.RicaImpl = function(y) {
	base.Developer.call(this,y,"Ricardo \"Rica\" Lira da Fonseca","Art and Design","Beethoven, Delacroix, Lord Byron, Arnold Schwarzenegger, Ricardo Fonseca.\n" + "What do all of these geniuses have in common? The vision to turn " + "the ordinary into the most astonishingly beautiful piece of art. " + "Just like Da Vinci, this strapping young man crosses the dimensions of art. " + "With his cyan-colored eyes on a canvas and his fingers tightly strapped to a pencil " + "he creates the most spectacular chef-d'oeuvre. And with his most accurate ears he " + "can turn the most chaotic of sounds into a true melody.\n" + "This true maestro is envied by many. Admired by all.","assets/images/devs/rica.png");
};
$hxClasses["states._TeamState.RicaImpl"] = states._TeamState.RicaImpl;
states._TeamState.RicaImpl.__name__ = ["states","_TeamState","RicaImpl"];
states._TeamState.RicaImpl.__super__ = base.Developer;
states._TeamState.RicaImpl.prototype = $extend(base.Developer.prototype,{
	__class__: states._TeamState.RicaImpl
});
states._TeamState.YanImpl = function(y) {
	base.Developer.call(this,y,"Yan \"Yan\" Soares Couto","Code, code and more code","A_Beautiful_Mind_1080p.mkv","assets/images/devs/yan.png");
};
$hxClasses["states._TeamState.YanImpl"] = states._TeamState.YanImpl;
states._TeamState.YanImpl.__name__ = ["states","_TeamState","YanImpl"];
states._TeamState.YanImpl.__super__ = base.Developer;
states._TeamState.YanImpl.prototype = $extend(base.Developer.prototype,{
	__class__: states._TeamState.YanImpl
});
states.TeamState = function(MaxSize) {
	base.State.call(this,MaxSize);
};
$hxClasses["states.TeamState"] = states.TeamState;
states.TeamState.__name__ = ["states","TeamState"];
states.TeamState.__super__ = base.State;
states.TeamState.prototype = $extend(base.State.prototype,{
	create: function() {
		this.devs = new flixel.group.FlxGroup();
		this.devs.add(new states._TeamState.RenatoImpl(400));
		this.devs.add(new states._TeamState.RicaImpl(650));
		this.devs.add(new states._TeamState.YanImpl(900));
		this.add(new Banner());
		this.add(new Navbar(300));
		this.add(this.devs);
		base.State.prototype.create.call(this);
	}
	,__class__: states.TeamState
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; };
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; };
if(Array.prototype.indexOf) HxOverrides.remove = function(a,o) {
	var i = a.indexOf(o);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
Math.__name__ = ["Math"];
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i) {
	return isNaN(i);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
Array.prototype.__class__ = $hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
base.Timer.timers = new List();
flash.ui.Multitouch.maxTouchPoints = 2;
flash.ui.Multitouch.supportedGestures = [];
flash.ui.Multitouch.supportsGestureEvents = false;
if(typeof(JSON) != "undefined") haxe.Json = JSON;
haxe.Resource.content = [{ name : "__ASSET__:bitmap_flixel_tile_GraphicAuto", data : "s4903:iVBORw0KGgoAAAANSUhEUgAAAIAAAAAICAMAAAAGAwdMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89%bN:rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz:SMBAPh%PDwrIsAHvgABeNMLCADATZvAMByH:w:qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf%bTAICd%Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA:g88wAAKCRFRHgg:P9eM4Ors7ONo62Dl8t6r8G:yJiYuP%5c%rcEAAAOF0ftH%LC%zGoA7BoBt:qIl7gRoXgugdfeLZrIPQLUAoOnaV:Nw%H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl:AV:1s%X48:Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H:LcL::wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s%wM%3zUAsGo%AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93:%8::UegJQCAZkmScQAAXkQkLlTKsz:HCAAARKCBKrBBG:TBGCzABhzBBdzBC:xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD:phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8%Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8%xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR%cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI%ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG%Qh8lsKnWJAcaT4U%IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr%h0uhHdlR5Ol9BX0svpR%iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK%YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI%pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q:pH5Z:YkGWcNMw09DpFGgsV:jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY:R27iz2qqaE5QzNKM1ezUvOUZj8H45hx%Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4:OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up%6Ynr5egJ5Mb6feeb3n%hx9L:1U:W36p:VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm%eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw%6TvZN9un2N:T0HDYfZDqsdWh1%c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc%Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26:uNu5p7ofcn8w0nymeWTNz0MPIQ%BR5dE:C5%VMGvfrH5PQ0%BZ7XnIy9jL5FXrdewt6V3qvdh7xc%9j5yn%M%4zw33jLeWV:MN8C3yLfLT8Nvnl%F30N:I:9k:3r:0QCngCUBZwOJgUGBWwL7%Hp8Ib%OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo%qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt:87fOH4p3iC%N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi:RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z%pn5mZ2y6xlhbL%xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a:zYnKOZarnivN7cyzytuQN5zvn::tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1%1dT1gvWd%1YfqGnRs%FYmKrhTbF5cVf9go3HjlG4dvyr%Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql%aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO:PLi8ZafJzs07P1SkVPRU%lQ27tLdtWHX%G7R7ht7vPY07NXbW7z3:T7JvttVAVVN1WbVZftJ%7P3P66Jqun4lvttXa1ObXHtxwPSA:0HIw6217nU1R3SPVRSj9Yr60cOxx%%:p3vdy0NNg1VjZzG4iNwRHnk6fcJ3:ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w%0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb%%6EHTh0kX:i%c7vDvOXPK4dPKy2%UTV7hXmq86X23qdOo8:pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb:1tWeOT3dvfN6b:fF9:XfFt1%cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v%3Njv3H9qwHeg89HcR:cGhYPP:pH1jw9DBY%Zj8uGDYbrnjg%OTniP3L96fynQ89kzyaeF:6i:suuFxYvfvjV69fO0ZjRoZfyl5O:bXyl:erA6xmv28bCxh6%yXgzMV70VvvtwXfcdx3vo98PT%R8IH8o:2j5sfVT0Kf7kxmTk:8EA5jz:GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5:wAAgOkAAHUwAADqYAAAOpgAABdvkl:FRgAAAwBQTFRFAAAAXl5eAAAAAwMDBAQEBQUFBgYGBwcHCAgICQkJCgoKCwsLDAwMDQ0NDg4ODw8PEBAQEREREhISExMTFBQUFRUVFhYWFxcXGBgYGRkZGhoaGxsbHBwcHR0dHh4eHx8fICAgISEhIiIiIyMjJCQkJSUlJiYmJycnKCgoKSkpKioqKysrLCwsLS0tLi4uLy8vMDAwMTExMjIyMzMzNDQ0NTU1NjY2Nzc3ODg4OTk5Ojo6Ozs7PDw8PT09Pj4%Pz8:QEBAQUFBQkJCQ0NDRERERUVFRkZGR0dHSEhISUlJSkpKS0tLTExMTU1NTk5OT09PUFBQUVFRUlJSU1NTVFRUVVVVVlZWV1dXWFhYWVlZWlpaW1tbXFxcXV1dXl5eX19fYGBgYWFhYmJiY2NjZGRkZWVlZmZmZ2dnaGhoaWlpampqa2trbGxsbW1tbm5ub29vcHBwcXFxcnJyc3NzdHR0dXV1dnZ2d3d3eHh4eXl5enp6e3t7fHx8fX19fn5%f39:gICAgYGBgoKCg4ODhISEhYWFhoaGh4eHiIiIiYmJioqKi4uLjIyMjY2Njo6Oj4%PkJCQkZGRkpKSk5OTlJSUlZWVlpaWl5eXmJiYmZmZmpqam5ubnJycnZ2dnp6en5%foKCgoaGhoqKio6OjpKSkpaWlpqamp6enqKioqampqqqqq6urrKysra2trq6ur6%vsLCwsbGxsrKys7OztLS0tbW1tra2t7e3uLi4ubm5urq6u7u7vLy8vb29vr6%v7%:wMDAwcHBwsLCw8PDxMTExcXFxsbGx8fHyMjIycnJysrKy8vLzMzMzc3Nzs7Oz8:P0NDQ0dHR0tLS09PT1NTU1dXV1tbW19fX2NjY2dnZ2tra29vb3Nzc3d3d3t7e39:f4ODg4eHh4uLi4%Pj5OTk5eXl5ubm5%fn6Ojo6enp6urq6%vr7Ozs7e3t7u7u7%:v8PDw8fHx8vLy8:Pz9PT09fX19vb29:f3%Pj4%fn5%vr6%:v7:Pz8:f39:v7%::::QkqfIwAAAAN0Uk5T::8A18oNQQAAAG1JREFUeNrsk7ESwCAIQ1:8:492UDyBVty61CUXEgU5oAFAQwBicgaHSsfZfPBOlyQJSzC5lrfQjVoC%UCpbw:vSMCDns1PvzzofwHfF2BD5lB%2N4LSPZwygJszQKGdas6QLp224EOAAD::wMA9PcA8aOpcyUAAAAASUVORK5CYII"},{ name : "NME_font_flixel_system__FlxAssets_FontDefault", data : "s66919:"},{ name : "__ASSET__:bitmap_flixel_ui__FlxTypedButton_GraphicButton", data : "s692:iVBORw0KGgoAAAANSUhEUgAAAFAAAAA8CAYAAADxJz2MAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAadEVYdFNvZnR3YXJlAFBhaW50Lk5FVCB2My41LjEwMPRyoQAAAXZJREFUeF7tm0EKg0AMRedeXss7eA4F7%EJ3HgTty7SpkihMmNmSAcceEIK7cLF4:84zTdBRML70g%qkMHJLsi6rjJNE1XAQJmdogvS9710XYcCMxWorJTZD0D9ote%79QNA2WkrKIAl2URymYAQKdQAAhA22Y1WxEKRIEosOmnPRbGwlgYC9c8Jjz93vTAWj1wGAahbAZRBTLOyh8oR8dZ%iOVz%A7zmKkn6%8a%zxYQdAJ0ClSiZSngeRiWTmH7G08jYTOY5DqDSD20xk2zahbAbJfyLAs%EpIwA6nQZAAOZZrVZLQoEoEAU2fVzCwlgYC2PhWkeEFu6b7IHzPAtlMyATcYyyFB6ZyB:yHzIRpwrPd8rJRDz7MeyJFOyFXPdoyEQcFk5mItoYKZtB8hw4jqNQNgMAOoUCQADaNqvZilAgCkSBTT:tsTAWxsJYuOYx4en3pgfSAx:YA9kTyX:ZPDrOYoxlj7GujD7TbNYc8pUX2xN5AQkGeBPq5%BjAAAAAElFTkSuQmCC"},{ name : "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor", data : "s942:iVBORw0KGgoAAAANSUhEUgAAABgAAAAgCAYAAAAIXrg4AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmRJREFUeNq0ls9rE0EUx7872YSgJlTSSiWpVvrDIqhFUIKg%CeIIgqeFE:iTRC8pLQXjyL04g9ComXTJIW0OVUEMTdBRIk5W6WtkKJSbGnDpsn6Zk2W3TQbs%nkwduZnVm%n30zw3sjBULBCIApdMlc%:z%d9Rq5LluAORaO8kfDyenW0byaOKeYwDjD03TdAgJRERHINEeaJVKFYxJkCSJj03YRXL:9mVbod6BkH0EumlSvSc0EgNw5ep1jA6PCIcYgAM%P548nsaxwUGhEGZ%2ShVMJ9K4%jAEWEQC2C7pEJjHiyk0wgFg0IgrHFgabmoi2dmkzjc379nyC7An80t:F7f0PeCQw719RkQOoqRPQO4fV0p6u3w0BAyySQCgUDHkKaA4s91bG6V9P7xkVE9koM9PR1BmN3EUi0KbifGxjCnKPD7fI4htoDV4i%o5R3j:fTJUwRJOIbYAnh%%r66Zhk7Mz4OJR6H1%ttG8JaTX77sYZKtWoZC589h9SrmbYhLQGquqMvVaOdD4cxE43C43bDVE8ijgGNm222SxcuIv78xX8hcivxWSWGfP4Tbex%Emr%KV8qtVw2Q2Cu8baAVOIlFubT:z6SXWAu1u7Rt0CaArIknMkkwQucLMuQmOQ0QxiQXYDXi1kkaGkYY5DdLj70lvxBh8nUYwHkcm8Qiz41L8kiL3ZUo7c7rckG4OOH9ygU8nATs1b8s%TXSFwVUnC%FD7TXxs3izkR4kYELusJ4eI3m4nbLYOTVKGQ3xDx55aLV60fI7:D85zIm109gmfkt0SL12:XvdTe7db1:a8AAwCZUMQMzQodywAAAABJRU5ErkJggg"},{ name : "__ASSET__:bitmap_flixel_system_GraphicLogo", data : "s5336:iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89%bN:rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz:SMBAPh%PDwrIsAHvgABeNMLCADATZvAMByH:w:qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf%bTAICd%Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA:g88wAAKCRFRHgg:P9eM4Ors7ONo62Dl8t6r8G:yJiYuP%5c%rcEAAAOF0ftH%LC%zGoA7BoBt:qIl7gRoXgugdfeLZrIPQLUAoOnaV:Nw%H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl:AV:1s%X48:Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H:LcL::wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s%wM%3zUAsGo%AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93:%8::UegJQCAZkmScQAAXkQkLlTKsz:HCAAARKCBKrBBG:TBGCzABhzBBdzBC:xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD:phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8%Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8%xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR%cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI%ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG%Qh8lsKnWJAcaT4U%IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr%h0uhHdlR5Ol9BX0svpR%iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK%YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI%pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q:pH5Z:YkGWcNMw09DpFGgsV:jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY:R27iz2qqaE5QzNKM1ezUvOUZj8H45hx%Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4:OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up%6Ynr5egJ5Mb6feeb3n%hx9L:1U:W36p:VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm%eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw%6TvZN9un2N:T0HDYfZDqsdWh1%c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc%Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26:uNu5p7ofcn8w0nymeWTNz0MPIQ%BR5dE:C5%VMGvfrH5PQ0%BZ7XnIy9jL5FXrdewt6V3qvdh7xc%9j5yn%M%4zw33jLeWV:MN8C3yLfLT8Nvnl%F30N:I:9k:3r:0QCngCUBZwOJgUGBWwL7%Hp8Ib%OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo%qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt:87fOH4p3iC%N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi:RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z%pn5mZ2y6xlhbL%xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a:zYnKOZarnivN7cyzytuQN5zvn::tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1%1dT1gvWd%1YfqGnRs%FYmKrhTbF5cVf9go3HjlG4dvyr%Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql%aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO:PLi8ZafJzs07P1SkVPRU%lQ27tLdtWHX%G7R7ht7vPY07NXbW7z3:T7JvttVAVVN1WbVZftJ%7P3P66Jqun4lvttXa1ObXHtxwPSA:0HIw6217nU1R3SPVRSj9Yr60cOxx%%:p3vdy0NNg1VjZzG4iNwRHnk6fcJ3:ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w%0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb%%6EHTh0kX:i%c7vDvOXPK4dPKy2%UTV7hXmq86X23qdOo8:pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb:1tWeOT3dvfN6b:fF9:XfFt1%cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v%3Njv3H9qwHeg89HcR:cGhYPP:pH1jw9DBY%Zj8uGDYbrnjg%OTniP3L96fynQ89kzyaeF:6i:suuFxYvfvjV69fO0ZjRoZfyl5O:bXyl:erA6xmv28bCxh6%yXgzMV70VvvtwXfcdx3vo98PT%R8IH8o:2j5sfVT0Kf7kxmTk:8EA5jz:GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5:wAAgOkAAHUwAADqYAAAOpgAABdvkl:FRgAABM1JREFUeNrs28%LG2UYwPHXZm6CuXk0dE0TsT%SmT1od5Fk%wvpmtGbiEhOXlVQL14Cnkv3XEQDHoRCYempbKmdpMtSwUz21PMcRPBSgpBlYUd4PGyzmU02u:Mm74:nmfd94fkH8uGbN%:kHQZdD5RMx2vDjltgRBcs3cjvlRrtvbIPMocpA%l6AB13AF2vBb3lPC0IvzUs%QPZGOpBCMGohtALcgym2sSGMSz5zb2yH6mEwAEyhokwwOiEwAWShHnm1lRD7Bcbtb2Sv6sTAifIGCZQAbNfbNSG5UaAAQI3SBJm262I:2r6qIINggaI4DPM:vnbBRVnieyDLAhDAYImCOcZRtdZwiyQFDAUIeiDzDhcDkt%kyJEdkBezR:Blahz62ZEFSJTILtBBfJbb0N%swjPr920IBgw2NYSsK0l8igsSxhZQGFZw6COwrKIkZx7X3xgQWTO5tPLqTEoopACaT%9xAVBEYWZgEEJhZmCQQWFmYRBAYWZhoEdhZmIgRmFmYqBFYVBxw1MxRjND9%8jwjkmVszGWM0n::o4QBhjDHoeG2TMTChHIL0lvOv:hI1FgMJSjT%H7pb:VoHxsbvF9Fg6EYZlvzj12kP79iqw2g%eQcdhkaUaPrajMINHjOGDpSpOsaVeJsWQzlKNPty2Y5bkLnBU8JQhTKzjvEG77UsxjTK39V1tXUcgRz%DI4sxvG5:PO7wlHOrGO8wVc:thiSUUr%Lt%LjwKec2UJQzTKfrHB91ISbLsViyEHZVhuBPO9Htz1NiyGeBTuOiY2%IHFEIcydx2J51xNiyEOZe46Jjb43dMgBh0XKo8vGIfBi7JwHWmec5mOwYMipI7Ec662xTh93vqtPPOSt7A6Zm3wFoPv5r3QOiafc1kMPhThdSTXy041shh8KFLqGK1LzedB7mHFfugpUR6tX5dXx9U1qK2uAVQ%fQEWJcU8uQ25P:%RB7Jah2B1DcCipMV4CU4Yg9OPa9LqSI5FSYERxuD04kBqHckpfvXAApyGMRqRlZxUh0XhwBBdyaw6LEpKDJGVnFWHRUmJIaqSNHUYjZIWQ0QlPHUYicKLsWglvHWYhPJa8CU:xiKVzFtHcs5::0s2MTrfzgexSCWL1JGcN%98ZzEWrUREHVlEEYYRxpDrxZvK68gSikiM0bA%FJTXkQUUGRhOGEMuPGhrqYMyiiyMVJXIrIMiimyMMyuRXQclFBUYp1aiqo7kvPHTZ8ZjzKxEZR2jee:Df%H1X9eNxjixEh11YETRhTFViY46sKHoxDiqRHcdWFAwYByB6K5DNwoWDCeMAU0dulAwYThhDKjqUI2CDeMQBCHGaJY:%UvanS%MGOhBZF3Ew4pBAkQ0yrntu2gxyICIQjm3cx81BimQRVEoYJADmReFCgZJEF4UShhkQdKiUMMgDXLWRTyKGORBZqFQxcgEyCQKZYzMgIxQqGNkBmSlDu2Va1BgfSjkwoO2BdE1dQiursH0:dg%VJxeHFgQ3RATy%nHNWowjNhXU7RahybvLX5KMCzLEJMr1:uvmQsPIgsy:1fTYKUOLdHv22OGYZghlm9AnklcGGEYQowN2RDHVg:yThi3cmE8sCAnnSV0LSQwDMNPWK0QyGAY9rOEtqXp1P::ANwors8V8MhWAAAAAElFTkSuQmCC"},{ name : "__ASSET__:sound_flixel_system_BeepSound", data : "s18491:UklGRiQ2AABXQVZFZm10IBAAAAABAAIARKwAABCxAgAEABAAZGF0YQA2AAD::wAA::8AAAEAAQABAP::AAD%:wAA:::::wEA::8BAAEAAQABAP7:AQD7:wMA:v8CAAEA::8BAP::AQAAAAAAAQD::wIAAAABAAAAAAABAAAAAQD%:::::v:::wEAAgABAAEA:v:::wAA::8BAP7:AwD%:wMAAAAAAP:::v8AAAAAAwAAAAIA:::::::::v8AAAAAAQACAP::AQD9::7::::::wIAAAACAP::AQD%:wAA::8AAAEA::8EAP3:BQD7:wMA:P8EAP7:BAD%:wIA:f8CAP3:AwD9:wMA:v8DAP::AQD:::::AAAAAAAAAQAAAAAAAAAAAAEAAgD::wIA:f8BAP3:AgD%:wUA:f8DAPz:AQD%:wEAAQACAAEAAAAAAP7:AAD%:wEA::8AAAEA::8BAP3:AAD%:wEA::8EAP7:AgD9:wAA:v8AAAEA::8DAP::BAD::wIA:v8AAP7:AAD::wEAAAAAAP7::::%:wAAAQAAAAEAAAABAAEAAgAAAAEA:v::::::AQABAAIAAQD::wEA:v8BAP::AQAAAAAAAQD:::::AAD9:wIA:P8EAP3:AwD%:wEAAAD::wIA:v8DAP7:AgD%:wAAAAD::wIAAAACAAEAAQABAP7:AAD9::::AQABAAQAAAACAPz:AQD9:wEAAgD::wQA:P8DAP3:AwD%:wEAAQD::wQAAAAEAAAAAQD9:::::f::::::::8DAP7:AwD8:::::f:8:wIA:f8GAP7:BAD%:wEA:::::wEA:v8DAP7:AgD%:wAA:::::wAAAQABAP::AAD9:wEA:f8BAAAAAQACAP3:AgD7:wEA:f8DAP7:AwD8:::::f:%::::::8BAP::AwD%:wUA:v8HAAEABAACAAAAAAAAAAEAAQACAAAAAAD:::3::v:8:wAA::8DAAEAAgAAAAAAAgABAAYAAAAEAP::::8BAPv:AwD6:wUA:P8EAAEAAQABAAAAAAACAAAABAD::wYAAQAHAAQAAwACAAEAAAABAP:::v:9:::::v8BAAEAAAD%:wEA:f8BAP3::P:7::v::v:7:wIA%::%:wAA:P8BAPv::::5:wAA%v::::r::::6:wgA:v8JAP7:AgD6:wAA:P8AAP::AAAAAAUABAABAAEA9::7::n::v:6::3::::%:woABAABAPv:9::1::7:AAABAAMABQAIABAAEAAKAAoABQAIAAgACgAHAAQACwAGAAgABAAAAP7:AwAEAPr::P:3::T:CgAFAAgABQAAAAEACQAQAPv:BQDw::b:%:::::n:%::9::7:DAANAAYABQAIAAMAEQAKAAgAAgARAAsAGwAUAAAA:P:0::D:9::1:%7:8v:%:wQAFgAZAAkACwD::wAA%v:7:%3:8P:1::v:%P:8:%n:6v:t:%::5v:r:%D:6f8DAAwABwANAPP:9f8AAAEA9::2:%n:6f:9::3:9P:v:%X:3f:y:%z:6::l:%n:5P:w:%::4::i::L:8f8IAAoA9f:7::b:%:8BAAYA:v8DAB4AIQA9AD4AKgAtABwAHgASABIA9P:0::D:8P:7::v:8v:y:%::7::v:%7:4f:f::T:8v8eABoAIAAcABQAEQACAP7:1::U:9f:1f:5::X:%::3:wcABgAfACAAKAArAEgATwBjAGcAagBqAHoAeABWAFUAGQAcAOz:8v%e:6X:lv%b:8n:yv%q:6X:sv%u:9v:2:%2:7b::P:9:1cAWgAmACMATABFAG8AbAAVABEAQAA7AGEAYQAHAAYAKQAlABgAGACl:6b:0P:O:9v:2:%n:6f:2::X:7b:uP%G:4v:4v:j:wEAAgAHAAgALQAoAPr:%P:d:%P:8v:3:%v:7v8MAA8ANgAyAEkAQABVAFIALgAvAAwADgABAAIA5v:l:9b:0v%l:6D:iP%D:7z:vP:e:%D:KAAmAHYAdQBJAEoATwBMAGIAXwADAAcAAgABAA4ACgC7:73:x::J:8v:yf%a:53:zf:R:%v:6f:b:9r:8f:1:wIABAAkACQAOwA%AGwAbQC4ALYAmQCZALwAvwDZANsABgAHANX:1v8JAAgAXP9a:5P:lP:r:%7:Gf8a:2f:Zf:1::H:iv%E:w8ACgA5ADsAjf%S:wsADAA%AD8AEQARAMYAvQCMAIYA:P:9:2kAZgBKAEgAIwArAHIAdwDs:%::U:9f:1X:Yf96:3r:uf%6:9D:zv:N:8D:qf%g:2D:Xf%l:6H:3::e:7L:tf:s:%::9v:9::P:AAB2AIkAjgCnAK0AwwDrAPoAZwBtAF0AUwB0AFwAqf%O:6b:iv:I:7b:IP8i:2z:e:%2:8v:H:84:2j:ev:f:%f:x::N:yYAKgBjAGQAIAAkADsAPACnAJgA2QDCAMcArQDRALMAqQCUAB0AFwAvADQAVgBrAML:5::L::T:7P8VAEX:Yv95:33:7f:e:4T:Yv%z:4X:CADm:8X:sv8pACIAgwCMACsAPABDAFQATwBlAAEAGwA%AFsASwBuAOn:CAA4AE0AfQCEAPz:6v:P:6v:1P%s:2j:Qv%J:2:::P:::5::uf9K:2v:iP%m:6n:tv:m:9j:RgAkAFMAMQA9ACYACgD::w4AGwCUALYArgDMAHIAhgBiAG0An:%S:93%uv4::xb:Wv8v:9v%vf75:vn%Nf9U:1z:kv8tAGkA%QAnAQEBIAHeAN0A5wDCAKkAewAvAPr:GADe:xoA8::L:7T:x:%5:77:yv9S:2n:fv%U:8X:4f9s:4L:lP%k:97:7v%1:7f:PwA1ALYAqABcAEQApwCOAAcB9ACSAIMAhwCAAIoAiQD3:wAA8f8KAAYAJQCI:7H:if%5:8X:4P%M:5b:mP%Z:7n:n:99:1D:of9y:xkA6P9JACQAlwCMAFABVwG2AcoBUQFqAdgA9wCLAK8A2v:y:4H:kP%5:8L:E:8H:2f%T:4N::r%kv94:77:pf9uAGUAiACFAAQAEwACACoAOwBjAGsAiwCQAJ8AiwCBAIgAegAqACQAzv%::zgAKQBCADwAh:96:1f:Uf9N:1v:%:7%:n3:c:8iAB0Azf%4:67:lP:3::n:r:%::7P:wP8DABsAwv:a:xQAIACYAK0ANgBMAG8AaQCwAJkA6P:Z:xsAEQBgAF8AYP9s:27:b::U:8P:If8f:zb:Rv%G:5b:Av8X:xn:KP%1:6b:EAD9:2EAXwCxAK8AwgC9AF0AXQB2AGwACAH8ALYAxwCmAMUAzQDZAMb:yv:R:9X:lwCRAM::1:%%:9b:FwAWACv:Fv9o:2H:DwAMAIj:hP%s:7n:%::%:wIA7P%HAH4AaQBwADEALwBYAF8AFQAgAH8AdAD7APUAbwB:ADwAQQBTAFMAbgB1AMkAvwCRAIMAFQAeADr:P:9s:mr%M:86:5T:jP8q:xn:tf%4:y7:L::B:r7%SABQAGoAaABMAEEACQEQAeP:6::l:%j:PwFJAWYAZgCbAJIALgEyAVv:YP96:3n:SABIALP%rf6B:nr%vv7C:qz9r:18:nb%3f:K:%7:zP9kAEUA0QDHALUAvADDANoA2ADtAM8A1QCFAI0AdQCHAJ0ArgAHABgAs:%2:9z:yP9R:0f:R:9T:8f:0v99:4b:rv%x:28AZACCAIAAyQDaAG8BdgFVAUoBoQCMAAMA5P9y:1X:5P7V:gb:AP9x:2j:MP8h:1n:Uf8MABcAOABaALIA7AAEATwBgACWAJIAiwBzAGEA8::g:48AgQC3AK0AlACOAC0BLQFRAGAAef%Y::z:GgBG:1j:BP8P:47:jP9U:j7%O:4c:ij:CP9Z:jz%5:7Y:g8ADgBY:1z:%:8HANYA8wAMADQA2gD9AMMB4QHmAPcA1gDYAM4AxwAFAOz:KAD:::::2v:T:rv%Iv4f:gz%I:5P:nf%5:4c:4j:vP8aADQAbABnALEAlAAKAegA%QDfAOkA0QBFAScBDwH1AFAARgA1AEgAWgCEAEQAcACpAM0AqgC:ALv:vv:E:7r:VwBDAPD:2v8EAO::PQAgAHD:S:%E:2D:FgAGALr:z:8WAEkAygAHAXkAsABjAIIAmwCcAJgAfQDOAJwAxwCQAG8AQAA7ABUALwAYAG8AcgBdAIMAtP:9:53:5f8fAEUANQAyAMX:qv8u:xb:q:6X:s7%q:7R:6L:RQAdAJf:j:9C:2T:PP9r:zr:Wf:J:9P:qf%n:yX:Lv%J:6X:h:%g:%::9f9PATAB%QC6AD0ABwBTADoAMP83:wT:IP9zAIUAHQAuAEr:cv9z:6D:g:%q:zMAQQDPALEAXAAsALD:e::p:rX%U:8z:34AdgDv:xEA2P8ZANQAAgExAEwAPwBLAB4BFAHE:8H:U:9G:2gAQgCh:3::nf9%:90A2QBbAHMAngCoAMIB0wHIAOIAawBtAOMA9wCU:7D:cP9u:5EAjAA6ACcAjwBzAPIA7QC7:7X:9f:1:50AowDu:%L:GQArAKL:zf%h:rn%5::9:58AowA6ACgA7QDgAHgAYgCn:5f:GQAQAH3:bP:o:vT%%:4O:3n%ev4v:0b:9:8FAKL:nf%CAIoAygC9ANz:xv9RAEgAcABeAIH:fv84:z::ZP9g:9H:2P%t:67:lP%T:zMAQAAV:xH:wf6%:iABIgEDAe4AKQAjAIsBjgHSAMkA4f:s:yIBJgGsAKYAPv8::0L%L:4w:Sn9Zv1t:eT91P2u:rX%GQAnAL3:rf:Z:%D:sAG2AUUCNgKlAqMCiwKDAggBAQGSAJUAIQAcAL::0P9qAHYASP85:4f%kP6E:4j:7f7g:lP:Xv:eAN4AcgBqAJ4AogCvAK4Amf%r:w4AHADi:93:Df8b:3n:cP:B:qj%rv67:hgAFwDG:8X:vf:W:zoANACT:5P:OABHAJwAjACW:5X:GwAdAHwAYgCx:7T:DQAXAJ0AmgBEAFYAMgA0AAEB%AD3APYAjv97:yoAKAAdASoBJP8Y:%L%6f7L:9r:EP4G:k3%Vf5T:2H:N:0z:f78::ww:yz:OQE8ATUDOwNcAlQCUAFjAbYCzALvAeIBSQFaARsCLwJt:1P:2v3d:b3:zP9A:yz:mf6k:iwAQgDOAMwAKAA0ANz%3P71:uf%vQDDAEIANwAd:xT:nf%u:4L:ff9eAFkAAwIVAq0AqACs:qP%bf92:4QBfwHpAeIBLQA1AMT:x:%wALEAOgBEANP:1v8G:wn:S:1Z:Ub%Sf6V:5T:CP4W:tj91:1G:0L:HAAyAEQCSAKtA60DQgJWAlcBUgFOAE4Aqv23:fz87vzy:fv9SP5S:t7:x:9NAV8BwwDKAFoBOgF7ApMCEgIVAgwB5QDG:t:%1f3X:ToAFwC6ANQAdf91:yz:E::%:Rf%5P7g:q8BowFIAWIBmwCSAHQAdQDE:%H:HwIRAngDgANeAYEBLwAdANj%4v5B:2j:RwEzAZf:nP9u:5j:5::S:w78C:zz:Rr%PwMpA6wCowKFAqQCVgE8AUX:Of8wA0QDcQNRA0MAOQDKAdQBIv:6:uD82:z6APsA%:7O:nb8ePwm:yD:KP39:M391P3aAs0CfABeAFb9Zf1e:kr%Tv5E:nP:if%rAJEArP%5:7j%1P7x:Nj8:Pwd:VgAcwC:Aa4ByQD8AN7:7P:F:8X:GgFaAfIB6QGuAb8BJQFrAeAAvwAlAkUCqgPqA70EiQT:AyoExv7x:iP75:pf%5P7RflL%Zv4YPhG%4L71vy1:CsB9ACkBuMGCgjJB3sITwiPB8IHTwX:BGIDSQPe::n:1P6C:rL:tv9g:l7%Ff:H:j79X:279qb2E:XO9NH1Afa7%Kb4yACTACwEUARnBGEEsAacBiUIJgj4CQEK9gQSBVMBLAE7CEQIX:Gp8cfBicGkvKC8i9fu19rroOs0ByEH7SBJIeEuvy6eQIdAsknsSb9GtUZOQ0FDjTGhMQMWBxa0:7P:kuaP5rDPuM:ewt3CmLmTufa3ArgNwPm:I80pzZvgs%BD%BP4OhJIEmEsjCzWPpE%4EnwSSNPWk%KSUBJAToOOjYkbSQvCu0JTe9b79LU%9Q:vgm%MbJGsv%wGLEbtuq1%cAYwerU:NTc76fvYAuDC:ckDSVAOgc60EjuSH5QnFA9TgZOc0KHQvAwEjFGGBUYvvvO%xTiMeJhyzbLZbp6uiSyNrK4sI%wRrlmucHMxczQ46Pj9:oj%7YSrhKSKWEplTzJPBpJCEk1TgJOBEk7SZU4fTikI3kjKw1oDbfzm:NN3Cvct8r6yrO9m73it823KbxyvOPH0Mch2BLYLe1x7aMFlwV2HG4cMC9nL589ij31ROhErkPTQzo6FzqKKXopZBZ5FuoCrwJb7D:sHdYs1i3G68XpvM%8FbsquwLCw8F8z2fP0%H54Sz4CvjpD:EPHCZRJqc3mzdeQn9CSUaNRhNCHUIQNEo0ECBQINsK1wrE8:fzvdvu26fIksgAvR2957j0uM%%kr5FzTrNad9W3yH01vPKCqoKVyAnINoxhDGZPHc8Q0AZQOY9rT0BNP4zeyNmI1wQQBCk%8j7subN5i3VQtWqyPDITMJ%wgnDLcNeyq3KNdh02F7qiuqI:cT9dhGREXAkdiS%MtEySjtCO908wzzaNsE2vyuEK:cbshuIB1YHDfPL8nXhM%Ef0u3RY8ckx1zEKsRFyDXI4tHX0cbgyuAI8yHzoQa5BqwZ1RlmKagpJDRoNAY5TjkQN1g3NS9wL7ci8CLdERQSEP86:xztNu0R3RbdItES0frK38o7yhjKkc9kz63ac9pD6f3oVPoI%iwM5gscHOEbMSkAKYsxYTF6M1czXTBHMHUodCh0G4gbmQu9C7P63:o86m3qotza3A3TTtNHzo3OJc9oz1fVkNVx4JrgG%8470X:WP:AD8kPhx6AHmMpSCnHL5ov3jCmMCUs6SuYIlsiLhXvFHUFMgVZ9Rj1TOYW5l7aOdrE0q:Sxc%%z7TSt9Iw20HbHOc%59b1CvYRBlEGUxWWFVQilSJ1K7UrMy9zL8UtBC4kJ1onxBvoG5kNqA3W:dX9:%317a7gnODz1tbWedFL0bvRftFr1yfXNuH24JruZO4l:vb9qQ17Dc8bpBsGJ%Mmpy2ULQ8vES8UKycrUCJrIvoVFxa%Bt4GRPZr9lrniuc923HbqtLa0oXPrM9C0l7Sydnd2azlueXv9Pb0hAWEBaQVmxVmI1Mj:CzhLJUxdjGGMGYwuymdKVgePh5fD0oPG:4I:hLtAe1h3lLeXdNV03TNd81SzV7N0dLh0qPdst207L:sH:4p:sYP1A%WH6kf9ysLLJkzpjM%NUE1nDCXMGsmZCayF68X7gXvBUvzSvMV4gziK9Qb1ArL%Mrxx%bHect2yybVKNXb49zjFPYQ9qwJpgk9HDocsCu1K0k2VTatOrw6LDg2OPIu9i4aIBogcw12DQ:5GPko5TTlNdQ:1FvIXsgAw:zC2MTSxLDNrs2G3Ijcze:S7ysFLAXrGeUZvCuxK3g4bDhpPmM%9DzzPFE0UTRnJWIlCRL%EZD8g:x552:nStVJ1STIKMiEwYjBS8JKwmbKYcrJ2MXYwOvB6xIBGwFFFlEW4ijrKKk2qzb4PfY9Cz4JPtk23DYoKTApqBavFpsBnQFi7F3sWtlS2dnK1cq0wrjCusHDwe7H98e61L:Unuag5mj7a:u6EMQQICQvJEgzWTNuPHs8fj6DPkM5QTllLWEtMBwuHKsHqgdO8knyft5x3ovOdc5yxFnEUME6wW:FYcVs0GTQ:uD44DH1K:W3CrMKBB8GH6svti:FOto6CD8iP%07BzzMMeExyCHYIcQN0w0e%C34W%Nn4%PR6dHExb:FcsBjwJrChML3y%HLbdtZ2zbvJO8IBfgEWBpIGpssjiykOZ458z:3P80%2z5DNlg2VidtJ8cT3hPU:er9F%gr6CfVOdUxxz7H3L:gvw3ABcC6x6fHA9bl1ULpH%kx:wn:OhUQFc4ooyieN3U37j:JP8FApUD7Oes5bSxqLKgZshnZA%wDle2y7YDZpNnqyRPKpMDQwNC%%r6mxMvEcdGN0bLjwuNL%U75sQ%nDz0kJySHNGY0qT5%Pm1BOkF6PEQ8ZjAwMJ8ebR46CQ8JuPKX8sPdr93ZzNHM98H9wWe%eb6WwrTCDM4yzmvflt%i9M70LQtXC2MghyC6MdUxIj0zPU1BUkHKPcI9CDPzMlAiMCKgDXgNavc890biFuKn0HjQmsRvxIS:YL:ywdnBk8uFy0DbPtsl7y:v7gQDBQ4aLBoYLDws%jgiOTk:YT8iPkY%6DUGNoknnyevFLwUif%M:5Dqieos2BrYdcpbyvjC2MKAwl7CCMnoyMvVr9VI5zHncfth%:sP9A%NIo8iADEOMb051jneO:87KTdNNy4sUixEHGgcSglrCWr1iPXw4gjj99MF1CPKJsqFxn3GeclpyZ:SitLd4MbghfJu8o0FdAXDF6oXECf7Jr8xsTGpNqY2RzVPNckt2i0fITQhxRDbEJz%tf7N7OnsY92D3Q7SLdIXzDDML8w%zDnSPdJv3W7diOyD7Lb9rv3rDuEOPB4tHvkp4ynNMLUw%THkMW0tYC3FI78jKxYpFjcGOAbK9cv1w%bF5r7ax9oH0xfTd9CK0EHTUtMB2wzb0ubX5kL1Q:WUBJgEMBM2E4ofjR8sKCooQiw6LIYreSsIJv0leRx1HCkQKhBkAmQCc:Ry9OLn3%cU3hHe%df71zXWPtbq2PXYkd%a32zpcemb9Zv10gLRApsPnw%yGroa7SL0ImInZifEJ8MnLiQoJOAc2xx6EnsSJAYqBkX5SPkp7Sjt:eL44rzbt9sa2BjYftiB2AbdC91Z5Vvlk:CQ8Ib9gP3cCtUKKRcnFzUhOCH9JwAokiqQKnoodSgKIgMi8xfsFxQLEwvF:Mn8ku6V7t7h2%EW2BDYl9KQ0h:SG9LR1tTWUuBW4I7tkO0V:RL9ZQ1fDZkclBymKKcoIzAqMD4yQzKDLoQuUyVTJdwX2Rd6B3gHzfXR9QTlDeVM11PXQc5DzvPK8srGzcPNWtZc1uDj6OP79AT1jgeTB0YZRxkQKA0oHjIaMlg2WjaANIg0wyzJLLcftx:GDsIOG:wX:AHq:Olv2m:aIs8mz2PJZMm4ybTJMdAr0FDcSdyc7Jfs:P78:lsRXRHCIcAhdi5xLhw2Fja3N7E30zLQMvAn8yebGJ4YpQajBsjzxPMt4ivi:NP605bKmMogxybHVcpayqbTp9PJ4cnhVfNV83UGdgYbGSAZQSlHKco0zjQXOhc6tTi2OAUxBTGhI6Ij2RHcEe398P0P6g:qOtg32N:K3Mr3w:XDBcQDxOjK58oV2BPYEuoO6sL%vP7AE7sTjCaHJuA03TT0PPE84z3fPb83uzcsKygrfhl7GcYExARk72Tv49vk25jMmMwzwzTDysDLwKXFqMUx0TXRROJJ4gH3B:fXDNwMCCEOITwxQjHKO9E7nT%kPyg8LzzHMc4xoSGnIY4Nkw0f%CP4zOPP46XSp9Ktxq7GMcEywaHCoMI1yzPLI9og2i7tKu3qAeQBUBZLFkQoPii5NbI1Nz0wPdw91T1XN083VipPKqAYmRg8BDYEOO8y7:vb99vkzOHMysPHw8fBxsH:xv:GzNLN0rXjt%OJ9433RwxMDPQf%R:mL%wv8Tn3OVA9Vz3JOdA5iS%RL7sfwh9NDFMMhPeJ97TjueM30z3TJMgoyKPDpcP%xf3F787uzn7dft0b8BvwxATBBPIY7RgxKisqkjaMNqE8nTyWO5E7jzOJM4slhCUUEw0TEP4L:hnpFun:1vvWvMm4ya3CqsLAwr:C08nTyRfXGNdi6WPphP6F:sgTyxPiJuYmqzWvNT0%QT6oP6w:2jneOTwtQS0dGyIb3gXiBRfwGvAN3BDc9cv4y7fBusFmvme%g8KCwtrN2c0G3wXf5:Pn8y4KLQpVH1If%jD2MDQ9MD2HQoVCM0AyQJI2kDbnJuIm%RL0EvT88fxK50znR9RI1OTF4cUGvgG%5r3kvVPFV8Ur0zDTAOYA5tf71PtIEkYS1ibZJvI29zZ8QH9AnUKbQlI9Tz0KMQoxLB8wH%MJ5glx83Lzet553qjNps2:wr:C0r7UvmPCZcLozOnMBt0E3QbxAvG6BroGhRuIG9ss3iznOOY4jj6LPis9KD3bNNw0rSaxJhcUGhQl:yP:neqY6ubY5diyy7XLccR2xOrD68P5yfbJBtYC1tTm1OZc%l:6SQ5NDnEgcSDxLu0uPTg5OEU7RzufN6U3gS2ELQ8eDR5iC10LmveY97DkseTo1O3UF8oaykDFPsVEx0HHINAf0GTeaN5p8GzwRwRGBHgXchfuJ%knFzQaNDA6OjpMOVI5vjG6MXAkZyQEE:8SlP%X:wXsDOx%2n:ac81uzaHGn8aYxp7GGc0fzWPZYtkg6hfqY:1a:Q4RDRHaIuQiYTBsMBY4FzhnOWA5BDT9M2woaig%GEAYQwVHBYrxivGl36HfudG40TjJPskexyTHi8uKy%fV4dUf5RblZ:dl96EKqgqcHKUcHysfK5w0lzQ4ODQ4bDVrNX4shCyHHo0e6wzlDLb5q:lo52Xn:9cG2CbNMM0:yEbIsMmsySrRHtEs3iXeSe9M7yUCKQKPFI8UqySqJJYwlTD0Nvg2PzdJN0UxSTFhJVQlERX:FGUCXgJo73HvTt5i3v7QD9G%yL3Izsa9xuvL3stU11PXX%dh5yn6KvqADYMNUR9WH9Ut3y0dNyo3ujm5OZI1ezVWKzwrFxwRHK0JvQlf9nj2IeQz5OHU3tS4yqTK:Mbsxs3Jx8mo0qXSheCF4LXxu:FsBHYEzhbbFokmlCaOMYUx0Ta0NuQ1yzXoLuUu5CL2IjQTTxNIAVoBNO8v70PfMd8d0w:T8svqy5LKjsoQzxTP2djk2AHnD%cH%Bj46QnyCZcaihpCKCgofTFtMUo1TDU5M0wzkyuvKw8fHx:VDtAO2fzN:FbrSusY3A7czNDK0NzK5MrTyt3KqNCz0APcENyw67Prrf2d:d4Pxw9DIDUgCy0LLeo09zTpNvs2bDJyMvkn7ycYGQoZYAdVB6:0pvRX41LjPNU91dzL38uNyJLIrsu2y7DUr9Sk4pbi6fPY82MGWwYsGC0YYidrJycyNDIrNy433DXWNWkuZi65IbohTBFLEe:%8P6U7JfsZ9xp3GHQZ9C7ycjJKMkvyc:OzM7j2eDZEukS6eT66PpsDXMNaR5vHvAr8CudNJs0bzdzNwk0DjTiKuMq%xz4HL0Ltwsc%Rb5Mucy5:zXAdhLzUvNTMhHyIXJgsn00PHQu9223XPubu5QAUsB%hP0E0gkRiSLMI4wQTdDN7Y3tTf5MfUxUSZJJu8V6RUUAxUDJ:Aq8DffO98N0hHSLsowyo7Ij8hmzWjNVthX2Mvny%d6%X350gvYC%wc8xxRKlkq0jLXMpk1mzXLMc0xVyhZKJkamxqaCZ8JuPe%9xTnF%fe2ODYPs9Az7rLu8sszizOZtZl1lnjWOMp8yrzuAS5BC4WLBbdJNokOi85Ly80LTTnMuMyzyvMK8sfyh:6D:gPNv4y:nHsbuy83LrcRdFD0VbLU8tTy1DLWNFY0fLc8dzS7NHsIv8f:7wRuhFdIlwi9i7zLvs1%jWbNp425TDrMJIlmiXIFdAVPwNEA0zwT:Bl32LfhdJ70uPK2MpGyT3JCs4BzoTYg9h153:ndfmF%RgMKAy5HMocCyoUKtUy0DK2NaQ1mjJ9MuwpySlDHCYcawtbC2z5b:kV6C7ojtm32YXPrs:XyvTK:ssGzCHTDNPY36XfO:D579ABkgE4Ew0T1yLJIn8uly7rNCU1NTWDNRYvYy%iI9wjJBQ6FEUCLQJW8BLwQuDg36DTOtPry53LRsooyiDPQM922dTZ5%dt6Dn5xPlvC9oLlRzAHLwqmiqXMy4zIjaSNWAy0TGzKE0otRqVGuIJEQqO9wD4Y%b45rTYRtmhzwzQBswwzDHOEM791ZrVsOIl4q:yH:IzBMIDMBX6FIUjmiOpLQYuZDLvMmcx%jEmK5kr1x8JIJIQcxCg:zj:A%9y7lbgxt8r1cTU9c7UznrOqM520%LTW93k3Snrpusv%3z77gv4C44bUxu7J00nFy%WLj8xzjAtLuwt%yX8JUYZiRkCCncKCfqR%mrq3ur63DfdedNs0%HOic4K0H7PaNbO1aPgJ%A67gPuP:5f:qQOFQ9lHQoeUSn7KTAxsDEBMzEzii5cLn0l:CRLGJgX2AckB4v2Bfbb5aflytf416XOK8:bypfLEc3UzaXVPNYF40fjv:OZ8ycGoQXHFwEXjCa4JYcw2y:mNIs0qTO1M1QswSzeH48gOhABEYT%Mf%T7P7s0tzm3FvRGtHIy0vLBMxuy8rRQtFb3QLdOu0i7fb%Hv95ENAQ%R9hIAksYCwDMy8zGjQQNE4vEi97JCIkkxU7FaoEcARQ8knykOHA4RjVctUwzZzNqssNzHHQs9DG2dPZDOjj5xz5xfiJChIKwRtEG9oocijOMIYwkTR8NF0wkzC4JiwnQxrRGk0D7wNw5w7o1NYw18HPwc%qzGbM5NFh0XTeut3R7hTulQIFAvQVnRWIJXcl9y8xMBMzhDMiL7Qv8CScJe4UjxVCAq8CcO%x70HeVt4t0uvR28xKzGzOzc1319fWx%Yi5rP5QfldDUQN2B75HvsrSSz4MnczsjJFM0Yr1CtQHdUdAwtzC3X3wPep5MfkVtU71WTM:8vAyg:K69AB0G7ead2R8JzvuwQLBHYYORh5KM0oezJkM4016TYNMaEyGyWmJqoT4hTs:4kAdOxa7LDb49pm0PzOyMv:yVDOesyK2OjWiehd5zb7ufp7DrQOeB9RIFArtCwVMdMySzAVMnAoDSqJGtIbdQk9CuP3Cvgr57jmqNmt2CDSq9Ds0CbPMtZb1BDiVODV8WXwwgLjAWUTPBNQIeUhWCqtK2staC:rKUcsjiD1Ir8S2xQrAqADZ:H08enibuJh2OXWJdPe0DDUdtHe2xrZ8eiQ5g:5bPctCocJ%BllGhomgyclLVAv2S12MLQnXiqdG:cdWgseDYr5fPq66L3oBtsr2sLSINEP0dLO2tVW0w7hkN4T8d:uFwN8AdAUBxSzI9Ujcy2JLtYwzTLoLIIvACLnJFASIxU7AJECJu6d74Xe4N5m05XSv87ZzKLR5s5O2yzYDeoC59T7TfkmDoEMdB7rHX0qECtxMPsxRy%QMVUnAyoSGsQcIwmEC6n2aviS5X3mUthX2I3Quc%kzxzOy9XL077hiN:W8a3vHQRHAgkWvRTiJD4kTy5jLgkxzzHGLCEu6yGsIxMSCBTY:70BzO1Y707eR99Y06LTl84nzjzRMtDE2lnZcOnb54D7%flPDg4N6h4VHoQrKytBMmwyZzEEMikpEyoUGyIcHwkqCq:1kPaE4yTkktXj1b3Nt83gzJDMutM40z3hpODd8kPyrAYkBuAZbhkVKb0oqjJ1Mhk1DzVKL20vuSIFI2QRzBFD:bD9henk6fTYPtnazQrOOMpMykjORs5d2UvZMOoP6uf9wf25EZUROSMTI8IvmS%aNXI1ljNxM5opfyneGdcZ0gbbBsPyz:Lo4PTgdtOA0%zL9csTzCXM3tMA1Mfh8eEP9Df01wf6BzYaTBr%KAcpBTIIMuAz3zM5LjEu2CHOIdMQzBBr:WT9ROo86oXafNoX0AnQTMw7zEXQQNAZ2yPb0ern6pf9tv2wEM0QZyF2IaMtqS1FM00zTTFYMS0oPCg0GUYZ1wbgBs7zyvNg4lbiENUD1f3N7c0WzgrOZNVf1d:i3uJj9Gr0bAd7B3sZiBkTKBko4TDlMGgybTKnLLIsqSDBIAMQHhAa:Sv9x%rK6mvbYtsq0RjR5s3XzRrSFdLC3MDcUexM7LL%qv4:ETQRaSFcIess4yz4MfgxoC%jLzgmQyZ6F5AXnwW4BevyAvMC4hbiTNVX1bzOwc6tz7rPldes17zk1uTC9dr1cwiBCOUZ5BnWJ88nBTADMM8w1TCYKqMqjh6dHhoOIw6X%5f7wOm%6RzbGtvf0drRS89Jz5bTmdMy3jfetO287cz:1::MEdERSCFDIREsDCxTMFQway12LSAkOCTfFfwVYwR2BCTyK:L%4QDiItYj1kXQStCU0aHRf9mL2YfmiuZF90D3VQlKCfIZ3xkRJ:4mky6DLhgvCS:1KOwoBR0HHdIM2Azt%vD60%nV6ePb49s80z7TCdEa0YLVodXl3wbgze7o7koAWwCyEbMRpCCfIAQrBSvELsgusSuzK8wizCLVFM4U0wPDA3fyZvLG4rjiSNc61:fR8NEY0xzThNqQ2kfnWed294z3GwkqCXAZdhmmJawliCyVLIAtki3uJwUoOBxKHFsMXAwe%w77oeqL6uzc1tyB1HDUk9KK0tzW09bS4MTgN%8p7yUAGABjEVcRIiAbIAgqCSreLeQtIiswK04iZSKwFMUUHgQqBPPy9:KB437jD9gL2JLSl9KY06XTzNrT2lLnTec%9y73bQhSCLEYlRhUJUMlbSxjLFQtSy28J7MnSxxAHOsM2gzN%737Lusg63LdYt3B1LTUcNJs0pLWktZz4HHg6O7k7tP:xf:NELYQtR%iHwgqASr%Lf8tiSuPK%0i8CIdFRQVkAR8BFPzQvNp41:j5Nfg12:ScNIx0zHTWdpR2r7ms%ac9pD2iwh7CFAZQBm1JaolBC39LEguRi6BKIco9xz6HIkNgQ30%%f70erG6sXcvtzq0:DTf9GN0Y7VldWb35XfXO5M7pD:ef8HEfAQZSBXIPgq7iofLxEviCx4LKQjkSPGFa4V5wTQBCLzD:P34ubiINcV12LRY9FC0krSntmk2WnmbObE9r:2oQiVCIAZexmnJq8mHy4sLucu8S4AKQMpUB1EHV4NSQ18%237Peo26g:cC9w60zvT29Dd0ArVBtV233Lfi%6I7hQADwDmEeARESESIT4rQythL2kvqiyzLHEjciNKFT0V7wPaA:Hx3:Ek4hfipNah1jrRPdF00m:S:9nu2T:nLOcO%P336AneCbEatBp0J38nRC5MLs0u1S6AKIkoHxwjHPcL%QsJ%gz66ejq6FHbVNve0unS2NDj0LnVudWh4JbgDvD778MBqwE4EycT:CH6IbYruCsfLx0v5yvfK0EiMSKuE5sTRgI9Al7wYPDu4PXgL9Y51lLRXtEi0ynTSttP26ToquiN%ZD5dgt5C60btxvZJ%knKi46LuEt8S0FJwsnixqCGlcKSwp2%HD4suez59ba3toq0zLTudG20SPXE9dH4jbisfGk8X8DeAOYFJsUhCKMIpQrmytNLlQubCp2KpsgoiDzEfoRigCVAAnvF%8t4EDgJtZB1gnSItJe1GrU9Nz03IDqeOo6%y:70QzODIsckhwRKBcori2qLbsssCx6JWglrBiaGGIIXQgm9yz30ubc5vHZ:9kQ0yDTrNK50mXYcdi%48vjPPNG88IEygSxFcAVRCNXI74rzisULhwuqymnKU8fPR%WEIMQU:9M:yHuI%6g36jfudXE1enR7dG71LjUmN2b3V7rbOsw:Ef8mg25DRYdOx1FKGQooS29LagswSwtJT4lJhguGNYH3Adw9nX2ROZH5ubZ6tkG0wTTgNJt0oDYYtj:49:jdvNb8wQF9gTkFeUVdCN2I%Mr3isKLgMutCmuKXUfdB%cEKcQbv%D:1nube6y38bf2dXt1SvSOdLM1NPUed1%3TjrOesI:Aj8YA1oDaoctxzOJ9YnbS1tLZcsjSwMJfkkExgEGAMIAwjs9vT20ebZ5lTaWdp403LT5dLX0qnYntgK5AfkaPNo87cEuwRiFWgV0SLTIj4rPiuBLYEtPSk4KS8fJx%lEKMQlv%d:6Luru5E4FXgjdaZ1snSyNJL1UPV3d3Z3W7rcuvo%:X7%gwPDSwcPBwyJzUnuSy3LOUr4yuMJI0kDBgVGD8ITggp9zb3e%eG53fbhNuK1JLUz9PR02LZY9lp5GnkgfOD81wEaAR8FIwUtiG9Iesp6CkCLPcrCij6J10eVB44ED4QzP:Z:2rvc%%L4Y7hPtg52IbUfNT01vDWVN9X30vsT%wS:Bj8eQx:DPMa9Bp8JXclpSqdKp4pkCmoIpYi1RbKFq0Hqwdb9133euh%6EbdRd0K1:3WfNZt1t:b3Nt35oHmu:TP9L4E2AQEFBgUHSAlIIQniSdlKWwpTSVWJccb0xtYDmcO4v7r:pvvn%:a4t3iUdpN2i3XINcD2vbZMeIo4ojuhe6N:ZT94gzvDDkaPhrNI8ojDygKKIsmhya%H8QfRBRaFLsF0wV:9o:2uejB6IDegN4n2SHZHdka2afeqt4a6RrpzfbL9ucF5QUIFAEUEB8DH7wlriX:Ju0mmyKIIlUZTBlKDE4Mev2B:UXvSu%I44bj99vr25XZidl23HfceuSI5KvwvfAM:x::fg2JDeAZ3xlsImkiDSYPJkckSSRbHV8dIBInEigEKgTD9cH18ujt6GXfWN%w2pnaS9s02:fg5uA56yzrh:iC%OEG3QZRFEIUsx6aHpgkgCRVJUUlqiCnIFkXZRe7CssKYfxp:J:uo%6Z45vjk9yV3JraodoD3hDeJuYx5hLyG:I%AEYATg5QDiUaHRpGIjkiiyV6JWkjWCM%HDgc9xD8EBYDGwPY9Nj0auhk6FLfRd:H2r:aituS24Thl%Hu6wLsYPlw%coH0Af6FPQUHR8UH%Mk3SR0JWslqCCcICIXFxclChYKqfuU%wHu6%364t7i8NvQ2wva8tmN3YLd9uX25UzyVfKtALkA0g7VDuEa3hooIysjWyZnJikkPSTRHOscIxE4EfkC:gKA9Hr0rOeh51jeR97G2bXZgNpx2qbgk%Bz613rO:kn%QEI6QeOFW8V%h:aH:wl3yWgJoomuSGxIe0X8Rd2CncKjvuG%5ftiu054ijiBdv52gvZDdlp3HPcB%UN5eTx4:HDALsAVA9FD48bgRviI9sjSydGJx4lGyWVHZYdkxGUEb0CuQLm89:zHOcQ52vdWd2v2KLY0NnO2Q7gEeAL6w3rfvl5%aUIkQhrFk8WDCH3INwm0iZSJ08nSCJLIgcYBxgjChoK3vrS%n7sd%wB4fzg5Nnk2R3YJNjr2:PbBeUN5UnyUvJkAWoBLRAoENUczRxLJUclTChNKJslpSV9HYwdJRErEVECSQIG8:jyuOWp5UfcP9zR19XXENkZ2eff6N9x62rrBPr4%VQJRAlPF0EX8CHpIZEnjCeuJ6onLiIxIogXjhd7CX0JHPod%qLroutD4EPgXdlo2dbX8NcZ3DncjuWp5fbyCfNHAkwCBBEDEUUdSh1sJXclRihQKG0lcyXyHO4cJRATEFsBQgFu8lfyWuVE5VDcPNxU2EjYwNm52cngxOCV7JbsOfs5%2sKZgryF:EX8yH%ISgnPifoJgcnFCE2IVkWcBZNCFUIA:kG%cvq0OrL39Tff9mQ2aXYt9gj3SrdheaE5u3z6vMWAxEDlxGVEbkdvx1uJXgllSehJ1QkZyS1G8obFw8kD9IA2gAU8hny6uTu5DXcQdzJ2N:Ymtqu2r:hx%Fr7WftCfz6%:4K6wrgF9cXryGwIf8mAieIJogmpSChIOkV3xW2B6wHy:jJ%CLrJetW4FzgItox2hrZLtly3YbdCecc5zX0RfTqAvICTBFVES8dQx3FJOEkEicxJ8wj6SNlG3QbLA8sD:8A:QCU8pfyyeXR5eHc7twq2TTZ3NrZ2vTh6eFz7WftXvtR%80JwQnfFtoWwiDCICAmJCYJJhUmOiBIILEVuhVaCGEI8vn%%TvsTOx24ZThHNtF27bZ2tnw3QbeR%dR59Xz1vMeAhwCPxBEEMcb0BtpI2wjNyYxJkojPiMtGxobSg83D0QBOQEw8yvzAecB50TeT9492lHaq9vA237ikuKQ7aHtJfsw%3UJggloFoAWGiA2IEklXyUKJRUlaB9hH3AVWRVzCFsIKvoZ%qPsl%zK4cLhYdtZ22zaXdq:3rDen%eY5wb0BfRDAkgCDRAdEH0blBsyI0wjxSXiJb0i1SLhGuoaKg8pDz0BOQFH80Pz9Obz5jvePN6%2rTaaNxN3OLiv%KM7WvtwPqm%gUJ:AhJFk0W1B:ZH6YkqyRVJF4kih6THtcU4hS3CMkIy:re%ljtae3K4t3iaNx33JLblds%4DTg0%i%6IH0YvQlAgkCZw9YD24aZRq6IbAh7SPgI%Mg0SBOGTwZJA4fDgABDgHT8%rzYOh76ErgZODt3P:c1N7e3lrlY%Vm72rv0:vO%9YI0QiBFHoUZh1YHfch5CEwIRYhoht8G2YSPRKjBoQGF:oG%nPucO4f5Sblnd%j3:De7N4r4ynjieuO6432m:bLAuICyA7iDosYnBg"},{ name : "__ASSET__:sound_flixel_system_FlixelSound", data : "s583739:UklGRiSuBgBXQVZFZm10IBAAAAABAAIARKwAABCxAgAEABAAZGF0YQCuBgwAAAAAAAAAA::8AAP::AAAAAAAAAAAAAAEAAAABAAEAAAABAAAAAQAAAAEAAAAAAAAA::8AAAAAAAD::wAA::8AAAAAAAAAAAAA::8BAAAAAQAAAP::AAD::wAA::8AAP::AQAAAAEAAAAAAAAAAAABAAEAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAEA::8AAP7:::::::::AAD::wEA::8AAP::AAD::wEAAAABAAAAAAAAAP::AQD%:wAA::8AAAAAAAABAAAAAgAAAAEAAAABAAEAAAABAAEAAQABAAEAAAAAAP:::::%::7::::::wAA::8BAP::AgAAAAEAAQD::wEA:v8BAP::AgD::wEA:v8AAP::AAABAAAAAgABAAMAAAACAAAAAwAAAAMAAQABAAAA::8AAP::AAD::wIA:v8BAP3:AQD::wEAAAAAAAAA:v::::3:AAD%:wAAAAAAAAIA::8CAP::AgAAAAEAAQAAAAIAAAACAAAAAAAAAP7::::9:wAA::8CAAEAAgABAAAAAQD%:wIA:v8EAAAAAgAAAP:::::%:wAA::8BAP::AAAAAAAAAgABAAMAAAAEAP7:BgD%:wYA:v8DAP::AAABAP7:AwD%:wIA::8DAP::AwD9:wAA:f:%::::::8AAP::::::::::AAD%:wEA:f8BAPz:AQD9::::AAD9:wIA:v8EAAAABwABAAkABAAIAAcABAAIAAIABQAFAAQACAABAAIA:P:5::r:9f8AAPf:BgD3:wgA9:8GAPv:AgD:::n:AQD2:wMA:f8AAAMA:P8DAP7:BwABABAAAAANAAAAAgAEAPv:BAD5::7:%v:4::7:8:8CAPH:BAD5:wkABAALAAoA:v8KAPD:BQDv:wIA9v8CAPz:AgACAPv:CQD4:xEA:f8SAAcABQARAPf:GwDx:x8A7f8dAO7:FAD7:wMABwD2:wsA%P8RAP::FgD8:wwA%:8AAAkA:v8WAPT:GADr:xQA%v8OAA4AAgAOAPj:CQD5:wcABAD9:xAA%P8UAP7:CgAEAP3:BwD5:wYA%::5::r:8P:4::v:%P8EAPz:AwACAA0ABwAVAAkACQAOAAIAFwAJABYAAwAPAPv:EQAJABYAGAAKAB0A%v8lAPv:JAAIABYAEwARABcAEwAWAAUAFgDz:xoA7:8fAPL:GAD3:wsAAQACAAYA:P8EAPb::v:7::j::::9:%7:DADa:xEA4v8OAP::EAAJAAEA%::o:%r:7f:k:wAA5v:1:%j:3P:m:8z:5v:A:%7:0f:y:wAA6f8NAOT:5f:1:9D:BwDe::r:4P:Z:9v:z::v:97:AgDf::r:z::u:8v:9P:U::::1P:8:9X:6::i:9z:6P:R:%P:xv:q:8f::::W:xEA3f8UAN3:BADl:%3:8P:y:wcAEQAyAB8ATAAZADsAHQAoACAAHwAQAP7:CADl:xkA::8iABcAFQAOAA8AGQAVAC8ADwAVAPj:5v:e:9D:zf%5:87:of:f:6X:8f%y::n:wv:w:%7:zv8aAKP:JACe:ygAyf8eAPb:4P8KAKP:FACt:xoA1f8dAPn:KgAxADwAaQA7AH0AKACDAA4AdwDr:zgA0v:j:9v:qf:%:5n:JgDD:0UAGgBLAFMAMwBeABAAVgDp:xkAx:%k:87:Tf8AADf:JQA8:x4AZP8GAKb:6f%5:9j:pP:t:6X:DACm:wEAi::j:5P:6f:j:wAAUQAFALIABgDaAAkAngASAC8AMwDe:1cAuf9TAMD:NwAIADgAcABLAKcASACXAC0AVQD7::z:yP%o:9P:dv8mAH3:YQCz:z8A2v:p:7X:qf9k:6j:Mf:c:y7::f83:9T:OP%d:0v:qv9::%3:o:8lAHP:KAD%:uL:k:6B:3L%Zf:H:pD:ov%6:8EA4f%7ASoANwJoAP4BaQBNAS8AugDB:2gATv8SAEf:2v%0::n:DQAcAAwAMgDk:8QAsv:XAXr:rgJk:8kCd:8eAoL:6wB8:87:jP9L:7j:P::d:1r:7f94:wAAXP8yAAX:bQC9:mcAav4TALf9oP:b:Bj:MPx5:rb7Jv62%5X%n:yW:xr%hAB0:xIBdwBxASIBxQFcAboBSgHwADYBrv9PAb3%tgF7:jICxv5QApj:MwLtAFUCGwJcAlkCiQGxASEArQAX:4P:v:5M:rr%kf2::tj95P7z:i::NABf:zgBZf8tAn3:PAOC:9kDAf8%A0P%egEQ:nf:Tf4C:jj%aP29:dH9Xv0z:1:95ADs:dcBEf%GAVAAfgAvAav:ywEr:zwCW:5tAkT9%gIS:boEof4vB0UB2Ah:A:kISwT3B5sDngYPAtQFewDxBWj:QQa%:igGtP3mBWf7QAUa%FEDdvWnAPX0Jf969hT:Ivny:nL83:30::b7rAKO%fgD%:dHBN74TAR0%%IDBP0uAnL8zP7x%or6wfm49jX57fPk%AryvPfp8N70EPCW8Djuqeul6hPnD%fW5eHmwuwX7Pj9NfVHFYD%JircBAM1EQc4M8UEjyfN:fIXM:NACtDnYQLY3p4B%tkiBvjYsgs:2lwOq9uhDKbbCQcl2k7:Idhp%OfV8PT%0qL0xdCd9QzUgPdr4Yv6h:fg:GwOQ:wkHVn5iR9f9sQXwPQKDCH27gLt:G8AjAkkBTgZDg8uKL8aAzNsJMs26ii3MpYm:ChGHhsdmRMbEhMLSwr1Br4GOgbWBqcG2ggKB3IKGgdLCekF7gSDAXf:4fiF%zvu3:ov5vP%Q%R7B8fofRDN8coUqfy3EoEGMgwDDZoDdA:W%qwOqvNEDLLu7gk:6ygJ3uiYCkznYg1w5ZUPlOLCD9Xf9w073t0KvtyCBvXZBAHX1lj8BNcf:EDf3QKc8lUPvQ4PHVkrUyc7P40rtkVoKVU:ESLFL9IXhRxrDdAL4QTLAuX%fwNW%20L6PlmFCr6shhZ%9UWkfyeEBz9%wdT:Er%qPk59dX1iO4r9LfrRvnY7RsH3POFGr75FC2j%w85MvnWO4:04DXv7%Ypi%02HJ7vZxG49mUMbQFpDZUN8RJKGDQbGh4cJKYdoSrgGNsrBRIsJ2YJyh6F:wIW%vZYD5zy:gsV89oLvPZnDZr6Qw61%60Md:idCILxVAPC6Uj%cuXV%kfnR:oJ7hT9XPbcAQ:%AAZ3A9sHlwMGCJH8AAir8EMI%uNmCNbYZwiW0JwI4cyeCAjOggdJ0lIF39dMA9fdUAIb4w8CVedxAtjsIAX395AMBQwNGUcoOCdKRpExWFxxM7NjGSsbXC4aFEnABMsuL%:nEk:cl:x0zd3w2cP479rA6:Z2xKQBb8zQC5LVDxKj3Q4TtuMID0Hn4QYG6FT8ZOc78uLo3esW8EXrb:1I7z4NqPO:GYn0HB4V8XcYEeq0Ckjgr:kg1vzq9s9m4rnQBeEp2AbmGeW970T20PtjCC0HmxbTDpQdDRFyHL0N2xPNBSkGx:pG9%:uburt5MPglt562vnb8Ne92x7ZGtw73XXbDePh2DDp1tR67hHRGvJxzxXz09C98NzUTOyE2m:otOBB5oTmWeQt6xThO%5A3N3v19ak8KPSCvF20YDxd9OH8inXXfQy26T2xt6y%FXhcPoD5N:8depPAeP3DAjhC:EPaCIUF4k1jxtnPxQcqj1OGMMz6hAYKFUHLR9D:ZwaLvTZGhXtmR%T6Ecn5eafL%znzjZN6:Y7NPDjPv30BT:J9%g6FfjxMaX3SCbg%acbyQHrFAMQchNVItYWxjTtGzpD9x2xSv4ZHEoUEGxCAAIZNo3yjigt5U0df9zfFmvZLhbN25EasuIpImfsiCp891IxvAKMNJ8L7zLzDnAs5Qs3Iu4D4xWQ9xAJfOZC:WDTq:MVxL3sM73957i:SeRvyr:gydpt3bLsJdv4%8DaHAZX3BgK8t5PBx3hpP354ZXuoeGw3Z3g2M5P38XD5N28vLHcpbt53CHD9d280fjgbuGQ5Nrs9Oes8h3rdvSc7mD1KPOD%e34fAM7:1gS4QTlIrkI9DHhCYo81QfOP3EChjr9%QUuZO83HR7kbgul2Vj779AD7pzK3OM5x:HeIsfV4eDJ%%vpzZ35iNEJB0nUwxGG19gXmN26GHzouBV0%B8QdgsgCAwe2f23LBjy1TQW5hU1QtvLLVrT3SB70DcRgtQQAhPfCvY07LLucPaR7JP6X%%E%Ov1iPFD:pTnNAZ73ewLk9VoDkXQcg1yzUQJ6s1LAorRXfns1c:vP9kG5:zbtN:33XzZ0dyj0wPXH874zcXJy8SSx8m%%McXvoLKA8IEzn7HYdGvyxbURM0M1k:MNNfryZjXSMdx1wbFO9cBxJDXosXW2FPK:trU0NbdPNhz4c7hH%bc7::rMQPe8igaOvrhMWsBhEfCB:FYjgz8ZEUPlWqfD09olg33XW0Js02vA5U6J:2bJ9z2:xf58dQNde%QCLjv%AZz8tYIqfaNDQb7mhPR:jUarQI%ITsI8CcPEUUtxx2cMJQtWjFaPhkvZ00dKkBY5SI1XQcaslvoEExUlgmKSIcFoToOBRgtUAg7IrMPhxsSGnAZgyOIG:Mn1yBRJvcn8B8pL4gWsTS3C0030gBbNuH20zE570Mq3eqbIJTp7RXy6jALsu73ACDzbPfN9a7uzvU25wjzuuEC7dre9uTk3lree%Fe233l0dqF6Ufaoezo2IXuxtc47zHYxO5U2lHtzN1h67zioOk36X3oVfAT6MX2cOhc:NnpIAPH7P0NovHVHWn4ADGBADdFwQj6V7MPY2YlFPhumRXXcS0Ua25kEP9jDgthVBwFCENd:3YygPr4I0L3aRgy9n4QUvf5DO35jg3t:DEQif9fE:gBfRd3BaccoQuYIXYVgCWuIn8owDFUKmpAHCpLTCondFNVIedUwRjNUPgNRki2AgE9nPnTMA30YSX98fwbMvSIFVT7WBLDBEIS%AvDFHUO6BgNDEUdUAVRIEf71iAM70Ue5eHOGA3WOBGizXoIHsld:1rIQvYQyyPtps:44xbUIttz12zTxtixzaPWgspc0eXJJ8tVy9TFBc7ZwT3RFL%e1Ky9D9hHvlXbEsHo3TnFTN:fyWPfd85k3jvSwtzn1CDbSdcw2tvam9pA4tLcfvDo4IUFhOa2HQ7tdzXJ82BK5:n8Wbn%lmLVAf9jJQOqXtoC%1M5AWhGf:6gN:z6Yygu9xkakvNoDnvwQgYX7hcCh%wPAQ3sAwFN7REBNPGMAqX4nwb:AwUN1BLcFN4jAB1CNQAk20TRJ5lQHiYNVyQev1eyEQlTeAPNSdr1ZD3D6oEvweIJIvfdvBZj3ssOt%WfCqbxEArt:ZoM6QdbEe8NAhdLDgQcQAgQH3f8kR9G7bUdjN7nGSnTehRny6EN1cZxBUXFEPwuxgfyVMk26IHOgd%z06HYStYa1OfVKdIX1LbSMNJr1aDQ3dmRz6Tf7M875v:SzuxI2IDyg93U9l3hrfnt4xr7jeVS%1Tnrfra6qT5::Ds%BP7TvncCj:7hR%p:oM1EwMOSuUHnluqDLto%hCicF0UJ3ODFtRvbhcxZzMXMFvWFU1NixNTPrsQTy:GDTAh9QrhFJUInAvuBpoFUgYtAl4HugELC3cFaRKeDeAdHRmhLLIl6zxmMMVMODdgWlc5PGQwNkppKy4BaRYjamOkFkBZXArhS:f:AT0q%GwuSfO5If3y:xfi98URU:8hD2kGng::C1gS0Q5ZFqcNxhoFCd4eQQLoIVr6LSNP8hwituqWHpnj1xgo3QwRdddXB47SHvwbzxrw9swq5GzKL9ngxvLP6sMgyQbDTMWaxMvEpsiWx3bONc321L7Ud9sR3TrhRuW15avsVOmK8kbsXvZE7iz4V:B0%Bn08vcs%mP3rQM09:0RdveuIxb4iTX1%PRF5fkqVLn6ll5X%yhkvfv5ZBL8YmF5:BpaxfwMULL8ykM2:Bg2afsRKEn6sxq8%EUPxfaiBr70BACL8xb7aPSd%XL4vPw3ADoDbQuCC:wYVhRoJxEcJDV6IalAGySoSIEjPkyXHwtLtRhWRUoPETyyBG0wmfqNIynxnRbi6LcKZuSuAMHkD:k35x:0Zum98XXrbPFd7ZHyAe6Y9NjsAPcv6j:5dOaz%qvh2Pqe23b56NRc9qPONPHZyNfpecOP4Ja:%tUOveDKw7kYwA21abaesICuza34qPCsS6YZrrmm0bASqsS0mK86uk%2A8FrvW7ISsQU0HjKRNfcz4PdotTP49jYNutl3MzzOd9d:lPhpQu74uUZiuPLJtjjJzKw4ys8I%PQQ0DiN0gq4TtJGODSRinf5kBY3ok3u92yK3LdaB9r3fMTat2HCVPdKQFb3bj7Ft7g91ngtPT85AP0iexC9:r2R:2YAzMENRHsCooe6RBmKhkW0DMeGi86Kxw%PQYc5TyTGWs5RhR8M7cM1itvBBgj3fvcGW:zuRAY7TMI5%mvAJ7ocvrv55:1d%dU8ufmpPAu5njwgeV58dbkF:M:5Kv0qOPZ9XPilPaG4Ln2Td7W9X:bZfMB2B:vp9Qg6T7R2OGgzN:ZY8fp0UDDvMrKwBPFHcB1wanBM8A:xVfBMcqnxNPP1slA1Y3QB9o42IbeEeDt4ovnvOd77pvu7:Sq%Pv6qwWOAGUVYQUIJygJFji8C2hGIQ2nUX4N71kTDSRfIwxJYewKMmCSCQRcFgjIVX0GUU7zBP9FuQOaPfECjjWRAootjwKLJSADch3pBK0UzgheDIgPTwdLGcAGlCXyCUgzLhAeQbkY9E1UItJYyCv:YLAzKGZhOEZo3jhgZ%k0kmP%LDNd:iLYVAwZSEtGEFJB%AmmN6QH0C6iCDMnpgoOIWYMhhx7DacZSw1AGIML3Bc%CP8X9gNfGPT:8xhE:bAZqftKGrT6QxpU%icZD:qpFmj5pxIC%EENsvTdBs3u%::o5yP5EuLc8vzdrO332:zpRNwO6Hre8edK4o:psee97ADuL:FA9Hj2DfpE:Ir:jQKeBWUJig2jEKYX0RcDJG0eRzMXJM9EkCj2Vasrs2ReLWdwyy1geCEtEnyIK8t7JynodzEmznDWImhnPx%4XJsbvFEtGHNHPBX%PfUS6zSGERksZRETI1ETZRnhF54QLx87C%kouwmEND4LNkF8D:NNMRaYWWMeL2PxJhdqkS75bdUzvG6lNXlsYzNrZ3st7F%QJXdW4hy9S9wTkUDaC6c1bAZtK%0CKSK0:ycagfykE6L5lg6u9rYKQvPNB3vvyQXI65cEnegABNDlowP24hUDgODsAffe0f:x3Zr89dxW%LjbLPNC2T:tKtW55qjQ8d:XzGXZq8mL0yfHuM6bxTPLFsU4ybjF1ciIx9vJKMoGzJrNLM9O0jDTbNjp1wPgKd0g6b:ihfNl6If:xu0EDpbyNx6g9tEtyflsO:P7yEYH:VxPBP2WVAn8W1Yq%o5UZfc%T8Lz40Zy70I8zeqVMC7mByXb4ccZGt7HDlnbfAQj2sr6B9tG8XveBemw5LHjYu1m4e73XuGJA1:jVw9R53kauewaJK7yjCv7920w0PuZMgr%AzJw:qwu4fzbKO:5HCEZ9gkYmPErDkjt%wP76ev5M%dZ8BLkjOdp4L3fM9wM2WDXetML0unORsxJy2PGsMgfwSPHr7xvxrW4RcZNtU7GwrIpxuGwesV7rwTEZK6ywQitm748q:i6fKkLt:anILOopomvCKaNrGOmUKqSp%uoi6lmqDOsrqg%r7Op7rJ1q%a3Ca5Tvo2xE8YQtibPbLu32VDBMuZjx4L0Tc1HA7:SARF510EdSNvFJxLe5S:Z30E1peCfN3PgkDZN3zsyRd2JK33aXCNL14QaK9TTEXLRqwlGzwUC382g%qjN9vIozyvr19KM5ODYGOAJ4ajd0OoB3Y71Q96FAEbh:wqh5VEUvermG6nvZyHA88kk:vYTJlv5TiWX%qEiqPpZHsD52Rhv%IYSa:enC7T2YwSw9ef8MvRu9UvyNu6y75rnZezy4b7oaN3F5BLaqOD81yzd:taa2tDWXNhB1wrWItjR0x:Z19Hb2eLPC9p7zYnZqsps2E:I8dYSx1zVusby00DH69IcyVXSKsw10rbPmNJf04LT5Nb%1PTZQNfm3Hrav%Ct3lbmsOPd7TvpPPcJ78wC8:QSEdb6RiFzABkxkgXWPhMKOErODSNTsxBTWeYSFV2HFNBemhV9Xh4WS1wOFtJYYhVtVDMUBE%yElFIEhFBQKMPETfeDuMsRg:dIV8RExeQFTUO2BsDCM8jUATjLCUDdTagBO4:SwjCSEcNYFCKElVWFBeHWmoaCl2dHNddzB3rXB0eZFrgHW9Woh1QUSYeYku0H%VEcCELPkwiGjccIlMw%iDpKZ4eEiTZGuAeuRVCGmwPPRaZCO4STQJSECH9VQ4G%eIMvfW:CxHzlQrJ8BgJa%4WB2brkQTn59EB8eQk:yzjxPyT4vn6RuPv%X:lo:nh6AP6zez%%uLwefzl9IL%2PhFAST9ugRDArIIdAj9DNkPXxHKGLIV7SPtGWIx9B2yP4UhokyLJAxXFif6XjQpnGTzKiloWywZalQtsmrKLf5pui0LaA0t4GS0K25gzymmWpEnkFNKJWpLfSN7QqkipTgjI%wtMyVhI:IocRopLr4TdTRJD207Cg2cQsgMoUnqDSNQmA%sVQMR4VneEapcaRLoXcwSaF3JEi5bNRJzV0ERflJqEKNMJhAhRkUQDz8TEIY3OA%yL8cNsiehC7cflAgDGJcEtRCV:%YJtfnRA57zmv7I7TH6AOh69vzhPfPw2yfwXtbx7HfRZenTzGjlGsgq4c:DBN25wCbZ8b681Ue%DNPHvjDRRMAP0C3Ckc8gxJ3PB8Yn0ADIT9F2yirTEs6f1V3Tithy2rzbDePz3hjtE%LW%BHl4QW056cSzum5HXTrribJ7Hot2e0XMqbu7jQZ74A2Gu:sNrTuJjbz7Ts0yewfMTvrpSxa6akmO%dLHzbl6hbO450NV%NBAwfkdfga5q3ui%n05hjuiuF484HeYPmy3YH:Y96eBY:fYQta4FoQUuA%FJLf5BZ33iEYXt37F5ncoxZL3C8Ufdy1EIPdYQyP30EH6uFRAZfjsvpR5JHzFeQW7JPig%Sk3xbdkNvy1bHWRs930UHJaMz7w9jHiL%8w%m7yr:RuMu78LXUtymz3LNlsGmvjq11qsSq3aUrqGaizKUloM2jJ59nopaftaEmobKhOaNEonelU6P2p:%kFat7pySvu6pItKSuubozs57CLrjYyzO9b9YHwp3ihcbS74DKtPzszVAI1dBREkjTThpQ1fsf7NaYIwfYniWq2Eom79iiJcHYsyMZ2LggJ9flHBjWLhgU1aASfNRcDLvUGQUL1pv8g9il8xzccuuo4JTk9%Ur3%brgts98sXZzPii2Vb:d9ptBbHbswoa3QkPq95VEjXggRSg4Z8VJuPQFevkHhX85psTr%lZERvtUw6k8JkKqfNGBgf2YQGg9:77JfhP9mz3evCV9bHq%PI:5fvvVODZ7P3bqelO2IHmO9VF44XSy98H0BXcuM0a2InLx9OHyZLPz8dFzGzGHcpyxd7IEcV0yGnF6siBxhLKVsity8nKqM3OzUfQhdH%0:zVENkV24jfueB1583myPAO7U77O:MFBzD5yhPL:sQg:APlLMgIrDcWDf5AyxDBSOQT%05QFstT%hc4V:sYNll0GbFZdRmxWCMZZ1auGPlSOhhnTvsXvUg7GPZBKxnmOfUa3TC2HdgnWyG6H8MlzRjhKisTlzD2DqI2JQy6PHQKkUKaCdVHbAlaTMoJBlB6CsVSOAulVAYMxFUQDRxWeg6lVY0QaFSYE1VSShdXT9gajUvIHSBHFiAcQq4hlDxXIqM29CF0MJsgQSp3HjQkpxtbHkMYzxh7FKkTexDRDkUMLwrcB8cFPgOaAUr%ov0B%fj54:O:9ovvEvQ77BXy9enn8LzomfB:6DDxB%mS8h3qlfTG6zn3U%6O%hnyd:44988Csv2NB3kFlAxvDqkRjRihFuIjZhsXMOUfSTwRJJ5HzyeZUfsq7lmOLWpgiy8hZe0wZGi:MXJqHTJPawYy%mp7MYtpkTAYZ2UvnWMULh1f2yyVWQIswlLKK3VKYiwXQc8tizf3L4wuzzJzJk82eh9MOtgZkT6aFedChRIHR08QrkrDDrxNmQ0ZUHYMt1EtC51S2gnPUqUIQlLIB:FQmQfVTkQI4kuFCShI7grGQ1QM1D60DVg5zw5aMy4P2yx9DvMlswzQHtoJlxcFBmIQcwFVCYX8hQJ89%n7f:Jy9ZLtH%976ADp%%I04yfd2N1q1:zYK9LA1JPNQNGsyYPOmcaKzH3EZ8tMwx7L6MKby2XD2cz5xNfOzMd90fTLpdRp0S3Y:Nf:25LfB%BJ6BrkJvIF6Mr8sut:BxDvkhHy8Y0aM:QsIt31SCgG9%0sovdQMJz3gzL89nUz2:U4M1L08jF08qUvY:BLLFzu7CeV7GsiOuuJG33qUhOG6lcKS%tgAa7s%vis7mLxRvHA6lz0QOWy99fgGPtV3WT%oNpqAZnYAAT01hIGcdWkBxPUtgjx0jYJMNIfCRnScQjs0iIHmtQhBcDWdwLr2Df:8Npr%8:cFvdV3kPyJN8C7QjfZ%cB3orhE9yO217ZmtUt1sPPudIGyiPPYMSCy8%%xMdTubXD%rM%v%Suh7ovqt6186WJsU%iq61pn1%qU53Xpw6cLaacm1WlCpxbpWKddKaXn7%ok6JOrECmMLGFqk23Pq92vlS0pMayuenPPL8e2sbEy%Qqyk7vRc8h%enT9wHw15sJVtvpDyje%hRh4PYY8uHUG9zihh084ykeLOPYHcDikxwb4mIaduE8Fwnh8RL94F8NbuG:Bmviov:y46:49uVI8nTohOxm63HnsO4a4yDyad%Q9VPc7Pjk2Rj8A9j1:n3WcgE:1ZEDVtROBd3TlwYL1FwHJdWZBz3XTwcO2ncGHN0QBQrgKgPO4tAAceUD:sPnwvqI6Rv3qOoi8xnr7e7i6pXqKOo25hTp4%HA55:dRuZf2arkH9XF4u3QcODgzLHdDMnD2pTF:NeewpvVSsC206y%YNLNva3Rtb2c0XO%MNITwIzTmcLR1frFG9knypLdB89C433UB%p42sXx4uCG%pznSASB7skObfWFGTn87SO:Apgt2Qg:Nm0OsD11E:ND8Rc%SdIbnk0KH:9QoiFgU68j0FRFJURVeia2VGknIlM9KGpQJSliTDwqB0ePK65AKC3%ORQvjDNRMZ0t2DNNKKA2sCOTObQflDw7HIg:OxlaQqkW9URbFEJHMhIxSS8QwEpgDvVL:AzHTEwMIU2FDAFNoA1uTEwPZEsWEd9JxBLlR10Ue0XQFaFC8xZVP6IXnzvGF5Q3WBdPM3oW4C5QFVgq5BPIJUMSMiF5EIYcaA7EF98L:BLNCEAOTgWkCbcBRQVc:kUBY:vB:eb4zvoN93:45vXp9mX1H:aZ9S32lfYQ91:4xPgV%zX72:5P:qoDAQJwCT4GKRDtCtgX7w9jICIVdClhGoMyhB8fO2kkB0PzKAFKEi3mT8Ew0lT8M%lYuzYpXPM4kF6jOidg0jvmYJU8v2D%PKpfIj2JXSk9M1o8PZVVcD3MT809SUlgPq9CNj9kPEtAhzaVQSoxBENJLItExCcTRpAjgEemH71I5xu%SToYdEqfFNFKIBHVSuQNhUo6C9lJYQnBSGsIQEcuCFpFRggQQ1YIWkBNCDs9MQi8OewH3TVlB5sxgQb:LBsFHig%AwsjGAHPHbf%cRgZ:P0SS:ltDT:2tgfN8toB2O7p%27q:PXR5SrwYeGQ6lHdS%Wl2XngfNYt3O:Te9j20XjVltA00:HPt9EO0AbR8NAY0bfS4NF51U:TNdlW1fLd5te24%3abupP3uLx7OGb%aTlFgFX6RAI6OxgDjzw0xNE82MY9vU8HE74bB9A%uchvfuxI8L8ySRZ:SMlkP26JHn9cSMz:Rkh4fyLHZ78xRh::AMTjfzUDMz8wAY%:f0A3P2k%5X%x:Ze:1TyKQAz7uEAa%pzAfDm2QGf4wcCZ%D4AUjdrAFP2iEBr9dSAKfVP:9c1OH90dMz:MfTOfrZ0:H32tNa9dXTd:LF007vl9PW60TTEeiw0gnkuNHI32zQXNvxztfWUs0%0pLLks2sydfIg8cLxPnEKb8DwkO6uL5ztW27z7B4uHCs57VxqLiz5KQLsuOh7LB:n0%wwJ1HsLWc%LBznG6y%pyxtDyey7c0oLy72KKPwBGmTsbRqfDMCq5e1JyyVtxpt1fkWLz460fBDvMgxnf5z8oL:zzP2QNe0wgIOtebC8Pahg7k3cEQouBFEgfjFxMZ5S8T7%ZkEqLokhBE6qoN5%u1CZrtAwVe7x4AOPFj%yzz9fYp9e:yI:dc7xj5Juz3%kDpqvyj5iz%O%R2::ThfQDO30IB0N3KARvcDALj2goCTNrNAWbaSQEl238AQtx1:2vdJv6K3pL8o9:G%qLgvfh74Wz2JuLa84fiDPGW4gXuZ%LZ6hHimeed4T:kCuHV4D:gZd0m3%LZuN1O1vjbwtIL2lHPR9gMzOfWEsnv1XXGbdVCxHjVmcIL1ojBGtcUwbPYVcHu2lnC2N0WxHvhhsbS5avJ5OpvzcTwwtF496LW9v702yYHlOG3D2znLRhd7TggR:OuJxv5YC7E:jY0LARDOVkJpT1ODmhB9BKJREIXAEc:G8pI5R7nSUAiPUpsJaZJcygPSFkrdEUxLutBATHQPcUzkjmHNm81RDmJMeY7:C1tPtEq10D:Jw1DdSUDRR0jtkbbIBVIox4cSXUc3EltGktKuxhiSoYXL0rYFrJJtxbfSAgXv0eIF1dGAhieRG0YpULIGHlAAhkNPg4ZYTvaGH84VxhgNYsXDzKJFqMuYRUbKxoUciehErQj1xDgH7gO5BtJDNQXmAnGE9QGxQ9DBOsLEQJUCEcAAwX1:g8CK:6Z:%v9qf02:kr8Gf%V%6sAi:sBAyP8GQZj:ecJPf90DpwB0ROCBPcZ6QfRIKsLMyi3D8Ev%hMTN08Y5j2fHBZE4iCFSfskJE7bKP5RjSwuVQwwxVdFM8BZOTYSW%A4uVs3O61bWT3RWlg:CVkuQVFW6UKzUp1EYE4:RrNJ00cDRWZJfkDnSjE8RUwlOIdNYDSlTuYwjE%mLTVQhCqTUGknmlBPJFhQPyHTT14e9k7bG8dN0hlXTEcYlUotF4FIXRYqRpwVjEPGFJ9A1hN8PdASKDqwEZk2ZhDSMtoO1C79DJ0q1QpFJmoI1yHJBUQd8gKXGNH:3RNX:P8Ohfj6CWf07QQb8OT:2evm%uDnEfZT5HXxQeEY7bPeGemy3IzlPtt24mDa8N8s2gbeutqw3BTc99su3uDbAuFQ3JbkPN3x6K:eDO6X4NDz0eL:%VPlOAAG6CUGzOqUC5ntahBa8I0U8:L1F2X1sBq199Ic1PlgHsH7UB%A:Zwf:f5EH0EAOR5tAWkcgQLEGXUDSRZYBAYSLgU8DfIFSQivBnQDZQfY:gEIdvqFCFf28giE8jUJ:u5KCcDrLgm86M0I4OUkCB:jSQeI4DEGP97NBGHcKgP22lABAto0:3vZ3vwx2VH66tiC94vYffQW2FDxjNf17ebWcOoa1svmG9X74tPTBN820gDbUtDv1jrOx9Lqy5POUslVynXGAMZfw5:BGMBDvbq89riAuc%0oLbisDG0M604stmpyLD0pu2vh6Smr5ui%q9LoQqxnKD0soagsbUPoSy5NKJkveOjX8IdphDI3ahizgqsNNWSr0bcYbM241a3vOllu7rvh78h9ZvD2PmPx9r9actCASjPIwS80nAGJdYZCF:ZIQlk3IQJRd8vCRLiEQjI5CgGaud5A:npFwBt7Eb8zO5i%CLxpPRg8xfxd:XA7W73r%o%%ezn1:py5Tn8P%Ne:U:hOP6U38z%BN4f:7PcKP:B2%r%O9tq:hvbpv1i26L8Bdxj%9rc4Pmv3Rr4bt4g9hrf%POu35:xJOAf73vge%yn4KvpiuC65hngt%Nj36Pgdt5:3UXdTtrD2wrXAtq40xjYZNAX1hnNI9TqyXTS78Yx0TLEZ9C%wSHQrb910BK%adHxvPLSXLwe1WS8CtgMvcDbUL4s4DHARuWnwhnrsMWl8UjJ1PhfzYoA4dGaCL7WuxDa25gYIeH%H4rm1iYB7AgtbPF9MsL2PTcC:Fw7JAHfPiAGvEHzCvVDmA%KRRQUbEZyGIdGuhzYReogZ0QCJT5C:Sh9P9osazyeMEs5RTQ%NsI3UjMRO5QwKz4NLghBuyujQ54p%UW6J:9HASarSV4k:krZIvtLlSGfTKcg6EwJINtMsx96TKYfykvOH8lKACB3SSAg20cnIPhFCyDRQ8QfbkFcH9Y%1B4CPBEe7zj6HKw1lxtJMv0Zyi4kGC0r8hV1J2sTpCOpEMAfww3SG9AK7BcBCCQUgwWDEGcDFg24AfIJjwAoB:z:wgT6:8kCjABRAdABZgDWAwUAjwYtAOsJ4AD4DR8CwhLjAz0YIAZLHswIziTTC4wrHw83Mp8SjDhGFm0%ARq:Q7sdZUhnIVVMASWdT4IoPlLjKzVUIS%MVTwyVFY2NYRWDTj9Vck6uVRyPcVSBEArUHlC%EzTRFxJFkeXRTlJ1UE5SyU%E02dOr1ORzcsUCI0XFEtMU5SdC79UvIrX1OGKWtTHickU9gkj1LZIqdRIiFnUKQf105dHgBNSh3cSkocb0g9G8BFGhrMQtsYkz9xFyE84RV:ODsUrzRzEqwwZhB3LA0OICiAC7YjyAg2H8kFnBpxAvAV0v43EQP7cAwT96wHIfP9Al:va:7q6wD6zujS9R3m8:Hw42ruS%JE6y3hjeit4FTm5uCd5NPhY%Na46Lif%Vh4lfonuLh60rjBPBd5Kj0zuWt%YXn0:5x6dEDiOt6CLrttQzv72YQIvJ5E0z08BVm9s0Xa:gGGVP6oBkd:LkZ0P1bGWv:bBjpANIWVQKWFLgDxREHBWcOQgaQCm8HfAaLCF4CjglU:nwKbPpPC7j29ws:820M:e%wDP7svQxO6pMM1ecmDG7lcAsc43YKBeE6CTzfsge33d0FbdzJA2HbcwGF2tv%t9kJ:ODY:fj517L1:NY08uTVju6:1MLqkNPS5kDSvOK50ITeBs852jnN5NVEy3:RD8kMzZrGlsj5wx3EOsGpv22%TLu1uw63Pbn4shy3IK9htZirHrRoqGGznqUqs0ijhLNwoYO0IqAttl%fbbginzm7a5%fvkCgqcKYoUnHaqNpzLCl9tFYqMrXT6ul3Y2uTuMCsqLolbWH7Ty56fH0vMH1sMAK%WbEuPsUyMb9tMtK:0XPWwDM0u4ARNbrAK7ZSgAQ3Rb:Z%BV:arjEfvf5m74A%ql9Qzt4PL87zXw1fKz7Yb1XesD%DTpSvpA51f8j%Ul:hrksf:B4vIAduHkAUzgiwJb398Cpd7eAiPejgLb3fEByt0EAdrdzP:s3U:%7d2I:NXde:qh3Tn4Vt3H9f7cJPOO3FXw8ttc7SvbQOpH2gznQ9nB4w3YYuCl1vbcGdWD2XjTCtbL0ZrSKdA:z7bO:suTzejI0MwWxnzMksOkzGTBTM2dv3rOS75A0He9qNIovanVXb032Ra%X91ZvyviJMGT53DDgu02xuvzbsmz%gPNqgHr0I8IHtUxD4bZchUO3jsbs%KAIGznOSUr7F4p6vDjLKb10i9a%kMyC:87NLUDpzVVCHs27gy9Nn4RdTb8FaA1ZhpPNL0erTL6Iu0wFycwLxcrgy3xLu4rlzJ0KgE2FiktOd8nEzzUJrA%4yX%QPgk90IcJJlEYCPjRckiz0ZRIl5H%CGWR8UhdkewIfxGmyEvRmohDEURIZRDjyDUQeYf0z8eH5Y9OR4fOzAddjj%G5w1qhqZMjMZdC%KFy4spxXKKJMTUSVfEcchFA80HrwMoBpyChUXWwidE5MGTBAoBTINJgRXCpoDyQePA5oFDQTQAx0FcwK%BosB5ggWAZkLFwHiDpIBvRKFAhsX6APqG7IFHCHYB5MmTgobLAsNfDH%D5A2FhNAO0cWfj%KGTlD0xxoRhkgA0lbIwxLlCaTTMIpoE3oLCpOBTAnThgzl00eNoNMFTnuSvg720jFPmVGeUG5Qw9EBUGHRl8%3kjQOwdLXjn8TBA3uU7oNDdQ6DJuUQUxXFIuL:xSYi1JU6srQlMQKuNSkCgsUiYnHlHZJbxPrCQITo4jBkxhIrNJDyERR5UfKETzHQNBLBylPUIaEjo3GFI2ChZpMsETWy5bESwqzA7iJQsMfiEbCQUdCgZ9GOQC7hOv:1wPePzNCl75SwZ99ucB6vOv:arxq:nK7%r1V%558l3tY%:h7LDs5Oxm6mPtiuhi7h:n6O8l5vfxoeWD9I3lfPfj5dT6luZ7:p7nSgL06AwGiuqSCU3swgwz7owPMfDhETzytBNI9P4UU:bEFVn4ERZY%vAVUPxhFUP%XRQxAOMSGAL5EPMDog7DBeALgge9CC4JWwXDCusBQQyP:qcNVfvqDkb4BhBr9fUQy:K0EWXwNxIv7nkSHux5EinqMhJR6KARmea%EADljw%C4xAOIOJDDODgLgq:39QHpN4zBXPdSgIh3CH:sdrB%ybZMfiA13P0xdWO8PvTiuwm0mvoQ9Az5EjO6N8qzIzb6Mkj14rHstIdxUHOqcLVyTPAcMXOvRrBmbvfvK%50bgcuPm057ZisR62Gq7PtS%r:7WqqKu2kabVt%ykgLnAo7G7D6NpvtuiocEno0nF7KNSyR%lss26plTStagQ1werstufrRbgcLAp5HCz2eeUthXrzbnR7RW9EPBowNnxxMMx8yXHGfSMypL0%82d9G:RPvTi1HzzUthX8rzb1PAa3wPvaeIK7ablFevR6Dnp4%t:59Lu7%Wa8ZTkOPRr46H2a%LN%Ivht:rG4Fr8GeCz:YHfu:783nD:iN7T:yXe4::W3aT:od0Z:3vdRf5L3SP9:Ny3%4zcCfr%2yH4UtsE9o3atfO72Tzx59ie7g7Y4Osk1wLpINYI5v7U9uLD09HfetKe3C:RZdnpzynWrc7t0pPNvM%4zKTMLsy0yf7L9sY2zHXE5sxCwhfOaMDEz:C%7dHivZnURL3Q1x29k9tvvdzfPL6d5IW:xelBwUTvasMP9fnFDPvnyA8BK8zsBrbPhwx%080RedeqFpvbDRvZ3:MeLeRgIpXoVyUN7dQnlfHZKS32bCvW%o8sjP9HLUgEmC0ICYctxQ0ZLXwSZSwoF5Irxxu9KlMg8ynEJD0pESmkKDUtLCgqMcsn5DR4J1o4MSeFO:cmYT7DJuhAkiYVQ2Mm40Q4JlRGECZoR%8lIUjWJYFItSWGSHUlL0gNJX5HfCR9RsIjMUXeIp5D3CHHQcsgtT%xH249gx7zOjQdRTjBG2k1KRplMnQYPi%uFv0r4hSmKBQTPSVQEcohrQ9ZHkIO%xocDbsXRwykFNILxRHLCysPMQziDAAN8Qo%DmAJ%Q81CDQSdQfpFCIHEBg6B5sbugd4H50ImCPaCewnawtXLEgNrzBnD9A0vBGnODwUITzeFi0:lhnDQVsc6EMnH51F%iHbRtEko0etJ:9Hjyr1R3gtiEdkMLtGTTOSRS82EkQIOUZC1DtLQJI%QT48QTs8z0NFOkJGaDiPSKw2skoLNaRMfTNbTv8xz0%WMPtQPC:dUegtb1KXLKtSSiuSUgIqJ1LAKGpRhyddUFAm:04LJVBNpyNPSyIiAUl5IG5Gqh6bQ7scikC%Gj89vBjEObAWHjaNFEsyTBJMLuwPKCpvDeUl2wqJIT4IGB2cBZkY:AIQFGsAhg8A:gkLz:unBuT5bAJO%GP%GPeX%kP2F:fL9e3zs:Uf8Qj2s%7S9rHsC:ga66757emw%ybpAv7F6JUAwehcAxPpRwa06TQJnur%C8Trhg4b7boQmu6IEjnw6hPt8eEUrPNtFXP1hhVC9ycVF:lXFPH6JRPU:JoRwf62D7IAgA2fAvwKhgQxCGUGMQU7CBgCAQoC:7QL::tPDRr5yg5a9h0Qv:NGET:xPhLa7vkSmOxvE3nqoRN06IsTguYmE6LkbRLV4mQRHOEPEHrfbg7v3YEMctxHCvHawgdh2fIEv9feAQfWjv491Af7btJJ96nQXPPwzkrvN80X63XLwOaoyUjiz8e63e3FHNkJxHDULMK%z1TADMuHvmHG1rzHwVe7Tb0eugO5PbnytL24I7GhuKWt5biGqoi5zqeaun%lI7ykoyS%QqKVwFehbsPgoKHG3KAfykmh280eosnRU6PU1eOk29nHprrd8qhU4VirmeT1rYHnv7AO6qqzQ%yvthXuy7l37:%8afBGwPfwocMu8RXHEvGgyqfwOM7w79bR8e561bPtItlJ7Mfc0Opk4F7p9uMA6HPnv%bS6prlDO6H5B:xg%MA9JXiovbB4QD5BOEb%1Pg7Pyn32j%Ad%Q:2LeaADL3fEAQ90oAcfcDAFM3J8Axtvg:yzb0f552nn9r9ng%9nYBvoG2O33Odeg9W3WKPOZ1YPwu9Sx7dLTuOre0qPn5dF05O7QMOH%z93dE8%E2jfOKtd:zd3TBs2s0OHMpc0ezc7Kvs0xyLzO38UX0OTD29FEwhPUBMHD1jDA5NnKv23dzr9W4TnAkeUNwRLqR8LP7t7DvPPMxcD4Dsi3:ZnKgAJhzQMHX9A3C5LTHA:t1rYSZtr7Ffnd2him4Ukba%VOHUPp%h4z7VQgQvFhIWn1JCKe%Z0i3v3SIikCzyJ7BqkizQp5IhwPTyJjEzIilBchIqkbEyKgHwMicSP1IQ8n8iFwKvghlC3:IXkw:yETM:chXDXlIVU3ziECObUhXzqfIWo7hiEiPFwhiDwTIZo8pyBdPBcg2DttHw47tB79OfEdqzghHSU3QBxuNVAbgjNTGmMxShkaLzcYrSwgFx0qCRZuJ:AUqiTXE9QhzBL1HugRGxxDEVQZ7BCoFuYQHRQrEcMRuhGoD5sS0Q3fE0QMjRUKC50XLAoGGqcJwBx3CcIfngkAIxwKcSbrCgwqBAy:LWMNazEDD%802BAvONoSHzsHFcA9VxcXQMAZH0I7HMdDyB7:RGIhx0UFJC5GsSY:Rm8pA0Y:LHtFGS%oRPUxikPSNCpCsTebQIs68z5cPUk9IECmO85CDDpcRXQ4yEfbNg1KRDUhTLgz%E06MpBPwzDpUEov%1HJLb1SQSwrU7EqS1MgKRxTlCebUg0myFGDJKJQ6CIrTzQhZU1pH1dLjR0HSasbcUbIGZtD4BePQPAVVT35E%s5ABJTNgYQkTINDq4uFwyqKikKiiZACFMiXAYMHoEEvBnDAmsVOQEpEfb::gz%:vMITP4SBdn9agGq:QT%zP3l%kz%Fvgl:6L1TwCK878By:FtA2XwTwVa714Hqu6TCUzu4gs97jQOee5rEPjuZxKy7xcUofB2FcHxhxYJ800XcfS6F:b1vheT91EXQvl8Fv:6UBXQ:NsTuv4jErkALxDEAv0N1wSRC:EG9wgPCUUGKwuRA0AN6ABGD1D%MhHE%:4SQPmmFMX2IhZc9GUXCvJqGM3vMBmf7bMZd%voGVXpyxk2510ZHOWeGA3jjRcN4SkWF99yFCDdaRId2xEQCtlwDezWiwrP1GMHudL7A6zQWwCizoz8nMyT%J:KcPSyyCrw1cbH6wjFSudNw7bipcET3g7AZtmGvrXUGL0J0Ni7bcvauurGLLqMwtC5XL69uWe69Lm3toC6VbNxu0qwyrygrYS%W6uUwHup7sL:p4nF6qZdyDqmYcvtpY3O:KXT0WWmGdUgp0XYJ6g:23Op%t0Aq3jgxay74ryuveThsGzmLrO855y1rOgmuEjpz7qa6Zu9r%mLwIvpmMMx6b:GoOj8yd:nTM375qrQCeYR1Bnletc05NnaWOMo3oHiYOGr4Xzk3uBv5x:gNOpv38jsx94k7x7eQvF03Rzzx9yv9Bjc%fVp2:f2vtqq9xjaEPhz2Sj4w9jz9wHYdfct17T2UNav9XPVavSY1OjyvNMw8dzSR%::0TLtLtH06m3Qk%i5zw:mFM9s44HOruD:zd3dkM362jXNDNj8zB7V%Mw50jvNZ8:NzbPMrM4qytbP1cdS0cDFLtP1w3XVfcIi2F7BK9uZwITeMMAm4iTABuZ1wBnqH8FX7iHCtvJ4wyT3H8WK%w:Hz:9DyeIDuMu9B2XOYAtG0ckOVtTqEZHXtBTu2iAXZ941Gf7h%xq05Xocium5HX7tvB6P8YUfufUYIPb5eyBD:r4gnALxIPsGIiFWC1IhpA9%Id0ToiH8F8Mh%BvmIckfDyJqIzUi1iZOIgUqWCL0LFQiny9EIgEyJiIWNPoh3zXEIVw3hSGMODchbTnRIAI6TyBPOrYfVjoPHxk6YB6aOaMd2zjWHOI3:Ru0NiQbVjVRGswzgxkVMrgYNTDxFy8uMxcILIIWxCnbFWQnRRXyJM0UeCKFFP4fehSNHbIUMRspFfUY5RXjFu8WBhVTGGUTDxoIEhwc7xByHhwQCyGSD9wjUA:ZJlQP%CmbDzEtJxB5MPMQvzP3Eew2MBPsOZoUsDwxFjQ:7Rd2QcoZa0PDGwZF0x0:RvQfGUckIpdHZSS9R7gmkkcdKR5HlytqRiUue0XBMFNEZjP7QhI2gUHEOPU:cjthPhE%xDyaQB07B0NuOVJFvzd0RxU2aEltNCdLvjKuTAgx%U1PLwZPlS3QT9crUlATKotQSih9UIMmKVC%JItP9CKiTh8hcU07H:5LUR1ISmQbT0h3GRdGhBejQ44V%ECgEx0%wBEYO%8P6TcoDpI0bgwWMcQKey0vCcIprAfsJTgG:yHaBAceoQMKGp4CEhbbASgSXAFaDiMBtAo3AT8HnQEFBFkCCwFkA1f%uwTq%1YGyfkrCPL3Kwpk9kUMHvV0DiT0sRBy8:ISAvMkFc7yMRfV8gYZFfOZGofz5Rsk9OQc6PSLHc:10x3X9rod%vdAHTn5ZRyR%i4bBPylGZT92RdD:9QVDAGXE%UCJhHNBIoOwgbVC74IFgmzClMGmAyLA2YOvwAZEPX9qBE1%w4TfvhDFMz1QhUe8wkWePCUFt3t3hZL6%EWvuiZFjfmCBa:4y8VWeEKFAXflhK53NcQb9rPDijYgQzo1e0JstMWB4PRAARbz7IAQM0y:TnLhvlLybT1c8e98bXFp%0VxHXpk8Ip5S7BxODfv03cqb7O15S9UNOwvNzOC7x8yq67P8abuzLC2bthvm680rpdvY63p76btEjA:rE8wreve8THrfXGL6ydye2qaswGqlnPeKlk0kCpfNVWqY3YuqmC22mqTt5hq%jgmKxJ4wiuaOWurz3niLHC6JCz9unDtdbqHLhk6526petHvafrHMB06xfDD%s0xnfqbcmx6cDMyegp0M7nndPI5hHXu%V92qbk292N4yXheOJS5GrhXOdk4D3qYN:w7GHecO9l3bnxbNzG83PbkPV42hf3g9lb%JbYWfm01w761tZ5%vXVm:oP1Xb6JNQK%jjTVvlK0l:4V9Eq92PQu:V1zxj0lc5H8sjNTPARzSzudMzo6%:LgemAy:nmIstU5NXKmuGgytLej8oG3K:KP9kMy4vWrsv205zMjNHezVPPec9TzXDRksu%0xfKYNblyE7Z:Md%3F3H498Kx3XjBccw51HHD%vrxwjvzsgK8:fJBPdly%f6FM2m:v7OOgIb0ZcFZtO0CN7Viwt:2BcOQ9tYECjeTRIr4fkTT%RiFZTnkRb66owXfu5VGBvy7hjP9VwZlvmoGWj92xk8Af0ZCgUQGssIFhp5DBYaDxAVGoYTFRraFhEaBRoGGgMd8hnRH9QZaiKsGcwkehn0Jj4Z3ij9GIsqvBj3K3oYIi00GAou5heuLosXDy8mFywvtxYLLz0WrS67FRkuNBVSLbMUXyw:FEYr4BMLKpcTryhiEzEnPRORJSQT0SMVE:QhEBMBIB0T:R1GE:MbmRPsGR8U9RfhFBgW5xVbFDUXxBLPGFoRsRokENccJQ85H14OzyHQDZEkfA13J2UNeiqLDZIt7w27MI4O6jNkDxI3bxAiOqoRCz0RE8I:nxQ6Qk4Wa0QbGExGAxrYRwMcEEkXHvNJPiCBSnQivEq8JKpKFSdVSoEpxEn8K:lIhC72RxMxvEalM1RFNTbMQ7o4K0IvO3hAjT24Ps8:8TzyQSY78kNWOchFfzdvR5w140iuMyJKtjEoS7Uv80urLX9MmivITIkpz0yAJ5JMgSUQTIcjRkuKITVKiB:cSIIdQUd7G2VFdRlNQ3QX:UB:FXs%ohPQO%MR:zhGEAo2yw7xMm0NtC8rDFMs:wrQKOUJMSXeCHsh8ge5HS4H9hmfBj0WTgaZEj8GEQ91BqwL8wZzCLcHagW7CJcC9wn%:2QLof37DIT7tQ6o%YgQDvhtErr2YBSs9VsW4:RXGFv0RRoQ9BIcAPSwHSf0Ex%B9DMgCfUIIbv1jCGV9r8hlPejIbT4OCHy%X0gSvt1H778Kh5Q:qYcAADvGsoBBBmpA%IWlwWOFJEHFBKRCYMPjQvjDH4NOwpfD4wHKhHcBNwSKwJsFHb:0hW4:AkX8fkNGCL33RhM9HMZcPHKGY7u3hmr668Z1eg7GRHmfxhd43gXr%AkFgDehBRP25oSoNhoEPfV7w1Z0zQLytBACFTOGAUAzMMB1MlE:tHHnvr2xdL2QsTh8rDCze44wZjq2b9K5pa%7%F9vZHdn7w72QS899S0u8:QsbvNzPy7%MiXvFXFfr3rwam%wr4TwN%7uMFHuZPD%7abxfy0ycdPsxjK97GIzPSwE89EsKzR4K9C1Mevw9b1ryPZaLBX2xmxWN0Esh7fJrOp4H60%eEJthHjwLfv4525kOShu:vkzr045SbAT%WmwkDlRsUF5QLIn%TXyhXkvs1047DQyeKi0xnijtZn4XLZtOBH3ADgCN9I36nhht4m5LTde%bV3Kbo6Nui6u3aaezj2fjty9hM76:XZvCY1kDxhtXW8XLUKPJQ0zTyHNL98dnQhPGLz8jwOs7Q7%zMou6qy0btf8rA63HJFOqHyEfowcdb5iDHUeSjxijiRcbg3::Ff93VxQ:b0MWb2AHGKdZ2xsTTNsd10UbIR8%myUDNWMtly1bNu8mbz0nIItIZx%fULsbm14fFGNslxXPeC8Xz4TvFk%W5xVLpgcYl7YzH:PDXyMT0YMpu%CbM7:sizjz:TtBOAqnSJQUx1cIH5dcnCr3aVAyy3UUOweD5D%3jdhE458YSoOrqEyDu4RSz8acVV:VAFgn5tRbB:BUXdwBoFyUEtRfIB:0XXQs%GNwOdRg%EpwYexWvGJEYrRh9G5oYOh50GMQgOhgXI%wXMSWQFxInLRe3KMoWHCphFj8r6RUiLFoVxSyxFCct8RNKLSITMS1PEuQsgBFmLLwQvSsLEOoqcA:0Ke4O3SiKDqYnQQ5OJhEO0ST0DTUj6A2AIfQNvB8jDu8dhg4gHCcPVxoPEJ8YPhH%FrMSdxVpFA4UWxbJEoUYsBHlGskQeB0VEDYgkQ8XI0APEyYlDyUpRA9KLJsPei8mEKgy4BDDNcgRuDjdEnk7GxT5PXwVNED:FiZCohjSQ2QaOEVAHFhGMB4uRzAguUdBIvpHZiT6R6AmvEfsKEVHRyuSRq8tpUUiMIZEmzJCQxM150GFN4FA6zkRP0M8lj2FPg48qkB1OqxCyDiGRAk3NUY4NbVHVzMBSWUxFUpjL:JKVC2USz8r%UsoKR5MEycCTPgkpEvQIgRLkiAgSkAe%UjiG5JHgxnwRS4XGEToFAxCthLRP50QbD2gDuA6xQwyOA4LXzV4CWcyAAhLL6IGESxgBcAoQwRfJVgD9SGsAokeSwIlGzUC0RdpApAU3wJnEZQDXQ6GBHoLsgXGCBMHRAakCPQDXQrYATYM8:8nDkr%LBDd:EESqftaFK36aRbk%VsYUPkgGuz4qxu3%PgcrvgDHs:4yx4b%VAfjfmQHyP6ih:Z%jwfrvunHqL8zR24:bMc7v5fG0MA0hmzARAYOwMcFtgEAhSEBtEROQiUD:EJUA2mCwQLUQ2uCOwOSwZxEN0D2RFjAR0T3P45FEn8JhWr%eEVBfdoFln0tBap8cQW%e6UFk:sIhan6WsV%%ZuFELkKBN54ZsRpN7HD8:bsw0D2WELRNbUCJfTEQb%0B0Dgc78:yXMs:ztyUX52cew9ejF9:EZxB7ubMIr6uTAJuaOvxfid74I3qy9ANoyvQrWCL0t0iq9cM6XvdrKTr50x06:RMSTwFLBGcKhvtrDM7zQxQm69ccnuEPKj7azzEG1QM8%tNzRgLN51AazA9fQsm3Z27Kx2yazy92us7bfcLRu4Wm18OKXtjnk97dL5YS5IuY8u7:mH70h5y6:T%dmwUznxMMd50PGw%bfyEbmlsuy5WPOEeU%0WvkHtS94:7WBePW2UPio9x54VzfpuD54cffdeTc3srm5N316OTc8urd27zsz9pQ7rzZrO%n2M:wkde18XbWXfJP1cTyFdTr8srS1fJ20YTyIND68c7OOvGEzUjwRcwo7xrL3u0JymzsFMnW6kDIH%mNx0jn:cZS5Y7GQONCxhnhHsbm3i:Grtx:xnnaGcdN2PzHMtYoyTDUnMpN0lfMj9BZzvvOntCXzSPTaszj1XXL29i5ygPcNspU3:DJx%LpyVjmIsr%6ZjKq%1Fy07xJ8zY9EHNQfiPzoT7ENCc:rzRggGT0zEEk9WnBrrX5AgG2uUKctyqDPzeLw6n4XkPcuSNEFvnbhFe6iASd%2nEqfwCxPq81kTOveWE476wxPh:eETLAHuE20E7xOcB%UTswrPE6oNqhN%EHgTLRM7E7MV9hIKGKkSMRpVEicc:RHpHaQRdh9IEckg5RDhIXQQviL2D2EjbA:MI94OACRPDv8jww3PI0ANcyPKDO4iZgxCIhgMdCHkC4ggzAuAH9ILWx7zCxsdLAzCG4AMWRr1DOgYlQ1zF2kO:xV2D5QUvRA7Ez4S%RH5E9QQ7BXNDxYY6g5zGjEOAR2lDbwfSA2dIhYNnCUTDbIoQQ3cK6INEy8zDkwy8A55NdQPiTjgEHI7FBIsPm0Ts0DlFP9CdxYKRSUYz0btGU9IzhuHScMddUrKHxdL5CFwSxAkgktPJlJLnCjjSvQqOUpYLVxJxS9WSDgyMUeoNO9FEDeTRGs5HkO2O5NB7D31PwhARj4CQoQ82EOxOoZFzjgJR902XEjiNHtJ3DJlStAwGEvALpJLryzOS5kqy0t%KIdLWiYGSzAkRUoBIkZJ1R8KSK8dlUaVG%1EixkRQ5cXBUG7Fco%:RNmPGAS2znlECs3jA9VNFEOWzE0DUQuNgwWK14L2Se2CpEkQgpGIQgKAR4HCsoaQAqoF7EKnhRXC7ARMQznDjsNRwxyDtUJ0A%RB08RfAXoEpsDlhTyAVcWgAAjGET:7xk8:qwbZv1QHcX80B5W:CcgGPxQIQX8RiId:AQjX:yII8v80CNc:dsjD:6oI%P%NiPY:4Ui7ACaIR0CdSBpAxsfzwSQHU8G3hvjBwoahwkcGDMLFhbiDPkTjg7GETQQfg:LESINThOzCrYUMggBFp8FJxf6AiUYSAD1GIv9lhnF%gMa%fc5Gir1MxpY8u8Zg%9sGavspxjN6aEX7OZZFgrkzxQv4QkTXt4JEZ7b0Q7x2GQMXNbECeLT9QaH0fsDTs:YADjNj:1Eyx:6c8mP9sTH5fI7xijv4MRf67vDkOfTwsbjLcIJ4MrBX9ypwc3YysFY1SrCBdLJwt3OpcPly7vEIMkFxpHGf8c7xCXJJMLxyk3A4My3vunOYr0C0Uq8HtNxuzHV1box13S6G9lMuuraWbqZ3Ju6Jd4Pu4nftbvE4Im81uGJvbvisr504wPA:%N7wV7kF8OV5NbEpuS2xpbks8hr5MnKKuTyzNrjKc9542bRCOOl04Xi4dXv4RPYSOE32o7gRtzB3zve4N4T4O7dyeHu3Fvj4dvF5MjaA%al2RPnedjy50bXoOgM1hnpytRd6X3TbOkq0kfp1tDw6IfPauhCzrnnDc3f5uzL3uXjyrrk9sl34yjJFuJ7yJvg88cG35LHW91Wx5vbQcfM2VfH9NefxxrWIchF1OLIe9LkycTQJsslz6bMo81kzkPMXNAKy43S:8n11CbJj9eCyFjaFchL3eDHYODmx5TjKMjg5qfIPupfyaHtTsr98HLLSPTLzHr3Vc6Q%hDQhv310VcABNQAAzrWfQWW2M4HE9vxCa7d4gtk4J8NNuMpDyHmghAl6awRPuyqEmnvgBOk8jMU7PXKFDr5SBWI:KsV0f:0FREDIhZCBjUWYAkvFmUMDhZMD9UVEBKEFbAUIRUoF64UchkrFIsbmhNxHfwSIx9VEp4gpxHhIfAQ6yIwEL0jZw9XJJoOvSTODfAkCQ3zJFEMyySqC3okGAsCJJ4KZCM%CqQi%wnEIdgJySDaCbIfAQqBHk4KOh3ACuIbWwuAGiUMGRklDbMXXQ5UFswP:xRyEbwTTBONElgVeBGRF4EQ9hmuD4McAg81H38OBSInDuwk%Q3hJ:oN3yopDt8thg7aMA4PwTO:D4s2mBAtOZgRozu:Euk9CRT7P3QV1UH%FnZDpRjbRGkaA0ZEHO1GNR6XRzsgAkhWIjBIhSQmSMUm5kcVKXNHcivTRtstDkZNMCpFwjIoRDM1CkObN89B9Tl4QD08Bj9rPnk9ekDRO2dCEDotRDk4ykVQNjhHVDR1SEYyfkkoMFFK:C3uSsYrUUuHKXhLPydiS%4kD0uVIoFKOyC4SeUdt0iaG4BHXxkXRjsXfkQwFbVCQBO:QG0Rnj67D1c8MA7sOc8MXzeZC680jAriMagJ:C7xCAUsbAgDKR4I%SUICO8iKQjrH4AI8xwICQwavwk7F6MKhxSyC:QR6gyID0YORA29DykLSBE7CeASfAeBFO8FJRaSBMQXYwNRGWECwxqLARQc5AA9HWcAPh4UABEf5:%0H%H:JCD::2IgQQBqIKUAOiApAdUfzgE8H5MCch51A3kdcgRTHIcFBBuyBpQZ8gcIGEEJZxaZCrAU8wvkEkoNAxGZDg0P2w8BDQkR3wofEqkIFxNeBu8TAQSgFJIBJxUQ:34VevykFdT5lhUg91MVYfTYFJXxIhS77jET1OsFEuPooRDt5QYP%OI1DQzgMwst3QIJYNqkBqjXGwQH1WkBg9KV:iHQo:vpzZb438tv9QHKMfJRyODu0MaC64TFHuh0xLnkpsNa4RrDB97RwsfaysKh1wHDmtR3w7nRKcQCzxfFesw9xiTKlccByBfJE8a6ylzEeczewlHOm8E70JHALdK%vxvUIb:91by%y9ePvoLZmL4d29S%m9xAv:bd278t36TAPuCawSjhusLp4QPEhOJzxfviB8dQ47zIgeOQypHjgMyF44vOYuOu0C:j5NLu4iTVn%Jo1z7iqtnK4ebbROEY3qzgOOD:30HiP98x5GreAeaC3a7nhNwz6XHbjepK2rrrFNm67NDXie2A1iXuI9WM7rjTvu5B0r3uw9CL7kXPK%7NzZ3tYMzk7APLA%y6yfrqiMjN6XLHfuh8xhPnrcWQ5Q3F%OObxEziV8SP4EHExN5bxPPcrsQi2z7FVtkOxpPXIMfh1XHIRNQCysPSz8th0djNI9Ab0A3PldIhzkLVY80Z2NPMEtt0zCXeRcxP4UvMiuSEzM7n7swR64fNRu5NzmXxQc9m9GHQR:ep0QP6FtOX:KbU:f5a1jUBMNg8AyjaEwVA3LkGdd4wCMXgewkv45kKr%WKC0PoUgzs6vYMqe1:DXbw8w1O81IOKvabDgb5zw7e%%wOr:71DnMB7A4mBM8OwwagDkYJXw6rCwsO7g2kDQwQKg0DEqMM0RMRDHYVdgvtFtMKNBglCkgZbAksGq0I3xrtB2QbMge6G34G5BvXBeIbQAW3G7sEZhtOBPAa%wNbGsoDrBnAA%cY4gMLGC8EGxelBBYWRQUCFRMG4xMVB74STgiYEcAJdhBqC1wPSg1SDl4PWw2lEXwMGhS2C7sWDguEGYcKbBwjCm0f4gl8IsUJlCXPCbAoAQrMK1oK3S7YCtgxeguxND8MYjcnDeU5MA44PFYPVj6YEDxA9RHnQW8TV0MFFYpEthaCRYAYQEZgGsZGVBwTR1keKEduIAdHkCKyRr8kMUb7Jo5FPynMRIUr7EPILe1CAzDOQTYylEBcNEA:cDbUPW04UjxNOrg6DjwJOas9QzcfP2c1ZkB6M4BBfzFoQnsvHkNwLZxDXCvhQz4p7UMaJ8FD9CRdQ9Aiw0KzIPJBoB7rQJgcrz%eGkE%txiiPOUW1jouFeA4mBPHNigSjDTfEDEyvA%3L7wOIS3iDXUqMQ24J64M7yRcDCEiOwxTH0sMixyLDNEZ%wwoF5gNlRRgDh4SUA:GD2IQkQ2SEYML2BKdCS0U4gePFVUG%hb3BGkYyAPTGccCLBvyAW0cSgGOHc8Ajh5%AGcfVQAYIFQAnCB7APIgygAaIUEBFSHcAeIgmQKDIHMD9x9oBD8fdgVZHpoGRR3UBwscJAmxGogKPxn7C7cXdw0aFvcOZRR2EJsS8hG%EGQT0A7GFNEMEBbACj0XmwhJGGIGMRkVBPAZswGCGkH:5RrB:BcbN:oVG6L33BoA9WkaUPK9GZbv2RjV7LwXEupnFk7n2RSM5BMTzeEZERff7Q5v3JMM2tkPCl:XZQcF1ZsE0NKzAcHQsf7YzpX7Fc1j%HzLI:UTytnx38iM7uPHQOsfx:vnlsbF5EnGo%E5xpreYsat28PG4thZxz7WHsjE0xDJeNEnylzPYct0zbvMwsszzkjKxM8EyWLR88cF0xTHo9RmxjnW6sXC15zFO9l7xZ:ahsXs27:FIt0nxkDeusZF33XHMOBVyP:gVsmv4XXKPeKwy6fiA83t4m3OE%PuzyDjgtEZ4yXT:uLR1M3igNaH4jHYKuLf2bnhhdsz4RvdluCc3t:fBeAP31ThJd6F4iHdlOMH3IDk29pI5aHZ6eVd2GPmDte05rTV2uZQ1Njm5tKu5nzRW%YT0ODlsM485VTNc%QFzInjycqA4qbJW%GhyB:gwMfP3gnHct1%xgfcH8aR2uvFENnjxYjXC8b%1WfGdtT8xvXSzMd:0dfIG9Afys7OpMudzWXNjMxfz57LjdHXyuvTPMp21s7JKNmPyf3bf8ny3qHJA%L0yS7lecpo6CrLqOsHzOHuDM0L8jvOIfWSzx34ENH7%rPSuf171FMAadbKAnvYHQWu2koH:dxNCWXfJQvj4c4Mc%RGDhPniQ:C6ZsQfuyDEUnvRxIe8u4S%:R5E9n36RO2%j4Ujf15FFoAmhQXA6AUvgWKFEoIVhS5CgUUCQ2ZEzYPFBM8EXwSGhPUEdAUIhFbFmkQuhenD%0Y2w7zGQgOzRoyDXwbWwz:G4gLVhy9CoMc:AmIHE4JaRy3CCccPAjDG%QHQxuxB6gaqAf4GcoHMxkVCFsYhwhwFyMJeBbsCXUV5gpsFBQMYBN1DVYSCQ9SEdAQWhDFEm8P5xSVDi4Xzg2YGSANHhyODL0eGgxwIcYLMiSVCwAnhwvWKZ4LryzZC4AvNQw:MrEM4TRNDV43Cg6zOeoO3TvrD9s9DRGsP1ESUEG4E8dCQBUQROUWKkWjGBJGeBrFRmEcQkdbHoZHZCCQR3siZUehJAxH1SaPRhUp8kVbKzdFoi1dROYvZEMiMktCUDQRQWk2tT9oODc%SDqWPAg81zqlPfs4HD8IN2pAAjWNQfAyh0LXMFNDuC7xQ5AsXURgKpdEKSidRO8lb0S3IwpEhSFuQ1wfnkJDHZxBPhtqQFEZCj9:F349zRXKOzwU8znOEv03ghHnNVcQtDNMD2UxZA7:LqUNhywTDf8prgxuJ3YM1yRqDEEihwywH80MKB05Da0axQ1EGHEO8xU5D70TGxClERIRrQ8bEtcNNRMmDFsUmgqIFTIJsBbsB8kXyQbMGMoFsxnxBH4aPwQsG7QDvBtQAy8cFAOFHAIDvRwXA9YcUAPMHKoDnRwiBEgctgTJG2EFHxsjBksa%wZSGecHPRjnCBIX9gnWFQ0LhxQnDCITPg2mEU8ODxBTD1wOQxCKDBoRmgrUEYsIbhJhBuQSHAQ0E8ABWhNS:1UT1fwkE0v6xBK09zMSC:VwEVHyehCH71EPtez2Dd7paQwJ56sKO%TBCHnhrQbJ3nMEL9wXAq:Zm:9N1wb9DtVc%vPSoff:0Nb0Ms:%8ZDNG%8fzDPs5cpJ6ebJY%YiyYXjmMiz4EXI890oyEnbQMi52IrISNYDyfrTqcnV0XrK2s9zywvOkMxozM7N88oqz63Jn9CXyCXSrsey0:LGPdVjxsDWBcY62NjFrNncxRXbEMZ03HXGyN0Kxw:fy8dH4LXIa%HDyXji8Mpp4znMO%SazezkEc935ZzQ3%U60ifm7NNW5q:VceZ%13bmU9lj5inbM%b83OLlxt5w5YPg2uQt4iHkv%NF4zflSeKS5i:hzuf83%jost7g6Vjdterx22Trf9rs6wLZS%x314Ds4NWK7EPUauym0iHsENGv64fPFesPzlfqrcx56WfLfehAymbnPMk45l7I%OSqx6njI8dO4srG6eCgxn3fqcYO3urGodxoxznbIsjZ2RfJhdhEykHXpcsP1jnN9NT%zvHT89AL0xPTRNJd1Z:Rztcd0WHav9AQ3YXQ2N9x0LLig9CZ5brQg%gT0WXrjtE47izS%PDu0qTz1dM%9uHUwvgS1jD7aNeD:eLYuv992tABNtzCAwvejQX53zAH:%GoCBvk9AlM5hQLkOgMDOrq4QxZ7ZwN2u8:Dmryyw4B9TsPnfePDzf6xQ:M:NwPVf:WD88BtA81BHkPhgYmD78Ivg7dCkIO3gy1DcEOHA2FEHkMKBLNC6YTFAv9FE4KLRZ9CTQXpwgRGNIHxRgFB1AZRAa0GZUF9Bn8BBMafQQUGhwE%RndA8UZxQN7GdYDHxkSBLEYegQ0GA0FqBfPBRAXwwZuFusHxBVECRUVyQpjFHcMshNJDgcTPxBjElQSyhGHFEAR0hbGEDMZXxCiGw0QHR7QD50gqw8gI58PoCWtDxgo0w9:KhAQzSxkEP8u1BATMWARDDMMEug01xKoNsETRjjJFME57RUWOywXQjyDGEQ98RkbPnQbxz4JHUU:rh6UP2Egtj8jIrA:9SOHP9clQT:EJ%A%uiliPrErxD2mLQQ9li8jPHwxIjtWMwI6ITXGONg2bzd6OP81Ajp4NG873DK7PC4x5T1zL%s%rC3IP9kreED4KflACChIQQ0mZEEMJExBDCL:QBEgf0AfHss:OBzmPmAa0z2aGJE86hYkO1QVjznZE9U3fRL8NT4RBDQfEPIxHw:HL0QOiC2RDTcrBw3YKKMMcCZhDAQkQQyaIUAMNh9gDN0coAySGvwMWRhzDTUWAQ4pFKIOORJUD2UQFRCxDuIQHA23EakLjhJXCl4TJgkhFBgI1RQyB3kVdwYOFucFkRaBBQEXRgVYFzIFlBdFBbQXfAW5F9UFoBdOBmsX5AYZF5MHphZaCBQWNwllFSsKnhQ1C8UTVAzdEoMN5RG8DtsQ%A%5DzIRgQ5lEi8NjBPGC6IURAqiFacIiRbwBlEXHQX4Fy8DehgoAdQYCf8FGdX8CBmL%twYKfh7GK715Rcd8xkXevAXFsvt4BQW63UTYOjXEa7lCRAD4w8OZ%DpC93dnQls2ywHF9mbBOHW7wHM1Cv:29JU:A:RbPluz3f2:M1487vMc:Cry23ty8pp6hjKbeeSyX7kO8mh4RLJ2d4WySvcRcma2ZzJK9cYyuHUt8q:0nnLx9BczP3OXc1gzXfO88uhz7TK1tClyRLSxchS0xbIl9Sax%DVTcco1y7HbNg6x6jZbsfa2sjH:ttFyBTd4cgY3pvJBt9tytnfVMuP4E3MJeFWzZ:hcM4A4prPSeLR0HziEtKX4ljTluKe1Hji4NU84h3X4%FQ2Grhd9nT4I7aHeCV20rfiNxd3mfdWN0w3kHc4t4Z23vf5Nn536HYWOBQ15bg9NWy4JDUreAp04fgxNFA4GfQ2d8Vz1Tf1M2y3qfM9t2UyyTdnso93MfJRNsSyT7agcgt2RTIFtjPx:rWt8fd1c:HwtQcyKrTnsiX0lbJjNFDyo7QY8ufz7fMxM4:zgHO%M9YzeDRy8z0017MMNYSzJLY6csX2%TLvN0DzHzgR8xQ47DMMeY8zRXp6833677O0u61z6Hx0tBk9BTSF:d807f5BdVA:LDWsP552AUBX9o8A2DcUwV73kcHq%AUCe7iugpB5TcMoOeODQvqwg6C7NcPA%:PEIvxqxEX9GsSo:YOEyr5khOq%:YTHv46FIUAXRTbAmAUHQVFFEgHDxRcCcITVQtgEzMN7RL0DmkSlBDWERISNBFrE4QQnxTID68VAw%bFjoOZBdzDQsYsgyPGP4L8xhbCzcZzQpfGVgKaxn9CVwZvgk1GZ0J%BicCaYYvAlEGAEK0xdtClUXAgvLFsILNhasDJcVvg3wFPUORBROEJcTxhHrElsTRRIMFacR1BYVEbMYkhCnGiIQrhzGD8QegQ:lIFQPDiNADzklRw9fJ2kPeimnD4crBBCCLYIQaS8gETwx4BH4MsESmzTAEyU23BSTNxQW4DhlFws6zRgQO0oa7DvYG548dR0iPRwfez3OIKg9iSKsPU0kij0aJkU97ifePMYpVjyeK6s7ci3gOkAv9DkDMeg4uDK:N1s0ezbpNSE1Xje0M7k4NjL2OaowFTsTLxQ8ci3uPMYroT0RKis%UyiLPowmvz6:JMc%7yKjPiIhUT5bH9M9nR0qPeobVzxFGl47rhhBOigXATm0FaE3VhQjNhATjDTkEd0y1RAZMeUPQS8YD1gtbg5eK%gNVimDDUEnPw0jJRgNACMNDdsgHQ23HkgNmRyODYUa7Q19GGQOhhbwDqAUjA:QEjUQFRHoEHMPoBHtDVgSgwwLEzkLtRMOClMUBgnmFCAIahVeB%EVwAZHFkUGmhbuBdcWuAX8FqMFBheuBfUW1QXGFhYGeBZuBgkW2gZ7FVgHzhTmBwUUgwgiEy4JKRLhCRkRmgryD1QLsw4JDFwNtQzrC1QNYQrhDb0IWA7:BrUOKAX0DjkDFA8yARQPF::wDun8qA6q%jgOXPifDf312wyQ8%0LFvHVCpTukwkO7CkIiemXBgvn4QSW5AkDMOISAdvfAf%d3df8edua%nXZS:iS1%:109WH8zvUGPHL0qPuhdEr7GvQsel:zzjnvc7C5CbOU%K2ze7fbM2W3UfNUttHzSTZbc0S17nNHtUpzkzTu86d0W7PEtBA0K3OMNFwzTzSXcxf03XLmNS5yuDVKco318XJl9iNyQHag8lw26TJ4dzxyVDeaMq33wbLE%HIy2Diq8yY46zNueTHzr7l%8%h5kLRYeeb0vznA9Ry6HnVxuj81vjoidgL6R:a:%i629PoVN2H6OneHeh24Jbn9%Hx5mnjMebH5FblD%Zi5D:nWeNV6D:iTekZ4Sbq6t:d6rTecOt43d3rN9wi7PPaQeyt2Tjsa9gL7DLXuusE1kjr59S26t7TCerr0kPpFNJo6FzReefG0HvmVNBx5QfQXuTgz0Xj388q4gfQD%Fb0PTf2tDd3oXRyt1c0r3cXNO424TUv9rU1dPZStf32OfYLdio2njXjNzZ1o:eUNav4N:V6eKH1TnlStWc5yrVD%op1YvsSdUL74jVi:Hn1Qf0ZdZ69gTX4:jC1z37otiE:aHZtv%:2s4B%9vLA1LdqgXE3mkHUOAHCfPhfwqt49ILeuX9DFfnAw5F6eYOROupD1TtThBz79cQoPFEEdbzlhES9s4RT:jtEYr68xHA:N8R7f6yERABbREjAxERJQWhEBIHIRDpCJUPqAr:Dk0MYQ7VDb0NPg8UDYUQagyrEcMLrxIlC5ITlQpWFBcK:BSuCYQVXwnxFSsJQxYXCX0WJAmfFlIJrhajCakWFAqUFqUKbxZVCzsWJQz4FRMNqBUfDkoVRQ:fFIQQaxTZEe8TQBNvE7kU7RJDFm0S3BfxEYMZfBE1GxAR8hyvELceXBCDIBoQViLsDy0k1Q8HJtYP3yfxD7IpJhB:K3MQQS3XEPYuVBGcMOkRLzKWEqwzWRMPNTIUVjYgFX83IhaIODkXbjliGC86nRnIOuUaNjs5HHk7lx2SO:8egztzIE479CH1OoAjezoVJeE5ryYpOUwoVTjnKWc3fytfNhAtPzWWLgg0DjC7MnMxWzHBMuwv9zNwLhI17CwONmEr5zbQKZg3OigeOJ4mdzgAJaE4YCOfOMIhbzgmIBQ4kB6NNwEd3DZ8GwA2Ahr8NJcY0zM9F4Uy9BUYMb4UjC%aE%UtihIlLI4RTyqpEGco3Q9uJikPZySODlYiDA49IKENIR5ODQUcEg3uGe4M4BfgDOAV6AzxEwINFBIuDU4QaQ2gDrMNEA0JDqALaw5TCtQOKglADyYIqw9HBxEQjAZyEPUFyRCFBRcROgVaERQFkBETBbgRNgXSEXkF3hHdBdwRXwbKEf4GpRG0B2wRfggcEVkJtBBCCjMQOAudDzwM8Q5MDTEOZA5cDYEPcQycEG4LsRFTCrwSHAm5E8gHohRWBnMVxQQqFhUDwxZIATwXYP%TF2P9yBdR%9YXLvm7F:v2cRe49PgWaPJPFg7weBWu7XUUTetHE:Do7xGa5m4QUeTEDhni9Qz23wML7N3wCP7bvQYr2m4EddgFAtvWhP9f1e:8A9RK%srSmPe10d30xdAc8vvPV%9Vz5Ps0s7V6XTOIec5zn7kJM7x4THOft9hzindsc702iLP5Ni0z:zWadBB1T7RttM00l3SRNM20WvUQNCj1XnP6dbfzjrYc86T2TLO8Noazk7cKc6o3VvO%t6szkHgGs964aPPoOJG0K7j:tCg5MrRceWk0h3midOj5nnUBudy1UfnddZo54DXaueT2FDnq9kY58Paw%ba21Hm7NzE5ffdG%X53lfk7t9749TgieKq4YbhcOJ34CLjYN:A40LeReQg3a7k%dv55M:aJ%Wi2Tfld9gr5VHXBeUz1sTkIdVq5B:U9%Mx03DjW9LW4qLRLOII0XThj9Cv4DfQ398B0AXf7s8l3gLQQt1C0F7csNB920:RoNof0sfZHtP02EvUKtik1W7XKNfD1tTYLNam2qvVmdxC1ave8tTX4LzUHeOk1HvlrdTw59jUeOoo1Q7tnNWt7zTWTPLt1uj0x9d798LYBPrc2X:8Fdvq:mrcQQHa3YMDYt%tBQDhvwez4rUJe%SOC1XmRA1B6NUOOuo9EDzsexFF7pASUvCAE2XySxR79PUUlfZ:Fa:46hXH%jYW2vxkFuX%dBbmAGYW2wI6FsME8RWbBpAVYggZFRkKkhS%CwEUUA1nE84OyBI1ECQShBF8EbsS0hDZEygQ4BSBD9EV4g6rFkwObxfDDRwYSw20GOcMOBmaDKcZZwwCGkwMRxpJDHMaWwyGGoEMghq9DGgaEA07Gn0N:BkFDq8Zqg5SGWoP6BhEEHEYNxHyF0ESbBdiE%IWmRRYFuIVzxU%F0sVqxjPFCgaYBS3GwIUWB25EwofhxPKIG4TkSJuE1skhhMhJrUT3yf8E5EpWhQ2K9EUySxfFUkuBhazL8MWBTGYFz0yghhYM4IZUjSXGic1wBvTNfkcUzZAHqc2kh:PNu8gzzZXIqo2ySNlNkQlAjbIJoU1USjvNN0pQTRnK3wz7SygMmsurTHgL6MwRjGFL50yVC7hMxUtDzXKKyc2dSojNxUpAjiqJ784MiZXOawkyjkYIxc6eCE%Os0fPzoaHhk6YBzNOaUaWTnrGMA4NhcDOIgVITfiExw2RxL0NLUQqDMtDzsysw2wMEsMCy:4ClAtwAmBK6UIoSmoB7EnygayJQoGpSNoBY8h4wRwH3oETh0sBCsb%QMMGd8D9RbfA%wU%QP3EjAEGRGDBFUP7QSsDWoFHwz0Ba4KhgZaCRwHIwizBwoHRggPBtUINQVdCXoE3AngA04KZgOzCgsDBgvOAkMLqwJoC6ICcguvAl4L0AIrCwMD2wpGA28KlgPoCfIDRglYBIwIxQS5BzQFzAajBcUFDAakBG8GaAPIBhECEwefAFAHFP96B3L9kAe9%5AH9:l2ByH4QAc%9usGTfR1Bk7y3AVD8B8FLu5ABA:sQAPq6SMCxefoAKTlkP%I4xv%deGN:HHf6Pp93Sr5mdtW98XZa:UC2GzzUNZZ8bDUNu8k0wjtstHT6l7Qm%grz2LmHc4s5DfN:OF5zNHf5Muu3XbLmNsxy5DZFcub1yPLvNVay:rTvstZ0lHM3dASzYjPAs5dziLPX81s0IrM29Hey2fTXMsM1f:KwNbFyn3Yrso92rvK:NvtyrjdQ8to37rLCeFUzJjiDs0Q5ObNauXYzqPm48%15wTRoOg10mLpdtP96cLUceoW1r:qcdfo6tHY7%o22tjqmtui6vrcTepX3t7ps99Z6QnhvuhS4g7ojONM57fkgebQ5a7l1ebU5MPn8uOZ6ArjU%kb4uzpJuFe6ingp%on38vqI97N6iDdtuol3InqM9tE6kva5elu2XDpo9jl6O3XRuhL15HnvNbN5kXWAebq1S7lr9VW5JTVfOOg1aLi1dXN4TjW:eDI1jXghNd032zYvd6C2Q:ew9pu3TDc2tzF3VTcft:g21vhgdtd4zjbg%UD28Xn4Noe6tTai%zh2gjvBtuP8UHbFvSU25v2AdwZ%Ybci:sj3en91t00AKDeagJ:34kEc%COBn3hdgic4jwKzuPdCxPlWA1t5rEO2ufmD1bp7xDg6s0ReuyEEiLuFxPU74kTjvHgE1TzIhQm9VAUAfdmFOT4ZRTR%lQUxvw7FL:%GhS3APITqgK:E5QEgxN1Bj4TSgj5EhIKthLNC3kSeQ1AEhYPCxKfENUREBKgEWoTdRGsFFkR1BVJEeEWQBHTFz4RrBhCEWwZThEQGmARlhp0EQEbjxFXG7MRlBveEbIbDhK2G0gSphuYEocbARNYG30TGRsLFNMasxSEGnUVKRpNFscZPBdjGUEYBBlcGa0YixpeGNEbFxgsHdgXmh6lFxoghRemIXUXNiN2F8QkixdTJrYX5SfxF3ApORjtKpEYXCz6GL4tcBkNL:AZRTB:GmgxHxtxMssbUTOEHAY0Th2VNCweBTUUH1U1:R98NeUgfTXSIV81ySIqNckj5jTRJJQ03iU0NPEmwTMKKDozLCmcMlMq6DF6KyMxnSxWMLotiS:MLrYuyS:LLbIwxyyUMbcrbTKjKi0zhCnHM1YoQjQfJ5s03yXGNIUkvzQVI480oCE6NC4gszOxHvsyJR0dMpUbHzEGGvgvcBisLtUWRy1EFdArwhM%KkoSmyjiEPcmlQ9XJV8OtCMyDRIiFQxyIBMLxh4rCvkcVgkLG5wICBkDCPkWgAfmFAUH5RKZBgcRSQZZDyQG4w02BqcMfAalC%IG2wpaB0kK1AfiCT0IkAmDCEEJrwjlCNMIeAj7CAUIMgmqB3kJeQfFCX8HDArHB1oKTQi3CvIIDguTCUALHwo6C44K%wrlCpUKLgssCnEL3gmzC7oJ%gu6CUgMuwmkDJ0JHw1TCbYNywhODvEH2g7IBlsPZwXHD90DCBAwAhQQawDrD5X%og%x:E0PufrwDqT4iA5y9hYOOvSSDQ3y9wz470YMG%5vC4bsSwor69II:OkfB%voNQXB5w8DQea1AGDkOP434rD79N9A%dXdDvcP3Cj1w9p88:XZyvGD2cvvONlO7erYPupp2KXmetfN4hfWKd9x1P7btdJh2RjRXtcH0PXV4s:%1LnQU9R10tbT8NQ607rXJ9JK2n3QbdxGzjXebMuL3:nHXeBgxPLgKMGE4Y%%:eG9vFvi4LvW4vW7fePOvE3kKr525Yu:%eaDwHTotcHS6erEoOu4y1DuOdac8RHj2:Q98IL3q:si%ZUDavnRBkX4HgXy9Tb:0PKZ9lLvRe0S7EnlxOlL4P7oVN8o6qjiWe2s6SbyB:Oz9wD9B:3PBToB8guQA5MOsQOeDbcBjgkI:kUDL:nt%8Xz1PSD7iLvG%pj69jmmemo5KPph%M461Djle1v4%rvVePS8ebiDfMW4kzz0uB78ljfr:AN3v:tId296rbce%fu3Ljkp93o4r3edOIy4Frj3OEu5Wnjg%fE5Nfp1%WE62TmH%xg5onr7%XC6RDlBufK49PjROKQ4I:ge9273sna:dyU2I7b5Nae2rzVXdrq1M3aMdTU25jTkN020yLg7tJF46jSheZn0onpy9Hv6:zPNO0%zOfse8b46lO:y%ert:rjcrAQ4NCqotzLpw3ap6dL2F6qDdh1sKbbU7qC5QbH2:W01KAKyeHfIDDtfDUP9oJF9PvRTgv:hlAYAPxKRwCqP9UA6zDCAoYhlQYSFDUMdgoLE8QFSBpLBvYghAsnJkAUWikhH3QqpSp0KQY1jya2PHIi%UDtHb5BnBk%Pw0WCzrOExQzLhNmKz8UJCTJFlMeLRqgGsAdXRkRIW4arSMQHUolfSBEJrgk%ybtKewmTS8:JYIz1iH7NVQd:DarGAc35BSYNscS:zWbEmM1XBTvNOcX0jTbHPI0vyITNS4pKzWvLzY1jjX1NCA6JjQePdIyiT4rMXM%Si:zPDItVjoLKwQ3BylGMyknVC9kJY8r4iM:KL4ieSXMITgjvSB7IWkfQiDQHWgf1BtxHtoY0BwtFGoatA1wF:kF9hPE:ScQHvZdDCDwnQhO7NcEyeprAbXrjv6F7sP7mvHO%LXzTPbg9M30d:VN9GD1rPR89OP1EPPt98bx5vqV8cz%L:M7A6T2zAfW%0IMyQI8ECwLRBM3FCEV%RzCFXkkLBXQKZMTWSwqEbQrCw7wJ3oKyCHSBi0aaAPDEREBVQloAUECBwba:Y4PofxmHV:%7C19AhI:QwgXT9kOh1wiFQNm3BmOajoc7GkPHH9kZxkgW3UUIU:LDQlCKQZINVL%KipE96khCvIrHDbvtxkV72YaLvI9Hub47STFAv4tsQ72OKMbEEWyKOJQlTR2Wq09:1:BQsNgf0NGXT5AnlaNOcFNODBgQ00lQTjrGXMtJA8MJOsFohze:ksXLfr6E9b3hxKu93kSNPlCE6L7gBQi:ssV7P%UFnAAbhZ0:yEVzfyIEkn4qw4Q8tkJw%paBOziTP7E2uf3nNKq8Q7LIeyWxILnUb%f40e7LeCguCDdZ7et2my3A9l:uAfYf7pR1yG9jNbrv6TVcMKB1CLEydInxC3Q88HJzPG938jruH7EH7Olv2Osbbr0pOW0gp0Er6aWyajHkFGiVoz0mw%KZJbvinmSCJCjkPyZ4JCWqEKTxroBmOrOyJ4N43qmRvXbrQ8EOLRjDly5rxM1veETv797DwzBggc0wUj9TcAn8nW%NOfyuyvdRrnI1Aq37s6NtSPMtrQdzGe0Hc7DtJHR:LUg1gu4X9vBusjg6L3i5T3BPeqIxHztyseV7wfLx:DvzS:xH9DF8MvR8e%R04PvjdXT7:fWVPDw1mPwTNUV8JHS0e%Oz4nvHs307vTLQu5GzAXuys1o7grQCO:B0pHv8tUU8LrZsPAA3krxWuLW8WXmlvIS6sPzeO0e9XbwMPbB8tT2O:Qn9w31HPdx9Yv2lfWI9ZP1UPRs9fXyH:Vs8cn0ze%Q9Dvue:S87G30Xes69FLquvPA6dbykemi8Z7pO:DW6YLuF%ot7AnqKOlG6avleefs4VnkAt7M3wXaHNoW1tvTPtJuzYzO6cZay4vANckDu07I4LZKyPizrsjGsVvJS7B3ygWwIMwrsU7OcrPe0Ka2qtPsuo7WMMB02eXFNdyMy5HeC9FT4DnWauGX2uLhvt3Q4dLfYeEs4dDg4OFT4OjhQ%CP4U3hW%FS5Jvh7uld4i3yueOu:OPl2wjq6PsVo%w%I8fw1C8e9RM7hfl%ROn9q0swAkZQPAZCUgMK7FGRDb1P7hAVTAAUPkeiFrFBzBgNPHQazjZ4G0Qy1hvZLhEcIS0EHX8tQR8eMLsiNTVQJ:M8QS3YRrQ0glENPW1bTEWyY%pM%WnPUxpukVkQcHNd%28uX:ZtJV8aartdwGQEW5NeQ1c2WBZTFlLzTopM1kriR51GLkRUQj1BBz7RPp05xTwjNQI79DBsOU4t7TcAKoQ2uCZGNX0jSDSYIIUzNh7wMlQckzIKG3UyjxpqMvEaLTIEHJ4xgB3FMCcfpi:NIEYuZiLWLP8jgyuDJT0qtCbkKGsneievJ%UlVyfBI:MlwCBLIxUdwB8lGdIbCxV4F8AQahJ4DPEMgAjbB%kExAObAf8AqP40AEv8ZwKw%g8I5fmhEOT5NBuL%g8noPtpM:T8Ej9g:vFIt:%SUNgA81XKAQ9ZpALmWXADulgrBOdV0ASUUUcF5kt8BVZFgAWKPoEF4TeTBWYxqwUvK7oFjiWtBcsgbAX2HPoEDBqLBBMYUwQbF2sEHRfNBO4XWwUzGdkFkRolBvkbVwaUHY0GWh%tBvIgsgY6IvwGjiPnB0clOQkhJz4KkCh%CnYp:wkbKhEJiCoUCGQqYwd9KSIHAig1BwgmdgddI%oH:R%kCF4cnQnjGLQKchXBC:kRmwzgDjQNnwylDRULAQ7HCSgOhwjsDXUHRQ2SBkcMtgUFC%EEpglGBHMI:AOYB9gD%waaA3MGDQP:BQICrQVaAG8FJv4iBaD7rwT%%AAESfb%AmfzkAE98KL:yexG:Svpufpr5Sf4S%GF9Xzcy:IY1yPwjNGS7d:LsOp4xSjn:L094w%2bd%9rsLbf6gA2DajOdT6nsvQOZzmzQybcMsGm2rJ1Zv7x6CdOcd7oB3H:qOmx8Wnzcjoq1bKerDjy:O0Ms2uuEvOqbt3z1a%JdHLwLPTy8JO11bE%9u:xbXhLcdg6HXIr%%ByTv3esqS:ojLOwWgzMkKrM0QD6XOIBJuzw8Uy8:pFKPP0xQvzwQUyM6YEofOmBBDzhEO1s0OC2HNoAdBzfUDr807AG:OdPwbz6343s819YLRV:KB1BjwdNic7sPclO6C4bPwJefD9IjtzPnY8%3%XPnMA9v9Ngg2AdILDgNQDjEDlQ::AbsPBwD:Dob9xg2i%nQM3fcpC7T1vwkV9AcIrvIDBqvx0gN18XoB8PHm:o:yA:wQ8%j4r:PI9Zb0v:KQ9dHvbvYj7Ur38upH%F3pVvlR6FT6yedC%9vnJfyE6Oj8n%lx:Rfr3P3U7Gj%kO44::DvNADB8BYB%fCuAa:wIwIa8M0CZe%jA23uFQT57KwDH%uPAiLpFwEI5zf:q%TC:CziCPry39f3Q97R9jDdL:e33BP5z9y2:EDdHgK:3doIHd5VEE7eMhg73iMgxd2TJ:LcAS7622szEtv9N0baezuU2Yw9DtlvPtfYwj4B2bI%ednoPSPaSzwH2z06VdwZODne1zW%4Eoz6eN8MLznly0G7LgqXvABKHz0tyVe%CAkE:xOI57:LSMCA64jNQbOJA8JiCZhC9IoHg2QK0gOkS7zDtQxcw%cNSkQADobEZ0%%xHyQn0S8kZ0EsdKxxFTTp0QQlGAD4JT:A45VScPW1bKD5FWyBCYVTMSkFMTFNFQUhabTdgYGkqOG5hGUB5ZQ:EgTEBhI0o9niV9OownJzjyKCc2uikpNAwqQTIiKtAwICrdLwkqCS:VKSkufCl0LQEpIC11KCYt%idzLc8nEC4lKOAu%CiGLxAqpC8%Ky0vYCxVLk4tSi3cLRos%S2zKqIt6CjRLJsmnivXIyYqiyBCKFQctiXkFpkifBBQH5sJDhxlAsoYzPqYFRvzuBLu60YQtOVHDpPg6Qy03HEMVtrvDJPZJQ4t2tAPutvIEfXd%BPW4EUWVOSdGFnoBxvo7JgdDfJcII33diMT:R8nkQJwKxgINTBcDSE13xEgOosVNz%jGExEKhsbSdQcZ017HRRRQR0WVC4cVlYaGrFX%hYVWBUTgVfODv9Vagq0UxUG6VD4AdRNNv5nSuP6g0Yb%DFC8:WTPUr0wjgB8%szV:JkL8vyYiuL9PwnYPeEJR:7kyTF:4QlHQUeKK4KyCsAEOovwhQTNLcY7jelGy07Zh16Pfodij6DHUE%Lxy9PB4aQTp3Fw03bxRUMzQRUC:kDU0rtwqTJ%AHOyRQBTgh5gJ2HsQA3xsj:1YZ7P3XFtT8cBTF%x4SwvrBD5n5Qw0H%KkKD:b9B%7zQwXM8XECoO94:2XtR:ww69:4HOlE9TbnjPGR5ebtSOSF6lnjeOee4rzkDeJV4rLhLeBc4QbenuC821Tfa9nJ3SLXTtzB1PnaNdLr2aPPXdk6zW7ZGcsP2mTJQdszyB3dbseq3%XGyeJ2xlbmD8Yy6ovFPe66xEbyfcMX9s3BjvnAv5n8db0h:xe7GQHTuJ0CvLbRA9O0ngQws94E%bGUBDCxyAOgsFMCKrAPAO2vKv0XsPn5s7Ca9rKx:fIHszzvorSb64C2TuihuFLlA7uW4pW9KeA6wDDez8LB3EnF8tvAx%HbOMp%3IrMkd2jzhrft9Bo4erSleQf1U3oKNdD7OrYffAj2un0f9os%QPa%PwP2UIA4Nf%AmLWBwWG1EUGftLGBpbQmgb0zr8Fnc07BJPMKwLyy8z:18tX:UXM6PonzZX4Yc589tnPq:Ry0QXzLtN08R7V%e9J16Lumdl67fDbmuwu3hDsKuC%687hgusd42jrGeSF67fkyOv%5AfsEOUw7BHlWOwT5ZXsFOXu7BTlXe0a5dntK%VD7jTlau4u5T:uJ%XT7Qzl:eyL5EPrZuNX6MHhbeTX38vfrd1l2j3bMtSn2IvNE9YAx4zTAsEo0d27Hc:Kt5jN5rShzD%zP8zjsojMyLOdzcG1h8%YuDDSLLx71WjAatk6xRDeespk4:HPROl%1ZjvIdtK9uDgM:2t5iYEcuz:Cg7yqBFY9xsYQvxlHuMAdCQwBRoq4ggrL8sLnjMHDmo30A98OkARzDxaEmY%KhNaP8QTvz80FKM:dBQLP3wUAz5cFJo8HhTOOqoTrTj9EoQ2bxKwNFcSSDOlEj4yKRO9MR0UIDL9FZoz7RgRNqocNzngIJ88SSXfP6Mpu0KrLSFFIjEBR8YzTUh4NRVJXTaHSbI2ykmSNupJBDbcSS81i0lVNPdIqjM0SDAzTkfRMkJGfTIERSAylEOfMQlC8jCNQCgwOj9FLws%Mi74PPAsAzylKyg7cipcOlkpmDlcKM84iCfnN%EmzTZpJn81GybzM%IlGTKwJfEvkCWKLYEl%ipsJWAoTyXZJS0lUSPPJKsg9iMEHsoilhu2IXMZ2CCTFxcgERaTHwAVhx9GFPEfyROqII0TtCGDEx0jbRPaJCMT3iaiEiUp2RGZK5UQFC6wDoQwOQzgMmkJCTWEBtg2qQM%ONoAQjkp:us5z:s%OgP6OjrX%NQ5Pvj8OBv4szdC%Ac2hPgFNLv4pDHg%OQu:PjoKxv50Sg4%Z8lT:lFIm:50R6k%Vcb9PniF136gxTk%lkRift4Dkz87wsq:cwJEv4ICAX:oAY1ANAF2wHkBeQDyQYdBi8IeggGCvIKaAwuDSQPyA7YEbMPXBQgELsWIhDSGMAPaBoXD2sbTQ7tG20N9ht%DJAbjgvQGrIK0Bn2CbYYRwmnF3sIqhaIB6QViQZ%FIgFLBNnBJERHgOPD9QBGQ2vAD0KpP8HB6P%gAO3:b7:8fzr%1P8K:jL%370S:vZ8Mf6Ue04%gLql:nn5uf4:OMv%F:hX:c031v2eN0g9RHcxvPm2ljyy9nR8JbYH%8f1xztGNWW6hfSjef:zTDkD8mH4HvDbtw6vebXabYt02%vg860qBjKeKIcxvmcssJrmPO:4ZT%vV2S67ztkLS8h5A7vQmRdr5Ykl3AYZTRwvyWpsX1mbHIMJ3Py6Gg8c4wpBvSuadM1TCrb9ihrnnbEbJ33m%1duGluHXkr7tt542%UuouwRHtiMOa76DF7PF2xxX0EMkX9ofK1ffmyx:5Fs3m%QTOOvq8zhn6Os9e%WHP:Pcvzwf2u86Z8wjO2fAjzQzuTMxs67PLAuk6y9Pmy8oK5abK2eMfy2vjUMzf4zXOHuWz0MPmftNv6EfWBOrw2HbrXtuf7E3dcO2X3v7tad9N7gHgQ%5u4NftsuAh7eLgQuwP4UvrLeFJ6i7hROkQ4VLozeCM51vg%ea:34:mE99Q5n3eUOYi3o:mGt7p5nfePuc:34XndeDB5xvi8ece5CPoV%Zr6Kzo0Ogb6zHpiO1m6bbvaemG8UbpA:P66C70gej49PfndvV55771Buey9ZTmPvU05p703OUX9G7lr:Pl5GHzUuRQ853jl:OU4jr0QOFP9dbf%vZs3jH5%9zN%4Dbt:7y2eABPNgfBV3WUQhk1GsLYtJfDnbQIhHVzr0Tn80:FtTMmxhzzMAai8ysHBrNXh4HztIfQ88IIbnQEyJH0vsi3tO6I4rVQiRR15IkJtm0JPraqCTN3GYkm970I17gZCMg4r0i9uMJIu7lZCEF6OMgN%qBIJLsLSAb798fxvGQH5P0SR%q90QfJfu2H:T%kyAIA70hcgdIIxsMRCWhEHcnnhSTKeoXgCuKGj4thRzDLuodAjDEHgUxIR:aMR8fnTLnHnEzkR5XNDMePTX4HSk2%x0wNyEeQjhTHio5ox7EOSsfCzrfH:o5nyCIOVghszgDIoc3oiISNjojVTTDI1wyNyRGMKUkMy4eJSksliUjKu8lNCgcJn8mIyYSJQom6yPYJQQjmCVPImEluiFGJT0hUSXDIIYlJyDuJUwffSYhHvYmfBwXJzAa0iZOFzsmDRROJXEQ%CNhDEQi8gdQIFcDPx6v:j4cDvp1Gp715RiA8YQXyu1nFqLqtRUx6HUVe%apFWvlXRYB5ZYXN%VMGeflehvq5hseMugIIb7pGySG60Ingu1pKq:vbi0G8jwwevTQMgL3KzWY%Ug3MfwhObb%tzoZAQw8WwM4PYcFUD6aB0w:hgkOQEQLiUDUDMxAPg7pQIwP50C3ELpAnxFQQC0SmD9mEoU%ThIZPdwRdjsoEbw5aRDkN7cP3jUDD7gzWg6cMeUNsS%0DTAuyg1VLS4OHC3SDj8teA%HLfwP5y1rEEguzBB8Lv4QbC7wEBgurBB4LTQQeix8DwwreA4oKR0N3iZmC1skWQm0IQQH1R5tBLsboQGLGMD%ZBXf%z4SA:kWDzv2%Qup8%4IZ:H1BW3vEQOq7UQAFOyO:arq%Ppt6Zj4W%h09nXnhfS%5sPyK%Yk8azlnu8%5Sju4uTG7JHkhetG5FvqDuQl6eLjxuer40nmbePD5ETjIeM140bhIuM53wXjEN3x4sna4eJc2M3i4dXJ4oLT8eJT0UvjVM:N43fNdeShyzflwskD5tzH0ebsxZ7n5MNa6M7B:%jCv5rpxL0z6tW7xOoLuk3rd7jP6xC3PezPtZDsxLTM7O6z8Ow5s%rsm7Ks7B%yN%zHsZTrkbHP6n2x7umDsfPomLHi57uxvOb4sYHlUbIx5MWy2OJfs4DhLrQv4Dy17t6OtsXdJLi93Am67NtIvHzb0r5824nB1NtlxHzccseS3ZnKH9%YzfrgLtDx4kPS7OTZ09zmAdWx6MzVZepD1u7rd9ZE7ZPWde7E1qDvE9fH8IDX2PEb2NHy7NjC893Zo:TR2mH1utvy9ZLcWfZZ3Zv2GN6%9snexvZf37T24t%J9mXgTfbp4Ab2W%G49bHhaPXu4RX1D%K59BTiUfQG4uHz7OFp88Th4fKO4TzyVOF38R3hmPDr4K3vwOC37pngt%1y4K:sOuCM69jfJupB32XoeN5e5n3dGeRJ3H3h6Np63nTZMdv218TXc9ZG1ArV1NDk053NDtO2yofSKMhb0gfGm9JoxE3TS8N11KvCFNaNwiDY8sKW2svDeN0Oxb:gusZb5MvIROhAy23sFc648EHRE:W21H75cdj5:WvcagKO4MMGx%QOCxLpSA9s7WETx:FJFxz2%xpm%m4em:6VIakCbiSGBgEnNQpVKb0NdCsUEV0tJxQIL%4WbTBrGY8xnRuAMo0dVzNgHyI0MCHnNPkiqzWyJHY2cCZMN0goMTguKkg5Gyy9OhwujjwnMH8%EjJbQL8zE0IxNaVDcTb:RHU3BkY1OKZGsDjmRuo410buOHpGwDjFRVg4wUSwN4lD1DYpQtA1mECnNN0%YDMOPQkyNjupMFo5RS%GN%ktxjWmLBk0gyt:Mnoq:zCKKZwvuihSLgwoJi2AJyEsGidCK94mhCrMJuYp4iZjKSIn%CiVJ6UoPChvKBQpVigaKk0oTCs%KJMsFijRLdQn:y6DJyMwHycuMZomAzLqJaEyESUWMxEkZjPxIpozwSHKM4kgBDRLH0Y0BB6LNLEc1DRKGxQ1yhk8NTAYTTV1Fkc1lRQhNZQS2TR8EHg0Ug4ENBwMdjPqCc0yyAcTMroFTTHGA3sw7AGaLyYArC51:rAt4vyjLHH7fysh%kQq%vjyKAj4iydJ9w0mtPZ5JEz20iIc9h0hIvZiH1P2nR2q9swbJvfzGcb3HhiK%E8Wd:mJFJ367BIO:JoRx:2bELX:3A:SAWYPKARQD7UGmA9VCRoQ0wu4EAMOXhHUD:ERVRFkEpsSuxKsE:UShxQIEzsV%BLiFdoSjxazEkAXdxLxFyMSnhi8EUEZPBHPGZgQOxrVD3sa9Q6QGvUNgBrSDEUalAvbGUIKThnZCKUYVQffF7cF%RYCBPsVOQLpFF4AvBNv:msSavzwEFH6Rg8s%GgN:fVaC8LzKAmA8dcGQe9vBArt9wHX6n3:p%j%:Hjmbfot5Lj3muHd9Lne5:Gf29fuTdio667UW%jF0ATltsyv4ZjIZt5xxDnbVsBB2Gq8kdW8uDLTTrUq0Seyh89Sr0:O0qx%zauqCc3iqO3MdacvzWCmy82npbrOUKX0z1SlcdGkpSXTQKb81CSn7tZEqPrYlakW2xerM93IrEffnK5S4Y%wT%OhsjXlybT85vi2o%gquTDqY7uj65i99uy8vxvuy8EQ78vD3u%3xYvwjccQ8VDJYvECy4nxo8yc8UTOsPEF0Mrx69Hk8eLTAvLk1S7yBNht8kXavfKU3DDz597m80nh7PS34yb2E%Zp90jonfhU6r:5M%zF%uDtmPtY7yn8lfB5:JTxkvxZ8nf88vIm:F:znvuW8%f6m:MI%nnzB:kz8%f3x:Kp9j3yTvWg8d7z8PBj8i3w6PBk723vnu7w7dPtd%wG7QrrSuy46abriegW64Tnmeqt5jzqCOYC6pDl6elA5fTpEuUt6gjlk%oo5Snrb%X468nl9uwj5gnuduYi78TmUfAG55fxMOfe8jbnGPQZ50:14OaK9pHmy:cx5h:5yuWW%mflM:wK5ev9seS8:1vkqwEJ5K0DuuOwBWrjsAcX46wJweKfC2Higw314V4PhOExERbh%BK04LMUYeBsFiTgHBgB4LkZ898:G:jfshwP4A4eO%BNH33gdSDW4IghSOF8ItfhUiOB4hIkPeO6JArkPiX05KElBebqJTvnFiaP6Bom%un%JXfryCUE7XQlq%4NJXnwtSR28oQknvRwJPD2cyRz%Z4kLPz:JBj:kiUaAkcmCgUPJ78H1icrCogoVwwkKVQOtSkwED0q7xG0KpgTHitAFYgr:hb6K9EYcyyuGvMsjhx3LXwe9y12IG0ucCLdLl4kRS86JpkvAijZL7kpETBlK0YwCS1xMKAujzAiMKMwjjGqMOYypjAuNJwwXDWKMGc2ZDBKNy4wCTj1L6M4uS8YOWsvbjkNL605qS7UOTsu5Tm5LeM5Ji3GOX0sezmeK:g4bio6OPYoQjdBJxI2QSWqNOciETM4IFExRh12LyEaiS3XFpYrexOtKR4Q4SfQDDomnwm9JJMGcSOsA1ci6gBqIVX%qCD2%xwgy:nIH9D3qB8Q9rcflfT4H17zaSBk8gQhqPHEISzxpyLn8Kkj1vDEJPvw9SVT8Tcn1vGIKILy3ylT8zIrP:R6LD71tC1V9uAuhPf7L7v4:zD1%egxPPu0Mo78aDPe:Qs0LP%WNHkA:jS6AUo17wKONTAE1zWQBRo2BwdQNoUIeDYRCpo2twu3NnAN1jYrDwE33xBPN4gS0jcfFIA4mBU4OeIW3TntF2I6tRi5OjwZ0jqHGaE6khkhOlUZSjnPGBo4CRiYNgYXwTTBFZIyPBQUMH8SXS2REHcqeQ5hJz0MGiTjCawgaQcnHdkEkxlDAvMVq:9GEgv9jg5t%tgK3PcwB1f1nwPf8i8AgfDl:Efuwfku7MT2OOrq83DoMvHW5qTuaOVO7DLkLOo34ynoY%I25qDhWuTx4JviY%D04O7fWN%C37vdHt8Z3MfefdqA3u:YTt5x1zjeBNZC3rPUb96B073eZ9Ir32PRtt930Fjgm88J4cTOxOHzzYXiJs1H41bMCuR9y8rkpcqC5dDJLub5yMrmHMhY50LH1OdvxjnonsWL6MzEyej5w%:oK8P96GjC:Oiywe7oC8HQ6HLApejlv3PoX78z6N2%3udgvnnn670J54K9ieYjvfzlybxp5XC8z%QhvCvk8buP4%67EeMYvLXibbxw4u68QeKcvTHifb5G4pK:g%LMwOPiC8Ja4zLD3OM2xGHkFsXn5OLFceWsxgHme8eY5lDINec1ydbnPMp86GrLKOm1zNnpG86N6p:PPus50ejr49KR7J3UOu1f1tntHtho7tbZ6u6R22LvUd3O7w7fLvC:4H7wYOK88Ozj6vBj5QrxweYY8QHoDvEg6fTwGurO8OnqlvCP60fwFuzs74LsjO:W7CPvE%2z7jbtQO437cLtD%0h7b:sVexE7GXrmOtW6r3qJum56dHnkOhY5kfnw%Tr5R3jh%R04Sbj0t:d4UHeveDL3MvfeNsO30rakt4:2VfeWthV3p3Xit4P1:3es9as34fWkOCO1qvhztYC40rXj%T711Hm49hP6Afaiupp2:vsBN2V79XeVfLY4Df1DOM1%G:lS:v453H%nuqgAVrt0AQr8PoHBfMcC971OQ64%E8RmftbFHn%VxdPAUEaHwQXHewG1x%xCYUibwwmJTQPuycLEkMq7hS7LNUXJS%:GoMxrx3aM6UgKDaeI3E4kibCOoApLT1mLKs:Pi8nQvkxjESMNMpG8jbOSCc5kUoqOxNM%zxRTZc%PU76P9ZOJkEkTxxCLE:cQuxOakNrTspDsU3%Q7xMBkSNS%ZDKkqjQ55IQEPzRsJCMEUuQlZDiEFhQdBAVD8PQDY9SD8PO3o%5zikPcM2zjytNPs7qzIqO78wXjrrLp05MS3nOJUrOjgcKpg3wSgBN3gnZTY1Jro18yT:NLUjOzR7Im0zQSGRMvofozGlHqcwSR2iL%8bmy6TGpctNxmbLOIXryuWFtcqVxUVKiUUZin:Esso3BE:KLsQvyehD0onkQ7dJogNfSaFDCwmigvnJZcKpyWqCXIlxQhOJesHOSUdBywlVwYmJZwFJSXsBCglSgQuJboDMCU%Aywl2QIeJYcCCCVKAu4kHwLNJAACoyTsAXAk5QE0JPIB7SMTApwjQAJDI3IC3yKuAnIiAQMMInkDuSEaBHwh3ARIIbkFGyGyBvggzgflIAoJ3iBaCtsgowvQIM4MtSDIDYIgjw4yICoPwR%kDzAf:g%CHj4Qux1wEN4cnBDqG8cQ3RrzELcZIBF8GEwRJxdvEbgVhxE0FJURnRKVEfIQghE0D1sRag0mEZsL5RDICZgQ7wc8EBEG0g8xBFkPUgLQDnIAMw6M:oUNnvzGDKr69gu0%A4LuPYKCrf07Qi78r4HzPCABuruNgUW7dgDUOtdApHpvQDJ5:r%8%Ud:RPkKvst4hz5OeDu9i7eo:QM3EPy2dnV75vXX%1Q1ezq:9KE6K7QL%ZmzvDjLszM4QnKyd:zx%rd7cUu3PnDltobwiDZVcDK16S%ldYIvYLVhbuV1B660NPXuDTTr7fB0qe2dtK9tU7S87RA0ki0RtK%s1:SVbOM0g6zy9LoshrT47J20:6y3tM3s0:UjLPI1P2zTNWOtNvVQLVx1g22BtfwtpbX5bck2PC4vdgTumrZU7s02rS8G9s6vhjc4b8q3afBUt6Nw5XflsXy4L:HZ%IDyvfjX8yu5dLOmedc0b3p%NMQ7JzWeu472ePwzds580:ecvW74Ir3EeOA%UzlUPtr5:T8aulo:knrqv8G7bgAne6QAQ7wMgJa8ZsCgPLLAoPzwgJi9IYCH:UbArz1hQE69sYAnfbe:%f20P4e95:9Q:dP:Fn36Pph93H5XPfw90z3a:Y19%f0G:dm8wT37fH19n3w9fYT7wP3pe0Z9yzsL:em6kP3G%lX95LncfcL5pL3guS19:Hi2Pdb4fz3w98k%C:eV:ij3Jj4Itvp%LPZT:le2Mz5K9dj%h3WF:s11eb7dNTR:NfT1:1d0:j%BNMxAMnSfwGx0uECwNJWBPnS2wVe024H69MKCZnUrQpg1VIMPdb2DSzXlw8x2DMRTdnLEoHaXRTN2%YVLd1lF57e1hgc4DgapOGMGzLjzxzF5AEeXeYfH:vnJyCe6RkhQuvzIeTsuCKJ7m4jOvAdJADyziTe84Qlz:U%Jsz3:CbU%cIn6vuTKA7%cik3AFsqUgJIK00EMCwdBgotvgfRLTcJgy6RCiIv2guwLxsNMzBbDqwwnw8aMesQgTFGEuExtBM:MjUVnDLFFvYyXBhKM:gZmDOYG%AzPh0gNOceVTSUIH00RyKZNP8jrDS5Jbk0cSe:NCIpuzTJKq40ZiyWNPstdTSHL0g0CzEONIYywzP0M2gzVTX8MqQ2gzLhN:4xCDltMRA6zTDvOhUwmzs8LxQ8Qy5hPCotijz1K448oyppPDApHTycJ6w76SUfOx4kezo:IsI5UCD0OFceEzhaHCQ3XhosNmYYLzV0Fi40ihQsM6kSKjLUECkxCg8rME0NMi%hC0EuCQpVLYcIbywcB5QrywXJKpYEDyqBA2gpiwLNKLUBOSj8AKsnXwAkJ9::piZ9:zMmOP:OJRD:eSUD:zYlD:8EJTT:4iRz:9EkzP:PJD0A2yTDAPUkVQEgJfEBZCWXAsklTQNRJhUE9ibrBK0nygVxKK8GPymaBxgqiwj3Kn8J1itxCrUsXAubLT4Mki4WDaAv5A3BMKAO6TFGDwczzw8MNDkQ7zSCEKo1qRA7NqwQnTaMEMk2SxC2NukPYTZpD841yg4CNRAOAjQ4Dc4yRQxiMTgLwC8TCu0t2AjrK4gHvSkhBmUnowTmJBEDRSJwAYofw:%7HA3%4BlQ:AAXkfofFNb4QREj92gOfPWZC%Pz1wha8iMG4vB5A3zv0AAg7iL%yOxw%3brwvgq6hn26eh087DnzfB%5iXuT%V%6yXk3%gE40rm7eHE4%DgT%He3:Pe59613P:dmNom3Z3YXdzD1qXbCtX%2m:TaNru0eHZhNBm2S:P%djuzZbYwMxA2KTL9tebyrnXpcmL17:Ia9flx1fXFcdP107GUteRxV:X4cR010DEjdevw6jXMMPH18HC6tddwg:YAcI12K7BXthowYvYMsG%2AnB89jqwCnZ1MBf2cvAm9nSwOPZ68A82hTBqdpOwSvbmMHC2:bBbtxrwi:d:sIH3rPD%d6IxAPgdcUg4WnGR%JYx3HjMsiZ5PfIvOWqydjmUcrm5:XK5uicy9jpTszB6gzNoevUzXTsq8457ZLP8O2J0JbujdEq75fSpu%k0wnwtNRR8MjVf:Dd1pHw7teF8PrYXfAD2hzwCtvG7w7cXu8I3ebu9d1f7tXezu2q3zbtdeCa7DTh:Ovm4V7riuLB6iPjJ%qx45PpMOQB6Zvkb%jp5NjnFuU35yXljeYf5d3lCOUp5eHkb%So5K7jXuTm4gnkG%Kw41HhW%OK4A3jyt:L4hXfmuJy3n3i5N1z4nDdeuIU3ZLi0dy84qnc%OKc3EjjqNyr483cJeQO3brka91w5eXdROZ73jbnKt9G6PLfcunV4Lzq0uEj7Orio%0Z5DrvYOXl8L7mofIv6Gz0selG9kHrMPjd7Cn6he4w:DjwQP7z8VgAtPN0Anv1kgRJ97IGHvnTCP76%grs:CsN7P5nD:8AqxEgA:MTTgU8FoUHhhjFCc4aDgwTHWAOUx%4EI4hFRPKI3cVDibcF14oRBq4KqscFS0MH2svYSGuMaYj1DPXJdw19SfBN:8phDn1KyA71y2SPKUv1D1dMeU%ADPHP440e0AJNgVBbjdoQbw4p0H0OcRBEjvDQRg8pkECPWpB0j0PQYQ%kkAaP:c:lD9BP:M:cz44QI89Y0CWPHNAiTtnQG86QkBLOQNAHziqP%Q2ND%aNaM%OjTyPcIyHj02MSc8mi8RO:At4jk3LJw4bSpBN5Ao0TWjJk40qCS6MqEiGjGQIHIvex7FLWYcFyxXGm4qThjOKEwWPSdQFL4lWxJQJG8Q8SKNDqEhtgxeIOwKKh8xCQUeigfwHPsF6xuIBPcaMAMXGvYBSxnbAJYY4v:2Fw::bRdi:vcW2f2WFnL9RxYt:QsWCf3eFQP9vhUY:agVQf2cFXv9mBXD:ZsVGv6lFX3%sBXu:rwVb::IFQQA1xWzAOsVfgEHFmMCKxZeA1UWagSDFoYFsxa1BuQW%AcUF1EJRRe4CnYXJAyjF4INxxfCDt0X2Q:kF8AQ2Bd4EbUXBxJ3F3oSHRfZEqkWKRMfFm0TghWhE9IUxhMMFN0TMxPpE0cS5xNIEdcTNhC5ExAPjRPXDVYTjAwTEzILwxLJCWISUwjzEdMGeBFMBe8QwANYEC4Csg%ZAP0OA:86Dm:9aQ3c%4wMTPqlC7:4two598UJu:XMCEL0ywfL8roGVPGUBdnvWgRY7g4D0ey2AUXrVQC26ev%Iuh2:YXm8:vc5GL6J%PF%GfhHPef32r1zd2v8:Db8vEK2jjwIdiF7jfW2OxP1DDrZtKP6X7Q9%eZzmrmuszk5OTKYeMXyeHhU8dl4J:F8t79w4fdcMIi3PrAxtqdv3PZXb4v2D29%9Y:vNXVWrvA1JG6wNPoudrSY7kM0gG5VNG%uK:Qm7gg0Ja4p8%xuEjP6bgDzz651c6uucDOPrrGzvC67c7JuzvPzLyyz:q9UNBPvxDRx8Du0V7C6dIRxALU4sU21c:Hg9bWyefX9Mtn2SfOC9tv0Njcx9LN3ijV4uCL1w:j7NlL5Ujci%ec3sjp4%D56xjjHe475THwTecz8kzpHfQ36%r1C%2W98buH:lp8IP68:G%%2Lzzfy19LD97fVq:g33%:4W%GX:Bvmn:975vv%e%qv:Svtx:%P7E:9r:Jb%4vz%:Uf9Tf2d:YT85v2k%yT%rPpW:pz5fv5u%Jn%Ifen:rT1qf4s9KH%j:KR:uLwe:4n72H%Xe1C:obrIP6j6f39t%fZ:cjltv3Y45f97uGC:RDgfP1D3of9idyl:efa1v1h2Rz%%dd5:rDW7P6E1XP:dtQMAIbTtAC40moBDNIrAoLR9QIY0cYDz9CcBKjQdgWk0FIGwtAtBwLRBQhi0dkI4dGpCX:Sdgo50z4LDNQCDPXUvwzx1XYNAdcnDiXY1Q5d2YEPptosEP3b1hBh3YER1N4xElfg6hLu4bETmeOHFFflbBUl52EW:%hjF%bqcBja7IcZ3u6mGvTwzRsa8:scTfUwHoT3aB%4%aEg3:vZIfP9DSPw:zwk1AFjJaEDgCZgBZEnHAecKNsIpCmfCqYqYwyjKyYOmizoD4strBF3LncTWy9JFTYwHhcEMfMYwzHIGnUynRwZM3UerzNRIDc0MSKwNBMkGjX3JXQ12ye:Nb0p%jWcKyU2di0%NkYvSDYMMUQ2wjIxNmU0DTbyNdY1YzeJNbQ4IjXfOaA04ToANLg7RDNoPGwy9Dx6MV49bTCjPUYvwj0CLrw9oyyRPSorRD2aKdg89CdMPDompDtvJOY6lyIZOrggQDnVHl049BxtNxYbbzY%GWY1bxdSNKwVNjP3ExQyURLtMLsQwi82D5guxg1xLW0MTiwrCzIrAwocKvQIDSn9BwUoHgcEJ1cGDCanBSAlEgVEJJcEeyM1BMQi6AMeIq4DiiGDAwghaQObIGEDRiBpAwoggQPpH6QD4B:SA%0fCAQOIEYEQiCJBIUgzwTYIBQFNSFWBZkhkwUAIssFZiL8Bc4iKQY9I1AGuiN1BkgkmgbmJL0GjyXhBjomAgfhJiIHfyc%Bw4oVgeLKGkH8ih1Bz0pdwdoKWsHcClSB1MpKwcTKfsGsCjHBi8ojwaRJ1IG1SYLBv0ltgUIJVMF9yPhBMwiZgSIIeUDLiBgA74e2QI5HVACohvGAf4ZOQFPGKsAnBYZAOMUgv8iE%T%VBE9:nMPjP16DdL8agsQ:EcJSPsVB3v62wSl%ZoCwvhUAMz3B:7C9rX7p:Vd%X:0APdR85:0IfI58u:wzu%3713teO7o6i:tdujg6w:mkOq440XpduED6EjfzOYp3ZzlFdtz5AnZTuMH1y:iE9Ua4TPTEeBo0Rffsc8o3gnOQt1tzGHc2sqF21HJsNrUx%fZa8Yy2RjFk9jXwwXYpsJ:14DB%9ZnwHvWXr8C1mq%mNWPvUPVzrwF1SS829SLu73UALur1Ie6ptQourPU6LnV1M65D9XcuWXVELrU1WO6V9bWuvHWarun1yG8edj2vGLZ3r1c2ta%X9vXv2Xc3sBm3enBYt77wl7fGcRd4EPFX%Fyxlvin8dF48vIFuT1ycvkH8tm5U7M7eWJzWjmzc7U5hPQMOdY0XjnnNKu5%LT2eco1fznbdYX6LHXKejy2C:oJtoi6EbbAehU3NHnXt2l52nehudw33LnbOBe51fhROcu4iHn7eLx5prjtuZE5Hrm7%RF5pnlE%Y75uHl1Oaw5V3ngOXR51DlNOgg5ZLo9OTy6NPkV%m65L:ppeQs6prknuqe5BDrreR6677k2OvN5DLs5OSW7A:lCu1O5YvtoOUc7gLmvu5w5m7v5OYq8GHn8:Dt58jxjOij8jXphvPq6Xr0ruqC9YHrl:Zc7Lb3PO3U%Bzu6:nx7gf7xO9D:LHwov3A8Qr:3fJkAPTzugEQ9RsDPPaBBHH35gWq%FIH8fnCCEj7KAqf:IAL7f3WDDz:NA6XAKEPBAIiEY0DvRI3BWIU9Ab4FakIdRdLCu8Y8guEGrsNMhylD94djhF3H2MTDCEuFbMi:BZyJNgYSybIGj0o0Rw4KuIeJizpIAEu5yLLL%EkfTHTJhAztCiKNIgq:TVcLGY3Ki63OOYv7jmPMRw7NTNCPNQ0VD1cNk4%0DcuPy855T9nOnBAbDvhQEU8QEH4PIhBgj3BQfM9AEJlPkNC1D5zQik:e0JWP1pCYz8WQlc:s0EyPypB7D50QH4%kT:sPYw%Oj10PXU8TzylOxA7wzqgOb458zeQOB82SjdBNAY2ZTLQNH0wpjN3LoEyTixZMQAqHTCMJ8EuBiVXLZAiBCw8INoqBx7QKe8b1SjrGdQn6he%JucVmiXtE3Ak%hE6IwoQ7yErDqggdwyKH:QKoR6JCdYdJAgVHd0GcRzKBQEc2AS1G%4DcBsfAzcbegING98B0BosAWAaagDHGbX:Hhko:3wY3f7:F%H%sxco:5MXrf%XF1UAqxf7AKsXmQGOF0YCaBf9AjcXwQMDF7kE8BboBfsWEQftFh0IsBYqCWUWPwoZFkULuRU5DEgVIA3MFPINRRSiDrATGQ:7EkgPFBJRDxcRZg80EIoPbw%lD7AOtA:qDboPFw3ID0IM:A%HCzwQyQooELAJkw8UCLAOHgarDQIElwziAZ8L8::lClj%RQrr:IAJdPt%CNz5Owci%M4FXPaqBPf0nwSy9DMGB:buCIT4ggvf%rQM1PsADMv6iwnl9:wFzPNMAobvY:8D7KX9penh:DHofPwQ59b7q%Wh%rbj4fg24cP2Wd6k9Hrb3:Lp2FfxitbS7yzU1%5Q0jfvw9Gu8E3S9:HA0iLyKtIO8VrQBO%hza3sscri6nPII%pux1vqjMcd603Is%vhyF:ricjV6QzHR%emxArkocGP4FK%Xd0xu8nanrjc2LO2dNdYtVHWTrQt1Uqz69MxsofSArH:0MKvmc%%ruTOhq4Rz0ivpc%OsA7QxbES0KWysc8gsw3PUrNzzouzK84ctEfOHbWpzmm2O8:Jt:nPKrnS0Ii6ldHRuyzS:LzL0im%pNNqv53UmsC51cPBjdeVw:raAMdR4FXM1ubJ0hDt2Niy8TfdNvRz38T0zt:38%7e4fLX3Z:ylt2U85Deb:V44MD32OIL%jblwvsN56z8JugI:bfoKP0P6UP9Yel3:dXpx:136lT%e%ub:2ftzwFn8EAEwfP:BXf2owYZ%BYGq:h:BHD4ggIG%PEAGvgpAPT4JwCW%sgA7vyqAa::OwJTAhMCYwTlAG4Fa:4aBbn6jQNp9n8BSfLC::Pu2:6c7Ob%FOur::rpzQDf6N4BP%dYArLk1gFq4YsALd40:8XbkP6t2hz::dr6AEPcvgOE3XQGx90wCKDcigg92qQHMtf5BTXUNQTp0QUDqdDcAnXQwQMS0VkFOdIuB4PTyghZ1LAJW9StCf3TRQly1KAJ2tbKC2bb6w8R4REVFuagGefoJRzi6PYbXOZFGUji6BTJ3QQQ1tmoCyzXmAhh1lkHsNcXCKbaagpm3nwNI%J4EEblvhJk5%YTWujaE23o7hJL6NcR%uiWEWvrBxO07zcW5fRJGq75DB4Z:Zogxv6IIf3%AiGW:s4fjv7xHo::LB:YAcIgZQWYI:IJTCfxDkwrohP0LlwXtDG6GTczvRpyM6QahzLGGbEwkhhcLq8XNSzEF%MqBhmdKiMbFSuiHdwrJCCgLHoiMi2kJIYtwia6Ld4o6C3lKhUuyyw8LpcuVC5DMEAuvTHgLfEyKS3LMyAsRjTdKoU0iinKNFcoSzVyJxY28CYGN8Mm2Te1Jmo4lybzOIgm:Dn8JvQ7Yii6Pq0qhUEfLVVDsC6WQ7YuXUI1LR1AoSpDPXonLDogJDs38SDgNE0eYDN2HKkycBtnMgUbTDLxGjMy:RoEMvUafjGMGkQwaRk5LnUX0SsmFespXBNKKd0SEirSE8IrvRWDLbkXhC7cGCkuehg4LGUW8Cj2Evok4g4qIfEKOx7FB6YczAWVHD0F4x0VBiggAgjNImgKIyWADJUmnQ3SJm0N1iX7C8ojeQniIBMGdx0PAhwa%v1%F5L6FRZw%PEVw:fRFkz4ThiL%fwZ9fqHGyX8vBzn:H4dI:2vHb:8Oh2o%yoc8vmoGtD38BiE9U0XYvMlFtHxyxUw8VAWovF3F:3y2xjW9A0ao:a1Gur3yxqY%L0aIPkmGy36URwS:AceiP61H%sAwSCgArIgRwNPH8kCpBw8AekYvf5sFHD7ng%o9wUL%fMRB:Lw8QPh7rIB1u1uANDtJQC07n8AG:DeAG:xzgBF8joAiPJQ:2jyS:4w8lj9H:J0:EHyX:tT8r756fFW96:wJPSX7mLw2euC7OzoEelf5lnmguQh5Dbj:OEn4rjfK%Fv3UjgM9tw3:DYdt6K1kHd%tPl20TRgNp2ziTZtMvf1xzJstaoxpHVQMRz1NDBWdM5vyzSR7yv0O64xs6HtcLMobI6y5Swkcpgr8XK2q6Ty8Ouo8zJrqDNnq5RzhyusM5FrdLOMKzIzhGrr85GqsTOGapCz5eqNNCyq5PRga180yqwH9ags4PZprd73fi7zuFawD7me8Rv6vrH9%2SyojwHsz78Y3MP:Lxy2Lxj8qn78nIde31xibrbcUT6ZzEnOfMxAPn7sVD57LHH%jUyWTpLMz16pnOquwC0VnuctP:7wnWvvHO2KfzoNud9UfeZPd%4LT49%FA%YXi3vhG4rD3jOEH9q7gMvQB4H7y5N9O8Z3g%fAX4oPx7eOW8rnlx:NF58:0fuiF9Vjp0fXS6a:18%kz9cTpc:Ra6Yzz5uiv8pvoEfKI6L:xn%ij8djoqfEm6bjxWemW8TbpA:HK6AjwaegI72XoaO7S6Ezuoemq7snqbe867Gvwzu1u8VjvTfLC8AbzBPKm8yXzMvQ39K70UPUe9Xf2ivXS9yT2yvlt99j88PkPAcL99AVgAuIKGAdhD2ULHhPoDs4VSRFDF1USjhcfEu4W5xCuFQMPKxTgDMUS9QrAEZIJOxHdCFMR8QgREs8JRRM6C5oU0gzyFXQOiBdaEKMZyxJWHNYVkR9nGTIjUB3vJj8hTyq5JO0sYCebLhApTy%6KREvZCkgLkko5iziJs4rpyU1KwMlgCtXJfIs3CZdL1QpIzIdLKc0pS6XNqcw1zcHMls4sTJGOLsy4DdgMl830THPNh4xQDZeMM41sC%HNR8vYDWZLlA1FC5JNYMtGDW9LIo0oiu3M1sq6zJHKVAymijeMUwoljFXKIYxuiiYMUgpjTGxKUMxzCnQMKkpSzBhKasv9SjkLmco:C3MJxYtRyd3LCEngyy6J2ItPynLLm0rPDDALV0x2i8GMn4x9TFdMtkwIjKaLrwwYStlLnQnZisZIwoorR6lJJIakSERFwofUhQ2HWQSJhwgEb0bOBCwG4IP0xsvD04chQ9bHYgQ:B7:EfsgqRMZI0kVDiWKFnwmFxcGJ70WgCZxFewkTRNxIpcQXR%3DR4cCgsYGdoImRZzB:gUIAd7FOQHEBVbCT0WAwtuF4QMQRimDYUYPw4VGDYO4BaaDfgUlAyDElMLuA8HCtgM1AgeCr8Hoge:BmIF1wVmAw8FtgFUBEMAkwP8:uIC9v17Alr9eAIu:ccCTf1PA5b9AgT1:csEVf6IBZj%IAao:n8Gev6PBgf%SAZU:ccFivxKBer7HAW5%5AFPPzaBpv93wiu:zILAQJcDR0EIQ:LBW4Q:gYsEZ0HQBGMB6MQuwZaDy0Fcw31Ag0LPQBfCED9pAUx%g8DMffLAF:07:7R8W79iu85:I7te:sY7Ir7h%uY:Afse:5r7cYARO:6Ag:xqARM8nwFmvJOBcrxEgTU78cBx%yK:tHor:pX5Kv2z9:g8pjbnu:61yvtONWm63HT3ep20mjq4dHp6VnRMOmq0CrouM:O5nbOJeXpzDbjH8sD4RzJnN70xiPcycSv2a:CPdedwMXUjb5U0o687s%suobN3rgpyzO3HMnqtbbHSbUlx2%1csdftovIErhCymW6TswavWrO779p0KzCJdIdxXrTF8dn1JvIG9XgyejVOcsl1:XMKNlbzxbcgdLF3zbWzeMU2tLnyt2X6ynh5u4E5IjxLeZm85nnnvRn6Fz1wOjL9cToEfaT6E:2SuiU9vzn4fa55zb3kueT94:n8vew5274DuhV%fXo%vq16nT9Yu2aAMnwGQSV9JgHYfi5Csv7Mg2I:tIObAByD14B8Q5NAVINTADPCqT%xgev:JcEu:qeAQz5Kf:j91n9XfcX:G:3M:v294H60fjf%dv5Mvno%mL41fta94b8::Xd:D70y:wm8mb83u:Z%3ntNvv16nX6T%iN%Ynlevii4jf3od:M9aPcX:Td2SbzeddH8pjV0vFR1NXxqtNb8pbTYfP%093009TF9vrV9Pg61yL7XNgJ:UfZlP4M2t7:29oeAfHbmAJ43XgEXt%rBlnh6ggn4:IKrOSrDNzlCA6g5vEO5%ZZD77mUg885vEOduVFDorkXw2j42QM6OJ0C3HipwpI4g4KYuKtCZzicwnr4lkJiuOVCdnkewoR5zMMJeqoDuXtshEV8iIVXvawGGD6BBzT:dsehQAGIVACZCIrA%4iQgPLItsCOyI8AnAhqgGWIHYB7B:ZAaAfyQKsHxYE7h%cBVsgRQfzIPsIqiGvCmwiagwzIzcO:SMVELokAxJrJQwUJyYhFukmCxh7J5kZoCfFGkUnlxtsJgkcEiUsHFMjQhx8IZsc3x9cHaQeiB7SHRMgcR3pIX0d8iPhHSEmjh5zKHwfziqNIAgtlCEXL4ciIDGKIzwztiRqNQcmqzeBJw46Nil%PBIruj7MLIFAHC69QeouaEIuL3lC3y70QQIu6kCoLGg:2yp2PaEoODseJuc4iiOkNgUheTSXHm4yUhyTMFQa4C6jGE8tNxcFLCYWSiucFUgrsBX0K1EWLC1rF8Qu4xh:MH8aFjLwG08z9Bz3M1cd1jPjHMgydxvoMCgZgC45Ft4r8hJCKZcP7CZ%DBAl7Qm4I:sHyCKRBh4ikAWZIdMEDyErBGMgawOZH4ICyh53AQ0eVgB0HTf:Eh0%:uocff3cHNr8wBwl:HscP:v7Gxf6KRua%AEaz:aoGN70WhcB80QWX:GEFRHwMhU672UV%e4ZFlXvNBc78IcYgvHjGfryLBt99GocCva7Hbr3NB%g%dQgwPuYIhX%eSSYAGEmKQMjKI8FlSmaB6MqOQlDK2kKYyseC%YqRAvBKdUKAyjiCdMljghWIwAHpiBRBdIdiwPwGrgBGRju:2UVPv7eEq38mhBK%8ION:qGDZ:5%AyY%QYNG:p:DQ37MQ5P:OsOtf19Dwn:qA8BACwPUwDbDc3:rQtq:roIS:wnBZz5HQGH9sv8O:No%O7vH:TQ7AzwAuo57JTnm%h%5RnlouOf4drhKd4M4MDaNN50113cXNSk2o3RMNkKzxTYusxC13nKldYwyOrV0cUp1U:DOdSmwA:T2r2y0fu6M9AXuKDOSbUMzbSyl8uBsGjK0K6mybmtcck6rc:JNq2jyoGtu8sNrvfM565bziCw88%7scPRs7PM0wK2GtaUuKTYPrtG29G9zt0uwBTgRcL84QTEb%NbxWLkN8bQ5IbGt%RJxhvkncUT46zEveGZwzHgfMKD3nLB19yZwFXb:L8Q2pu:BdmGvznY4r:I18bAz9c2wlnYJMRo2X3G9tofyeTc4MsB35POGOEN0fbiKNNw5MnUauXt1eLlk9bp5bfWh%VV1sfkh9XD43:UpuJ005PhmNKm4A3S%d:S0ZLfyNFd38PRNN%00QbfptHW3qrRsd7Q0azeJNLi3qfSYd9K0yDg:tMC4bzU6eGD1cLiUNZ94yfXGOQE2Jvk29gJ5ZXZVuUw2oPlyNqr5Ynb9eWS3H7m6N1R53:fb%hF4cvpNuNW62DlD%3f5:3uwOos8QHun:OX8V:2a:Vs%VX5rPwc:ef:lQDrArADoAVuBv8H0Aj8Cc8KjAteDKoMcA1cDQUOtA0rDsoN%A2sDYMNXg3vDOkMZgxpDAIMBAzHC80LuQvRC:MLLgyhDAkN2g14DpwPdxDVEfYSbhTaFU8X:hhWGi4cVR06Hxog%CGGIlMklCRMJlIm8SfBJ0Up1ihBKpUp6iocKl4rkCq5Kwkr:iuTKygsLyw7LNIsPCxkLSUs0C3xKxsuoitWLksrnC7%KgMv0iqUL9QqPzD9KuwwMyuLMWIrGzKEK5MyjCvpMmkrIDMZK0MzrypPMz0qPDPMKQwzbSnVMjUprjIqKaAyQSmnMmkpuDKaKckyzingMgwqFjNoKocz%yo1NMorFjXVLCc2Jy5kN8YvsDiXMeA5ZjPROgY1cTtfNrQ7YDeQO:43BDs3OBI6Fzi6OKU3:jblNuk04jWBMpw0zi8RM%ksSjH:KW0vNiebLZsk4Ss1IkoqHSD3KGoeECghHaUnOhyxJ7MbJyiNG:oouxsIKh4cJyuPHDYs5BwULQQdqC3oHOQtmRzILRYcTy1VG3MsXxpDK1MZ5SlGGHEoOhfiJikWOCUcFYIjFBTTIQATJCDNEWgefBCfHBoPyhq8DfAYeAwbF1wLXBVkCrsThQk4ErgI2hD4B6APMwd6DlQGVA1jBTQMcwQzC4wDWgqpApkJzgHmCA4BRwh0AL8H::9KB6z:5QZ7:5IGbf9QBoj:IwbZ:x0GaQBUBi0ByAYcAngHOQNmCH8EhgnNBa4K:AaqC:cHXQy6CL4MPwnFDHoJbgxmCcEL:AjECjYIdwkaB9cHwQXyBT0E0gOSAngBwgDr:tj%O:zi:HH57PqU9hX5vvOK9ynxZPYE76H1We0x9RjsBvUu6w:1eeov9dPpTfUh6Vn1W%g%9XPn5fRR5kL06ORS8zXjG:I64azwBt8q77:ctu2J2krsYtjA6inW:OjH0:nmP9G35JbOP%LTy6jfDMkT3WDGltrYwzfYcMH31SK:2dP0vNnR7Lr5zxe5RM6Ht7bMPbY6yyS1v8kotFPIXrMQx%GyAca4si7F27KrxEyzicQItL7EALUxxRy21MVYt6bGvLiwx066:8gWvKPKH76azGrA1M7rwk:RocUV1JTIINe7y0va6c5v3fLRfODF1G3jWdc05qHZxOiX2xXrQt0X7aHev%6o3xbwWOA48cTgN:L74BPzCeHQ8wLhdvT84AL1:OB29QLh5:Ui4Xr2iOFD91PiRPiE43j5FOXV%u3mRvzq6LP95%oU:9vsZgDL7pUBq:CFAmPyKAPm83QDLPVhAzD2%AL69lgCqvegAVb40QD2%N7:c:nA:sf5cv31%er79vko%sf5PPhz%Tv2Cvkx9I34IvL:9xvwbPcf7uD2KOxZ9jXq3PVO6Hf1dOYp9Zzk4:TJ4qD0DeFu9HTfVvT%3VP0sNxi9KDblfTY2vb0UdqA9f3ZLPbX2QP34NkE%BfaLPmH2oD6ONsE:CjctP1K3YL:o95xATLghgPd4akFd%OzB%Pkjwkd5jwLIeevDOTn1w1q6LEOvehFD%Pomg:g6LEPxOiXD5foVg9U6OwO9edaDoTnsQ0O5woNmeZrDDHm4Av35YsLEOaQC4nm%wtk58gMoujyDT7qbg8g7B4RKu7lEkbwtxRc8oQWUPQ4GBr2yRnG90MbZ:m0HAL7Gx6j:HwfVv7dIBcAMyLLAV0jXgNFJM4E8SQfBmolTQewJVYIwyVCCaslFwpsJd4KCSWqC5IkjAwdJIMNryN:Dj0jeA:FImsQSCJSEcAhJxInIfgSjiDlExUg%hTHHzcWmh%XF40fGxmkH7ka4B9mHD0gJB7CIPwfdiHwIVQi:SNYIyMmhSRhKOAlrSpfJwUt:ihwL8Qq6jGrLFE0jy6ANkcwZTjAMf458DJAO8gzIjw:NKU8WjTNPCE0njySMyE8sTJnO4oxdzonMFE5jS77N8YsgTbkKu805yhIM84moTGqJBswoiLLLtQgsy1DH9As8B0oLN0ctisDHG4rUBtCK7caLCsuGhkrpRnxKgUZrypKGFYqfBfwKZ4Whym0FTEpzhT7KPQT2CgVE6ooFRJjKOwQAiijD4QnOg7gJq4MFSYACyYlNgkTJEwH4SJFBaAhMwNfICYBIx8d:%4dFP3LHA77whsO%ccaDffUGRD18hgx8zUYjPGlFybwSRf87isXFu5KF3rtmxcj7REYDu2zGEDtiRm77ZYaeO7bG3bvWh278AofRvLbIAr0xCIB9sYkL:jVJn:60SjM:KUq9:5NLPMAxC2xAvwuIATqLzwFjTARBugwpgb0MPkGszAHBy8w0QZnL1YGWS6RBQotjASBK1MDwynoAdcnUQDcJa3%9SMg:TQiwPuaIJH6KB%Z%eEd3vi8HFP4pRvf940adPdtGQb3MxiI9s8W7PU:FTf1iRNx9LkRo:PeD9ryBw4k8i8MgPE8CtTwDwgI8KAFGO:wAgvu:f:b7MT8gutR%QPqsvVn6PHxtOYZ7vLkN%ow41bmdeF24r7fl94H3rraUdzb1pXa8tLK2AnP%tY8y0TVqMe802DEadJuwVDR37540LS848:juojPY7llzza4gM9et9zP2LZ60KC2W9G3tn7SGbfc08S3b9W%uDvXBLo%2Xy7Xtv%vHfdbL5u37i:OOHVwMbitsEL5FvCC%XNwtHlEcNh5irDu%Ybw97m6MLK5pHCeeYawvLliMFC5dvAbeQPwG:jKL9P4kO%KuGBvSDg9bxB36a8lN6bvCLe1bzs3Um96d3nvQreo75I3nG:nN5DwPjeDcFX39HBud%RwiPgVMOY4CPEJeEIxdbh:MWg4uvGbePIxy3kj8jh5D:JheXOyQ:mNsp35nzKvuaqyujmysr45ubK9eYJy%nmNsvU5mrLseagy37m18s55gfM2uUrzF7lUMzT5IvMUeTrzOXjds2S4zDOYeMfz17jRdCK457R4eMt02jk%tQo5QPXIuZE2VjntdvL6FXeeeok4VzsI%Rw7lTntvCq6iTzCu6g9VLxDPht9Fv6U:eC:Pz5dv5g:DAAgv61AWYADwMRAj4EgQNABbkEFgbBBb8GoAZAB10Hngf6B%QHdAgRCMgIIAj9CBwIKwkeCGsJPgjJCYEIRwrtCOkKhAmzC0YKnwwmC6kNGgzQDhwNEhAlDmgRLA:PEiwQRhQnEdQVIhJ9FyQTRhk2FC8bXhUuHY4WMB%zFyshxBgbI78Z%iSgGr0mXRtbKPIb2CllHDgrtxx7LOwcoy0IHbEuEB2nLwMdfzDeHDYxnRzKMTscNzKzG38yBhutMkUazjKBGeoyxRgEMxUYIzN8F08zAheMM6gW3jNwFkw0YRbgNIQWnjXgFoQ2dxeNN0sYtThYGf05mxpgOxIc2Dy4HVU%gR%%P1Eh:UAVIwZCvyTQQkUmWEOdJ5ZDwiiQQ7spTEONKstCOCsMQrYrEkEGLOM:JCyGPhQs:jzaK1A7dyt5OecqgTcrKnQ1UilsM3MofTGcJ64v1CYFLh8mhSx%JTIr8CQIKm4k:yjyIw8oeCMuJ:kiUSZxInQl3yGeJEgh2COzIC0jKCCgIrAfLyJJH84h5R5vIXkeCiEAHpkgeR0YIN4cgB8pHMseWxv8HXUaFh17GR0cbRgSG1AX%RklFtIY6xSWF6ITPhZHEsIU1hAjE08PYxG5DZEPJAy7DZsK7gsmCTIKyweQCJIGDgeABbEFlQR4BNIDawM8A48C2QLlAasCawGyAh4B7QL9AFYDCgHsA0MBqwSjAYsFGwJ6BpsCZAcRAzoIcgPxCLUDfwnSA9wJxgMJCpIDCwo7A%YJvAKaCRICIgk7AX0IPACsBxr:sgbX:ZIFcfxMBOz63gJL%U8Bnveu::T1Df5b9HP81:Lj%mnxXfkR8OD30O5n9qDt6vR37GTzTevP8RvqKPDb6G3ujeek7Dvm0%rv5AfpruNH53rim%VR4f7jLeBp4gnf1uDg3UTfstyz3XrbH9wx2oja0djt2FvXVNfR1cDVN9Q01JLStNLl0ELRNM:cz3rNgM62yyvN68nayyHIkMpgxlbJt8Q3yDHDOsfZwWXGs8C7xca:QsUYv:vEr77pxI2%DcW2vmzFML8Lxvq:6sYPwQnIbcJlyRTE:soDxs:ML8jVzo3KAtENzUPTnM%I1S3Swte21ObZM9fs26LZ0d0D3JXfWN4%4aLgy%LZ4jrk9%SG5fnmrebg6K:nquqO6FHsS%nS7eXpK%9d6mLwvuqD8Rjrm:J367Pz5OvG9GHs0fXu7ND2jO3A9zbunfjm7mD5le8I%j3wk:rY8P:6ZvFP%%vxi:tr8rn77fLb%3Pz7vv68%:7e:Tb%%30rftM9WT7l:UE%871jvru9f:59:VV%ej1lPjF9b:3kPXW9lD13vUH9dj0t:TE81:0nfL782HxifMW8AjzwO6B8mXt:fEO7Ibxxeol8ZDp3fBy6LHwceem8JLmvPDY5fbwROVW8dzk4PGj5JTymORv87zkcPQO5ZX1kuXf9kTmS:gc59T5Eehu%xjpC:0k6p3%KOsbABnsfwHz7McCs%30A1vuDQXy7hUGfO8RB:jv:Qdm8NoIxvCmCRjxZQpX8RYLe:G3C4XxRwx58cwMYfFQDU7x4A1P8YcObfFJD6jxJhAA8h4RefItEhLzThPF83oUivSoFVn10BYr9u0X:vYAGdf3CxrB%BIbw:kbHN:6JB0T:CseWf0pH6n%GCD5::cgRwHGIZIChiLYAzUjFAXRI0MGWCRkB8ckeQgiJYQJayWJCqMliQvMJYEM4yVtDeMlTA7LJR8PnSXpD14lrRAXJXIR0iRAEpUkGRNjJAEUQiT6FDQkBxY9JCoXZCRiGK4ksxkdJRsbsiWYHGwmJx5KJ8sfSyiBIW8pRiOzKhQlDizjJnMtqyjSLl4qGzDvK0MxVS1AMokuDjOJL6szVTAZNPAwWDRaMWk0kjFINJkx9TN0MXMzKDHDMrUw5TEcMNowYS%kL4guTC6cLeEspyxxK7UrByrLKqoo6ClcJw0pHCY7KOskbifEI6EmoyLPJYMh9SRgIBIkOh8rIxIeSSLqHHQhxBuuIKIa%B%AGU8fWxiyHiwXGB7sFX8dnBTmHDoTTBzIEawbRxACG7gOTBobDYsZcgvDGMEJ%RcMCDAXWAZnFqcEnBX6As0UTwH9E6n:MxMM:nUSfvzKEQn7OxG2%c0QiviBEIr3WRC59lcQGvZ8ELD1yhB99UMRhfXpEcj1uBJD9rET8vbTFNL3IRbf%JgXFvo0GXH77Rrm:LkcZ:6IHuT:SyBSAfUhpgJ8I9gD3iTkBBkmzQUvJ5IGICgzB%gorgeEKQEI9CktCDsqMQhaKg0ITirABxgqRwe3KaYGLynkBYkoDgXOJy8EBidQAzEmdAJPJZwBXSTHAFoj8v9BIhr:DyE7:sQfU:1dHmL83Rxp%0cbbfqgGXH56Rd5%CMWh:dNFJr2YxKw9V8QwvQ6Ds3z9AvO8o4JxPEJB63wZwSJ76YBU%7I:grtz:ut68L4O%qm9bbof:Id50zvb%UN7Krjw%jQ4XDl5N8b4uvdy97x247b:9lw2CHYfdVd1rvSu9Qv0ELT38330c3L4dD7yQfQbchuzyLHFs8Yxv7OTsUkz8bEh89:xCXQc8T30J7E9dH4xBPTdcVB1AjGcNWgxpPWM8ee17fHi9gpyFTZisj62d3IfdoiydvaWMkU24DJKNubyRrbqsnt2qfJoNqRyTbaZcmy2STJHNnWyIDYhcjs1zzIa9cCyAPX1se51rnHjtapx4TWpceX1qnHxda2xwvXyMdm193H1df0x1nYDMjy2CjIodlJyGXaccg926DIJdzUyBfdB8kL3jXJ:t5gyezfisnW4LfJtuHlyYziFMpT40LKCORuyqzknMo:5dDKw%UJyzfmRsuZ5ofL6ebOyyjnHcxa53nMhefozLHncs3m5x3OKOjpznvo1s:i6OXQYOkW0vnpbdOw6u3UjOuY1o7sbNi27WXaAe%C3HPwwt4L8iHhx:OZ46T1J%ac98Hopfla67H75u23:Vnwsf%r8pkB2fRrA%T2KgXO%NYGmfpwCEL89gnH:WgLK::GDG0ADg6QAT0PkwJOEHgDQhFBBBgS8QTVEpAFgBMpBiIUwwbAFGAHWBUDCO4VrAiCFloJExcLCqEXwgorGIMLtBhQDDoZLg3BGSEOSxotD94aVRB8G5kRJhz6Et0cdBSfHf8VZR6QFykfIRnoH7IaoCBAHE4hyB3uIUsffiLEIPoiLyJfI4wjqiPbJN0jHib4I1In9iNzKNcjgSmZI30qPSNnK8YiQyw5IhctnyHpLQAhui5iIIsvyx9eMEIfMzHMHg4ybx71MjEe7jMZHv00KB4fNl4eVDe8Hpw4Rh:2OfsfXzvbINA84yFFPg0jsz9NJAxBmSVGQucmW0MwKEREbSn:RJsqkEW4K:lFxCw7RrwtVUacLklGYi8YRg4wxEWcME1FBzG2REwxAkRqMTJDYjFNQjkxW0H2MGJAojBnP0AwbD7TL3Q9Xy%CPOYulDtpLqo65y3COWEt3zjXLP43SCwgN7UrRjYgK3A1jCqgNPgp1zNnKRcz1yhbMkQonTGpJ9YwAycFME4mKC%LJT4uuCRHLdMjQizdIi0r0yEFKrQgyyiDH4AnQR4lJvAcuiSRGzwjJBqrIawYBCAqF0UeoxVzHBwUlRqcErAYJxHKFr8P5hRoDgsTJA09EfYLhA:iCugN6QluDAsJGAtGCOYJmQfZCAIH8weEBjMHHgaYBs8FHQaUBbsFYwVpBTYFHgUGBdYEywSMBIQEPgQsBOsDxAOOA0sDJQPBAq0CJwIiAn4BhAHGAM8A%:8EABj:If8Z:iT%%vwP:br74:tc%qX64vhY%VP3BPiy9a32AvRV9Uby:fN98Kbyp%5O8cTs9e:Y6pvu5Og:7evm4evu5ILq8eIh6ffgwOcF32HmIN0C5UjbouN%2TziwNfL4AzWTN9g1MDdvtIm3CfRgdqdz9LYH84X163MT9VEy3vT48mc0YzIt88%x83N:MXgy8XE78mXw:7HcsIRxljBM8RLwG7CUr:LwHK%Ub%uvQW%CL3rvIO8BLwgvFW75bvhutS7qrrvu7C6N7z2uqu8ertJvT%8FL5DvQ6:hr43wAHAjcGuwQnDgsOgxHPFSsZ5x:3Hjcm0yanLZ8vMzRTN8s%3zhvSTdBD1NbRatZR043YwNSq2iHWvtx018Xetdi64OLZmuL72mPkAdwU5vncsefo3T7p0t6%6rvfMeym4JftlOHr7oPiKvB041LxZORi8k:lWvM05jv0EOcC9eHnr:Wl6ET2XunB9gvqKvet6n73Quu998jr5vc97Pj3oOzy9%:s1vcv7aX3Y%1i94ztDPet7aX2x%0v9tvtrPXr7R31%e2F9Aju4:Ma7jbzL%588kbut:Ff7unwfO4X8J:uRe:M7njuBO%07Ufv:eyV71bs7e:C61HwROvD8OHqRfGb6tXxdep08nHqIfOQ6tvz0uqm9DfrgvW863H2Xuxu9xftdvjg7YP5sO6Q%oDvm:tK8KP8CPGo:bjxqv5b8qn:8PKlAHrzoQH586ACcPSjA9:0qgRF9bYFovXEBvb10QdD9t8IjPbvCdb2Agsl9xkMfvc3DeT3Ww5Z%IYP3vi2EHP55xEZ%hYTz:pAFJb7YRVs:HgWTv2DFzr%gBgr:3AZIABTGhcBKxsQAvgbDAO7HAgEcB0DBRge:AWwHvAGPB:fB74fyAg5IKoJryCECiEhVQuMIRoM8CHVDE0ihA2jIicO8iK9DjojSA95I8gPsCNAEN8jsxALJCcRNySiEWokKBKmJLwS7CRfEzwlFBSWJd8U:SXBFXMmvBb5Js4XkCf0GDYoKRrsKGwbsSm3HIUqBx5mK1UfUyybIEQt0SEzLu4iFS:rI%UvxiScMHwlNzEOJrIxfSYJMsomOjL6JkUyEicrMhUn8TEEJ5ox3yYnMaQmmzBWJvcv9SU%L4clci4QJZktlSS5LBwk1yumI:oqNyMiKswiUClnIoMoBiK6J6gh8SZHISMm3iBMJWogZyTnH3EjVh9pIrQeUCEFHiUgTB3oHo0cmh3NGzkcCRvEGkIaOBlzGZcXnhjlFcUXJhTpFl8SDhaREDIVwg5YFPQMfRMsC6ISbAnFEbgH5hASBggQfQQsD:oCUw6LAX0NMwCwDPT%8gvU:UsL1vzBCv77VgpL%wwKu:rlCU364gkC%gcK2PlUCs:5yArl%WILGfohDGn6BA3U%gwOVvs3D%37hxCS:PcRQ:1%E:f9ExWq:rAWVf9QGPf:7hmNAIcbFQEVHYsBlR7vAQIgQgJZIYMCmCK3Ar0j2wLCJPACqCX0Amwm5wIOJ8kCjyecAu8nYgIxKB4CWSjVAWgoigFdKD4BOCjyAPgnpQCdJ1gAKScKAJgmuf:qJWL:HiUE:zMknv4rIzD%ByK3:cggM:1wH6L8AR4D:HkcVvvTGpf6CBnE%RYX2vj8FNn3vBLC9lkQl:XVDVj0NQsH83sIqPGpBTnwwAK77sP:LO21:I:rmfnm6XX2N%hK84bmHPDb5PPsOuPW6a3h0eY64Orj5t4n4bbdj96t3Cbcztvu2R3b5deb2gzWSdpg1Cna4tI82pHRgNps0PDacc%F257OOtzyzQbdZs3i3fXMwt6VzJ7fQMxt4PHLK%Gmy9PhWsth4gvL0uK5yiXjZcpc4w3KeeOwyXzjTMlo4%LIP%NzyAfjAMjC4onHduIQxyjil8be4SLGn%G2xXHhVsVY4QHFU%G4xGbhecSS4ULE1eEQxC3i4sOX4rjDEOOTw5bjcsMn5FLDwOQxw17lDcP:5ejCoebFwkDnpMLZ54PCZuhkwuboRcJU6SnCsukRwv7p:sE66vHBa%ruwZPq9MGz6gDCyuoSwtXqKMLT6kTCx%pqwrXqnMKf6tnCiuokw3rqgsNy6vbDd%qBxIvqJcWx6uXF7urExkPrwMez69zIPuwWyuXscMuo7ejMiO56zoXvJNCf8OLR0:G10yDzmtWE9JDX%fWQ2Xv3j9sA%YXdgvpu3::7RuFy:Qzj2f7A5DEAYeZ4AfDnrAJw6c4D4erfBEPs3QWU7cgG1O6gBwHwZQgY8RgJGvK6CQnzTQrs89YKy:RVC6r1zguM9j8McveqDF:4EQ1X%XgNXPrhDWz7TQ6I:L0Orv0yD%H%rw8gADcQbAHKEMYCaREuBBQSpQXLEiYHihOtCEwUOAoOFcYLyRVXDXsW7A4eF4EQsBcWEi0YrBOUGEEV4xjTFhcZXRgsGdkZHhlIG:AYqhykGAMePRhWH8EXpiAzF:ghmhZRI:8VsSRoFRgm2xSGJ14U:Cj3E3oqqBP%K3cTiS1nExkvexOwMLkTTzIhFPMzshSYNWkVNzdCFtI4OBdlOkkY8TtvGW89oRraPtkbLkAPHWhBPx6DQmMffUN4IFNEeSEIRWUinkU8IxlG:yN4Rq8kvUZNJexG2yUHR1omDUfJJv9GJifhRnInuEaxJ4tG5idcRhUoLUZAKPxFZyjKRYwol0WvKGNFzygqReso6UQAKaFEDSlTRBAp:UMJKZ1D9Cg0Q9EowkKhKEpCYijMQRUoRkG5J7dASyccQMomcz83Jr0%kSX3PdckIj0MJEE8NCNUO08iWjpfIUw5YSAwOFQfBjc5HtI1ER2YNN8bWDOlGg4yYxm7MBsYYC:PFv0tgRWSLDUUICvrEqgpqBErKG8QqyZADywlHg6vIwkNOSIEDM8gEgt0HzYKJR5vCeEcvgioGyYIexqpB1kZSAc9GAAHIxfOBgkWrgbvFJsG1hOSBr4SjwaiEY0GghCKBlsPhQYsDnoG8QxmBqkLRQZSChIG7wjKBYAHZQUHBuAEhQQ4BPoCbwNpAYkC1f%LAT:%eQCl:FP:C:sb:nT50vzh93r7UfYU%sP0ovg28yn3rPGv9SjwN:So7sTyK%1V8a:r7u806pHuuOhC7Tvn:%u65cfqMOSX6Z3ibOj%4EbnUd8h5pjd:%TX297jE9q%4k7Yn%GG1nzgudRT3%XSI94O0e3cNs%y22DNctqPyy7ZxMnn1wbIo9ZZxmXVw8Qy1ErDDtP0wf7RxcAH0b%:LdDivnHPML7Vzqm9X85RvRLOKr3yzTS9:81tvTbO0L2Tzl2%Fs8Rv7vP6b%A0N:AYNHuwVjSDsNj0zvEe9RtxZnVosa41tjH1dcRye:YTsoG2pDLF9vZzCDcKs4j3YbPIN7u0BrfYdIN4NvT%OBc1drh5Naz4nTYheML2lLkqNsa5Uvd3OXz3pjmneBM50fi%uft457oieU46RnnyOmW6Efq:umz6k3rCOuF7EbrqO1x67Huh%uf74nrcfB36yjxUOvE8RfrR:LM6rPydeoL8xTqUfOt6YvzR%m88%bo5fOL6Af0N%gh9OnnM:Sj5z70ZudA9DPnN:QJ5yP06OYC9NDm2fO:5qnztOZ3863mRvOp5hzzqub68rDm5PK75tjyy%bZ8uLm6fID5w3zMOdF823nkfO35:DzD%hi9Hfo4:Tz6HH1hOkK9izqq:bq6lL3vev:96bssfik7WP5uO4T%uHvv:oe8Wj7bvIL:M7zqvw79Uf9s:bj:Tb4gP7D%R7:Wfu6::L8UACJ:uQAHAB3AaoBDQI0A6gCvARFA0AG5gPCB4kEQAkxBboK3AUtDIwGmA1CB:oOAQhSEMgInhGWCdsSagoMFEILMhUbDFAW8wxlF8kNcBicDm4ZbQ9cGjwQPRsJEREc1BHaHJwSmR1kE04eKhT8HusUpR%lFUggVRbjIPoWciGXF:UhKxhqIrUY0yI0GTEjqBmIIxEa1yNyGiEkzhpnJCsbqySNG:Mk%BtCJW0cmSXqHPYlbB1ZJvQdwiaFHjgnIR%6J8cfSSh2IN0oKiFzKeIhCSqaIpwqTiMsK:kjtCuXJC4sIyWVLJwl5Sz:JRwtSiY7LYAmQS2gJjEtryYLLa0mzyyaJoAseCYlLEsmxCsWJl8r3iX5KqElkCpdJSUqDiW6KbEkUSlHJOwo1iOPKF8jNyjjIt4nYCJ:J9AhFicxIZwmgCAPJr4fayXrHrEkBh7cIw8d6SIIHNYh9BqlINMZWh%lGPgdahd:HCYW7xrcFEkZlBOTF08SzxULEQIUxg8vEoIOXBBFDZEOEgzTDOoKJAvKCYMJrgjxB5kHcAaQBgUFlwWxA6oEcgLDA0YB3gItAAECK:81AUP%gwB1:er:wPxt:x:8Ff%S%%r%Gvvv:rr6G:9z%mP:QvrF:yf6SAAg%vIALfq:AUz6pgJ5%qcDtPrGBPr6BgZK%10Hnfu4COr7DAoy:F8Lefy:DMf8MA4W:agPW:0YEYj9fBKg:dgTsP0yFcD9gxbK:cEXx:3nGLT9:Rmc:QcbhP0BHGj94Bw4:aQd8fxaHp78ER9O:MkfAvxuIK777CBJ%z4h2vpsIWz6eCEA%lQhiPn0IPf4XyBP%K4foPfzHvX2JB5H9ikdiPX4G7P0phrP804Z5fLtF:HxZxbn8KIUve%rEnTupxAZ7a8Os%uyDETqjArG6CkIO%eXBaTl9AIG5FYAYuLA:bbgLPv:3p74R90d9p3bsPMO2lrxmtgc7zPX:OzQ1ffqetQH6U:TJOdq0lHlzNGa413RDOIG0angwdBw35bQX96E0G3deNCS3GPQw9tJ0AHbN9Ba2jLQ2Nkn0HLZ:s8L2brPkdhxzwvYN8%R1wLPONe:zvTWZM6h1gDOKdanzZfVYc0Q1TLNrdQbzWzUIM0x1DzN6tNmzZ7Tns1m0:vNU9OYzl7Tcs9p02TQW9NK0THTItIB0xHT4tI41NvSlNXe0gLX09Jf2K7Smdl70q:aStKn2yLSiNz20WDdrNE%3jPRKt%X0CPg%c8n4XrPPOIWz2rjrs6k5CLOvuVtzYTmp8zh5uzL7OZSy8fm3cqD5ozKMOZeyvXlY8oT5qPKtuYMy97ndMth6brLDuvVy7fsycs17qLLZe9%yyzwj8t%8BDMdvAazVbwnM5s8F7Q5PAl0sTxyNP68j3VdvSC1in2idf%9z3Y5fmm2Nf7%djU:YHZzf%B2qwBHdxgA0be2wS24AgGD%PABgXl5wZy5pkGR%cnBofn%wVQ53cG5ebjB6fmVAr35oYNF%jvEP3pARRc7GwWzu4eGA7xFhnq8lMZKvTYGJ:0vxdb9FUWv:MhFT:zvBQh84AVafNVF9:z4Bki9Lkc1:OEH%Ly4CGE8YIjOvBYJI3vhiTp70YklfHYI5j0hSO8%JYjqf03JOcCZSXpB:UmKAyhKFcPDCqEEeoq%BI5KwoUWSsLFeUrOhZKLbcXgC%FGRIylRtpNNQdCTYiIJ82USL9NSwkLjSBJY0xLSanLh8m%ythJcspESQqKHoiGCcSIYwmXSBwJrIgrSYgIhgneCSEJ28nwyejKrYnwi1CJ7gwQyavM6Ak5jZzIoU6FSCOPuMduEL5G11GMRq7SGMYbUmOFphIvRSaRt0S2kPMEPdAlQ7LPn0MAj7KCrE%mwl6QPgI60L%CIdFzwmrR1ELuEgLDWpIVw7YRrYOQ0QFDvVAXAxDPdcJhDnZBi82rwQVNOgFOTR3DRI3zRz1O2kyeEEqSl9GN1:8SfRt30urdJZLH3PzSAdqVkQfW50%TUnPOB44wTPEKt4vRSMWLU4i%ypNJ98ofjAOJic7XiJ5ROYem0rqHSNNrSGxTPUqMkpoOHJGEEcLQldTfj0rWkY531nFNW9SGjMoRRAxODRML24igS28EnYrUwfmKC0BkyVfAHshbgTjHPYLFRiMFD4TohupDqkf2AohIEAIBR3aBqUWIwbZDYMFqgOQBMj49QLC7T4AqOPp%8vbvfXY1gLuutSE5WfVWt0P2arWO9950l7mhdGx7B:UOfEe2uPz6uIN9bLtOvV9%ej0LwU49IIPAvM3F0LxYRtB76gbG%1RGJfqDxKn58YJqORoAL3h9fYm3mXuzNh853HRp%IZyfzfVMFZ31S7Z%Clt4zidLbx5NW3s%bBuyTn18Hv5UXJHOMT0fvehdgO2hDf9NRC5E7QB%irzBXrdsqk7vTJjPNLy9P5hc4IAX3TqQjL2f8Pv%AzFmXnuBqy7GMdxO:ZHRnwXhue7ZkVqOhGDfbhpwOa2pX5vNOH70jORubBygDfQ8mB2pXJrtg7y7bYic2L2cfPRtpB0YjaWdFj2rHPoNlRzHzXmMfW0wrCZtAuvNrPmbY809%x49hwrmjeiKww40msgui1rXHvmrBa94u0Uv4EuZ4Ceb2nA2jB5QFrxCj%VMb8%CLHsvLrxsbr18X55BnE1N7fwYLZUb8:1eq8ydLXu:TS7b3z1eXEIttV0XPhKOLf5:j0ru3vBnPyrBW69akfs:YtJI70JSNS7yUdJeh5E5Lg7Qe92Vv8XtRe8grRP%s50Nvn:tFj6LbVSuy92ZPyrNs2%unZUQKC1S4K9tEhEXzSaxaZ11cZjd%IGWboJBfj8K4S1Pe2DNP75AXz%wn:KPgM%QHxlfSF59jxad2x8KLU2fCDzvbxk8un8wzMjPXQz0b34NVw%KHcqfjc4sf3Eejw9b3rZvMS7VLwoeva7JnnP%kS4bfllNdE4tTKzd6yuzzbQKx61xCfedOAlnXPGJQIzPiX0cnOoC7Jp6xFyqu5Gs0zxobRm9Aw15LXnt2S2kXk9Nma6q7WTvAS0l31c83h%bzJ2P1qxz4B4sY7BGnIHgegyxgKZc8bDXPS4Q8N1CIS99O0E1XSnhS%zwAVMs3wFK3LdhTUy6ET5c2REsDRZhH81isQXt3eDijlmA2G7pAMlPjpC5EBmAtwCIIL3Q2bC0YT4gslGWAMvB48DTkjsg6XJvMQYCkRFBAsEhjaLvMcujGbInw0ySgTNxMv2znyNFU91jmJQUk900XsPmxJgD70S:47d025NyNOQTL7TTQsy0wJJnFKESBPR38aO0SJFdhBbhH7P1cOFz44DEg84QquOycKVT3iCeJA4Am4RO4JlUf3CdtJCQr7TEkKx1HSCopXjwu0XEgMEWDPDElhGw14YCsNtV3mDA1ZKwzXUtsKv0v5CIlE4QbaPXwFVzgYBrA05gldM3cRZjR9HGw33inNOwc4v0BcRYNFflCzSVpYL00yXJdPvlsGUDRXo000T31ItkSnQew4WzoRLVozPSIeLUUZdyi0Engm0w7MJ7INIyw6DzQyKBNMOP8YJD0EIHlAXSfKQj8ucEQONCxFWTiZRMQ6wUIQO:s:MTl:PFk1SjjgL1EzRimoLRwihifnGkUhCRRHG9cN4BWmCFwRugQTDjACTgz%ABYM:AAsDeMBRw9LAyUSwQRpFdoFixhMBgYbBQaKHB0FuhydA60aUAESFdr9QQsD%U3%7PLG8P:rQeXF5Ajdrt0C2CDXpdWV0bbVmc0k2JHLcNyEy5ThNc2T5k3Q8%p61HruXdnP8I7el:GU49vw9%cH713rlOyh7dLpzu745gDvIuRa7kDh:ewZ3gjrbNqk6CjWGuaJ0dHjDc0u4kPJcOGmxqzhgsXS4trFvORtxy7nBcrp6cPNt%z%0mTvmdmt8Y7gPvNv5tfziOpy83LtQvI%8IzwOvOJ7qr1Xuy39i:qO:Yi6Kf0W%Z58uTk5e%i4%TscOJi6VLhfOVz4ILh9d:T3dLfvdri32:Y9N:f1t:fxNWC3%HUwd5V1HHdZNRY2%7UP9h11RvUktUhz1DVucni1FbEP9RPvzLT4rrH0UW3ntCwtILQSLOr0RGzpdPtsxXWsbVN2T64wt1wuyzjAL%J6IbC4%ylxdvvNMhz8SnKvfFqy8Lw1suP7nnLUeu:ymHnbspm45DLMuAmz1feu9Xa3STfbd6j6vPfP:eI4gcEBeYdEMHpwxoQ7V0jy%97KTny4Cxz9JEt:vXTKyT2CCiv9J4iSvINHAbw4RSY7qoNOu7wBi:vOQH%8Qr95va8%kT9Y:qVA8v7Vgig:u8KlQLnC1sHIQyVDBYM0BG5C5MW4QpxGowJIh3gB4weGga7HmIEwh2NArQbSAC0GJH9:hTG%tcQLvh4DLL1CQg486wD::CG:4Pvv:sf73v40%:R9WPxzfOV83PyPPbH8QL5xPFf%1Hy5PxF81v9aPRZ:HD1E:n%9R7zq:VL6zL0b%OL8Sbd3O3x2GjpWtZz5LbURt:B0y3alNN11TrUddFp1YLOrNbezKrXoMw62LXNYdj2z0DYMdP%1yDXuNdx24zX2d%p1yPkOtgr6DjZzetK2tTu1dr68EbaAvJh2O3xUNX38HPRb%9GzZPtcsmM66:GiOlsxbjnqMVM5kjHbOVzyjXlac%65enV%%bn3OboNeNZ66boM%5N7mLxTfXb9I79jvjkBW78NA1uACwTdwQFGGoIAxwkDB8fgQ8JIWQSdiG4FJEgdBbdHogX0hzeF6QacRdiGGIWAhbcFHMT:BLiENoQzA6SDpkNRgxEDQoKbg3fB7UNuQXkDYsDAw5cATYOUP%IDpP96w5F:JUPf:sQEVv7vhPu%4MXQP0HHED:HCHRAaYmzARtLAgINzJaC%I3pA4tPcARmEF9FKREsxZORnoYDEdGGl1HuRxpR1ggPUdcJStHuCuqRzEz4UhpO6FK:UO8TIxMKU%zVNRRAVyIVAtiHVeDZolZPmm4W0BqXV2wafZdxWcIXaxkfVqIYMVWjluhUgtW:E5VUM5MwkroTJtFjk8bQUpUcj0fWso6vl88OeFjxzjRZU05pWWgOuNjiTwSYcI%rF0JQRFaIUNoVs5Ep1LbReZOJ0ZWS55F70coRHBEvUG8QHI%5jx3OvA4BTazNFExJDCPLI0r9Cd3J7MjQSTzH8ohrByhH7MZqR3cFkEcIRTGG5IRNhw7D2odIQ0KHz0LDSBoCdweXAeFGtAEsROXARoMrv06BTH5iv9X9NH6Y%:K9pnqgvM25jrxcOIC8HTfhO9c3SbvJtxs7rPbPe3a29Trdtxa6mvdpuiX3nPm4N:G4zfh7uCM4jfezeOq29:kDtmd5RbW3%Wg0o3lw86x5K7KYuOQxqvhw8KU38%:Nt0Pvrnac71J2Mm9DNYjvxvUwcF10q7FDtFiyuLP1M70zjbSQc7B1MPNideCzVjbhs3r39XNaeRuzjDoR88Z60fQRu1R0fruW9JL8GHTAPFS1OfwGdUz8K7VTu8W1mjuVNZi7XTWF%yA1o7qddYA6UfWpefx1WHmgdW:5BbVcOLX1K3f7dTc3GbVI9o21nnXQ9fs1IHYl9Lg2Y:QS9sZz6jcv87g3QrQ5N4l06:fytdG4G3ds%Bv4wLhVOk94dTubOG085jhrffb4YD6auI2:JHjOP2o5Qr%:Ojg:q7tg:%p873:uPql:58Cff8XC2::yBOO:08c:f9QJM8Aeyv4AZ8xTgOfNqMEVzrHBZ08kAZWPdQGijxbBlI6CwXFNiUDCTI2AV4s0f8WJn7:lB%3AEIZoQN%E9YHjA6aDJ0KHxHXB5YURgZJFs4F:xU8BhIUTwcQEccIdg1sCrEJEQwFBokNdQKbDvz%Fg:I%%YOE:kNDun2jwwz9YMKy:MWCGLyhQWC8A4D4u3fAJHqDf:m5pP9WuNo:EDggvuU3cj6IdsT%vfYPPln1zH4ndbq9nTWYfW91pHzJNdw8fLW7u5F1fvr6dGj6LLNCuXhyWfhQcf43ePF8Np:xXXY78Wl1jDHltUxyVLVucvS1YLODtdB0fXYrdNx26fVZN42163hTdgj5azYm%gy2PHrJNcO7wjW5fEs1XL0Z9S19kjTq:h70VL6FM%3%2XM8:y3yRH%Usca:67FIQA6xUEBAMaHArzH5wNNykkF182JBo3Sigdf2EgIvN7hCLvkcQnR6QQKbu6gCozzVAui%S0MYgAtDVwHVw5jDq0PZRUuEU0c4RIGI9cUVikVF8QufxnqMu8bvjVJHmk3hiD7N6QidzeZJBQ2XiZQNOonvTI%KYsxXSpVMEwrhi4MLPwrmywWKe4sOSbqLIcjeCwcIZkrKR9iKtMd9ygiHYInLx0qJjweAyWLIBgkIyRoI7so7SLmLZUiTjNNIsc4FiIoPgUiOENPIsVHOyPDSxIlS08BKIlSFyyWVTsxWFg6N5xazD1UXJ9EnV1eS5pevVFUX4dXxl%UXNFfxGA3XwNk011PZr9buWdJWUdoylb6Z4NU2mZ1Uv5kY1B8YiNOcF:bSwFc60lTWMRIglThSJ9QlEq7TL1N3EjWUQFFP1YmQURaTz3%XIM5q13WNShcZDLfWEIvVFR4LP1ODCpLSQ8olEOUJvU9lyWQOAslrjPaJJUv6CRZLBYl6ClDJRooWSWtJlElVCUnJcsjziTjITgkmB9dIxUdQyKLGu8g:hdXH1sVah20EiQbNBCIGAAOohU4DH8S5gohD7oJgAv:B5EHEgVYA%wA4v4r:D:6j:eH9Xvz2PDz71Hs%uwO6MnqK%Sa6cTgb%nu3RPqsNtH6wHa1ezM2I3u99dB8GfXt:EE15vyzdan8tLW1vEq117w0dd27rbYMuzF2YLp8NpN5h7cneIy3ZjeGd5G2sHekdUX353QCt:py5be5se33aDEbNz8wcXaDMDe2P%%1dbjvrXUfr%D0kTAQNCWwOvNYMCCy1zAEsluwa:G3sNqxFzHUMKWy3DAa9DdvrPVqL0T29m8IuBpvJXkRLxf6E28mutlvFLud7xp8H28tfF%vCrygrzn8Ym8J:GSvBbwmryZ7qC8UuyuvAnp2Lzr5Da9UODVvWzbt75d1ti:YNEowbfMgsJ4yMDDrcTCxKLBeMXev9nFwr:lxTjBpMXWwyXFSMeBxHLL08M80EDDYdUBw5faacO839DEyOR1x8DpbMu47p3Qr:PV1mn4192G:GHl1f837XcCH:W1BOn8wgZuBJcIigsDChUS7Qr0F3cLHR3TC40hEAw8JSEMIigLDD0q5wuUK8cLMSy9CyAs5gt7K3sMXSrWDd4oVBABJ:gTwSRJGB4iqBwsH6YgDhzXI%gYrCXiFbYlIBMAJLkQ%CC1DhcdFQ3MGNkLfxQHC4YQogoUDZ8KPwrsCgQIdAtZBikMOAX7DI4E1A0rBJ0O0gNMD1sD3Q%nAkoQlAGNEBYApRBR:pUQevxZELj68A8r%VwP8:emDhf32Q199vcMBvb%C4n13gqt9IQJ5PLWB83vvAWR6x4D3eb5:17iWPxl3lf4Atsa9GTYzO:Y1pzreda:5wjXY%QM2KzhGdmm3:vZWN7C2sbdo9vt3a:cvt7B3SPgs94A4offMeRL4Ibm8uDW6GLhEOt74TztJuFh71PghPH13qXz79zK9Sfa9PfA1hf6IdMe:MbPBP4Mzc::KMuEATLKGgMlynsE7MqOBUzMRQbCzaQGw86%BjXPrAaYz30GjdA7BlfS7QXi1J0FG9hWBRncJgUP4RcFB%coBbrtTAWn9HkFX:ujBa4BxgV1B%EFigz7Bb0QGQb9E0AGZBZ5BioYzgZ:GUcHYhrzB7Qa4ghxGh4KvxmhC8EYWg17FzIP7RUNESgUyBJCEj4UUBBdFXkOKBYTDbEWegwNF9gMShcIDnYX2g%dF1MS0BeVFSUYjRm:GPAdzRlzIocb8yYQHlYrcyF7L5QlSDNGKrE2Vy%tOZw0PTzzOYA%Qj%4QHpEMUOTSRZGfU5LSRlTd0xAV0ZPz1qIUa5dH1PWX%tTQmHrU%phXVPGYaVS4mAiUlhfEVJLXY9S3VqvUyhYkFVAVTtYLFJuW:VOrV6uS5NhZUjtYxtFeWXHQcVlaD5zZAA7fmGPNzRdDDQGWHAwWVLALHtMESmgRoEl8kAjIpU7Ax%eNigcGjKXGRIuThd%KkMVQSdwE00k1BGqIWoQaB8uD4EdFg7vGxkNthosDNsZQQtOGUcK7xgtCZEY5wf6F3cG9xbeBHEVGwNcEx8BkhDQ:t8MEvxGCN34JgM89Q7%SvFS%Rrt%PS96PzwReSG7crfv%po25noN9fc5kHTYOWPzxrkLMwJ4yjJMuKRxqDhacRZ4ajCWeE%wZThG8Dt4TK:MeJ2vi:i5b3Y4YS9KuFdvRjgb72F3q29W9wMvqHZj7551j6:INMUwNXPAMHezPrBhsoHwwzJJsRzyE7Fg8hkxuPIUccuyf7H%chlyBHIjMi:xnvIn8U7yDHF0MeXxUHHyMaexs7I%sXAy2LFl8:NxAvULcSq2HrDDd25wvng8cFg5CjBSudswMTpz7:Q62O:be0vv6fuMr%b72q:WPDUv8Pwb8C08DjBGvAiwvruH8Nb7SHES%sfxfXoDMZz5tjGteN1x6jg4ceH3TTI5NqWyEnZJsnT2PTJOdkHyzjaZ8zF2xzO5N0y0Gvgt9IK47nVguVB2bTnTN2d6crhSuuc5tHspetI7s7wxe8K9mPxTfs284sAOPW1BVf3ugpy%YcPX:sLFOr8Mxj4:eYblP4VH9r%uyHm:tkj0:5mJc:%WCYT:7Qm1P%PJiUBBSb7AiwlSgUSJBkIvCJRCy4hlw5vH34Rhx3OE3kbghVBGXMW2BZMFjUU1BRVEScSNw6rDuAKuwpgB3wG2APkAWwA7Pw2:br3QPqL8pH3hu009avoMPPs44fxTt8w8PPaIu8M11nuudPO7fDQd%2OzkLtfswg7b3KBe1Hye3sC8jV7PfGvez:xaXsGMWM7D3EauxvwzTsoMLe66nBXetmwKnq3r7C6VS9qegJvF7nALvg5RC6M%QpuWPicbh%4BG4lN4FuKvcM7jG2pm49dhDuVDXP7rq1Yq70NQbvQTU7L6L0wTBbtNlw7TT%sVm1J3Ig9UzywbXs83r2AnQLdsM0rzdjNN%4HXUVuPc1DTm8tQS6efU7%ve1MXu:9SU8YzVYfS61jT3edgN%nva3vxr3Jn:Ed4yAl3fowR44OsGxOEHCazj9Qpb5q4Mt%kwDpHtgA:R8aMQc:aaEV77ZBJfAAITPwWCE%YJ9BNgDmAUvRLFFPgWIxUCG4EVxx7kFTsiTRZfJbEWMygLF64qXBe4LKAXSy7MF3Ev1Bc5MLAXpzBdF8Mw4BadMDsWMzBzFXQvjBRgLpcTRS2uEqUs6xHaLGIRzy0WESovCRG3MEIRgjLQEaY0yRITNzoUnzkoFiU8kBiZPmQb%UCMHkZD8iF8RYMlhkc2KUlJAC2zStMwy0ukNKxMZDhvTQQ8FE5yP39OnkKaTnxFc04CSC5OJErmTdxLpE0nTXBNC05kTYpOpk2qTk9OcE5aT%VNqlALTTtS50seVH5KQVbTSFlY5kYdWrZEhFtKQplcqz8xXdw89VzgOaxbvzZvWYszhFZVMCFTKC1RTw8qEUsPJ3ZGKCSxQVgh9TycHl04%RvoM3wZii8tF0MrDRUlJx4TSSNmEbcf6Q9kHKIOPxmFDUcWjAyDE7kL9xAOC6QOhQqADBEKeQqlCXkIOgltBsUIRgQ8CPABkQdX:7sGdfy1BWn5eARj9voCg:M0AbjwIv:m7cz8Ees:%mHoiff15bj00uPW8erh6%424APsuN4r6XDdaeZX3MDjXNs04Xzay97B2Y:cNNmJ2sHYv9hN2DTXyNfk1TfXzdSX1ujT0NUv07:UmNJW0xjSodGs0bfPWNGuzSDRn8sG0cLJB9FXyCnRcsdx0eHG3dFUxl:SlsXp0p7EctN6w:XTTsJv1FnB4dTawEbV88CZ1ZnB19Wvwv7VH8QT1tzFFNbPx:7Vz8nN1b7LhdWXzTHVac:W1DnRcdT10v7ThtR:093VBNP:1pPS7dcp0p7YwNEC2VLRGdnk0O7YedCB2BLQwNeuz6HWTs8y1fTOjdOhzq:RUs6MzwLOP82zzSnLdM28yVnNJsl1zTnJ0s20yXbOispwz9rL19CzzbvS888i1WHSBNjb1FbbYNcN3wLaH%PJ3H7nqN8c7Iri6vBg5dT1H%jH%sXqt:9R7ZcExO9XCRry6Q1C9EESMfZbFuj3MBp2%bcd8vriIHn8riMr:h8mIgA8KG0CAyoCBXQrzQeTLMcKZy35DfgtYBFALswUNi76F9YtyBoiLTwdJyxSH%kq1yBiKYYhjidEIW4lPCARI68ehiDFHNEdgRr5GuYXBRgJFQMVCRL9EfcO9g7XC:ILrwj9CI0FIAaFAmMDo::FAOL8Sv45%vb7pvfM%TP1y:fq8vj1z:BY9OLu6fIp7abxoeuE8Dfqfu:I6JDuOOez7Xvl3%yT4w3sg%E661XfX%oi3W:pCttf6B7ZL%dV1%TlqNWH5B3UHePN0q7hxtFC4ATR4N510I:dCtBV3MXPNtuuzznaxc9e2QPQpthg0BLY3tCo137Ra9c00l:X69KA15bTy9c71DzY3dTT2GnVjtnF1Wja49VZ28vVX9yR1X:dTdW%3izVIeBl1abhF9ZO4yfXGeVQ2ADnU9n16B3a7eq62uPsQtvU7tbbvvCo3KDy7N179MHfUPYg4hz49uTg%S7omvu860v9iO:u:nLzegBi9%0BVvtNA1T:nQRZA9kFTQf6BhsLAQi%DvoIQhLqCakV0AroGKQL7BtlDLEeGw02IckNayNtDjslAg%aJoUPiyf0Dw8oUBAeKJgQwifPEDsnAhHvJkERKCeiEeknNRIFKQQTVSoVFN4rdBWyLTAX0S9QGRUyzRtYNJgeijakIbc45yTwOlgoNj3qK34:jS%3QS8z3EPBNulFODrXR449nEm7QDNLt0OiTHhG5036SP9OOUvrTzRNulDmTohRTlByUnJRjVNcUuFUEVNsVpFTIljZU:hZ71PnW9ZT5F2IU9Jf%lKIYSFS6GL9UPRjlE%yZOdNE2X2S%pkvkkQZEBHhWKGRG1gnEHyXY4%LltlOyVYKDjbVOE0XFGWMbtNTC4ISgUrTEbFJ49CkyTdPnUhQztwHsE3gxtONLIY4zD:FYctbBNFKvcQICeiDhIkawwUIU4KJB5ECDkbSgZCGF0EMBV8Av4RpACyDtL%UwsI:d4HRftPBIT5rgC29wn90:Vw%dzz5:XY8XHyye8V76zt4uuB6%3oVOk85iznxOMP5X7h:eJt3:zgnd0R3wzcQd2r2ojba9nl2U:YXNhl1:PWrNar1RfWhtSV1YDTH9WY0rDUztFB1B3RyNOA0ELT9c%10n7PKtIgz7nR4s6I0cnOtNHYzjXSDM:b0mDPbdPIz8nTOdDx06nQ89MW0d:TgNHQ0%XR8tNJ0m7UsNJa1SDTq9aa00nYHdQi2qbUKNw01U:exdWC4FPWrOLc1sPkX9fI5tvXvOhK2JTqqNhE7PXYzO012TPvadl:8I7ZpvGk2ZryrdlN867Zu:On2eDzk9m983PZUPNI2YfyDtlH8cTYiu9s2H3tFNh368:Xzemt15zoutfX5wLYZueR2ELncdlx56ja8uc43LLoIN6Y6VfgkurR4pvrf%W47Fjo7u1V6zjvbu6K8Jfx3PHF9C:z8feF9BT73PUr:iv3LgFt%BMEovnTBs:6agn1%9ULGf0PDkf%FhCL:%wR6gCVE2cCEhUBBF4WuQV1F5EHVRiECQMZgwt%GXANuxkpD7AZnBBbGc0RxBjIEvMXgBPpFs4ToxWFEyUUmBJ2EhQRnxAaD6YOwgySDB8KaQo8BzIIJQT1BeYAtgOR:XcBOfo8:%n2DP2q8%v6hfDf%IPt5:an6gT18%c182XlfPEC49zv0OBV7tTe7OwV3aPrl9t76k:acukm2YfoB9i45%vWBefb1Wzm3tTx5e7TmuUA02flDNJP5RfRQuUu0DblXc8r5ajOJ%UJzirleM0w5ffMP%WMzF7lQMyW5Q7M6%Xxy1nm8Mvj5hnMjudzzFro9sxG6ZjNTupXzm:rN8%t7DbQCO5I0X3vZtIJ8YnTpfKy1Er03NXz9QLXnfch2Ef5Odn0%l3ap:yw22j%Vt09AFbfKAKL4SEExeMdBuLlEwje5:4Ju%ncC3Trqg0S7WcPt%4VEZTwtRLQ8kwUdPXbFW74YBes%9gYIf9AGsEClht:BtUcSQr4HRIO:h7VEeYfjRW0IDUZaCHEHAQiNSCLIowjACPJJmIj5ymuI9ss4iOZLwEkGTIJJFI09yM:NsYj2Dd3IxI5DCPVOYQiEzreIeA5HyF9OVkgOjmeHz85%B6FOXAe9DkOHoE63R0wO%cdAjwtHuk8sB7SPW0fsT5gIIA:gyE6QM4i4kA9JH5BzCUNQnUnh0IuKeVC7ioqQ7AsYUNxLpBDKjC5Q9Ux2ENsM:BD7TQDRFQ2GESeNzhEwzhvRME5yUScOlFFWDsSRvc7FEd5PFZI3TzOSSc9a0tWPRVNZT2sTko9GVD8PFhRfjx6UtU7hVMFO2NUCTrlVN0441R:N1JU9jVDU0Y0zVF0MgBQgjDjTXMufktLLNpIDyr%RcYn8EJxJbc:ECNaPKYg5jg3Hmg1xhvmMVQZYS7eFtsqYhRaJ%cR6CNwD4ogAQ1DHZYKGhouCBEXygUcFGoDKBEKASgOpf4nCzv8NwjR%V4FcPeOAhv1t::Q8tf8g:D4%SzuJPfK62H0YOms8fHmAO995F7sBeLH6YzfRecZ3d7ksdqQ4lTYWuAB1jzevtM73JDRWtp9z5XYg83p1qPLUdXdyczTNMhZ0qnG9dA6xZ7P5sNSzqnCCs2BwcHLb8B0ynW:J8mYvurH3L3WxkW9C8bYvJXFl7xhxXu8RsV5vCLFgrzwxI%8tMSdvGzEr7wQxMO8qcPZvFnD8rxMwxK9ncM6vUnEaL1CxZm9ecbMveTHBL54yUG%JcuDvuTMyr6uzhW:f9Bov0nSxr8A1C3AoNWbwDTXEcHF2I3BUtoPws7blsIt3SLDbd6yw4zfR8SD4N7EReF1xcvhDcYO4qfGD%JFx93h68eZ4aLId%F1yaLhb8om4prL9eL8zP7jnM455X3Qoeah0i:oB9XY6a3XleuS2mLtrt087:rgIfFw5A:zDOgB9cjr7:ae78r4h:OM%nz3Pfx7%%b9fv%I:3wDHwFqB6MCRAsXBAYPhgWqEv4GJhaMCHQZOgqUHBAMiR8PDlQiNxD1JH8SaSfcFLEpPxfKK5kZrS3aG04v8x2pMNUfvDF5IYYy5CIKMxwkSTMbJUIzySX6Mg0mcjLbJa8xOCW2MDQkjS:fIjwuRyHGLHYfLit5HXkpVhuvJxAZ0SWnFt8jIxTaIY8Rwx:2Dp8dWwxyG8AJOxkoB:wWmQS7FBYCfhKb:0gQJ:0ZDrv67wtY%M0J:PW3B6TzrgVT8bQDEO:NAeLsAgDG6ln%uOjV:LbmbvvH5B368OLc%C:hr:d%35n22d2a9ULcr:S92tjzS9kW8%vXbPKZ1tbxVtVU8SPU5PAA04rw79FH8OnQHPDpzwfw6c4I8OrNIvDwzFrw:8uv8B3LI:FJyrTxg8li8sbILvMOyBT0WccU9a7GLfYdxl:3u8Wq%JbFC:qpxX374MX2:CTGbv5txt3:wsY:ASrHlQKsx%EDTsgjBSPJXQZLypAH5MvBCPbN8Al50BwLXNNFDJbWbA0e2pIO5t22D97h1hD45e8RMOoCE4HuEBTf8hkVPfcaFpL7FBfc:wkYGAT5GDwI4xk4DMMaABCTG4oTVRzOFgYdwxmiHWEcJB6iHooegSDXHgQiEh8:I0IfVyRzH3wlsB:OJgkgUyiCIPspHiG0K90heC2%IkEvwiMKMeckxjInJm00fScANucogTdhKvE45StKOm8thzv9Lqs8jjC4PSEysD60M48:QTVTQMc2:UBBOIxBqjkBQvw6YkIwPLpCQz0ZQzY%jUMIPyFEtz:iRENA2kWyQA9HCUF4SEpBB0pvQa9Lc0FlTVFBGU8HQbBQlEAYUvM:TVMpP1lUPD5EVTM9:VUMPGdWxDprVlw5AVbXNzFVOzb:U4g0bVK9Mn9Q2DBGTtwu0kvMLCxJqCpXRm4oWkMdJj1AuSMOPUUh0jnBHow2LRw9M4oZ6C:cFpEsKBQ2KW4R0yWuDmki6gv4HiEJgBtVBgMYhQOEFLIADxHf:a0NFftgClj4Hweq9eEDBfOpAGfwgP3L7Wz6Metu95fohvQB5rrxb%MS7%XgmOxk3lHq8Ns86IzZV%Y%16LkCdUZ4:PSuOH80H7gJ89s33nNgN7zy7bdlsoH3WPJadxbyNnbgMdR29HG0NpNxlPa8MXZ2bnFXdmpxdvYwMVa2P7F6NdnxpXX%MZk16:HRNeEyB7Xa8nk1lvKl9ZPy0LWSMzn1UTNgdVAzhTVPc%11D7QgtRF0ZDUVNLh1GfTaNV61BnWjNXu1pzW49eq1:XYsdge2rPZWtuv2qjcptsG3pvcc9%M3ezged5u4mPf%eNI4IflJuES5:jhkui84vvpcONA6w7kWOyT5D:t%eT17T:lee5o5cjud%Xo7nbl7%5v5QLvceU:74flre%75UPwEebz8I:muPE355PyD%iA8xXpdPRL6mX1sutO9kntKPcL7:P38PCt%PLyVvkL9e:5Nfd9%mz5:vqn%2773:3N%w4AHPwxAl38RwSU:EsGw:w4CO:8DAoe:ccLWP1oDaf97g4U:lcQov6lEVL:1xIXAPAT5QDsFLEBxxV0An4WIwMNF60DcxcGBK0XMAS%FzgEqRcqBG8XAgQOF60DgxYSA84VKQLwFPYA7ROG:8cS5f2AER:8HBA9%p0OSfgJDUj2YAtA9KQJOvLXBzzw:QVM7hwEaOw0Ao:qSQDB6F:%BOd6:GDlnfrb48v4euIE9z3hSPUh4JzzHN::8SXecfA53fTuYtyM7avbQewS2xrritoW6gDaMelu2WPo1tio50HY%ua111fmNdfA5cTWM%Vo1rPkIdZB5O:V3ePN1Yrjt9VN46jVK%Of1STjmdU645rVb%Oo1cLjydUz5APWvORW1l7lwdYY5kHX7%bR1%Tnb9j56BjZLerQ2X7rltrq7G3bce5U3BDwVd3E8XvejPPJ32L1NOE896PiDvkH5M:6X%V6:LbmD:4U6I::dOn6AM:qTgIs7I4DpO2:BFXv6QVS8RAHnfM2CCz2XAn0%IYK7fu0CxH:5gxZAhwOvgVWDzwJkxDODNMRbxASExoUTBTOF38VhRuoFj0fxhfqItMYfybMGe8pqhosLWwbKTAPHN8yjhxNNeUcczcUHVU5Gx37OgMdcjzUHM49mRwqP2AcmUA1HBdCIRyYQykcDkVSHHZGnhzSRxEdHEmpHUhKYR5OSzYfL0wmIPFMLCGWTUMiG05hI35OgiTHTqUl:E7LJiRP9CdBTxwpWE9BKnVPYyuiT4Is4k%cLTRQsC6UULwvB1HHMJVR0jFEUuEyFlPzMwpUCjUcVSo2Q1ZSN3FXfjibWKc5uFnHOr9a2DukW9Y8Xly%Pepcjz5NXUc:i13oP5ddbEBYXc9AtlwMQatbIEE%WgtBfVjNQHRWZEAqVNA:qFEQP:hOJj4eTA49IEnIOwJGVzrLQr84fz8CNx08ITWkOBkzFDXvMHYxqC7WLUwsOircKacmWScdI8Iknh8ZIiYcYB%uGJkcOhXFGdQR7RaJDhgUXQtKEUEIfw4nBa8LCgLRCPL%5AXn%%gC6:je::r1xPwT85z5OvBn9nXtKvPD6urvJOiw7JblhOkc42:mueB642:equA:3AbeKNqX2yrYYtlB1mvXadSw1aLSMdTs0OzSS8:e0cDNAdFMzE7Q68rBz5zJVc9byAfPKcfTzgvGtM4IxafOHsSnzkDDsM5bwrrOY8HBzlnAw85Iv8DONb65zhu9rM77u5rO37qIzuS5fM4huX3OpLiLzme4ps5buM7OebgFz724TM8juaPPqrkF0E66cNAOu%XQ7Ltl0ea87dH%vXzSNL8L04vAmtMEwifUnMOz1EvFPNUDx8HVuMhB1mHKu9b8yzHXjM2i1xfPE9ik0InYONIL2dvTodmY1VHafNci24zZGNzE2zPdGd5z3oPg2t:%4mrhieUm4x7oCuWw6hDnNe0v6anvYusL8qTtXPTx75f2Q:K2%JX0uvrk9qT8Lfl0:mr7JQCY:bYBsf8uA7QBlASiA%0FewU2BzsHbwjlCKEJfgrXCgoMHwyKDXsN:g7mDmEQVBC1EboR9hINEyEUSRQuFWoVGBZwFt0WWhd8FyYY9BfQGEEYWxlgGMUZUBgJGhAYFxqeF%EZ9RZkGRMWphj0FLIXmhOOFgYSPBU7EL0TPA4YEg4MVhC4CYMOQwemDLwExQoxAuIIqf:8Bin9DwWy%hoDSfggAfX1JP%88yj9nfEs%5XvL:mg7TT3v%s89fHpS:M56GbxlOaU7wHl2O1:4yzsCuKD6qHg1OhB3x7n7t1q5ajcv%Nx2x:iR9qJ4CfZ:d4S2H:dC9cU3BbWu9o21W:ZbtQw2MPT:NY309bV0dK%1JDSstN00rHSftK:0arS3tD20hHQYNNdz%jTxc6N1EvOTtXszSjWqc0Y14HNHdh3zTjZkM1r2tPNudtEziHd586j3rnPO%Cs0OLhs9GR48fSR%Xq0wXnINXQ6GjWpeq914DsJ9lk7rHaU:Bs3FDyZd5d9KHgePYb4534y%XL%q3oAf2860H:8O6JAUTy2QOv9SoGK:l7CLH8wwo1AP0MrgMiDxUHLRFqCh0Tqg30FNMQsRbhE1cYzBblGYwZWRsZHLIcbR7uHYkgER9xIh8gKiQfIcAlFCJGJwMj0ijxI3Yq5SQ2LOMlDS7tJu8vBCjYMSYpwjNRKqk1giuDN7IsRjncLfM6:y6MPBYwFT4dMY0:ETLwQO4yOUK2M2RDajRwRAY1W0WFNShG5jXdRi42hkdnNi1ImzbaSNI2j0kPN1JKVjcjS6g3BEwIOPlMdzgCTvg4IE%POUtQOzp6Ufo6oVLAO7NTgjylVDo9blXiPQpWej55VgQ:wlZ8P%pW3D:rVhpAt1YtQDtWEEBrVcQ:Q1RLP8dSpT4AUdQ99E7YPK1MsjsxSmU6hkf1OLNEZDe:Qbc1sD7wM4s7DjJUOBEwCTX5LacxyCsoLn8piiohJ8wmqiTyIhciBB9jHwobjxwJF6AZCROcFhYPihM5C3QQfgddDegDSAp0ADYHIP0mBO35HAHh9hn%APQi%0zxN:jC7lf1Y%yC8jHqu%8s6AjtUeZu6prk8ef:4pLlf%FN4xvgJOHY3hrftN0y3a:cctvG29nZ%tpm2EvaFNe52eLVQNnQ1NjY4NN72BLTIthk0sjX09Fu11zRENf60KvWrtA%1nrQytVe0E7VV9DA1FvQHNRh0F:TY9CQ0mTQtdFs0NTQhtDrz7fQ:c7:0BPOWdE:zcTRlMxB0iLM0dLsy3bT7csu1B:M8tR6zLvV%8yE1pzNR9dbzgXYOc%%2DPQctlH0RvabtKz2qHTMtva1JHbGNbQ21vX8tug2ADc29n92wHb8NsK3N3b9tzI28Xdt9t73rHbHN%7267f39tD4CLc7eCL3LrhGN2x4sndzeOd3gPlk99H5qrgjufc4dDoI%MJ6nfkOuvT5WHsM%eA7Zjome4C6qzvcOu28N3stfFF7qTyoO998%zwPvQq8uj0X:N99ZD0Ava89YL24:YD9wX4hvcg%QX4Ofp8%FX76vh7:Fb5r:3J%e7%RPouAMD6ZgE2%5ACnvupA:P7rQQv:JEFUvxPBmD84gZh:FEHXfyiB1b82gdI:PsHLvwCCAD88Qe5%8YHU:uBB8v6JQcn%rYGb:k4Bqz4rgXh9xYFD:dwBDf2vANd9QMDgfRNAqHzoAG58v0Aw:FlAL7w0:%p70f:hO7A:lLtP:4Y7Mb92upX:Zzp8Pxb6I:8Fecu:MXlyvtu5GX7EuMC%7PhovpU4En69t71%Z7dpvlR3Fn5FNsO%ebZw:jA2Hj4ntct%IDW5vdx1an3fdR%96nTaffx0mv3TdKG97jRwfc10R34ydCW%HXQIvk60LX5GtBL%hzQ6PpB0I:7itA%:PHQ7vx20Zv9FtJG:s7S8:6X06T:atRaAEvVFAFI1tQBZ9eYAqbYWgP42RgEUdvTBKzckAUQ3lkGhd80Bw7hJgin4jMJSuRfCvPlqgui5xENYOmQDjrrIhA47cURY%94E73xNxVD9P4W9PbFGMn5hhq5:Dkcuv:YHb4CWh%6BbogqAj2IYYLESNYDhIkIRH%JN4T2SWJFqEmGBlQJ38b5Ce6HVooyh%2KLQh%ih2IycpCyU%KXEmQSmxJzQp3ygdKQ0q:yhIK9wojSy0KNYtiygbL2coVjBKKIMxMSigMhoorjMIKLM0ASixNQcorzYWKK83ICi4OCAozzkVKPc6BygrPAIoZD0IKJ4%HCjaPz8oG0F2KGZCxSi6Qy8pFEWzKXdGTSrqR:gqeUm2KyxLjSwCTX8t6k6DLs5Qji%dUpYwT1ScMd5VoTI:V6MzaVibNFlZgzUXWlY2rFoSNxlbsjddWzA4eFuPOGtbzzgrW%w4pFrdOMlZmzibWC04KVecN3tV6zaRUxA2aFEINQlP2TOBTJAy1kkwMQdHsC8VRAsuC0FFLPE9YyrGOl8ohTcvJi40yiPJMDEhWy1pHt0pchtJJk0YoyL9FPoehRFcG%gNzhcrClEUVgbhEHcCeg2S:hQKqvqvBsH2UQPh8vz:F%%w:Gjrb:nT50X2XORI8wXhhPDT3fXtxdqJ69fXNOkL1fLmZNLH5OPPsuKFzbTgS8vN3jrJ:NxQxzrbgsWD2b:D3Nf:wUvWRsDS1Je%btP3vBrSbrvY0AS6qs%:uI3OnLd%zZW2g8yotZ3L2LTGyiG07sl9swjJ7LIXyHSyIscdsi7G4rE2xbyxNsSjsS:DmrEnwqixLcHUsVTAJLKyv5qyUr8xszC:4LM%v6G0cb9wtcO:TbY2wDi30MAvuJjBNLmZwku62MN6u1XFw7wHxyS%3siWv8vKF8HHzKPC1c49xPnQ5sUz057HfdVkyc3XOMsc2hXNaNz8zrfe9NAP4QbTcuM61dzlk9dO6BHax%qm3EPtQ9%879nhMvJu5KP0CucM97LpZflb7K:7%%7y:ZTxLAAm9EsCqfY2BBH55AVf%2MHnf2:CNP::Qn%ASALGwQtDC8GKw0:CCEOTAoWD00MEhA8DiIRGBBLEusRkRO7E%oUiBVFFkQXjRfkGLgYZBrLGcwbzRodHcMbTh6pHFAffh0gIEUeyCACH1Yhtx:KIWAgEyL0IB8ibCHpIb0hdiHdIcogwSHlH2Uhyx7PIIsdCCA:HBYf:RoAHs4Z1Ry4GKcbuxeHGtsWeBkcFnEYfBVgF%8ULhZlFNEUzBM:ExYTeRE:En8PQRFNDRoQ6QrQDmQIbg3OBQEMMQOPCpMAHQn7:aoHb:s1Bvf4wASw9nADx:SHAlzzPgJo8poCtPFjA:jwRgTw7:EEXe4fBRbsnwQV6WMDgOWHAZ7hQ:%93eH8J9qr%hnX5vi41L:3CtNB9:nRV:dh0dr3C9GR%LHQPPkO0J35%c6N%XDNCfmQyx74hsno9orHjPXbxUH0sMQ%8yjErfJExJny8cT28hHGrfOCx530Hsmk9cfKq:ZmzKj38M2h%GTPo:nH0LX6JtLZ%5LTD:0b1Vn%0dbA:8TYUgH82hUDet0BBTTgBQcV4wwJB%YHC:Ho6wzA668OZe5MENvwwBEk8w8TSPVCFFL3ZBVU%XoWYfuOF439phjf:8oZUgL5GtUEMRxaB2kd0wmPHjEMkB9qDmEgeRAKIVISkSHhE%whFRUKIvUV2yGeFmAhNRelIOIXyR:NGPgeEhpZHrQb9R2qHcIdCCDXHQ4jdR7yJt0fqisMItgwsiT7NWAnljq3KUk%bCvgQEwsWEJJLO1CgSv2QkIq1ELnKN1CyidWQy0naEQzJx5G3SdmSCEpHkvpKhBOFi38UHQvo1PHMd5V3TOYV5U1x1jWNmBZiTdnWas3%VhWN0dYvTaFVxI22lZ6NV1WCzUbVtA0FVbHND9W2jSAVvE0w1YENfVWGzX3VjQ1l1YpNadVxzQiVPgzL1LPMgNQcDG9Te8vbEtTLhdJoSzDRuMqakQdKfxBSydxP3ElwTyKI9w5hyGxNlQfPzPmHJEvPhq2K10XuCc6FKQjzxCQHysNlxtqCckXpwUvFPQBzRBc:qsN4PrSCoj3Sghd9AkGavHwA63u0wEQ7IL:aenY:Irmw:lS41L2yd%28hfcJu9o2Mzr3tTJ6JjRRubBzl3ke8z14rnKyOFJyaHgBMh23%3GUt4NxijdTsXe24nEddq7wxTZCMPm15vCA9eDwnLWwsI91lrDZdZSxNXWm8Vb1wnHttdhyLTXdMk51ynKPNZ4yr7UX8rP0uXJlNAiyT:OPsgKzGrHNsrgxg7J58bayL3Husl6yZXLAcwozhLPGdFd0gnUitWf1kTYndhN2uXZjNtt2gTcRNrH243Z8tp62LjZP9dW2BHWCNck1QXWrNR41cvUfNWK1R7W8tZx1wzZgdnR20fcGd%a37HiS%Nx5i:nKOoP64jtme458HXxDfJ08w:zmfRf8wX1GfPT9FLyJfQx8Sbz8e8Q8s7uGfH17WzwfO0c8GLtK:Ca7ZHwDu5A8aDuJPIs7xvzlu8I9NLv2fTc74L1ru:39UTvKvaf7hb2z%3C9eTsPPXt65L0%OrX8xDqIPM26Xjyaujh8bnnYfE35wTx7%bQ8ObmxfAT59:wZecR8dDnUvFX6KPxBOkB8sfpU:Jt6mTyyeoT8tzqb:HL6qXwourI71Hqy%7T6aztQemD7LToZ%sj6Erqgech6fHmCei%5kvnJeco5zLou%fP6f7o2uvV6izuFO2N8IDvvfLW8X:03POj9WH1C:ZG9rD1hfaY9Cf22vI69Zjw2:MG7jfyVeuA8K:o4u4s5oHt5ON27OHhzesl4HzrpN5t61ndkes93OLrSNtZ7G3a4uyg2W3t3Njs7STYYe5119LuxdZA7::VnO8X1dnvLNQE8HXTPfAR04zw3tLJ8KPSuvBO0lXw:dG%79DRH%:L0Yju8tEJ7lPSuO350qTt09PE7dPUDu761Y7uVNdT79nYVPBz2njxGtyy8tXdBfSj32v1b%HW9ijjNfjQ5IX5dubH%iPo:vvV6TT9hut0:iztw::H7iEBX:CNAgbyAQTJ83wFqvX7BqX3gAit%QkKuPuPC8P9Bw3T:2kO4QGuD90DyRCuBaQRRwczEqcIeBLbCYYS9wp5EggMaxIRDWQSEA5eEhUPXBJAEHoSphHNEjkTTBPhFN4ToBZ8FJEYNRW9GgoWEB3wFnQf4RfkIecYYCQFGtsmIxtDKSwckSsbHcEt9h3JL74eoTFwH1EzDyDtNKQggDYxIRM4vSG9OWkiqjtfIwI%wiTVQKAmG0T6KMBHzSuqSwcvuE%CMshTFja8V505dlv3PNJeCkCoYcRC4GMdRXtlFUePZrFIMWf6SWtn%kpGZ7tL0GZLTB5mvkxKZSVNc2SXTbtjME49Yw5P:WI6UPNir1EoY21TrmN%VX5k3FdYZU9a42WDXOJlP15GZXFfDGQKYCli81%XXxlfZFyEXbJYUlulVJ9YW1CFVfdLIFKaR4tOWkPWSjs:Ckc3OzBDRzdNP2czXzuTL2E3xCtRM%4nNC8LJAwrHCDgJikcvSI%GLEeYRTDGpYQ9BbeDEoTRAnOD9YFggydAmIJk:9lBqn8iAPU%ckAEvcm:l30m:uu8SL5AO%49lbsYvSn6Rny2ebE79bjQO2b4HzqOd2G57zZcuQi1kThctL73cDOo9oqy1rXy8dD1LrEfdEOwivP2r9nzSS%NMznvIDLFbw2y5i7RctJu5LL9rr2y3G6T8yguYvMfrihzBW3h8xutTDMlbOcy5ax0sqEr93Jb63KyGirqcd:qYnGyqd3xVymeMQ7pZDDaKTBwuqjFMLNo5bBFaRTwb2kVcHEpZvBMKcmwv2o88IXq:zDaK08xeGvs8Z2sl3IFrUqyra3BsxhuvLNLb0A0B3AOtIcw4jUDsbE1uPI19iYy77aN86A3NDQJ950077fIdZK4cPYyuJJ2zrkq92m5ejfIecF4q:oDORL6gnm8OsG6KPtCepr7xTsSPEl7jPzNPAk9TvyFvc59Pz4LfbN%g:4gvzU%Rn%evuR:wb97wB1:jQCwv9cA:QAXwQdAjkFTAPrBYAEega4BecG%QYzB0IIXQeMCWEH1Ao:BxkM%AZPDY4GWg73BSMPKAWsDyAEAhDoAiMQfwEGENv:rQ:7:TEP%vuoDvn5HQ4J%JoNM:YsDYf03Qwe87EMBPKpDD7xxgzO8AQNsvBXDd7wsg088QcOtPFDDjjyUg628iUOGPO0DVDz%wxZ8wEMNPPXCubylQl58k0IBPIJB5vx1wVP8b0EJPG0AxrxrwIo8aABRPF:AGbxPv%L8cn9q:EU:LbxJvqj8QT4avGv9QvxK:OH8Ijw5u:S7S7vDOtj7jzoiO125ajsxuLN6yvg9uqq3SHqYdtg6XfZ0%j214zo09aH6A3Wwei51U:p5tVD6n:Wi%tY1:vsS9ht7kDZ0O8s2hzxCNtG8tHbRvOE3B30J93N9MXdXPVs3tr1Jd9c9vDf8vbP4J33wuFc%M7iMPnx4x36LOUm%3nmR:zP54P9IOna:mvqSACv68MB5uxKAxLu3ARA73wGh:AtCOzx7wll88AL6fSdDX32hQ8o%HwR4vl8E6L7eRVo:W0XMv9YGfcANhuxAv0cZQSnHhkGMCDEB5EhVgm1IskKjSMmDB8kdA13JLAOliTgD4IkHBFSJIESKiQsFCMkKxZKJIgYpiQ8GzslMh79JU4h1SZ7JLMnpSeQKLYqYymcLRwqTzCwKtQyKSs3NZQrfDf8K6g5aSzBO%oszz2NLdg:US7eQSwv2kMZMMVFGTGdRyYyXkk1MwZLOjSYTDM1IU4iNrJPBjdPUeQ371LCOJJUqDk6Vp064lekO3pZtjzvWsk9OlzYPlVd5T8yXuhAxV7VQRNfpUIxX2VDL18hRA5f1ETKXmlFXl7JRcNd4kXvXKNF3FsDRZBaDEQOWdBCUFdTQUpVij::UnY9fFAuO9BNyjgES1I2IUjLMzVFQTFSQsIugT9QLMI84SkSOnIndDf:JO40gSKBMu4fJjBGHdYtjRqOK8IXTinnFBonBBLwJCsP0SJjDLsgrgmwHg4HsxyLBMsaKAL4GOH:NRex:XwVm:vKE6L5IBLE93cQ%vXADjr06gxw8vAKjPDSCIXuigZW7AwE9ulQAVvnWf6Q5Db7q%H497:er:TT22nx9dg07j:WIevK00XoqNGw5eTPauOIznPhks3E3:PMWt6gzDLdksxB3L3MctsDzbbaS80G2ovNZdnIzdXY:c1T2CTO3tc%znXXUs4W12DOutZizlzWXM751VbOldVNzi:VNs7L1A3ObtTYzR3Un83W02DNlNMazVPT1swU05rM2dJozKDSQMxm0iXMMdIczAfSKMzt0U3M29GPzMzR6szL0WHN79ECzkjS2s7U0unPhtMk0VvUkNJn1UHUv9ZE1mfYithM2vTaTNxp3U:e199D4C3iH%Jc5NnjX%Zl5TLovebO6eDnL%vU6F:soull7U:qQO7c6vPuTOuP76brJvDu673wJuxN8VDs1fFw7F3ykOzr8rXsfPPj7BD0I%2p9HntSfXn7en1Z%6J9vTuL:eO79r3OfCE%PrwJ:nR8cX5uvJc%rLz6vq09Gv7vfXg%8z2Rvzh96D8:fjy:Bn6Rf0q%5T9JvzT:Qn9AP7Y:ST%k:5I:jn:bv7N:5r%VgDf:uMASf98Adf:HgJ:AMYCPQFwAxACFQTxAqkE0AMaBZ8EWwVVBWEF6QUnBVoGqQSyBuYD%gbdAjUHlQFfBxsAfwd8:p0Hxvy4B:r6yAcW%cgHGPe9BwT1qgff8owHtPBjB4vuMQdv7PQGa%qnBonoTQbR5u8FRuWWBeXjQQWt4vIEm%GwBLHggwTr32gEPN9bBJneVgQA3lUEet1ZBBTdaQTU3IoEvNy6BMnc8AT%3CUFVd1VBb3ddQUi3nAFet5EBcbeAwUM378ES9%ABIPfRgS13xsE698PBDDgKgSL4GsE:%DUBJDhaAU%4h4GCOPvBuzj0wfl5MQI7uWzCQLnkwof6F4LQ%kcDHDqywyg62kNzez3De7tfg4B7wIPBvCFDwLxAxDy8XkQz:LmEJbzSBFK9KUR8fQDEpb1YhJB9r0S:PYPE8r3WROn%JoTjPnIE3X63BNc%8wTNvyHE:T8%xKO:SESA:4FEVn%tA%e:jwO3v6sDC7:Fwum:40JYQAZCHYBxwbsAqsFvgTUBOAGSgRJCQ4E9gsiBOIOhAQEEioFUxUNBsgYLAdgHIsIGCAiCuwj5wvYJ9UN0yvsD88vJBLBM3EUpDfQFnI7PxkkP7Ebs0IYHiFGaiBtSasij0zeJHpP:SYlUgQpjFTvKrNWvSycWGcuRVrtL6dbVTHAXKYylV3gMy1eAjWNXgg2sF7oNpRenDdAXiw4yF2oODtdFTmgXGk5%FufOUlbwDmeWtg5BVruOYFZ%jkHWe45f1iwOdNXKDn9VkQ4:FUDN9JUZTV8U2sz:FEeMVNQji59Tscrc0zMKDFKoiW7R1kiGEUJH1BCvBtjP28YVjwhFS451hH2NZAOuDJQC3wvGQhALO4E:yjOAbcltP5uIqP7Kh%f%PEbqvXHGMLysRXt77ASMO29D4zqzQz65%EJdOX6BvniGASF4DQBEt5I:p3bVPss2Vf4wdZL9VXULPLn0f7ugs:K6zfNmugNy2:lAclK4g7HMt80xTXcc8Nf2c7BtNZMwDPU7r7d0bK9sc%SvKvNirvAy5a66sm2uSLI7rhpxj%4u8SitxjDBreCwVu2AsCktZ%%67RXvTa0LLyKsyO777I%unKyebkUss2407E6uLOxyLe9sX239rFct1qyZLfjspi3kbP9t2i0kbhmtVa5i7ZIute3Y7tHuaG81br9vYC8cr9HvvjAKMCHwh3CIcQqxNfFXca3x7:IwMlNy%TL:80ZztHQWtDB06bSxNby1MnZNdfG3GzZvN%W267ist2e5b3fjOi64XvrruNr7p7lWfGI50T0aukn90Tr:PkY7b:85%5s:7PwAAJ68nEEPfS2BgD2zQjE97oKiPl:DEz7FQ4P:XgP1f6sEJ0AthFiApsSIARiE9YFFRSEB7sUKAlWFb8K6xVIDH8WwQ0UFyoPpReHECwY2xGmGCYTEhlfFGsZfRWxGXwW5RleFwUaHBgIGqoY5xkEGacZKxlJGSIZyRjlGB0YfRhDF:kXRhZiFy8VthYDFOwVxhIJFYURFBRREBETMQ:6ESYOzxAyDZEPWQxBDpsL3gz3CmsLbgryCfwJeQidCfwGTwlvBQ4JxQPWCPcBnQgIAF0I%v0VCND7wQeH%VsHHvfjBpn0XAYF8soFbO8qBdXsdQRB6q0DsufUAifl7AGl4vUANODw:9nd3:6T28X9Xdmj:DjXf:sr1Vv6OtM4%WXRGPixzwn3Js4b9sbMWfWJy8H0a8pS9HzJEvTOyAr0bMg79FDInvRyyCb1yMjF9UjJcPbnyR33ocrJ93HLcfhQzBj5N83C%SPOevoTz0b7:M8k:NbQEf2f0Q:%YdIi:x:TSQDW03wBh9S0AjjV7gPu1ScFqdZcBmPXiwcZ2LkI09jqCZrZIQt42mIMdtusDZTc:Q7O3U8QHt%dEYHg4xL14RwUdOM9FfrkPBaF5hEXE%i3F6DpLxgw63sYxuydGGbulBgM8FwYuvH8F3fzhBdC9f4WDfdqFs34yRWG%iEVR:x9FBf%5BPz:1YT3QHaEtoDdhLtBTQSEAgTEkIKFRKGDDwS3w6HEkoR8hLCE3QTQxYFFMgYpRRQG1gV2R0hFmYgARf0IvEXfSXqGP4n8Bl4Kggb6yw3HFEvdh2lMcAe5jMSIBE2bSEiOM4iFDozJOU7liWXPfAmLj8%KK9AeCkbQp0qakOoK5NElyyORW0tW0YtLv9G3y5%R4gv4EctMDNI0zCCSH4x0EgqMh1J0DJwSWgzz0nnMzFKPDSFSlg0vUo0NNJK0jPASjYzhUpgMiRKVjGkSR0wC0m:LlVIQy19R6orhEb3KW5FLihCRFEmAUNiJKxBYSJAQFAguj4zHhk9ERxjO%0ZnDnHF8U3nBXiNWwT%TM9EQwyFw8fMPsMMS7pCkIs4AhSKuEGWSjsBFAmAAMvJBwB9SE::6cfbv1JHaz74Rr4%XIYVPgBFsX2lBNN9SwR7:PBDqPyRAxi8agJI:DvBuHuHASZ7TEBRew0:ubqLvt%6Sv4Eegx9aDmRvIq5XXvsuPM7D7iT%rW4Pznet:P5SzeyePx3Ozhzts34Mfap97Z2TvdANn12z:Y09qa19LZFtft2LLWIdhr1m7XQdbT1jLWTdY91tbVYtZo1Z:W:dTy1pTUVdcs1MbXyNND2G3Tytgd01fZ2tLm2aLSddp60gPbYNKR21HSINxG0q:cO9I93TLSyt0o0ljeHtLm3hTSdN8P0gXgE9Kd4B:SPeEu0uThPNKP4kvSQONi0v7jjNLV5M7SyOUi083me9PY583T3OgV1NXpVNS:6oTUmuuj1F:sstQN7bzUpO3M1Cru4tSi7v7UDO8e1WbvSdWx74XV7u:V1R7wO9Y98LfWTvBO11TwAdhS8NXYSvDJ2UDw3to48BbcNPBv3Tbw595A8HrgVfAm4nrw5uOv8LPl9PCH50nxYums8UPrG:Im7ZHyBu8I8%LwffO88u3zk:RY9GD2u:Qa%BT1vflf9UX7m:Ww:MP1:f3X9Sr:1PUzALz1FQGV9dQBZvVzAjb19AIJ9VgD4PSkA8L04AOz9AoEsvQbBLn0CQTE9NQD0PR%A9j0CgPY9HcCzfTIAbL0AAGH9CEATPQs::3zHv6W8:z8E:PJ%3ryjvrO8VD5FfEO%E:wy:Z874n1n%5J9L3tDfPW7NLx7Oud8AXrd%8l6mXuUell7YrocOzR54TrKeel6pjm1eke5hTpu%Vk6HLlzOdF5VPnN%X85kvlyeZ:5b7m1eXf5k3mK%fo5p3noOcv6Gzo1%hD6ZXpJepo6hfrTusc7ELsMu1C7VfuUO6M73Dv0fCg8CPy1fF48wTzzPQq9B32Q:Vn90r2qPg399v5B:j:%r74F:xf%Sf97fkv:mv6LP:c%h4AR:sHAaz76gEN:MYCa:yaA8v8ZQQ1:SgFr:3iBTv%kQbU:jIHdv:DByMARgjhALsItgEhCaICdwmkA7wJuwTzCeMFGQoTBy4KRggsCnkJEwqqCuMJ2guiCQsNVglDDggJiA:ACN4QhghFEl4IvRNRCEkVYwjrFpkIphj1CH4aewlxHCoKfB4EC50gCAzWIjYNKSWLDpMnBhASKqQRoyxqE0MvVhXrMWgXljScGUA38BvqOWQekDz3IC8:qCPCQXQmRERXKbBGSiwCSUsvO0tXMl5NajVoT3w4VFGGOx9TgD7IVGNBT1YmRK1XvUbeWB5J3llAS65aI01RW8dOy1stUCNcWFFdXEtSflwMU4dcoFN6XApUVVxLVBZcYlS:W1RUVFsnVNNa3VM2WnFTclneUoFYHFJgVypRD1YJUItUt07WUjNN8lB:S%VOm0m0TI1HZUpZRfpHAkN2RY1A2EL6PSFATjtTPYw4bzq4NX031jKBNOsvfzH9LHkuDyptKyQnXShBJFAlaiFHIp8eQB:bGzgcHhkrGWgWFRa4E%8SDBG2D2QOaQzACwkJIwmVBYsGEQL7A4H%dAHq%vX%T:eA:LHzEfoP8KT3a%w59cjo0PIq5WnwleEE7gnenuuI2jbpF9fN5r7TaeSF0A:ibc2:33vKfN23x0fbKsUl2dHCFNemwA:VpL4V08i8KtETu1DPgrmIzRK40svAtjHKjLWqyHS0Qcd6s:XFm7LGxNixs8MuscDCn7DvwSqwRMHPr73Aka9bwHevHMCGrwHAvq8LwBmwNcCUsH3AMrHlwPKxaMHRsgPCzLO2wuG0hMMPtm:EUrd2xaa4mMYSutfHm7s5yUi9xcoXv3zMBcFazhLDXdBDxYXSmsfP1BHKNNeZzKXZJc8Q3LDRbd471Lfgytbo4ljZ%%Th2%nmaN606PLgX%qB4%vrD%ZT7Zzomu4l68Tvq%3W8Cjwz:GW8rDy9fR580f3LvSO%dP0yftq9fP98vUJAGn2BwLR9vEDLffEBX73gAfD9yIJ9:ewCh74Mgw7%KkNTvgTD1b4bBBQ%LYRP:jvEiT4FxT%9yoVzfcsFpH3HxdP9wAYB:fKGLf2eBla9gca7fV0Gm71vxre9OkaPPTvGozz0RrN8owaAPIgGinxixlK8MoYZu:dF37uyBaW7Y4Vr%wuFMjrqxLk6goRBupVDzTplA1u6MsLsuf%CQDnMAhc5mIGxuWVBD7lygLB5AMBTuRD:%Pjiv2B49j7KOMw%tnilfiT4gr3U%KU9RniNfTm4e3yvOG38ZrhkvCC4X:vduF87njhhu2G4Znsn%Gx68DhzOrq4erpG%II6VTiJ%iZ4kfn6%Jp5kzjkeW948nkROQW5OPkeeOV5fHiWuaC4jPnMuIl6AHiM%nt4Vzq8OGc6wfi7uwt4k:uX%K975niN:HV4rzyEeNM9Erj5PWD44T3wOMv%QDk4:pB5KD8heRl:s7kLQAa5fMBZeWvA67lXQX35fwGP%aICITm:gnF5lgLCeeYDFTnvQ2u58gOHOi6D6DolBA66VcR5OkEEp7qnhJn6ysTROyxEzHtMRQs7qwUNe8kFUzwmhVy8Q4WpvJ:Fufz6hYu9UwXefakF8n38xck%TwYkvqCGBT8xhin:QgZTf9JGQoBjxneAtwZywQwGs4GkBroCP8aFAuBG08NExyWD7Mc6RFgHUUUGh6lFuMeABm5H1IbmyCUHYYhxx94IushdSMBJHskBCaJJe0nmya3Ka4nYCvBKOUs0ilBLt0qdy:hK4ow3yx8MdYtUDLCLgYzoi%kM3cwMjRCMbI0:zEhNaoygDVAM881wjMSNjE0TDaLNIE20DS1Nv408DYXNTk3GjWUNws1BDjnNIk4sDQjOWc01DkRNJc6rDNhOzIzJTybMt485TGHPRExHT4gMJc%EC:yPuEtMz%ZLFo:PitoP9MpWj9YKDE:zSbwPjclnD6XIzY%8SG9PUUgMj2RHpM82BzjOxsbIDtdGUY6oBdTOeMVSzgtFDU3gxIUNucQ4DRWD5QzzA0wMlAMuDDlCi8vjQmTLUUI5SsIByUq1QVVKKoEdSaDA4kkWwKRIi4BiSDz:24epf46HD797Rm7%4cXGPoJFVX4dxJy9tUPcPQjDVLyYQoc8JQH1e3BBIjr7AE86Rj:9%ZH:MDkgPme4sH2leAH9KTeUfHJ3KDuBdv461jZWOnC18TmQdZA5NjUz%GJ03bfUtI53TPRG9st0CHZQM9L127OnNW4zRPUIs2u0qzMZ9FUzDzQGswuz::LQM4HzHDNLsy8zHTMIMzVzJ3LUs0vy%vN1sqezpHKaM9eykXQNsov0RbKItL9yR3T6ckj1NXJMtW9yUbWoMlg14HJgNhlyafZT8nW2kTJD9xGyVXdWsmo3oTJB%DHyXDhJsri4pzKV%Qjy8zlucs7513Mo%gNzf:py81L65fOhex1z67tY9DF7l:Rx%9q0rPwhtOM8bTUVvLy1RLzONe%84TYXPTQ2e70Gdt09V7c8fWe3Wb2197U9gXgPPco4aH3QOIG%E3jbvhQ5Nr4R%VH%TTmt:ka5yn6%eed%tLoEfum6Yf7d%oD:EXrhfwN7Az90eyX:ZDtJv5L7rr%:%5V:6vv%v9R8KoA7:BlAYXxJwIW8vACpPLCAy3zngSr84IFHPRpBoH0Twfb9DEIKvUJCW311Ami9Y4KxvU0C9j1vwvX9S8MxPWCDKD1ugxq9dUMJPXVDND0vQxv9JAM:fNRDHjzBgzj8rcLP:JqC47xHwvN8NgKAPCWCijvWwpF7iYKW%31CW7sxwmD65oJn%psCcHpOwns6AUJIujKCGbniQi85kUIJuYBCKrlwAdL5YUHC%VXB%7kOwf25DQHHeVCB2HlZAfC5ZsHPubtB9HmVghu59AIC%hSCaXo2Ak66WEKyentClDqeAvP6gMMRuuMDLPrEg0W7JMNa%wPDq7shA7d7PIO9%xVD:zsrA:r7PIPwewlEILsRxA37GAQ6utxEJvrdxBO63MQBetmEMfqVRCW6kIQduorEGjqChBw6t8Pj%qmD8nqYA8g6w4PmOuvDjHsQg7s7MkNyO1FDcPuugzc7ywMDfGbC1HyCAui83IK%fTYCVP2Nwmy95UIGfn2B4n6Xgf8%84GcP1HBub%zAViAGIF6QEMBX8DzwQpBa0E6AarBLkIyQScCgYFkQxlBZYO5wWsEIoG0xJQBwsVOQhVF0gJrxl%ChYc3guHHmcNAiEXD4Ej6BABJtMSgijXFAUr8RaILRoZCjBLG4syfB0LNacfhzfEIfo5zSNhPL8ltz6UJ:RARykSQ9EqDkUwLOhGZi2gSHIuM0pWL6FLFDDrTLIwEk40MRZPnTH8T:Ixw1A3MmxRbTLzUZMyWFKoMpxSqjLEUpcy0VJsMsVSJjKhUsMxY1I%MQpSkjCXUbsvD1G8LnFQlS28T0ks7E7XKgNORikCTZgn6EvRJbNK8yNiSf8h9Uf5H2tG4x3CRL4b:EKPGRZBVxcSPxkV7zzWErI6jxBaOEMO5zXxC1kzmAmzMDkH%y3WBDErbgJVKP::ZyWG:WgiBvtYH3:4Nxzz9QYZZPPHFdTwfxJF7jIPuevlCzTpoAi45mQFROQ0AtnhEP903:v7GN35%MXaC:Z62DTzOdZ58ALU2%3W0V7rts8C6aLNyeahy7bkt8nE4uTH8uAnxj3fgsSi3fPCHdx7waraHcBF2dm%7dexvZ7WorxU1ay7ENTQutHSEbqZ0XC5aNDuuEPPjbgqzk24H80vuCDMNLgyy1%4WsqwuJ7JKrkAycu5gMiRuiLIgbvnx5q80Mfevd:HTr8VyOjAb8iqwurIkcSFyZvGQMrHyBvLD8sWzG:NMM3jz3DOaNLWz:vUZdGZ1xzTPdr81ObcA9eQ3yjZNOJh283ko91V5%ffyekn4ifsYuRw7pnmp:DN6M3y:%rm9Czt9fZW7:z4fvH%%qPz%vzD9fH%3PfmAOv51gLr%70E2f2WBrT:XAiBAQ4KQQOpC:MEKQ2bBowOPAjRD9gJ%BBxCwMSCQ3yEp8OyxMyEI8UvhE%FT4T2hWvFGUWCxbfFksXSRduGKUXdBn0F1saNhghG2oYxBuPGEUcqBijHLIY3RytGO8clBjbHGUYnxwgGD8cwxe5G00XDhvBFjoaHhY5GWQVCBiSFKoWqhMiFa0ScROcEZsReRCkD0kPjw0PDmILzAwhCYEL1QYvCoUE2Qg2AoAH6v8kBqD9xwRd%2kDJPkLAvn2rwDk9Fb:5:IC:gXxtvw%73H7k%03%gbsCPmZ6uT3S%nN9hzow:UJ58r0C%bi8x3lCvM65EHyYeOK8ZDi5fDF4VPwAOHU70Pgbe%T3x:v897u7mje2%7z3enult0Z71DdbO8j3eTvEN2B8BfdRvE23THybN1E87zdgPQp3uf1st5291XfKvkO4P361%Dq:Kvh6P6H4u8AZuP4Akjk:QQp5fYGBubeCN7msAqv52cMe%j9DULpcQ8E6r8QwernEXXr6RIb7MUTsOx7FDTtDRWn7XwVCe7LFVzu:BWk7hgW5e4hFiHvGxZa7wkWku:uFcvvyxUE8KEVQPB0FYHwQxXK8BAVHPHWFHfxkhTe8UEUUfLiE9XycxNv8:USJfRuEvn04hHq9VMR9:bGECD4PxBm%cUPyPpbD0P8Ag:U:cAOev%VDjABhQ72ApAOygS3DqkG%Q6RCFMPgQrFD3gMTRB1DuwQdRCeEXMSXxJsFC0TXRYGFEMY5RQbGskV5RuyFqEdnxdNH48Y5yCAGW0ibRrfI1gbPiU:HIwmJR3KJwke%ijtHiAq0B89K68gVyyFIXAtUCKMLgwjqy%3I8swUSTuMdkkFjNTJUY0vCV:NRQmwjZaJg44jiZfOa4mtTq8JhA8tyZwPaEm1D54JjNAPCaEQeklvEJ9Jc9D8yS3REokdUWDIwlGniJ1Rp8hu0aKIN5GYx:iRi4eyUbvHJdGqRtQRmEa9UUaGYZF2RcDRZ8WakRxFbtDTxT5Qj4TJEI9EkBBURFQQHoQVj%3D1I%BA9FPV8OMDzBDRI7KQ3rOY8MuTjvC3s3QgsvNoQK1DSvCWozwQjxMbwHazCgBtoubgU8LSUEkCvFAtIpUAH%J8n:EyY1:hAkm:z2If:6xB9j%Xwdx:ceGy32rBiW9CgWBPOYE3fx:xD172IOf%7CCxTtHAmy63EGV%q:A:7oBwGk50j%Q%aG%9nkw:hk4wX25uFS82HgrfDZ3hjuUN2U68vbIulO2sPm3Nh45HnXP%Ip1hbg7dT93cnT8tvA0vjZ0tER2P:QQtZJ0I:Usc:60jfPgtHaziDQms7RznTOk81lzmXMas5Fy3:OMsqizivJ0c4syA3PNcdVz0fGqM9lxQfQkMRx0MrD59AVw2rRb8L90djBoNJSwVTT38AY1IbA7tRLwNPVMsDI1j3AyNdpwNHYtsDe2SDB7NqowfrbTsIH3RHDEt7wwxvf58Qe4PPFGeEPxwriPMjx4njJzePFyp3kH8xg5YLNFebqzrzmUNBW57DR4ucI02HoVtTS6JvVN%nV1pLpBdjk6SvZLupG2nDqWNur6mPc3ups3Qvrd94264nfZuuk4J:rx%Hm6:HiPOwe5KHsTuUT7YHmku255x7u9%i17jrqVe9%6:nvveyb8PHtNvEY78bxMfBF8jvxsPI18gPzHPM88%:zWvOu9F3zWvVJ8:X1HvOA9uDy%faR8l73NfKr987x3:dg8fn37vD693nw4:cH8LT3ne9w9z7vGvfu7rX2sO5G9oHuz:Vh7lH1Tu7L9EXuPvRF7qvzS%4S81Tud:Jc7trxYO5A8WHurPBf7iTwXO6q71vuQe9d7ujuZO6g7nXuae6U7kTuxO427gjvQO5i72Xu1O%h7l3w8u798FXvtfHL74LyU:Bj8%7wVfSZ8Vf1TvJm9gnzf:fC85z4ePS6%Sn11PrW9eb7fPbu:Br36:2s99:%MPjJ:6f4qwAR%YIBb:lQAsH5FAMI%tEDQ:qHBHX6NgWe%t4FxPp9Buv6EwcX%6EHS:smCIv7pAja%xoJPPyKCbP89QlD:VwK7f3BCq7%JAuE:4ULagDhC10BNQxcAoAMZwPCDHwE%wycBSoNwQZPDeYHaw0ICX8NJAqODToLnQ1JDK8NUQ3IDVMO6g1PDxYORhBNDjsRlA4wEu4OKhNhDywU8w85FagQUBaCEXUXhBKpGLET6hkLFTkbkhaTHEQY%R0eGmsfGRzoIC8ecyJdIAkkmyKnJeMkSCcxJ%gofSmFKsArHyzyLbUtDzBKLxQy2zD:M2gy0TXwM4o3bzUqOeU2sjpPOCE8qTl3Pe86uD4gPOQ:Oj0AQT0%D0IpPxFD:j8GRLtA7kRhQchF8kGURnBCUkfcQgFIN0OfSIBDKUm3Q5pJ2UPxSeVDKkrZQ0RKtUM%SnpDFUonQ8lJu0JaSTVCyUiTQRdI1UBGR:w:V0YKP01FAj4oROU87UK0O51Bbzo6QBM5xz6gN0Q9FDazO280FDqyMmk43jCyNvUu8TT4LCMz5SpFMbwoVy96JlctHCREK6EhHikLH%QmWxyWJJIZNCKwFr4ftBM1HZ8QnBpzDfUXMwpBFeMGgxKEA70PGgDwDKX8Hgor%UkHsPVwBD:ykwHe7rP%kevR%1vo7vg85Q32NeIu80bfVPBx3IDtttm16hbX9eeO1ETlINKh4srPDeCOzYfda8sO22HJodhrx0HWiMXt07bDqtH0wXnPQsBczZ%%VcsMvWbJiruSxxy628XEuEXEhbfSwmC2hcFUtWHAYbRpv4mzn77Tsge%RLKkveGxeb2ssYS9pbHGvcmxPL4bsuS%mbK7v0izvMAltODBL7Uhw2K2eMS4t97FL7lOx8W6xsh4vEDKR768yzHAN80zwrHOTcQr0H:Gp9HHyCXTIMun1IfNLdb1z7bXaNJB2drUz9pL113ctdns3Rnce9913gzhzOCh4h3jOeRs5dblt%dy5:vpC%k27JrqZu4e7Irwk%2i8vnurPRO8KX2jvGH%LjyUvrK8wP8xPSd:aj1I:939pYAMff4Adr3SQNx%IkE%Pi5BXT52wbl%fEHTvr9CK76AQoF%:0KU:v0C5v75Azd%8wNHPypDlX8eg%G:DoQrvzpEMv8gxHb:AUS3fxpEs78qhKs:MUSd:y5Ei38ixLR%zoSY:vJEeT6NhFV%n0QufmdDxL5lw5j%HANrvctDPP21Qoy9m4JaPX8B5f0hAa:8wcF4:KKAwHyDwIa8ZkALfAs:zzvyv1K7nb8W%0v%3Ps9vmU68r4u%qo9%bpkvYU6Yf1R%iH9H:nkPO:5qHyB%a48Vnl1PC25PfvI%Qh76XjU%4%44zt8OLL7L7iE%yn4mTrruLC6tjiL%oo46zpo%M66Uvk2Ogk5YvoLuZV6GvnO%jc6D7ogOpg6FXsoOhX7vzog:B16dLyC%o%9b:qv:eP60r6d%zV:HLtV:947skBhO8mBJHwaAac8Y4IpfKVCqvzfgyr9EsOpvX%D5n2mRGD9x8TZPiPFDr57BUG%jcXx:pzGH77oxkp:Mcay:zgG2T97Rz1:e4dgv7jHgv:yh%S:6EgFgBjIZYADCIPAZkigAEHI%gBViNJAoYjogKWI:UChiNDA1UjiwMFI84DnCIQBB4iVASRIZ4E%yDzBGAgVQXDH8UFJx9FBpEe1QYEHnYHhR0rCBcd8wjAHM4JgBy8ClkcugtJHMYMTxzeDWYcAQ%NHCwQwRxcEf8cjxJDHb8TiR3qFM0dDRYNHiYXSB4yGH8eMRmyHiQa4x4MGxAf6xs8H8McZh%UHY4fXx63HyIf3h:dHwUgkyAqIEUhTSD1IWwgqCKIIGAjoCAfJLMg6CTCILslziCbJtYgiifbIIco2SCSKc4gqiq2IMsrjyD0LFggIS4RIFEvuB%EME0fuDHMHukyNB4TNIQdMzW7HEM22xtDN%YaLzjfGQk5yBjOOaUXfzp8Fh07UhWoOyoUIzwME448%RHqPPcQOD0JEHs9MA%0PW4O5T3EDQ4%MA0xPq8MSz5ADFw%3AtlPn8LZj4jC18%wQpOPlYKLz7dCf89UQm6PbAIYD33B:A8JQdrPDkG0Ts0BSI7GAReOuYChTmjAZU4UQCPN:T%cjaQ:T01KvzvM8P6ijJf%Q4x:fd9L5721C1D9REs7PM1KpnyPyhL8TMmAvATJLzu4CF17ZofLOw8Hd7qxxqK6TsYLuibFczm6RJk5SUQ%ONRDYjibQoU4X0Hm9%HBB7ekQGd3KH%HNu4%5zZ1:gj2AD2tdY081bVePAJ1NLt0tJE67LR0%iq0IDmvM9N5OjOOuItzkbgis1t3v7MqtyHzPnaJsxY2d7Lydeuy03Wmcvj1JzLjNOzy0bS3MsR0RTM7c9dzN7OvMzlzTLNAs3DzTPMbs53yy7PzMoD0DTK69CyyeXRSMn10vnIGdTIyFXVuMin1s:ID9gOyYvZdska2wTKudyyymbee8sf4FnM4uFJzazjSM555VPPRedp0AnphtHD6qnScuzO0xPu8dSm7w:WKfEj15nyLNj08yrZO:Ue2nL2Ctub9%:bu:jM3Nb5n93r%mre::sv3xT98t8v:rjgVP%F4YYAW%LHATvjFAMk5G0EFOXOBQnmNAcC550IAOgECgLpZQsK6r0MGOsHDinsPA867VkQR%5WEUzvMhJE8OoSLPF:EwPy8xPF8kcUcvN8FAr0lRSP9JQUAvV9FGX1VxS29SkU9:X3Eyb2xRNF9pQTV:ZjE172MhNa9gITTPbYEjb2uBIY9qQS8vWaEsT1khKJ9YUSPvVsEuP0RRJ19BMS%PPbEW:znhHZ8l0ROfIUEY3xwhDW8GUQF:ABEFPvmQ%Q7jEP1e3MDibtag6K7BAOA%zADZXrfw1A61INB%s7DenqOg3r6lANEOt6DVbruQ276wgOOOxlDsPszQ5V7TsP6u2tD37uHhAT74cQpu:jEDfwLBHC8GERRfGCEbnxlBEd8psRb:KZEbDykBHm8oARF:NoEUjzRRF38xYRoPPVEL7zghDT8x8Q5fOzD:7zRQ8l9NkOWfRtDpj0%w3f9H0NL:XzDJH1XgwL9sELn:YdC0X3bwr197YJqfjyCGX5LQgv%m4HDPu3Bvv7AQb1:EEF8v1sBPP%gwP8:5ECEgGkATYCxwBjA:7:kQRH:70Fov7sBhP%KAih:XQJUv3NCib9Kgwc:YcNNP3nDnD9TxDS:coRXf5cEwz:ARXY:7MWtgBqGKMBKRqfAvMbrgPLHdAEsB:8BZchJwd4I0gITSVXCRQnUgrKKDcLbCoEDPgrugxsLV0Nzy71DSwwkQ6NMTgP7jLkD0Y0ihCNNR8RxjakEfI3HxIROZwSJzomEzM7vBMsPFQUCj3fFNI9TRWQPqAVRT:gFfI:FhaWQD8WLEFdFrJBchYqQn8Wk0J%FtxCbBbrQj0Wr0LgFS5CThWBQZsUv0DXE:M:BhMePywSQT5kEVo9xBBjPEkQVzvkDz86iA8sORoPHjh1Dg03hQ3yNV4MzjQtC5ozHQpSMkIJ9DCWCIIv7Qf%LRIHcyzqBe4qgwRnKf8CzCeBAQcmJgAIJPr%yyHn:WUfzvz6HKT7mxph%jMY4:ilFQ:36BL29AoQxfIWDY7wIgpb7ksHUuyxBJfqWgIb6TIAsucR:j7m5fuq5LD53eJw98zgEvWL3ozyNdzi7%nZHe3T103qFdaW56TUFuVC08jit9GZ4O:Pk94BzsLcGcwQ21:KY9nhyMDXnscj1n7GWdROxT7S1sPyzxfCr80:wI:Lf76ayfu84sfku3HGZ7tBxXm7UMTwu6PDpLwpw2%9u8IxvkDC9L63wd%:LcEJwbzAacJ9wOnDdMBuxaLA3MYUwUDIzMHByaTCXct5w%:MXsSCzoHFQNDrxinSf8gV1CTK%9XNy:bXd80K2irPJdzj0DDehNIW4AfU4%Gg1ejjc9d35l3Zaekx217sC9097yDfKfJ14Sb1:%Mq%MfmV:u%6a7%m%zNARnvWAQr8UwG1:LMBxj06gjo9OoJQfU7Cx:1Bw2g9CcPMfR3EVr05BNt9R8Wc:fHF1H6yhjK:VgZewGjGfwE6BkECG4abApaG0YMuxzlDckeoQ%2IYARLiUuE2IoShSlKqQUwStKFMcrfxPpKqASfSnjEeknLRGBJjgQeiXiDs4kPg0mJIgLICMXCqAhLgmuH9UINB3rCA4aZglbFlEKkBKGCxkPigz:C8EM8Ai4C5QFQQnaAYEF0f0AAXP5iPzr9Nz44vBk9hPuIvWm7MT0POyd9GXstvOj7CHxTOxW7MrqW%XK57:caOPM0wzfn8wY3lrJXeS5yhPzis%fB57VTh0V22Mvv976Ofzf3jrM3pgy69sxJGjYtRMs1TEFvdIp:OfQdvqkzl7:UsuKCKPI2xN6yscf5dN2KmfklzFo%GgzbguML3IZ8iZtH1YbTBz1DqYRKATaAr38jfNh%Qbns:nw39r8id:MAQjlIwcm7kcLL:gPDbEAEQzwBW0ITQfVAh8FhfwgAJT2Kfkh8VPxlevf6a7l9uMK4HXg9Nuy3%DaN%G93Rnkj%Sv58Xuq%vF%5TvjwrX8kMZVfW:JVv3rC78%Hoz%vnuMzf6iTCI%e4qLPcIJTDyDCCB6pUcZOESG%HYohvv0vod0tCmIenS9yX62NYpbOJgLPrtiC2B%astBQPGLAkKqyppD70n:hPzJAAYZyOeGw0kSx8rJy8jyivQJhcwkSmMMjErizK3Kx8wNiuhK8ApvSVdJ0Uf:SP6GJ8fdhNhGgwPhhS%C64OfwkjClcINwj:B:sIlwcACzYGxAx9A:8NRv8yDzv5mxBM8S0SfOgbFM:gohZK3HkZ2NvfG:LeCR0y5GYcSOrGGUzwghVP9SoQO:gqCmv4BQQ09sX%1fKI%z7wxPra8Fv86:YrAIADxwWhFewLKyr5EIs88hN0SKkUsUtSE8dGbxACPAANUC4wCsQg2QhCFm4JzhDgC8kQZA:ZFPUSpxqiFiIg9RtYJIMkNycoMMEo3zzDKBlIMSfvT0IkblMUIHRSnRqATSYUrUWvDao8oQhcNCIGQy6ABi0rMAloKzQN3C6BEb80:xSIO3YWnkH%FN5FfRBfR3wJFUVbAFE%A:V8M43nGyYd2T8Y6MsbDG:CnAOEvsX:vcBlAG:IeQT3064KHOGDEYLtcBc%91obav3OHEIAuBudAEIYYP8uE3391w0z:GUJxfzxBbf:pgJnBJL%dgle%YsNbfPQD4zt0w966EENvOQECL:i2wDd4qz5B%Wn9IXo2vJb7K:z7u%:9R:z9vfl9dX5C:gU%1D5cfuf%df6L:mL%Y34Jfhl%E:3Fvl996:62PhA:Un7vgBy:oQEdQFKBwwDDAgWApcGKv4uA573Ev4U77f3HOXn8D7aVOo9z03kLcUt3yG9l9t2t%HZm7Ou2dCwY9ogr8TbZ6%73VOy1t%Tt2Lh:b3L4ULEw%BKyRTeOsyN2YvME9NTyuTKgsb7wefCELrMwcG0UMXQspnOJrRk3Vm4:e%2vo8DKcbfFG7NNSFK0ygnpNapJsrWhyAB1AgWas:7CBzK5PvJxJnxX8BK7Ge%f%xMwALxp8bC93HR%:4o4J0FOfHfCtYB7Q0ADyoOwxaMC2QYfAYBFHP:fwrx9pn9wu2G7wPlc%K%3SHYktio0b:Vgs9i1b:RgtcH2KXbReF%4LnrYeS19TnmHf4F5u4DDuS5Bd7fNgJg2FD5MM1p7JG:rd0AslDP2KYXw1efErqam9a0RJvbs:2dSbdho0%%xqoqx1OzGdBcvPLXc8XJ3RHOvuBv1Yfgztq33dbd%9h93nnSv9wvyqPYu8DC0mm3scy1r5PI16oAyHmpNsuVq23RurDb2Wy4IeQDwpbvTcyP%uTVyQL03c8GXOTaBgvpXASo6%EABuxZ:ZrqPvpd6On3Ueae9ibld:Yp5W73a%Z1%eroUfx97IP:ovBaAsj0SwTU%CIFD:3mBHcBlAObBfgAJAnI:BMMHPc8DrXwPA%o6i0PjeXpDiLhOw:o3EkQLtkPEm7X2hRi2eoYsN:nHVvpFCN19LcnGf8UK94HdyzRDbMrohBpKf4QniaJEDIkTRHKIgQVzCKTHDQkwCeyJjk1%in9QuctHk9HMlZYwzYzXuQ6zWAePkhg8D%RXDxAq1VYP2ZM3j2jQsI8rDqKPQk2rUHUNFhJFDYpU7k4bV00PDpnR0ANcHBEHXfGR4B7XEmrfLFIZnq5Rah0r0Diaw46JGGlMrNVciukSkMlFEF7IDs6PB32NpwbRzeQG1w6ohzzPgse1ENLH0tIfCAmTMshBU%EItRP5yBhTUAbi0dvEYo:XQX%Nuv5Ai9R8fknWuz9IdPqVB1J7G8aHvB:GVL1BRqt%iUbTv9eHPwCoh3%BaserwjFHkELeh26DQQbDRDQFw8S1xNHE8oOBhOZCAsRlQEGDmX6Lgvs80QJ8u41CLrr1Ac56qIIoOqKCzztyxC98UcXMfcyHff8gCErA4ok5QlDJ5QQAypkFmQs1RoHLpUdGi8%Hg8wmRwrMQkZbDJnFJYzhQ9BNNoK9jN3BmIyTwJ0L4P%Vitp%2AmKPnhIJv38hqZ9ooUDfbnDaH1sgfb9JECuvOK:snyFvte8uH3RPJy9VTy4vTC8s72o:Oy%pb0Uv9I9awDyPVoBz:2igre9jENLPihD636VxIQ:swVMgFGGj4D4x9eBLcmMQW:LvcFnzd:BmlAfwbZR%IF3UzJBOZOTAOdTRUBk0iW:ZU:2:h%M:zzfCac8E4bD:DcE9:yVRCn%HgPGgC:D6gHTBBgDtIQCBTrEGkYBRABG8oNfhtlCgIaPwbVFsYBOhJ0:a4MzfnvBjP3gwGV9ZT8UPQ7%HPynvRW76fxDOsG7x3mluzr4ITqo9sT6anWfuiq0vfo7M9R6rfNreufyvHrn8XA6vu%sugUuIvmQbKF5N6tc%KHqi3gC6ix3c2mFds8p4zYU6lS1qKsktSJsGHTV7TC0nS3o9KjuejSI7uR03%8otQ%vsrVj8Bh1iTD49VpxSrUCMdE0SPIZM38yCPJl8lpxc:J88LUyT:CS8q5w9bLZsdUzm3M29Cq0bDS3NYZ1Jzc:tUt48rYBOoP3IbwEN9r9lzhVvvY4rP%lONUAM7jngDS4wAAyeOM:pvjO:wB4zD5r%HE9affb:Ji3aTvjduH7Xva9%sI2vPq%tmm6lXa9uoh24vrBNxS7DfcpO0L29PvpNjj8iLWtvbT1PX6LtXg:sPWuwEU2XYDGtyQBBHgZgUq5RIGjOvABlXzoQdo:JQIYQZbCbMQGAq5GjALzyOwDIUrKQ6dMRkPxDU4D5g3gg4LNycNdTR4CywwsglKKv8HICPABqwbrQZtFXgInBFeDHAQHhIFERIZExJNIM8S2SYhExcsLBPUL%8S8zFmEjoynxGWMJcQUy0uDwMpaA02JI8LYh8WCsMaWQlDFmkJvBEBCl0NtQqiCUcL2wahCwsFhws3BIkKcwRsCKEFdQVvBzQCmQn4:r0Lf:sZDU33CA1w8scL1O05CpDq4Ajs6JoHXehMBnToMgVa6WUEW%u4A2fuGwMr8scCW:bbArv6QwMd:%ADWgORBFYHCwUPC%4EtA7vA4AS2gFNFqj%jRmd%r8bG:bRHFvxAh2X7JYcY%irG4LlUxpv5OEYS%ULGPnnVxjf63MZ7u92GoDz7hrY9jYbZ:q5G%r9ZBzSAAAdIAOSHTIFLx4PB8MebAg7HzAJgB94CVsfSwmYHqoISB28B6EbnwbPGS8FBhg6A5wWswC5FbH9HRVe%mYU8:ZuE5zzPxJn8MkQhu3KDoTrBwwM66EIbuxCBYvvzAIN9LsBkvkHApX:lgOABXcG1AqgCkoP2A:OEhQWcxWQHWIXYybFGDcwxRlmOp8aI0SnG59MDh1KU7ge:VdLILpaeiFsWx0iIFoeIkNXciFnUzAg3U6iHs9JQx2tRMYcU0AGHp89oSHEPJsnAD1aLxE9%jcLPHlAozndR%c1gk0FMT1RaSsPU7wl61KRIORQPBxpTeIYC0mLFilEJxUCP60U4zkPFRs1%hXgMLcWbC2UFvQqTxWHKQUTDSn7D18pcAwnKowI3ypbBCgr4v:wKhD7DiqL9SQo%u42JabnEiKA4KkfWtpDHmTVqR2A0bMduM45Hh3Nyh6fzPUeMM2:HtLOex5e0VEehtQgHgbYqx2a27Mc697:GsDhehg55DcVmeZaEfboCA0s62MIBO2PA07uyf4C72r6RO%69inv2vO07vDxGe4x8bbtgvF27THyrex68t3qOPJG6NjxduW28bri7:FP4KHyoN7z8:zd0:VF3vr3Ld8v%nbgYPzb4XT%JuMwAGXkTwGz5ZwB1%byAF3nMf8X5038OOZT%PzkcPNz4%DtqOHl58Xf1%H53R7cNdww1wLahtPg1o:R49J:0crOKtNmyxHWIMme2T:IKt0uyQHgPMyy4VXRWuI32HPiouBj4jrqYeKF9K3iDv%T40YJJuVqEj7n2xmk6ZcfGuwQJELukSeu7wkqCPBgKz3vryuK7R8rduu7Kanpjye%6PYkMemlIkjrPCHw7qggvPM5IC35Tx:O:rwdGASEG30IqBiwC1cVpQ37EUwO7g6CDVEMVQs1CgQInwjSA3UHA:%zBgD6kwYs9TQHpPBBCFXsLglc6LMJGeXUCeLiqQmv4UoJCeHGCFPgDwhO3:YGM94lBSrdEALX2yT91Nl19l7X6u4d1YvnZtPh4BHSMdvt0OLW%s851DfP:9KKzsvS681p017NxdTVzMPWKcxZ2UfLj9xBykvgO8lN5D:IYOgkx2HsncUW8G7DOvOAwKD16rxB9%24SfjutCH5SrE7%jOu1:vaqxn%j6oZAWiqhwT0qn8HpKspCXCsYAnHrXII7a%RBsqy3gM7tssATrr7:Q%:1ftexIb6:ckv%q3PyPoh1Q78Atq3:RDeq:9C4doBxOMUBM3lLwaG5zUI:ehZCjPqtwwk6yIPy%tIESLs8RIU7P8Td%svFFDqNBP86DUR%efpDn7nCQ2E590LKuh%C8fpMQyR7EUOc:DlEUP1HBfd%tAdCAGZJXsH8i0QDoo2tBQ3PyMbikfmIOBOniXnVEMpyFkGLMZdHS7lYKgv9GLDMNNjszGcY9MyiGJbNMJgXTZ8XvI4OVw8PI9aIUB%WUxERFh%SBJWnkymUlxQA04qUyhIqlRJQeFU%TnzU9sy:1FcLFNPziZfTFwiX0nHHllGnhttQ7wY30BAFsw%GxQFPQkSQTvnD1E50Q0sN98L8jQUCr0ydwiGMAsHTy69BVMsTAS4Ki4COCnB:mkn7vlfJW70lCMS70kiC%pSITPlgyDG4OsfR92UH93aYB862SMfFdjFHl7XQR4d15odVtfcHAfYFRwg2Ukbj9pwGlbcaxl93gwY4eA6FkDj%RNk5U0RKucsDo3onAqz6bsG5uqwAmnssf577hf7O:Eq%FP01vXW9uHz3vdk8k333:Gt9a:yfPO09PjwmPd17jD7dOxr:1XrAwQi64EItet7DMbsuw:t7TQSt%7kE%Hu3RRq7koVgu1hFV3sVxUp60sVKuo3FbXp7hTo6UEUjeopE0HrpxGu64EPh%tyDJjqnggb6ZIEt%fJAPLmd:3d5tH6a%dE%c:oLPlM65L65%45:YDzzAAG%eQETf8PCfkF:QyxDI8QRBO5E4UZXhYjH2IY1CPCGXcnnRoVKhQbxCslG5gsuhqmLPYZHSxHGTkrHRkWKrwZuShXG1onDB5JJpchXyVVJeEjyyg9Icwrjx0VLjsZDi9VFEYu1A7oK:QIcigKA0YkQv2hH6L3xxoy8gEW6uyKEdHnkg0w4yoKf98xBwPdZwSs25cBRNue:o:bb:s:3CH4:Nzg9HLdsvFd3XjumNwu6xrb8ufI2NPkadXP4RPRD991zNPcWMgn2:DE2Nn4wb3YQr:a1%K8L9fVupvW8rgE1iS3hNWWtVXVh7Sa1Si0NtaFtOHWlrVq11C3ytetuQfYjLwY2Kq:6tfOwnjX18Wz1qLIgdULy%fTKc0P0mfPINBF0ijOI9Y1zBnbZ8rI4NHIXOZtx:nqQ8ZI7orFdvCCxcPxSMZd8s7HkfL:ydHy1sxz80nQe:RG1Lf1uNj69pPdJviz4hL51ed6%bfsOPkv8XD4FvV69yz4mvZF%v31afvN9bv7E:ZU%4:2Vfrd9vT4rvZO98:1XfUt9EHzG:JW8V7w2u%f77Tu8u%87SDxFe0i8wvtHPa47Qn6%%6y:qHw6QN98pEJYvSLDzj2tBUJ%PQb7vksIu:7LSjz:cItx:%3MkkB4DZ%Ahg6bgM6PA4EKz1mBAY9wwQrPIQF%TrgBp055wg7OKoLFDcNDyc2oRL2NOoV8TK8GPcvFBsuLLUcjydJHfwhvRymG1MbBhVXGYgO7RZuCCwU8AIrETj%AA5U%soKO:eqB9v0uQQN8:4Bn:Fz:3XwBf2J75:65O5F%JTuHvam7k:0Cu:h8pPvzPH27wfx2e%D8OruG:Aw7aTvHOsE7zjpMu7A5yntpObt68:lmeo25VzpsuRc6P3jrefu4l:nreGN55zgRugQ4GrpJeDH6tHgR%wl4vntROTb7yTnyvF66p3z9%079Wnxhfaq9FX3mfeL9zz6IPfW:CT2yP:E9HIDSPMHCO3xTA3C8JcSuO8rF77uqxrg7RwdTO2jHjntaB%u7ZcfhO5kH4:vAh:I8I0eQPL8HQD0Nx0I9j8cRvgsG4X6:RmQ:JoYW:7:Fv::SxV3AZUTqQLvEaIDihCLBJkPagUADx8GYw6XBnkNwgYWDH8GDgrCBWcH0ASSBAkEKgKGA4sAIwPY:9QCSAC9AiIC:gJ6BaIDHwq1BMEPRAYAFkkIchyfCrwiIw2sKLcPNS5GElkzsBQgOLsWiTw1GIFAGxnzQ6MZxEYPGspIkhrvSWwbUkriHDhKIB:QSSciPknoJatIQiodSOguTEd4M9dFwjesQ8U77kBkP489UUJUOU9ELzRdRWQunEVOKBxFJCLhQwYc:EEcFpM:lhDSPKIL6zlTBwk3nANMNF4AyjGJ:YsvJ:uMLUL5uyvL9:opnvYlKJD1GiaM9MMjfPMrITbych6K8Lwbfe4aGWLsmBaZ6loUQemQEjfoSxFQ524QcObRD3:lXw9Z5AwP3%LJDhrhjA5G304Otd0MDpfcxw3425oN3tuiDWLc6Q2I3VcOJt:RDgDhPg:Y4nYPfeRUD9Tlzg7p5u8N8efPDCrpgwva6iIKL%22CBTwNgcg85EF1fW5A%T3qQE2%X3:2:lz:QD6xvva%YT6ivmd%RP5B:l1%L34qvep%Kz2sPh89cT4L:TZ%NHy3vhc8c341e%z%FTuj:ji7FL4bOv69%:plPd76BX3AedZ9k3lVPUx4w70l%B78nbdhfDu2UrudtYW7J7THOqx0VXos9Cx5qXQROWW0Svkd9Nt4xHW%eIo2bbik9yR4jTgfeL343Dizuda4qvrJ%J%78nhO:M94dH2h%Al%rnfF:333oj:Yd5tAQ3e0AIU3twDjt7HBIHfqwXb4JIGleKRB7TkqAgw55gJ4en9CansqwmB77oITfI%B770GAWC9icCefeD:sb3ZvqU9wD2Afdw8R720uwC9UvouvMD5E3yF%C98JDcD%9e2UntbNZz67fTkOlR0Z3nQ8%R5XbNaOPHyyXhIMrK3n3IUtzKxr7Z58Qc18zCgNSpwPLRu756zxu9LM3EuxvLqrpLyc25r8couT:GtLgAxWq498NOuCvDcridwua4S8KsuSfCsronwua7TMJJvZnC3r4Bw5bAbsNRwsbD78Pww2LF3MOzxoTD%sfvwlPJMMLXymbBt8y0wCjPJMAo0qa:YdUdv2bYer772r69Fd33vLXeT7zk3:67yOAlvI:huLxO4p%9BuPQvrjjScBr5APCH%X1w9jlGcab5mnIZ%ffyjjoec0X6TbQEeoI0ybr4NVN7LXYd%1624:uGd5874TgI:C54mvwqeQz8EXmhe%i57ruCelX7sLqre7d7LzvS%948QHy9fP%9ET3M:hN%4f73v:l:tkEQwIlCpUFpg:JCDUV0wu2GqwOEiBSETklyhMkKh0W0y5dGEYzoBp7N:8ccTuMHyw:WCKxQnAlAkbaKCRJhiwiTGAwDk9XNOBRVDhhVDA8P1bJP0tXH0OWVztGPlcLSTdWXEtgVBBNt1E2TmNO8E6MSk1PSEZNT6hB8U7QPDtO6jcuTRwzxUt7LgJKCiruR8olnEW6ISBD5R2PQFMa%D0AF2o74BPxOO8QlTYsDko0ewsBMroIti:sBXEtQwMyK:kA7ygd:6cmmf1oJF38RCJw%0Ag0vpfHnf6qRxY%icbe:rdGej6yhia%%0Xhfw%F539rhbW:jIWLQDKFaEBdRUyAygV0wTQFHEGVhT7B6kTbgm:EtAKlREjDDMQcA21DtgOQw2QEPELqBKvCtsUWgnHFucHPhhfBksZyAT%GS8DUhqzAVgagABAGqL:LRoH:xwapv4FGob%9hmk:vcZ7P7:GUn:Axqx:wMaHwADGowAAxr6AAEaZgH7GcgB7xkTAtQZQgKjGUsCVBklAt8YxwEsGCsBFRdKAI4VNv:UEyb%WBJU:XARzfwkEYH8XBFu:CASnfyEEwz9fBWg:dwXR:6FGvz%ZR27:2sgfQCAIz4Bkyb5AZQppQJtLD8DCi:GA2gxPwSLM7cEeDVBBTY38AXOOMwGQTrdB407KQm2PLAKzz1iDOs%Kg4CQPUP3EClEShBGxOsQEwUaD9AFX099BXyOkIWsTf8FbAzGRUHL7AT2inaEUIkpQ9KHhQNBRgzCpYREwckC8IDywRLAJP%uvx%%Bz5lPJ%9eXs6vGA52ruauIQ66Td6Ocu2fTk:tQk4u3QbN:QzMrcnchI2oPE69fIwKjVhr1y06q6TtEiuFHP8bWCzR202suVslXKTLH5yEGwxseAr7zGCK:cxdWuKsXgrp7EIK8sxI%v3MM2sLfDGbG9wzWy5MNzsxzExLRVxCK2gMSNt5LEDbmOxKq6hMR:vJTEur7cxG3BWsVpxOzFTsd7xt3JC8cXzKbHCs5JyKjPA8nx0ADKFNJey0HTEc2C1AbPztU80S3XtdOu2F:WRdoj2d7b79tt3bve8t564WvgI%TU4bTmLuMk6Xjkaeuv5XztyOZT77Xn5fBm6Cvyxugl87voz:M86DT0ded:9Mrm4:ST5nr17OY69snnIfcu6Tb4Ket:%bLt6vql8Gr85fPy:V:3e:8C%:wAtf5vAmoC1AMZBigFtAloBisNkgd3EKUImBOkCY0WnwpWGawL8xvWDGYeJw6xIKoP4iJhEQ8lQBNKJzUVjSkrF64rDRlkLcAadi43HNsudx2mLoYe4i1UH4Msvh97Kqkf0ScYH50kIh79INocAx1EG7sYZRk8FE4XpQ8OFRMLqRKNBiIQDwKIDaP96gpd%VIITfXGBXzxVQPu7QsBourt:o7n8vyX5BH7oeFH%aXenffI2xv2Sdm89EvXavPB1R:ymNTo8NLTze9708jujNPW7fjTAO231ErsyNWw6yPXM%vF2Njqrdqc6tPceOov33DqxuGT6qTk4urE51LrDuve63Huf%zm8SrtbfXS7Qj5dO69:BjvmwDM77cEp:AdCarxpg288gMSw:P3FcD0exm89ZgctPZBH6f3bCGs%DIj4Pm7JEH7Fia9:DwnTf40KPf:ECm0AdUpdwN5KjUF9CroBkgriAh4KxUKiiuKC4Qr4gxlKxEOKSsUD8kq4A84KmkQaSmpEE0oohDVJlcQAiXXD:wiQg8YIckOqR%IDtEefw6KHqkOzh4HD6Efmw:7IFsQvyI6EdUkLxIxJzQTvylEFGksWhUZL3QWwTGSF1k0tRjVNtcZJTnyGj87ARwdPREdwj4xHjJAbx9uQdgggUJ3IntDTyRvRFUmbEV6KHJGrCpjR9Is:0fSLg1IoTB5R0AyV0a6M7lEDDWhQiU2B0DtNuc8WTdPOXg3VTVcNwsxCjd6LHw2pye4NaMiyDSEHa8zUBhvMgsTEzG%DacvfggtLlgDpyxP:hsrY:mSKZD0DSjN74omCOsEJTTmeyNS4fUhgNyBIPnXIB:p08MdVNBfHCrN:RpnyqgZD8hcGBzGFheExN0VQsO2FFLCoBOswZsSUMGvEUfB2xCUwRsQM8JxDyPD5g5qxHwO:sUuDsrH%g27yd8N0svSDRPOxg2B0LQNHtOgDfTVlw0W2aUNidzMDSzg%w264x4O%uYxDtjpPg5W7D8OaO4vDgXwGA5A8RAOPPIhDgzzRA6v83IOI:SrDnH07w6e9DUPqPR2D4n0pw899MQPyfPODzrzyA%e8q4P%PF7D0DxMQ9v8NAOe%9NDlzunA0F7bMMZuuRC3jpOwpZ58wIT%VoB6fjKAaH4hAF8%EeBOvhTgNv4qICdOMTAuHklwGb5h8BkeiiALXqHgD17I::Pe:v:nvxPv6p83:9xfW0:Mv32:ux%fz6cvsm%hj9Zfmm:r:4IAA%%IwB7:cAA9b3jwTw90QGN:giCJ:4GgoS%QEMe:mjDcz55w4K%tUPOfp9EFn65RBj%gQRRfrUEPH5UxBp%YsPvviJDvf3VA0V9%wLFvZWCgL1mgjf87sGrfK4BGzxkAIb8EgAuO7i:UTtY:vH69H4R%ow9sfodvNE55fwvuWI7TfkU%q24hjnQ%EI5N:fS%F53ureBd3d3IjbINsL2rTZjdiU2AnXvNeD1SvXBNTi1o7S3dYi0RvXw8%j13POeNgszZTZ78v02sHKltymyXvenciY4KfH5OLJxl3l:sUG6D3F3%p8xOTtv8Mc8RTDnPSKwmv4H8Jn:MfBUQB0wfYDJsFHB%TARgqxwOkMjsAlD4bABRGnwKQS:8AaFI:BcBVRwqMWPsOuF1LEkBiKxU8Z5cbzGVzIfBroyeoaistGG0XNlhsVz9wb89ATHN3SMhzQ1DQcyNYSHLXYwhuJ2jYbPtxpGtrdcRl034kYLOHvFxTjxxcv5RMYdufRGOHp:xls7JgbFe%GHdfxrx%m9PwhdvdiJEL62yYH:V4pwP:cK2cCQy7%BI4wgwe2MvoJtjRnDJA22A5QOFQR:DnaE5M7bRYZPRYZnj7eGzpAwx73Qb4hzkPFJKZFxydYR7Iqu0h6LbRJGzBGSpMyfkrjNGVKAzf7SeY4OEl7OhlIuTucRqg8x0RTPaBCwT0oQPY9Xz32PUw6yT35NnQ9cDP7PLUvXDzEK5Y7nCexOj8jtzm4HrI4ExqiN04VhjZYEF41IwswNLgFBzNBAPAx9PrtMPn19S9d8f0uGe0ILizpGy2U5TMsTeJGK1bfUyqw3GApXtpvKGDYgye61p4mcdXEJYjU9SQA1DIkz9N5I:HTyyJf1CAiEdV0IQDWySAl1xoge9hjH:vZnR6j28odet32HJPfLBz64WobleSiGi3nxxmL6doYm%veF17t2BbT7s0V8%:HFL7w1hNE8QgTovFmEu3x8BEt8pwRXfJfEXXyNxF48iURafInEUvyNREa8k4R2PF0EYnxpBEv8dcRxfAGEkvwLhK:70oSGe9SEk:uOhJY7f8RMOykEenqOxGt6d0QtOieECTohhAI6JMQXui6ECXp%BBd6k4R%%vCEevtURIR8O8SXfKUE8X0OxQ%994Uu:l8FSv8ExaC:qQWtwAvF8UCuRerBEoYcgbnGCMIkRnBCUoaTAsWG9UM%xtyDvUcNBD7HRYSBB8DFAEg2RXhIHgXmCHJGB0ixRlsInEahCLSGmQi6hoFIrYaWiEuGlYgTBn9Hg0YWh14FngblRRcGWkSChfzD4YUOQ3dEUEKFQ8UBzIMsQMzCRgAIAZL:AUDUfjt:zP03vzw79r5guvi9t7m%vMK4ivxJt2B7mbYAez006Dp3c9V5yHMH%W9yAHjsMX44PfC:d6MwAjdbb4c25u8O9kYu2fX47ml1fi4%dNXuGPSAbjh0Pm3dc8%uBzOzLjWzKG5ocu5un7KFLxsya%9a8iKv3zHqcGhxhHE4MXGxj3Fzcm2xBPNQMRw0NPDtdNyw8jWIsOo2ejCWdzGwtjewcIh4ePCPuM1wz:lw8M5547ENumRxTTrwcYu7RbII%%SyRPxMcv98u7M3:TBzrb2qdCC%KLSPvqn1OP7rdZp:a3Yyv6d2vb:d9zgADfehgHY3%0BV%EoAr:iWQIe5KoCh%VAAwXnKQSY6GMFM%rrBtDrwQht7d4KEe8yDb7wqQ9u8jQSGvTJFLv1XhdQ9%sZ1vhjHEz6vB6x%%4gBf3wIkr%wySI:2kmwwDpJwECRylIA4oqnQS%KwIG8SxyBywu5AhsL1IKoDCxC6sx8wx0Mg0O7zL3Dhszrw8AMzYQozKPEAwyvBA9MbIQNDBmEOgu1A9WLQQPgCv7DW4pwAwiJ1gLmSTLCdEhKQjMHnsGjxvHBB0YDQN5FEwBpBCJ:6UMyf18CBD8JgRi%qT:xPj3%jr3JvbK9UrxffSN7FjzHOhX8gnkbvFW4Jrw:9za7wfaLe9o14fuG9Xe7RrTL%1n0XvsBtDE6:fOEOs2zmXqxs3E6a7NLOn2zZ3on84b6KPPqOf70Efno9L45pnUvubZ1pnmZdmM5kPcluZ237vm:uL95tXmWufv6snnKe9A6Frzvuhi90bpNvva6db%eOo9AiDrZgXX61MIpOwPC5Htpw2l7iIQ3e%BEjPxvRSf8tEWG:S6GKb1cxo39:4bxfhhHUz6nh7K%7UfQf2iIKr%YCEAAOshPAE3Il0CPyJiAwUiSgSPIREF8CC9BUUgXQa0HwIHXx%5B1UfhgiaH2UJKCBNCv8gPAsYIjcMaSNCDeIkXQ5yJoIPESiwELwp5BFwKxoTKi1OFOIufhWPMKoWKDLVF6gz:RgQNSUaYDZOG5o3fRzFOLgd6Dn%Hgw7RyAzPI0hWj3KIng%%SN5PxIlQ0AOJshA6CYHQZ0nCEEtKNBAnShlQO0oyT8WKf0%DCn%PcooxjxRKFg7pie3Oc8m4jfTJdY1vCSKM5Ej:TBdIjUuJCE0K%kf%iesHoYkbh3bIDIc%Bz7GtoYzBmAFKgY7A%RFyMLihY3BpkVRgHAFHf8:xPi900TkvOnEofvCxLD63kRS%jtEBvlYxAx4tUPj98:DzjdoA4u2:sNatlSDevXpQy01vcL0NVLC0TVpQoN1QkKJ9V6CZLV%whT1o8Ia9c0CNzY6geq2q0H1Nx9B1ffXQcv4ksHTuVCB5zoOgfz6y4HMu8gB0jyEgcy9QQH7vf0Bnf64gbM:M4G8:7BBvYAxQbeAtsGqwQAB1wGLQftB2AHWAmXB5MKzAecC:oHdQwcCB8NNAiXDUAI2w1ACOcNLQi1DQIIPw3CB4MMcgeLCxUHYgqqBhcJMga:B7YFfgZCBXQF4QSzBJMEOARTBP4DGQT%A%EDMQStA4sEfAP8BE0DdQUdA%sF6wJWBrMCsQZwAvkGIAIvB8IBTAdXAUgH4gAiB2UA3wbj:4EGXv8LBt3%hQVp:vwEBv55BK39:gNU:YcD9fwRA438kwIa:PwBl:s%AQD7WABW%lb:m:lD:s:4I:309:37BvfW%gD2rvna9H74kfNA9yby9fWh8KH0DO89827twPHN6ybwMepz7qHop%wg58DqsOW46FHkjuYJ40Lk2OHN4cDgJ9%:307c1d5I2QXeINZO3evStNzJzzbc1MzP2xTKe9uKxzTbM8X42hHDxdolwZbaZr9i2s%9JtpkvOHZKbuR2R%6NdlAucvYkbhV2By419fot1PX9LfN1j64SNbKuMnVm7lS1a%65NQKvH3Ur70e1KK:xNPhwXHTZcQl0yfH39ITypbSCc1D0urP49Gn0nnRQNUL0bjXmdAL2iPQN9yuz0LeRc824PbOHOLNzvnjzs7U5fbOq%dCz3jpr88z6zrQ2Ozg0Gjum9Hh72rSP:FN04TyR9S081PVyvRu1rn1l9d89tbYG:cv2qH3odsX%Crdi:jR3hv5nuDq%ZriCPvC5HH8Eece:oPpCgAV7C8Cw%6CBIfx9QZc9H8JPPcRDCP6ng4K:RkR7f9%E8kCzRWcBQIYZQgUGiULARzfDc0dkxB3Hz8T:SDoFWYimBjEI1IbJCUSHoUm0CDmJ4MjQykmJpgqsyjUKyEr5CxtLcYtmC%ELp8xJS9%M6ovMzUUML42ajAZOKwwOznPMBg6xjCtOo8wADswMBg7qS:7OvUurToPLjY6:CygOb0r8ThNKi04qihZN9UmeDbNJI81jSKiNA4gszNRHcYyXxrfMUMXAjEPFDIw3xBzL8sNxi7fCiguGQiZLX4FGC0VA6Ms4gA0LN7%xysF:VorVvvsKtX5fSqC%AoqW:eTKWL2FymZ9ZYoA:USKKH0jCd29Acni:SGJuD0CSZy9ZIlQvYfJVf3rSS4%DkkYvq:I0z8QSNr:roirwAoIvoCgSEtBcMgOgfvHyAJCR:gChQedwwPHeAN%hscD9waMhDDGSwRuxgXEskX%hLsFtoTHxazFF0VghWnFEwW%BMOF0oTwReWEloY3BHZGCERQxlkEJQZpA%8GeEOtRkgDoQZZw03GbcM1xgODHMYdAsoGPIKGBiQClYYSwrfGCEKqhkNCrIaEAr1GyoKaR1VCgEfjAqyIM8KbyIcCyokdQvVJdkLaSdJDOIoxAw8Kk4NcyvnDYYsjw55LUMPSy4BEPouyRCLL5wRDTB6EokwYhMAMU0UbTE1Fc0xFRYcMuYWTDKgF0kyPBgQMrkYqjEWGSQxURmAMGQZwC9NGeouChkDLpQYAi3cF9kr3RZ9KpYV7SgPFCknTRIuJVMQ%iImDo0g0wvnHWQJCBvjBu8XVASeFLwBFREg:04Nh:xHCfX5CAVu95oA9:QN:JPycfdG8OHyEe507vbrNur26SjmEehJ4kTmnN6P5CXb7%Le12DhwtTd39DRZN4Oz:TcgMyM2ynKK9oLyNDYJ8Z713rELtYEw%zUyMG509DAmtIfwJPRr7%l0IK:0s%gvxzPEsCCztPAAM7bwZLNH8M0zZLE48wdxprMocdSzA7JDMxhyszLo8uSy9TMXsvyzS7L:c4Iy:7P9cr80APL:dE5ywfTmcsc1CLMOtXUzF:Wr82O17DOydjRzwbaCNE3203SVtyh02fdBdVo3nXWTt:v1w:gctmz4ALbS%Gg3N:hR9524vnfJuO%4RHkn%NN5Znl2eak56Xou%ms6uHr6%wV7lvvU:Dq8ZPyjvTW9EH3HPf7%WX5svys%1z:8f31ATUAdwR7At8GwQQqCQQHWAtGCWcNgwtUD7oNJBHnD98SBhKLFBIUIRYDFpcX0hfqGH0ZHRr:GicbTxz1G2UdghxDHtcc7h4GHWYfER2nH:YcsR%8HIcfahwoH:4bjR5sG64dqBqOHLEZMxuFGKEZIRfdF34V6xWdE9oTfBG1ERwPhg%CDFMNswkkC7MG:gh8A%QGEADZBHr84QLG%P8A:fQ1:yXxhv1Q7fP7lul9%gfmIPmi4tr3ZN%v9lXcn:V52af0ztbB80:U5:L80RXy389J8fnNf:BOzLbv5crw7sbJLe70yGztb8iv7DrI:OtfyFrr38jM6rHJUerTyu:pT8yu6TDOkOlu0JHp%dKq6cnV2enZ2BzqE9xt6lbfxeqL4iXrreWP68LoAezI63jsu%707JvxeO1t9AjuMPeo7uH5Xu%G:C7wIf8W8bABE:IvBCLzngZE9P8IcfVKC5:2cw3E93cP4PhaEfP5GhP7%qgU9Pv7FeL8HhfL:SQYsv4VGZL:8RlsAMgaSgG8GzYC4hwuAzoeLQS2Hy8FUyEzBg4jOgfgJEAIuSZDCZIoSApsKlALRixdDBcubQ3bL4IOjjGeDy8zxBC6NPQRMDYwE5I3dhTZOMcV:zkhFwk7hRgGPPAZ:TxYG949uBycPgweNT9VH68:iiACQKIhGkCXIvM:aSOZPxskGz%rJHs%FSW3PVwl1jyBJeE7gSXVOlglqDkAJVE4dyTMNr4jFzXZIi4zzSEQMaMgvi5iHzQsEh5uKbwccyZsG00jKBr7H:MYchzPF7MYvRbMFL0VzhDPFLoM9BOQCDETXQSIEjUA9BEi:G4RHPj2ECT0kBBE8D4Qhuz%D%zozQ935akPLeKQDxXfeg8t3GUPdtlRD:jWQQ%81C4PwdIWDwPR%g6Hz%EOVs7KDm:NtA7KzJwOaMyJDlfMgQ6fzIUONs2RDhDOoQ4sz7EOidC7DhbSuw62068OWNWXDvzWcw6l2EAOTdr%Dezbrw2C3VINDd:oDI7gdgwG4gUMfeOcC:XkPAtq5ukK1%ekCjvpbAqW6jwK4esOChPt4Qku7rIJOO9%CSjwQQnv8PoIiPGwCP:xaghi8icIsfLoB%3ysgcq84oHhvN1Bxj0dAfe9IYH0PWkB%r2yAcr%O4HjfkVCAX7PAiI:GEIC:6ECIX:qQjuANAIPwL2CHEDGAl9BDkJYgVbCSUGewnHBpMJQAegCYoHpgmxB6cJxQeeCcYHggmqB1EJbwcMCSEHrwjMBjEIbAaOB:EFxAZZBdMFrgS2BPkDbgM9A:4BegJtALMBvP7sAOz8JwAC%2T:%vif:tH20f2E9O:8GfL3%53v6foX7cb5ieqH%PznKfd65bT1DuMu9L:gkfKP3tXwh9z87qjaEu3v2BzrW9cV6fLV%%a61N:krdPY4sTS8eD60SbfTtF03cDQ3ttM0Gja7s8V2aTP5ddtz9nWQs:t1RzPH9X8znHU3s7t07:OldOXzmXTaM5Z0zXOdtMCzsLTy81A1I:N89RRzebVEs0g19DMndiOzE3aScwo3P7LLt6ky1zgNMug4rDK4uQayhLncsky6bjIS%vxx2DtI8do71HGWfF2xS:zlsTx9LjDq:bfwmb4C8Ij%kLB4fuOwJ799b9Y:3O:CwEEv64Crb49BHK%uwVPviMHQL5sCES%kAlgvpsKl76gC%e%pgxSv6sN37%rDpPAtA9yweAQgsI%EsvDzhNOxYUVBMdXF%PIQxnpykwbFc1wHV7PpB%80dohLtQKJLnWMSZf2UsoGdxRKuLePCzB4Q4uuOTHL8HnZDHU6t0y7%0xNBbxbDVG9JU2ePeiN6b6hTjU:Tg5:ADGORUEPDoZB506BgriOtsMAjuPDwI7HhLpOoUUvzrEFoI62hgyOsgayzmPHE05Mx69OLIfHTj:IGk3EiKYNu4inzWaI3Y0FSQRM18kaTGGJIYvmiR4LaIkRCufJOMomCRXJpYkrSOaJPMgnCQtHp8kVhusJG8YySR:FfQkmBInJcYPWiUKDYwlYwq7JdAH4iVQBf0l3gIMJnwAGCY3:ikmGvw%Jij6WyZe%IMmvPazJj313ybb8wQnmPIkJ3PxPidu8FMniO9mJ8vueidH7oknBu6SJwnunCdM7qknwu6yJ1:vsica8KQn6fCGJ7fxTSdq8vcm9PKBJlfz7iWb8z8lyfN3JOLzliPi854ix:OSIZzzdCBw80UfTvMNHjfz3Rwo88QbH:PKGh3z8hkm8zUZN:OGGD7z1Rcl8xgX3:JKFnHybBXt8YUUa:GnEwTx2xK:8BwSnPBnEaLwwhDj8DgQa:HODzbyhw8082oPX:R5D7z1tg9V9yMQKvm4EDD7cRFT:U4Siv9SE9MBcBQhBJIVZQa1FpgI5Re%CisZ1AyBGtIO6xu3EHIdjxIYH1sUzyAPFoIilhcdJN8YkiXkGd0mqxr9Jz4b8CigG7Yp1BtZKuYb6yrkG2orzhvMK50bFCxUG0cs%BpZLIUaPCzwGeorPRlgK3MYjCqJF2Qpehb5J1AVWyYQFIckqRJ6IgcRQCAlD%Id:QxXG4AKmBipB7IVkAS7ElUBww8P:tgMx:oNCoT3dgdO9B8FMvEEAzvuEAFm6yX:q%gz:QjmMft54wv56eCv9j7eH:Rv22nxfNih7nHVBeyO0hjqYdBi6X7PC%oX0MDr3NHh7S3Uw%9X1s3wx9ed8CTYHO9b13rsl9Ua6TLTgOWn0DbidM6p3wPNFt6SzH:dKc2p3ZXOON540MTeZtL13gLUo94j1QPe:dWK3QbXj92O2APefNqR3n3c595H3r:eo9:l3WDgSdxo4BLa09%F19fe89S53bPSxtwU0T3cQNA93DrQxdzl0MTdBtIb307TnOB51B3iYtWD4:bVs%Qs1pLlGtYi5ufVhOaw1dnmgdU752nVx%d51Znou9W16TXWFesE18LsT9jS7ibaUPF63C70L99c9yfi0PpP5Xj%meg0Av3r2AV870EJEPNlDKT2VA8N%h4SFv3DFKD:LxekAUQZLwPjGmYEFhx2BQkdggbkHYsHpR6BCCofVQlbHw8KSB:HCigfmgsuH5AMZh%cDbEfrw7yH8IPKiDEEGAglxGCIDMSdyClEicg8BJ2H:kSRR62EqYcTBLlGvIRSBnGEeQXzBGoFv0RhBVPEm0UqxJNE:gS:REaE04Q7xITDkoSMAsJEasHHw%oA5cMWf%SCez6RwaK9vgCU:Lr:2fuX:3p6n778edT%oXlxPmT45r57OGJ%VTgUfmk3tH42Nzv9:jalvb52Mn01dbS8sXUHfEv0%zvV9Is7ynSqe5x0lzuItNo7mDU6O5L1sLv09iu8LPbXvGQ3p7xGeFr8SXj1fC55Obv6eWe7sXmEO1e52vr1%fh6Uroi%jD6IPnVun85kHqQ%fl65Dohe7k6iTy:O169m3xHvvJ9KX:uve4A:n5DQdH%2cJhvuwCtX6CguM%ccKEfhBCr72xgnV9ZgJhvXxCfj1DwtG9yUNYvkzEPr74xOV:qkX5AApG:QCax4MBbEhUQcfJaoJoSjiCwcszg0mL0wP1TFDEPUztRCHNccQrDazEJE3qxBbONMQKDlFERU6DhI5OzgTpzzCFF4%pBZKQMcYQ0IGGx5EOB2%RTEfFUfKIBVI6iGrSI4iyUjGInVIpCK9RyMip0YlISBFhh8LQ1EdbUDGGnw9QxiMOhkW7DeDFNM1phNfNIAThTPkExIzkxTNMlsVjTIRFiYyjBZeMa4W:y90Fvwt7xV0KywVmyg2FJglIBOGIhMScR87EVocsxBCGXkQLRZrEBwTVRAGEA8Q3AySD5cJ7Q47BkcO3ALCDZX:dQ14:GINkfmEDej20w2D9EgOZ:LlDpjwuA8n78wQG%4HElLtLROW7B0U1OvoFDLrsRXb6oIWzupHF%Pq8xf96pAYGOsrGUPryBmb620aOuwmGyzt:Rtj7u4cve:pHRvx0h5v8o8ftvMBIPD0CiAO9pMf7vaaHm73OR2K94sbWPefGfT2hBd49lUVBfY5E8D1TBG%9ZQP%fUNDlX2vQzD9sALU:cwCx34:gob%fMKJvreChv7wQoE:MUK::z8Chj%SwtB:4sLcgCkC68BiQvxAjALIwSeCjYF5gkkBhcJ7wYzCJcHSQczCI8G8ghWBgsK3waiCzUIuA0uCiwQhwzKEgQPZRVzEdMXohPeGWUVShubFvAbOxfKGzkX4RqQFj8ZVBX9FrkTWhT:EagRVRAoD9EO%gyIDSgLkgy8CQcMuwjnCxkICQyuByYMPwcDDJUGiguTBcYKNATCCX4Cdgh4ANAGJP67BH77NAKH%Ev:SvUd:NPxvPgl7jD1PuqC8S3mye0P4iTqAN6x5g:alONM1vHgzNLb3qPPTt3YzDLcaspp21HI1tp3xlnawsTd2SDDT9mMwaDY:r%611i%g9ZnvN:U9rnF0vC2V9CDs%TNE7C8ywOtC8qDquDImqhDyFGnOci0prXIyaaZyX%nyMq3qCXMTqqMzRms0s70rdnPza%g0KSxPdF%s7:RWLUg0hi3RtKhuCXS47nF0eq6MNG9u1nQULwqz5S8o82YvOHLkrwNyre8S8grvcfGCL6qxWm:CMVbwc3EyMPNxIPG7MRkyS7FW8ydxVjPI8Yl0ojGfdSqxkbWosay16jGD9nZxoTaI8cI3GnHht2lxwbf28ee4BDIbOJLyIjklcj35vTIqulryYrsA8qP787Ku:LcywT2Lc1S%b3Oj:yC0K7:b9KmAnTUeQWC1jAIkNjPCpjaVA2j3L4PvN4aEufgcxQU47wWPeXoGHrnARv16Ssdx%yDH%Pv:iEn830kgPbrJvH5SCmK:ZorRQHcLf0E:C%ACOYxrwuIM30O1zTjEMs13BJgNmgUljaUFXA2hhYENnMXfTWMGAo14xnGNG8btDQmHdo0Dh84NSUhtzVOIyY2XCVXNi4nNza5KMM1%yn3NO8qyDOFKyoyqysUMF0rki2zKsYq2CngJ:goCCU8KGAiyycRIMsnRh5QKBQdUyloHLIqEhw6LNobtC2TGwovMhtHMMsagTF8GrIySBq%MxoajzTfGSQ1lRmENUIZrzXiGKM1axhbNdgX3DQpFzA0XxZhM4MVfTKiFJEx1ROuMDkT4C:aEiovqxKPLpsSEy6iErYtwRJpLfQSFS01E6oshBMbLOITUCs2FCAqSxRmKOUTGibpElwjchFcIMMPRR0bDi0anQwoF0kLVxQYCtURAwmqDwUIxw0iByYMaAbQCukFxwmgBfgIegVHCHAFmgeRBd8G7AUQBocGNQVcB1wEYAiJA4QJrwK4Cr0B7wurAB8Ngf87DlL%Ow8u:SEQH:z5ECr70RFo%sIS:vnqEwj6WRWE%vwWZPu2GKD8gxo6:nMcGwCDHhgCjyAKBHEi8gUoJOsH1CUJCosnQwxGKXsO7SqfEG0spRK6LYAUyi4YFpAvUxcGMDEYLjC8GAUw:RiCL:EYni6XGF0t8hfHKxUX5ykTFsUn9BRhJbYTsyJUEsAf2xCqHFgPkBnNDXYWNAxLE5AKDxDsCNgMUQe3CbgFqwYgBLQDkgLlABcBUP6s::D7T:62%Qf9lvfg%4v12vqJ8%j5ivH0%JDv6:eh7b32uOtp9cfp%:PN54ny1%Un8f3j5%9W4tHu%eDs7fXfQu1M39:s9d7I7Nze6ezu3iXtHN9f7V7fiO2o35ft6t%A7QfgNO3f36TsZN:J66TeoOqy3SnplNxk5zjbW%WW2Srjx9f44ATW796G1DDdd9PU2%vS4drV0jzaBdO12UDTG9lV01nYNtNz1:LShNal0pvVYNK41CTS19Pk0frSnNEy0k:RiNED0fnQs9CA0FvQG9D5z8bPjs92zxvPI8%qzs7OUs6BzjDOSc5gzjXO985Uzv7Pqc5y0TrPSdMP0H:VNNEK2KnS2tpr1N7dcdYE4abYNeTn2kfnC90K6v:eZezL4GruiOJD8EXkHfIH5hf00OdD9qbpo:iM6yr7hO3G:Y:vawCv8R0D5vPcBS:2nAh8%EgLvfrNDeP8HxDg:jcSqgASFD8CtRWmAyUX5QRgGPsFYhngBigaiAezGu4HBRsRCCEb9QcNG6EHyRobB1EacwajGcAFyhgTBdQXbwS:FtkDfxVfAxUUFQOTEvQC:xDaAk0PqQJ8DWgCowsuAuEJCAI:CPABsAbXATAFvQHEA6sBbgKpASEBtQHI:8ABVf60AcL8gwEO%zIBQfnJAGX3SwCD9bX:pPME:9fxN:4s8FX9ou5s:Cntivuw67n6Per:%eboX:m859:4wuaD%PHlR:hB5R:4q%T79zTk3Pft48n38ePG90jkzPfj5NH3reXS953m0fex58333ejC9xDqqfc663f3Tuwo9z7tv:YK7k32zO7k9avvlPXC8Gz1FvKB9aLz5vVc9Zv2OveO9yz5ofgj%7:5G:3g%hb:AvwTAR39DAMb:vME5f6:Bnj:agjf::UJIgBkC0MAvQxAAAkOLQBYDy8AxRBwAG8SCwFwFAgC3RZiA78ZEQUOHQwHriA4CWokbAv%J3gNOytDDxEuzhCKMC4SsTJyE4w0pxQgNtoViDcZF%A4Zxg:OrsZpTsIGwk9RRxlPnIdsj%LHulAjR:4QXcgyUJHIUlD%CFqQ4IiM0PmIrlCJyMbQkQjZ0E6I5pACSOnP7siiT5fIkY9%iHqO4UhejrsIOg4GyAQNxAfzDThHRgyrxwRL5Ab5CuFGrQoihmUJZ4YjCLIF6AfCxfRHGwWJhrtFacXiBVOFS8V:xLbFJ4QlhQrDm4UuQtiFFUJYBT5BlMUlwQ4FC4CGBTH::wTav3mExj70xPW%L8TqfauE5L0oROG8psTd:CeE1vushM17OATFuo1FBTosBQ75k8Vh%QYFu7iExd14UAYKuCGGRDfxBob3uYbPN31HHncAB7j2wofgNsFIEzb2CBC23ghXtvrIZjbPyLZ23YiBtyKIgncbiLT2yIiZNuwIcraICEV2nggUNm3H3:Y4R6w1:Qd%NbrHGnWxRsM1osa49VGGezV%hch1qUWetZLFfHW8xOE16ISMNhXEePYFRCP2ewOPdr0DRPbQA063NcMxN2yDK7fyAzv4RQNhOSVDWXnRw6D6h4Pxe0NEBLxDxFa9CgSlvddE9L6tRQb:jMWegHaF%cEnhlLCG8bkAs9HagO:R6SEaggTBQqItAWcyMVGXYkERsxJcEcnCUiHq4lLx9mJeQfyyRDIOojUiDJIhggayGYH9wf3R42HvodmBwKHRQbIByoGUAbRxhiGuIWgxlwFZgY4BOQFx0SThYTEL0UvA3cEicLthBmCFIOhwW0C5cC5Qil::wFw:wUA:b5QwA%95D9nvQF%xjyq:iq74b2Ue2T9ArryPLg6B7x3%aM7wzlBO5h43rs2uHv6nbga%k13:jnFd6e5hPdYOUp3D3kW9sz46zaPeIZ2lThkNlt4PfYet9A2HLeeddg3b:WW9wn1nbbt9W92mfVNdot1eLZAtXJ2evU69nt1EvaC9Xs2jrVx9ti1cTcctXG3WHVv9411bHf9NSh4JzUhuEj1EvifdPn4qjSYeOp0c3jg9A55DbPquTAzRzlKMyF5XfK3uWzyCjm4cZo5gnFpuY8w%7miMFP5%%:0%dqvn7o:LxM6a%7QOqLuljri7mM7KK4z%3XtyHvRLeb8AS3WfIdt2P0fLe19gO4RvmjuBv8YLk0:0i6iAJfu:8FnryHCf%9Eg2Ev5kQMcELFAXDUBcDxVsaMMcnHY3Juh8IzBgikM5EJBjRQyai0yAoJ9bkKZvYlCvx2istJ92hLkHf8i9D4R8xLOMnMgHlCDPP5sczpehwNJXqDTWq7KE16%4rNlbxrDbk8yY3g:aPNyn52zfW%wQ4kf4LOGcB8DdXBLA3WQdHN14KuDZnDQ42ehBXNZcTmzSrFtgznxkPM2gcQjIEH3kxdiGwMLoj2C:OJeIutSfLLXEpmCwGK1Ardiz4KcktlSgELy4nKzDPJUExgyRLMlAjVDM5Imk0PiGUNVwg1DaNHx44xB5jOfYdlDoYHaM7IhyJPA8bRT3kGd49rhhZPnkXvT5LFgs:JhVKPwwUgz8BE7w:BxL4PxwRNUA%EG5Abg%eQLAOvEABDrxAWA2QQKUMMEDeC58::ArgPvsJ9T3RCNs8dweXO:MFMzpUBLk4pQIpN%kAiDUi:9wzUv0oMnr7ZjCW%X4um:dbLIT1%ClX82gnLvHBJCHvFSI27W4fZuvWHKrpVxoD6PwXeObLFRLlzRPZ4wcS3uJ6EC:iIA:T4fIN0OHrDCTiBgzQ4kYLzOOvCgrlRQp85ggKFejxCc7p:Amg6yMKfu1eCljvqAoi8f8K1PJiC2r0ygvi9TQMPvehDH:4GQ2l%Z8NtPovDrP7xw6u:GMPrP36D6n%gRCf:%0QhwBDEV4BkhEsAvIR:wJsEuIDARPKBKkTogVYFFQG:xTTBpcVHAcYFi8HfhYOB8YWvQbxFj4GAxeQBf8WtgTkFrgDrhahAl8WewH5FU4AeRUa:9cU3v0UFJf8NBNH%zoS7:kjEY748g8g96wOn:VWDQ707Aty8mQK1vC8CD:v%gaz7TMFPOyHA%3qDQLQ6csA4%i4:xzoxv5z5:b96OZJ:YDmwvxB5ln8L%YJ:EfmzfuC5qb72%aS%0jnj:u:55n7O%iq%7rotvtD6a770%mH%2TqQfvu6tz6aetX%s:rrPkY7Nj4QOzV90XsofYi7Dv11%uo82Xr8fHU6h7wMeo17oXpQuzb6FLqN%hv6JrnneYB59vkaeYf48:lWOEn5XrfauSA3ZLjbtug4kvZmOEY13:g2dRY35TSLd5V0AndKc7%2x3MFds1ylbae8jG2f3GcdnIxWXZ4cSv2UfEUNr4w0Tb7MOF3BzEC95:xNLfFMXR4djF%%POxkLm9seb6FDJA%vVynLtfMze7z7OQfIb0JP0EtLL9hTU3fgP1r368tdm:LfZ3f1g2zD:89xvAHfeqgHw3%cCYeErBMfidQUg5MEGb%ULCLjmSgkB6HsKTemYC5fqnAzd64ENHO1FDlDu5g5z72EPhvCvD47xzg%P8sMPiPORD3T0Ow9N9cAOEPYhDrr2Xg1N934My:eHCzT4ggqH%HQJy:hiCAf5TwdA%TwGePkuBa75KgTh%SsDBvomAhD6EQH2%en:wfm4:oX5kP1b%Yf8UPmq%2v5%:qs%XL6DvoC%or6nvkU%z75ovvb%Cr8cPit:P73Kv2D96X9%vYd:mX2jv7I9fL%K:VD:430gP:t863:SfPJ:6Hy1v:28dL:SPG1:5fweP:l7xz:Mu%n:n7uHP7H7XH9Ce2U:Dvsfvtc6zz6c%rl%I7pkfe%6E72Degd9X3n:fMJ5:DysOb78XLmI:FN5mTwRea%72DmNO%o5s7uH%eK7sPnZ%6Q6GDuhel17qLqpu7p6:DuWu1O7:XuvO%18DnwkvLD8If0WPGO9vXxqvic8t:6TvMz:RD0rP:m9EgC1fUIBeH27AcM%PAKVfkODr:6PxFT:H8UFf7MF:7:Hhv8AWoe:QOjIfQFvyTbB7gnrAmGKl4LIC3gDHovKg6NMT0PYDMgEP001xBsNmARtTe8Ed048RHpOQgS3ToHErQ79RFqPNMR%zyjEWQ9ahGhPS0RrT3sEIY9pRAtPVoQpTwJEO47tQ8IO1wP9zkAD8E4nA5uNykO:jWgDW80AA3AMksM8zB:Cw4vlgoRLY0J%CprCMMoQgd3JiIGHyQRBcUhDgRsHxYDGR0vAtQaYwGqGLoApRYzAMQUzP8FE4b:ZBFl:%QPb:%ADqP:MQ38:%4LcACwCv4AeAmnAUgIawInB0cDGAY5BBwFPwUvBFYGTgN5B3ECpAiSAdYJrwALC8b:Qwzd:n4N9:2%Dh:9BRBd:FARtvuUEif7xhOm%tYUIvq2FYz5Whbc%MUWFfgDFz:3JRdm9jUXk:U4F8z0LRcT9A8XavPgFtDynxZG8ksWx:HiFU7xYhXa8NEUbvAzFAvwjhO07%QSbu80EjzvfREi774QHu:1DzLvIw9g70kOqu9lDQvwcwx%8HQLAfFrCpvxZAlW8mkIO:N8B0r0mwZ69coFxfYWBTD4kwTC%U0EhPtGBHL9dgSF:9UEswFlBfkDKAZQBh0Hswg8CBcLfAl0DdcKww9GDAASvw0lFDUPMBadECAY7BH0GRwTqRsqFDwdExWqHtMV7R9lFvsgxhbJIfYWTyL2FoYixxZtIm4WBCL0FU4hYhVPIMEUDR8TFI8dWRPdG5MS%xnDEe8X6BC8Ff0PZhP7Du4Q2g1TDpUMkwssC7MIowm3BfUHoQIZBnD:DAQj:NMBxPh::1:1Hf0D8rf6ue5T%ILr9vVn6Kvzc%V58a:iZO8e4Gvtvd2Q64fb1Ol72TjoldfB5s3VcOUb1ErkeNJR4%PQh%Jhz%rh98154anMMOF6ywvhaMoD4XHJC%GOyBzhuMcv4e3GQ%ErxlThdcVh4cfEZ%EgxGjhgMNi4erCU%Fhwjjh48EM4WrB0eDxwITgdcAj4Pa:qt92vxnf%L5w3oC%s90Svufcrr0L3Fa9INsJvSfayrwe2Zu8Cdh:vOrWeLzE1Yi8mdSxvGjT87wz0k29%tDAvcHPTL6Izu6%Uc2mvx3MecDzym7B3MmOwuHI3MMEyFrFQ8cJx5nG6MgDxvbKgcUvzRnFks:VxCDSv8Tc1OHEyNc:xeDa2cUc3q3GdOG5x%Xk%chs6GrKAewFzJnvw80q853PrfaO0SD6j9N::ZvVxgCr1:QDutkJB8XbBQrI3eoMvt%1D6ThZBJ64:EUPOVUF%rmhBmA6Hkb:%kxHWrrrR7F7OofEO7jIE7vlyGK8Awi0vFSIjbzeiK89I0iYfaIIh34ZyLt%S4i1vvpIdn9oSH0:1shHwIWIVME1CCNBpggyAhmIAMLQSA6DSkgaw8eIJcRICDAEy0g6BVCIA8YXiA1GoQgWRy3IHYe%SCJIEYhjyKbIYck8iFzJksiWiihIkEq8iIvLD4jJy6HIysw1CM9MiokWDSMJHM29ySFOGQlgDrMJV88KiYfPnsmvT%9JjNB6CZ2QvgmfEPlJkRErSbQRFQmKEXhJU5FWyVFRcEkDkURJKxERSMhRF0ibUNZIY5CPSCGQQ4fWUDQHQo:iRyaPTsbCjzqGV46lRibODwXxjbfFeQ0ghT2MikTADHZEQYvlhAJLV8PBiszDvwoEw3pJvwLzyTvCq0i6gmFIO0IWB79ByccHwf5GVgG0hewBboVLQW2E9gEzxG3BAgQzwRmDh4F6wyhBZsLVQZ5CjMHiAkzCMgITQk4CH8K1gfJC6EHKQ2WB5sOsAcYEOoHmxE%CCATqgikFCUJIxaoCZYXLAr4GKwKShomC4kblQu1HPMLyh1BDMseggy7H70MnSDzDGshIw0YIkcNmCJeDeIiaA31ImcNziJeDW8iVg3cIVoNJCFvDVAglg1kH8oNXx4JDkAdUw4NHKYOzxr7DosZSQ8:GIwP7BbED5QV9A87FBkQ5RItEJQRLxBKEB8QCw8EENkN4A%0DLMPlgt:D38KRQ9wCQQPbAi5DnQHYg6EBvsNmAWGDasE:gy5A2IMvQKzC7kB:wqzAFcKvP:ICd3%UwkY:vIIZ:2fCMX8WAgy:B4IsvvuB0X7wgfk%pUHiPplBy:6LwfW%fEGfPmnBh35Twa1%OgFP:hvBbz33wQn9zIEffZoA7j1gQLR9HsByPNTAJ3yB:9W8ZX9%O8E:IjuWPoM7Zb4iOvD9v:p5fR26AHz8%Ye8X7lP%8d5Gjt0uKX65zhyOl14PnnXN8q5lHeXuRX3ZjibNzX4I3bFd%32lDd69mK2yvZy9mA2B7Y79eI1n:XEdU4173TIteT0kLXmtGZ19XQJNhJ0N:Y%c:H2enP1toW0Avcf9Bi3R3R3N7v0Xjg8NIw4h3U:ONx1djl59bD533Yvukr2sbr59vX7afd6e9h3:rxEeEH9LLiEPZA5A74teX%%Q:n3:tN6Kz9b%lf:3nq7wBu61MCUuyKAyvtlwT67XsFwO45Bn:vzwY58EAH7:CMB6PxswdU8rUHAvOUB67zVQdX9P0G%fSTBpH1GAYe9o8FoPb7BBX3XwR6970DyvcXAwv4cAI:%M4Ba:gxAZD4mQCy%AQA3Ph5:xr5::5w%Z7%3PlT:lb6Fv7b%t39Zvuh:ff7YP2I:Bf9G:3I:LT9evxd:jP8GP:4%%X:xvu%AJv7owFz%5MCTvuIAyz7ewQI%2QF3vpBBqv6FAdv%toHKvqKCNn5HQl7%ZAJDvnkCZP4GAoM%CcKefcPCtf20Qki9m4JV:XjCHL0LAh180YHX:IzBjfx9gT9748DtO7%AV7tSgAC7IP%rOq6:Gzp%PpI6D35RueK92Xm4:Wn5VD0D%XX8qHke:Fc5DvwQeQZ71DkGO6J5Djt6%R87Hfl4%st5m7rDecd6xbo6%pI6dfqp%rj6jfsFOv67W3r7u:w6wzynexS9Hntu:aJ7kj50O:2%0rxwP7z8qMBx:SdBMP2qgfk%McKIvvuDXb9GxHW:0wUOQJ7F5UEnhrgBq8dFQmlIDELfyMvDTcmCA:EKLIQHiskEj4tXxMgL2MUwzA2FR4y2hUtM1AW8DObFm40wBasNMMWrzSrFnQ0fBb7MzkWRjPmFVwyhBVDMRUVATCcFJ0uGhQcLZAThCv7EtgpXBIcKLQRViYIEYkkVhC7Ip8P6yDgDh4fHA5WHVkNmBufDOgZ8gtEGFcLqxbNCiEVWAqsE:gJTxKwCQsRgwncD3IJvA56CaoNmwmoDNIJtQshCtIKiAr:CQcLOgmcC4AIRQzNBwMNHQfVDW4Gtw6%BaMPDQWWEFkEjxGgA44S4QKPExYCihQ%AX4VVQBoFlv:ShdP:iAYMv3oGAb8pBnR%lkalfkKG1X4tBsL908ctPXSHE70OR3a8n8dWfGhHcrvnh0y7nodmOw6HQTr5ByA6XgcD%j3G7XmZxt15c4aTuQwGkHjjBlM4uIYbuEzGK3ghRcN4NgWkN8nFjTfcRX33rUU2d75E9rePxP63oYSO9:KEZ:fEBEt4FsQ6eCvD9HhDQ:e4nIOC%TiDVblYw275vkMOOilDMXpaAxh60cMEe1GDNvuaQzF8KwM0PIJDfj0eQ089:oNmfmIDgr8HA%I:rIPCwFCEI4DyRAMBkARfgilEdwK9hEiDTMSSw9aEk4RahIhE14SuBQ1Eg0W8hEkF5cR:xchEZwYkRD4GOgPEhkrD%0YYA6PGIkN:RelDD4XtgtYFsIKUhXKCTAUzgj1EsYHoBGwBjIQhwWwDksEGw36AnULlwHBCSUAAgio:j8GIv19BJP7twL6%eoAWvgW:7r2Q:0g9Xj7kPO6%QvyCfiS8GT2Je:M9MPtRPNq7M7xGuto8NTpEe%Y6MbtaeeL7EvmX%s%5UPqReQ46V3jO%iG4k7nvuFv5gbhnOVd4NPkw98S5DTfV%Ou3qLiLN7x4a3dR%Ew3abgs9wQ4DXcgt%x2:jeJNtt3ona3t3e2UzdI9m63FjYK9x815zbjNYN24fVgNpv1PnZRdN92QjSDtm20KzYTc9X2M:ND9hBzNXXqMqq1wnJj9dpx4fXzMWW1zfEvterwv3XKcFR2LG:t9hFvjDZ6by82Zy7WNpgugfbN7nT2ya4xtw0t%fdYrY037O1p%AotTriwbTq44S0ueVxtKPni7Sm6dO0vetMtent9bUs8My2hPLNt:H09rh090W6DPq2u7P8Q71j:%W%EgKXwL0EVsJhBx:E:QnrxYkMtMf%DnfJVhE2y48T78yiFaHOhhdK0DIZ6tGhGoTT2RsZ1d0cqdatHTDYRx6u2ageJNvSHpXcyh4E3pUedN85HungwB1u4jYdB%SnHLflGRx:55MbXOkWG0:rpRpY7UMaeO:yGa7xsxn684YZWfZtGcn4aBlG%3cZz:2bGWYA1RkMAysawgWeGoYILRtaC9MbOw6JHCQRTR0OFB4e9Rb9HtUZ5x%sHNkgeh:NIT4iwiL5JLYjqyeqJFcqnCX9LIgmmS9nJyUyNCicNOoo%zaIKT45CSphO20qXT2xKjA:1CrYQNgqUEK8KpVDgSqlRCEqfEWVKR1G1yiLRuknx0bSJtJGlyWrRjwkVEbBIstFJiEQRXAfJUSlHQtDyRvCQeAZT0DqF7g%7RUCPe0TNDvvEVE59Q9fNwIOYTUaDF0zQwpWMX4ITi:LBkQtKAU8K5YDOCkVAjknqQBDJVL:WSMV:n0h9:yyHwD89x0w%0wchfq0Gv75NRmd%dYXZPmYFlX5fxVw%Y0UsfnGExf6LROj%sASUvt5EiH8URIM:UISEP5JEir:YBJWAIQSjwGwEs8C4xITBBgTVgVME5AGexO7B6ET0wi%E9UJ0RO8CtYTgAvKExYMqhN6DHkTrQw8E7UM8hKUDJwSRww5EskLyxEdC1cRRgrfEEsJYxAxCOYP:QZsD7IF%g5YBJcO%QJGDp0BCQ5KAN8NBf:HDdD9vQ2q:L0NkPvGDYD62Q15%foNgPgoDpP3Xw6z9p4O4vXiDiX1Lw%C9IUP:fPlD5TzSxBD87cQBvMlEdrylBHB8v4RufJeErzyrxLG8usS0PIRE9vyIhPm8h8T9PIQEwrz:hIq8%8SUfPkEnvz2RKk88sSyvO3Eu3zmhIN9HESKPQ4Ejz06BFJ9H4RT:T2EE70TxBE9IkPKvSlDvzzow2684YMZfNNC::y9wmG8oQI9:H0BlLxSQWY8IIDzu%hAfXupv8O7pb9HO11%yTsR:ku6w33PerL9FbphvJ56ETwq%cO7uzm5%s75tDpl%XK5:3k1eVr5PPj5OMn4mjjc%D34tfekuJV3Tvi7Nv04ZnavOFg2ZXhQdiA4ULXg%Fj1qDhqdXa4RPVMOKk1KLiX9Qy40jU4uNe1LHkoNSd5QvVoOaZ1bznSNbt6BLXMOrz14Hr5tjZ7OnZOO732p3vDdwD8SfdY:I:3rXzUt:29F3gI:Zg4Tn3WeIz%EnjCfkv5Lj5CeU%%tblmfqY5sb6T%fB%gDoi:qr6Cr6Uemm%fPpBvmP6k74KOuE98Lrs:Zd7OT1:uwd9aPtYvRM7rXz%e4X86jvjPJW8BDyAvGh8anxPPFJ8uHw5fKQ8H:zSvAa9A:wuPTl71n10e::9dnvr:b%72z3QvA7%KbwHfku8Q:61:EL%5vyC:xv8wr9SfQD:iX19f4E9uD:4PbCALT3nAF7%HICNvlJA%j5IwSR%gMFL:vkBbz7wgY1:JkHm:xlCOz8JAkm:dMJSP1vClX99ApO:WELNf21Cwb97gu9:AsMWfwODNv79QtH%78LmfppC9L58gry%FkK:PedCfX2vwjg9bwHv:SYBpXzUwVn8vUDP:GGAiPwDAEb75D:Le4W:l3to:yx7Dv7Kuzf%czrkfib61P3mesn9sXrDvUc7Ar0muwf8z:tTvIO7pzxCe8K8THwmvCF8U3wBPMm8LL0J:CT9lbwpvi08Of6RPFU:QTy7v:z8rECEvSaBWH1ogjc9sILgPj6Dkn6SxIu:LUVKv4wGTYAtRxKAjsgYQS8I3EGMCdyCI8qWwrRLSUM7jDPDeMzVQ%oNrYQNznvEYc7%xKOPdkTRz%HFK9ACBXFQV0Vi0KJFQRDjRU1Q24VJEMtFdVCzhRQQlQUnEHCE8BAHhPCP2wSpT6zEWo99hAUPDcQpjp5DyA5uw6FN:8N1TVEDRI0iwxBMtkLZTAwC38ukwqTLAEKpSp8CcAoBwnvJqYIOSVcCKIjLAgrIhYI0yAdCJsfQQiDHoAIiR3YCKgcRwncG8wJIhtiCncaCAvXGbkLQRl3DLQYQQ0uGBoOrRcCDzAX%A%zFvgQNRb%EbUVCBMwFRMUphQbFRQUHBZ6ExQX1xIAGCsS3RhyEakZphBiGsUPChvNDqIbwg0rHKkMpByFCwkdWQpaHSUJkx3rB7IdrAa0HWwFmh0uBGMd9gISHcUBpxybACMceP%MG2L%6Bpg:TwadvyNGaX73xju%jMYT:qLF8j56RZZ%UsWAPmzFbz4IBWN%JQUcvgSFHD4mROJ%CoTv:jCEhP5ZBKE%RASE:rJEb36kRGA%2oRWfxWEUX9VxFE:m4RUv%bEW0A3BGSATISwgKdEgEEGRNPBaUTrgY6FBcI1RSICXQV%woTFm4MrhbeDUAXRQ:GF50QOxjeEZ0YABPrGPwTIRnJFD4ZYhU:GcEVJBnmFekYzxWOGH8VFxj2FIcXOBTjFkkTLxYuEm0V7RCgFIwPyRMVDu4SjAwTEvcKOhFbCWYQvQeYDyIG0Q6LBBEO9wJVDWEBmgzI:%ALJ:4lC3:8aArO%qoJEvnqCE73KgiJ9WgHyfOiBhby1wVw8AUF1u4tBEjtUAPD624CSOqHAdbomQBp56P:Aeal:p3knv0944784OFz%4ngTvo33x:56d3r957ctPZV23:1C9pO9L7YIvNs1:rxFdbW8LfUtu9S05vu59GF7XTQcuz5zmHrdM1R6uXLQulNyjTorcgo5wjHHOZgxQ7lucP74xXC4eJ4wL7h6L6Q4Gu9Vt8FvBDevLq93JO5XNuLuPDZp7d62Oi2%9ZOtnXV3LXr05K1YdJvtdvQdLVdz5%16c3wtYDMY7Yiy:a2zsmmt4XIcrhIx1u5GcZluv3Ekrv0w%O8A8NYviXC8b9ewa:BsMCWwx:ApsWrv%HHWb9Cyim:xMwev2TPOL8f0nm:9NTfv%LXacDp2hXBBd7fwTThwsJ05LrDxefDxCPr28WK7v3G8:EoyFb1WMms%IzK8fvByx7:9MwqAiPOCgVNz7MHbdAdCoPRRAyM0igOidPND3rUNRFk1WISSNZXEyrXGRQL2K8U7tgfFdfZbxXI2qQVx9vBFdrcyhUC3scVRd%%FaXgshUk4qYVw%OaFYDljRVZ54AVSul1FVPrbxV07W4Vre91FQDyhRVp9KUV5fbaFXL5KhYP:JkWvf4lF30BzxdPBJQYLwdzGRoKaBoKDXEb%w%HHOoSqR3RFdEerRgAIHcbMyEsHmoiyiCkI1Ej4STDJSAmIShgJ2sqnCieLM4pti7vKq8w:SuGMvIsNzTKLcA1gy4eNxYvTziCL1A5wi8fOtUvvTq4Lyo7bC9nO:AucztILk47dy34OoEsczpsK8E5OiriOPEo2zeWJ6w2LSZYNbkk5TM6I1gysiG0MCIg:S6PHjYt:BxlK28bjSnsGbUncxjfJQcXDCSlFToiTxRqIAYTnB7NEdUcqRAbG6EPchm8Dt8X:A1kFmINBRXuDMQTngyjEm8MpRFiDMoQdQwTEKsMgA8EDRIPgQ3JDh8OpQ7fDqQOvg:DDroQ:Q7REUoP:BKjDzcUBRB:FWkQyxbKEBMYJRFQGXgRexrAEY0b%BF%HBwSRB0nEtMdGBIiHu4RKh6oEesdRhFlHcgQoRwuEKcbfg%DGr0OOxnvDdkXGQ1jFkEM3hRqC08Tmwq9EdkJKRAnCZYOhwgIDfwHgAuIBwEKMAeMCPcGJgfgBtAF6AaQBAwHZwNLB1YCogdbARIIdgCZCKj:NQn1:uIJYv6dCvH9Yguh:TIMcP0KDVn96Q1Z:c0Ob:2zD5j9mRDQ:X0RD:5aElL%KxOT:ukTzv6NFAD:ExUn:3gVQf%%FU3:6xVO:wAWRf8CFi::8BUJ:8gV0v6HFYn%KhUv:qsUwf0HFDz9PxOZ:FQS0:tFEeT6FBDL%cMOivhSDSP3xguf9SEKA:RmCFbylgad8LME3O7BAhrtwABa67T%oeme:PLngPpR5l74veQ79jjjGPTC4ffxXuDX7xHfuu3i3aPr0tyU6eLbj%cL25blSNqs45TZz%Ht2P7fVdg53tPXgtxt19:aKNdT2QbX4dcG14jWJNdK1WHXKtS81ynTN9hK0tPYj9GR2f3QddqY0IHbYNC23FfQFN560JnfydBE4UDREuPb0f7klNIA52LTEelB1CnrK9VB7R3WVO8R11vxBdhS8:LYM:XV2ff2qNqS%Gnb%vkV3Cv7rtwl:DTd7:yn3Y:9B94M:lHeaP6J3qL%st6%:tPev:7v3qf%C997:irfO:5S3%r9hd%M:cbfJP0X4Lj8e%BK:PXg3PuG4Wz7K%L5%uTigPqw4wL6jeR:%Xrl%Ph25m:4fefq94:obfeo6f:2xuqi9ujrVvYK7Rn2LO7t9U7v1PVv8NL1lPHr9b7yIfbt83b2HfXo9kn2dPdw9xf4kvjN%Kr5k:my%mb6p:tC%4r8Ivxi:f:8NP7V:QL:ov7L:2L:jwAVAEsBtwD:AUoBqQLNAUYDOgLSA4kCSwSxAq4ErQL4BH0CJwUoAjkFtAEtBScBBQWDAMIEyf9kBPf%5wMV:kkDKP2NAjf8uQFB%88ARfrN:0T5rv5B%HT9O:ci:C32wvoU9V759vP799:ynvbY8Ur14PAC9PLvx:IK75bxK%5y8F:tXu%v7F:uIux67bjrsOxs6wPsQetz6z3rA%tm67nqwOuc6knsseoC7ffq8O1r6xzvFOyF8P:sKPI17gH0re8P9lfxVfgn89D6I:V8:VL3VACt%VIDGfxrBoD%lwnbAMoMLgP6D3cFGROoBxgWtQnqGJkLhxtZDegd9A4JIGUQ4SGlEWsjsRKsJIcTsiUvFJAmsxRQJxsV7SdjFVwohhWUKH8VmyhbFXYoLBUrKP0UvSfNFDEnmhSUJnEU8iVbFEglVBSOJEkUwCMxFOMiGxT:ISMUFiFJFB0gchQLH4IU4R18FLAcgBSSG6YUkBrmFJkZJRWXGFsVhheSFXUW0RV5FRAWlhRCFsUTcxYEE74WXhIxF9YRuxddEUQY4xDCGGMQORnpD64ZeQ8eGg8PjBqqDgMbUw6RGw0ONhzKDeUcaQ2bHc0MVR74CwofBgusHxoKOyA8CcUgVghUIUIH1SHpBSQiVQQyIrMCHSIdAREiff8lIq39TyK0%3sixPmSIvf3eSIw9iwiS:TMIV3yiSGn8G0hSO9XIRHuFCG%7JQgTuv7H:vpfh:s6CcfCOjNHiznPx5O5nEdgeWCHNnklxtd5MMaDuT8GfTjNhkN5HQYLuTLFzTkPRc:5L8WleRLFkLl6BX85ZgVh%ZTFf7mEBXG58kUKemHFP:qZBTW7HQUc%66FP7vKRWp8a8VZvM4Fhb1txbX9jUX6fi6F2H7Lxj5:XMYPwCOGPkBohhMA8UYegTyGKYFDRnbBugYGQhkGDoJkhcKCpoWjQqTFfwKfBR1C1AT2gsIEv0LpxDTC0IPgAv4DT4L6QwnCy0MGwusC%4KHAumCkgKXgpSCRkKiQjMCQ4IdgnBBxUJagecCPQGAQiGBkwHYgaVBpYG6gXiBjwF:gZxBM8GmgNdBu8CwgVvAjYFyQH5BNEAEQXY:ygFR::VBAj:FASo:lsD0v0OA4r8:AIv%7ICRvoLAgn6PgEy%m4AUPp9:yT6Vf6u%SH9Efke:H34S:sC%Fv6jvcd%SH3wvfW9of2nfZL9Sz2xfNc9f7xVfRI8EDz0%4Y8nbtuvD16yLvUOqF7bDoPOwJ503rE%U76tbinujj4L:mnN9I5YfeduTM3P3jQtpz46bXluLb1Vzh:9T132DUlN5P01jd0tFz3FbQHdwEzyjcx80h3JzM8tt0y9fbFsrj21nI:ttkxhzcgcQd3NXC7ds2wdjbeL9C3Pe9Ht1QvSTeXr0t3zK9GOBLvO:gF7sV4iu6p%PFuRTlDroW5gi7NedBvLLoML1B6re9KOwlvijvCr:18tzAVPZSw5j4eMX9%cTGHfudx9v8mMit:77JrALUyqUE1MvMBe:MBAdOznkIxs8mCuHQYgxS0d0OWNGhEHDRlBHC0WISFdIcEzzSYxN60nETWdPRE:bUpxTG1skVVNjFFt7ZHxfI2xAX1t0%F3HfdRd14A4XR%FJFi7i2hUc49YVGOQzFnXlBhd958YXF%r2FwHtPhga8CEZWfOuGb72QRlT%sIY8:3rGDwBWxn2A8sZTQYoGosIBRoSC7IZUQ5pGhkSRBxyFUoevReTIHMZdCNZG4Ul3B2zJU0hnSVpJeMm9ShvKCAr6yi0LCgpvy5RKi4xRyzXM7UuKjd8Mb06vDPqPGk09DzWMwA8dDNsOwQ0kDu4ND48RzRPPZEykz6VMM8:0S7KQMIsaUFRKiZCXijKQ4AnKkZqJ:dHjiduSIAnLkjbJudHWSVRR%Ai30WZH3lDKhx9QEcZcz30FpY6FhVuNz4UhzOvFFEvGBXAK7ITiimAEDwpdg3WKkgM3ix6DBMt%wthKooJWCW3BT0fgwG6GZz9Qxba%o8UifkHE8:4xxFi%WQTF:9qGbULlyETGqwnqSKhKPAisCMvHRQawRQ7D9ENlgdLDH0Frw:wBg0TIgdqEiIDzQ0z:iUIyACvBVQQtwiIJ18OYznWEQQ93BLXNCsVgyqtGjwm%iFFKVso8S2xKtssZyevI4EgpxafGJsLdQ83BecEbAIv:DkAKPjz%yP4gvVP%mbvuvyr7Cb8bu:N9p339e5eAdDmwQaJ3fgEG9M6:vXJZfYgw2Lwtr2m7VS5Eu12tUnso7J%7E%3H:KOy5f9N%wCCQEKrw7cF9oNNBSLCGkF7wBR9AP52uhW8lPm0u2Y6k3r0PDc6KDzZeXm74XlguiJ8SjkcQut5QsqLeoGQI3u:0VO8gM%0PX2MCH6%yhEAfoqowt:MzcWBzqMHAI4khs4LUoTWR6ZB14Qjf6oBcf7VP79:Uv5pAHF9I8E0u%QBlLsiAi77VMLpfSXDSX9BQuoAiAAtQNt7lQBZ9td:cfMDvrqxYT4cMVx98nFT:asxLP4d8gaAhzYkw:X768Z3QNlG78L7RNxBoEE2:dB8MLnrtw93znPhOIRynzuGsue:InNAQdGznoKOtB5CDbaugWb7tYEsQaqA:4XSf%THBL4UhWe8DYHMesc%azpe:EM7p7yxfgq%fYGZP9BExkBLBnZ:EIY9fMPFLnptBCz4IQPztj2Di3RaQ0Tyz0LLcnqCd:LGQn7zzUGQNKq:9rSevZ%04TrAdRU3vTTPNBB1b3Edtl9vfjeCrpH5Dy82eoUyPjzAt7J:Tj4JQX5DZMHexgoA:oVnfffCeTngPoN2Xvukc::6WnNwewo0Vzzz9ai%pvbMADe4ZQCEe9eA6UECgUSHJUFpyvsAB4uNvjVJL7vzhUU6UkJpeWcBVTofQqo7noSa:FqGa3vEx5d78keBfO3GZr4chBH:8wGVgZp:mQLtfYjDuzvEhBd69cQuum4EM:qJRLF7X4TBvFfDiDzPQAO9B7tBPUq2gf3Rcvh%ZzC7fzEvy4B8cMyCUHUQxV28JohDw35KTUemSyqIa8oaBoTHi0Mfg8F:ZsBS:K69%XsOPPw7LjzsPKM9qb5xflT:FYAQ:2YDngC5iJLCtg1tg27QNMJHEG7ACk4yfWSKX7sFBrb5toNKuRoB3rjuAZZ5D4JVeSdCznhJAuO3SsGwN3e:HHiHvGO6UXkGvGR1o72hMkQ%M6:1vYPugz0u7Zh7iC1oeZgtXzg:7VM2:C0ENK%snjE1bFUtyiz3az2tZWlcroBphHCJbPvzNLLkdhM6XjhMgLa5HkNZ%HtCB3YFvthzDvrK8KS3NO7MtLTudTPort%1SbApt%sxmvqkNAi8y7gPvp:9OsBageLB2ASugQCE075TwrK68n6G%AY6R:X6Nqb0wPTt9bI0MLcE9M%4rjYcuUC37vjwuKZ3XLidNni3a7bNdX84VPJlulwvBvyTbG:%bipef3ypQX8wKX19d%om%24rQXmrLFS39%zNdcYtZnNC7UjxJqz87v7s5K457mYv7XEt9Gg0CfpbNpT:q7flgn23vcFotkP9:7SkOadzcLaIMsx1XHM69ah0D3fytXu6THcFPPI5uP5vvfL:yUNoAYZIUcNnS3vDmEw9QhdKmL%hB1Y8xQNVOoT:tjlXvS55orwqurZ8azvjfdP9Hf:HfVeBu7wRgqM7BwK8OugBLTt3Pl28A7s%fSj3Wn6hNBH:4rHoQN7xeAGLspWCOfSDAro3BIN:OX5DdvrdwlE7VMAXOvG9SXp3%6b6ffw8%3I:CP1Wg7z:P0gTwOVLqEGQjAfBrIlfAIIFrv9Zwf5%Vj8ffhh91n5ifn9%4EAMQE%CvQL1xV9HhYhOTZRKkZMWTERWtUz0lyxLmlVzyPJRj4YFzX2DiwlwQlLG2IKTxncD:YdzBYxJj8cDC91HTU2phh:OekPWTeYB8UvFwLiI%X:whQTAf4D:QS19B8LQepFE03mfhvS6IohovB2Jkv7FyzCBUwwrQ1RL94Roii4EjsfkxK9FyMUSxY%GPEbEB79JnIkKjX6KaZCXC22SXwuSkfwLVM9GSyGL6wpiyGWJxEX5iXmEeIkrxHnJj8WGS:wHok%qinyUnE19GbHQYV0mko4eR5L8HbiQ5tvZTh5Y6UqbVSVHQBH6hXQPkEVkzyvGWE:AiFMRbgnQksPKYZONiQMTvccekldFuk:IxH5MLkNjR5ODF4M2Qzj:ZEPIfVRE%LyOxby9mEZ4f:gHvYKRiTNFHkk4RoVHgcd9BP7HF4KdRywBTocHgiIHE0QOh2ZG%Qd2yZsHgMtBh9FKoEfIyA%H6YSrx10BIYaHPgEFm3wZBEO7r4OOvCZEIL2Exme:%gnqwk5ObYTmUeeGzhPJB26TqMWZ0b7CgQ4bP27JjLw9hUq5joIWOH::r:h7foZ54z7u%:%:vj29wLI%RoGVPp9B0:7QgVG:FP9Vvy%78H7R9%0%sbP6flwxJf63b7j:AW:PwERxE0Ju8zPEwDXehu44OIczuiaGRjv6hRU84oRI:V8Ea30CRWJ8vMaZu%OIRvs:yWD6Q8l7OeKHvjmBhVE5rwKxuWQAXjlpfuV5Zn5puca%13uogAj%3YJSgzpEhsesxvULDojvzX6Jbo3vyBCM3wVsiktCM8cBPv7DgnwwwJK6Qz67uYQ9rHoJvc17vz7U:RCApr3Ywjp%HYNdfrrD3372g3s%p8GfPls%5H3pe6d9RDjY:X22qz3pNcm:LjZuQNX4SUOqO2uF4z8hR1dC5EgJxgqIkkiMCPsKWkl6C5TKZIwXi3NLvkwwSrEMwQmNDOiIRkuJR4RJ90bXyDiGhkaShv:FKodUhILI3MSTiwWFng5YR1DSUomHlk9L%pltTf6bFw87mzROBlm0C0eWqofM0ssEbM7dQTYLef7QCPa998cy:cbG%f7Ax3IAScgCAVrIiwFByO:BA4hwQMDG:kAnBBf:RcD2:nY80r2keTw88:XUvRezxP3Ycu6%:HLFwKL0VUIS9uWDOXmPg%U8loRg:2OE70GiRb4DJAZOQ%3GmIN6BleCNYXmAEYE0L6Fgtm86YC7u0k:FTqJPfo6HvzlOoP8mDwO:Nb%jv3oQe8:dAW2wTTJYQLBjI1Ek05PxfXOhMXxzYmEbctygfZILn8%xGh8QwDoOjP9XPi7%tz35bml%C95WXkUuhK5::sgegf8pzpePVV6vP0yumv77:oEeZ:52HZpeWSy1Xk277F5C21tubkr3jqtK%N8KC0LvfzvUP8Jsrk:1jXiQIu5FIEue9PBsH43gg7:sAKLwCtC03:yAss:AAJl:fkAZ7yxPjn7ULw7%nx6Ojn3ONG6YLi2u7E5Mn4F%q8BgLylxe4%ngpDgPmOfELDkZlFL9LqBiWSokXqUM:E2c4Aw1xKhcF:xvy:FkPyvULBiHw3QAU7eb:i%xSAlXsswb:68QLjO06EFDxMBKQ9Q8QbPnPCZL8iABP:lD1o:5y6d791d4S:B:Xtvoe09j7LdMQ:yXXqQIX3ooG7ebtCtvwJQ:i%kMTxwOVF2oKBBufDZ0cbQxDHBYHtxgO:8UQyfX7BWHstPoP5NDvEN5:5n7bruBd3fDeHuT24CXvlOYm:ZvubgzY96IarwI0JRkOeCrcFQsqJxdxJCMTxRptC3QOtgAKAbv0JfSe6UjpseCC4UnbS9232YfcItqu3p:bAOO830PoqOZ%7OLtt%3A8x:rSPgQ5TH7Wdwn:DvSiPuByNT52MAS%Cm8svfPupH447x%%SjC6frdyQn%:dKGArjchwdz5s0MUu%ZESH29xTv%ZUWkfpdFYn4sw%N9BQGK%%Z%ujoju704ivjJ9%X2hnfC9aC41fVd%wV2Gv5Zd3oCErk4xgt7T4n4:ftMeoAZDduBEQ3HQItMmj7Gyk48WUdA%X3EALZ0wX:zmX9MMg3%InE%:VNwgj268D%94TCi:soyJr:xs%OAmfXXgPG3s8BU%XU:Qnqsfeq7GXwwO0y6bPuCeM88freNvVA3vD4T%Ej:Ifn4:8O8GAEGPpUCWoEyw59DRwUJRRgGOAXbhviGAsc5RfdF1cV3Q4LEYgDCQuq9yoEROzP:fbijfnO3Pj40Nnv:BXaIQUo3WsQF%IsHYjpVykk9Nwy6v44OIAFhTi4BqYzdgNxKkT8Sx5A8qQQNucAA3Xc1vZJ0:bsV8xo5RbGFOCNvx:dHbtz3AK7QN0yvhreJsOd3XvJGNv2z8:W:dSu0XbYk8wD2%rHg93xw3vhSMEU5%zAduyFw:Tw58i79WXQAvtI2SwAsOJfBTTrUgp48eoNM:XWDxb3YA%n94IKzPYqAUv0ZfZK8JHsmusr5LLnEN4h5ifb5Ocy213tu91W9hviwgFT5%0N9e0UGWj3nyHcAWgmMQlDJ:oLwSR1C14fPgiMF6ECPg7d%7EENfXi%5XvjfRg6yLvaeeb64:imelg3qHoF93%53Te3OZV4bbku%WY4VzrEd4j8eXaivZ62HL7pNbn:zHVygR51IIKHdW9D3:XsROx25IXkOEuHM3o0SDJ8OUklPhLKDX:sSoqBOgrjwdQK7MJUiejCqofRgrEFtIIKQ:pBmIJWwU6BSAFwQJAB:YBPgyjArcTSATJHIYGlCZ2CgcwiBHYN0EaFj3dIIE:lCNUP10j3TwYIWU4wxxnMsIWuitDEB8lpQrGHk8GthjuAWcTVvxRD8P2agxO83UKSfIQCQzzZgdw9aYEPPncAO:9tvxWA8L4DglU9YgOwvIlFGDxdhpX8Z4ghfKUJbb01CkT%Bsu4fwmMqMCijUeCCo4YgzcOWIPkDqVEd05cxN6NhQV8C8FFvUnqxVsIOcTjRlYETYTOw8PDuQOugoKEU8JnRW8CVIc%gvDJH8QFi7eF:E20iD4PRQoWkJ:KwhEsCtJQ:IpIECSJog6ySEsM6ccKytfGEYj9hTaGwIRRBV0C7QPYwX0CtoA2Aah:nQDiv6ZAJYAsP1sBI36Ignf9zUOWPaDE931yhgA9mkeyfZEJW74GC2:%ro0m:3UO24BkkKaBj1IzAzGSzAT6UwcGRJMPh7vSWEivEYoJZ1BRybtOekl6TCgJGQo%CLWIJEhOhpMISQV1SLTES0m3w8CKzUPFjEmEA44%BJhPwcYe0blHphMiyXaUAkqulI%LDlSuSyBT44r6UoiKRJFhSZ1PkokHjfnITwvMR5tJ3kYICCgEV8ZkQtFE3gH%Q1tBQ8JewXfA5EHff73CqT5xw7T9YkSEfNXFmPxERvq8JEhrvEpKWXzPzCA9Rk2oPeoOgj6cj0T:Ro%aQDtPEkDTDphBZU2tgYCMicH6Ct9Bo0jlQTOGWcBPRBP:WMHPfli:zH20Pix9MPzxfSu70L2huz0%MLqsvzg6gYBVu0LBc7xCQjD9uMJ8fqFChj%hgno:9UG8v8QA6D%v:6s:PT5M:q09Pr2Hu9w8ivp4uva4gPkdtwq3XPW:9gJ0X7XGcxp2HDHsNsew6zga79D5mu8m%v4ubDwL7ib9ne3K:4QuDsG8LkPDee8gRKnwCUX6MTCGpTJER1xzjce3NIYHkjWrhzG2CkalNrnFaLbMg:B2wwH5NoZ:ynZs:cC177wNtW26mzU0%Xe1PfhqtZo3:3ZVN7K3qveneTh4NLqMOXb8GfqOvb27l:6M:K6:OrzGf0Q9Nv7AfOZ%f:wyPYb7pTzveoL8ObmROzP4W7ol9vL5O:VlOFE0tXe0tBD3JPRltmM1BjXeNlU1brfWNRR5vHTmexN1HXzxNUG:G3YjQVq3HgO3uFuFnHoix2J714j2:bIJwj%:ip3BOYs9gm5LdUO1i0qE2osvRZZKE8ZNiKCGkMbOxoCFEEZAQ2VGPoGjBi%AUYZH:06G9z5iB48%KgirfcKJ2L4Pivf%rguI:4sMYAAqTJfAfQy6wCYMWb:my4t:W0qVfpCJZr2Fh8Z8voX7%wuEHrmGgiN3kkAkNYA%VvQ9vG6zLXqr8si4xfNndur0KvUs9W2zg3bGMr:3xnH6OS1xXbqucWL8BrHuPbZydH8p82DAh3SUwfy1g4Lztt%DUHgZQ4S5CcOJOcbDVHpiwqn6scFYOtT:3Hr9fe16g:whelb6JTopOFT6ADc6OiF10XqsNQe7GPTKu4c02TwI9TH8uTWFPWS2hn3uN3K%FDfAfoD34L6Sd09%gXbNflS2FT3u9SE9HfQrPD1y7brycbP5a7Aft:UukjZyLZJ0:q0f80StRPIsrZDw3S5K7:yvOy76MDIuTTF27jLyfK4us7quQHU%ruH2Wu:P99DxBflQ8rE6urQtO%I1x:znN1o9CDjkPMv6Pvwsey:7H3w0%ag877fI:Zt2Ob3kNH6%KvL2PldxwH798SY:EXEgP4PxaoANccqA2PKGgY1znsJrtIdDbrXpRB43McTud9oFgvhYhjh4HIZ9d9xGc:eWBiU3Q4WKtyNEm7a:A012KAIVdXQAkLSAv0n0Hf3yc8V8srQyeyY0snnKtU844jYHd%I3HvbRuGF2P7mVNad7QzV1:Te1Fj8ydWZA6LXIwpX2uYPxt27FJfhBhiE5TQZeukbGFztqhTp8OoO6PN9Byn2c:9j9633Yvev8Gj25%or9ajmX:Tk41:0SeIv9bLhu:Ys4vL4pePj%:fljf8U6ZgDuOxmByHwmgp:8jkNfvMlDz3zEhAt8uYP1PC:DlXvvwx07SQKHesjBz3ooAOS5IH:Y%At%:HcCfdB29:yQNtj7n3ctunK3izl8OEM4crlkd2L6sPaa:B:2F737tY0:2vWdgcT11IP1tgzFsrb7Bvk3y8gyOSiIhXqTyN%71UipvR0H1n5gRqv:eITpgFIDOkEVARAB4:82whu9RUKU%85C3rqgwzc5iQOXOQ0EA:jxhIQ4:EVNOSqGS3mmR2M6DYhkuoWJG7rIibg6n0nOelKKPTmkyh65GgoDeLlJ63fDCcg3a4lGdqbI3vW4SC20r4dv89jGmPO2hboziETSdE%D13VUQuw2pMHu%AtBETnJAFd7ov%K:a3:KH%A:xYB4T8sg8Y:jgXoQCLHQcENyIbCNskkAyBJQQRfSQbFe4hqRimHa0bkxchHiwQ3R9HCMUgngDtILL5hiD687wfvO%qHtTseR3:6lccHupkGyfqrhoS604a4Ow3GkHvDxpl8W8Zf:JDGFvynRYh8WoU7u6XEfHrSg6Q6K8KHuXCBo:haQKV3af9Fdmh%IXUovPN0Onuuc5w6pjOBuZb0Jfh5NMu3fbY6tgr3wDVP%af0T7u2s42993MzQACzGQKdMxpE:3NaBtZ0BcigNNMJ2zX1irs24osv%B8LKnl3ip86qMnFu%rIkDzVxyr9ngVNPnVDgj78ghq:CUEif2hAKX%gP79:8v9lAFX:koD6P8nBYECQgc4BnIJpwpjC:QO2QxdEq8NcRTNDfAURA3RE0kMYBH%CgUOZQn7CXwHUAU9BQkAoQJH%sr:gPT2:I3vTvo37NH3y%pu9ULr%:KS7UbwivFK7bn2QOrc:G3nDQT75EAMEuP8FPzhsh0F4gEmPuOiLXrlZDSI6CE6SuyGPpnwLEE19ftB7:kWQbf%ez5yAxg64gcyNMgLcy0MD6YmuxFlIOUTDBurFdQWSRf1E:4YhxLgGmcS6hxwEx8ftRVzITgZqiOEHYElwyHfJi0lsic4J9IngSctJ%cl6iXLIkYk1R5pImQaYCB8FSkeIhC%G3oKKRnaBIAW%v:ME6f8:RA1%wUOnfviCuf9oAfiAVEEBwcaAQMNE:7sE0P7uhvK%Cck:vbpLCz2kzVq9pg9pveqRNb5okrs:BJPzACRUUkFK1ImChBRJQ84Th4UsUnsGNNDYh0oPWMhWDb6JAkwPyidKkMrTCYgLkcj6jCeIZMzIiEMNrAhYThUI6U6GCa:PKopej5NLa4:KTBIQKsxM0B%MV4:fC:XPfQrvjuXJy450yI6Nqgd9zIZGHsvQxLcK14MQCgZB84kZQOTIbkBhB4fAoQbmARyGO8ISRWPDikSHBU1D4wchAypJEcKLC3JCO41PAiCPrAIQ0YuCutMuQxpUjwQVlaLFFRYbBlxWJYeyFbUI0JTBin5TQkuREewMpo:3DakN4A6FDCkPVApZkCdI%lCRx9MRWkcn0fgGupJkxoqTIkbXU6:HWpQ:iAfUqgkS1PVJ9lT1Sm3U0sq0lL:KC5RESbmTggiE0xLHc5I8xc2RSUSWUEMDDo9zgX1OP7:qzSF%2QwzvgVLM73ryeK%B8j4fpiHlT%mhmcAuEUtAc%EGIN0wtpE%sHxxm6BBsgUQKdJbwA9CkBACUtEQDtLssA:i7%AVotawPwKdsElyQtBoAdPgcPFe8Hows0COEBHAiR%L4HJ:A9B%TovgYf41QG%d4ABkzcxwUV26wFbdulBTTdmQUW4GEFh%PQBKXmyAOv6D8CWek0AILor:045sf66OKV9wvfMPTM2qrwTdYN7b7RVOlDzYHlUMml4b7Gyd0NxvLZNccb1iHKPdKlzlvOUtSHyt:a2MZG4lbDT%oewLnyZb17%167NwQfuikMrbnkEgO6aRgWu5Qc0rw1Hxm:RyC2wZkffcTqHFTHZxgiynIS0cxPC1rPjAO80fb7:9ME9TjW8u6J2BLq:dp:5pHdD%RB4NfiCuMN4%Plk%Sy6BjnVesk6qLt6%x876Xu3fAD777x7e0a8lvr:vGt54bxcOPL8OTe4%8t2tvugtW57RnRguxazUfrDssX6sXK9uiHzN:nNtDK5p7VteVS3K3kA%TC45zs:uLn9XXinv9T4qsJw%K9E97jGx2o5UwlF%g:LBnrzjGd7t41h:J4OKj2aDnU%mY48f6YNekCTTGmBrErGwpDJUcN1B4tENoY2hKEE2gVFw:hF6ULOhr3CGYcHwddHlkGFiCGBn4hXgd1IpUI1iKGCYcibQl:IfkHvx8aBUYdvgAhGjP7chYI9WASgO4GDq:ndgnV4MUEMNoIABvUWvtAz9T2NMyE8hHLae7Fy3vqMc645v3RJ%Pj1tPf2dzG3LLjEdog69fXAvNA1g:7adWgAlnVOQkN1rcOd9f0EobZ1xUc3HAXC9%UFyLi8hU65aYSO%gCDg7rMwij7a4B%u89%xjyUPUI9AXw3:Wd6673Nehv%aTlFPv645v8ceME:vXjQv9K5TkAQOfJAEXp2QCL6lsArepR:5bpwP0t57H7o%NC%Wzfl:a32sPzkNXM8DzQve0Gy6zqOcau52fC2OQlwDjim7:N377Ajt11w3fbbMeN2V3M2NdN0mfWIdlM1YbgndRM6HvUM:AA1aX3NNYm:hfYmwOl2vEH0N0ZC3:hJg2Q5fMN1ukmDSzuxwp58igHqvZ3Aqv6F:12:sH3EALr8n8Fse7MCEnrBgzf6DAPXec2EsjmEBVM58EX0ug8GhzrYxz47RQe2PAyH%TypB%n82MfDvNyHg7x1RzN7aMarukCGOXkCBWX37oRIdonDtrUawoC0J4GIczUAtXJHf9YyXn7ncrc93vNPPSV0Znwmdb57Ircaulc4:3ls%rJ4lXy7d8X%ordeQGy2:IHcNpdDcvZtBHA2esUP9oOFzHbABh33G0X8d1NFY7f6hFC4XMN%eIpCKzkqwJm5oH9L%jc%BDq5:Qa7NTxU%6m76nwbe4I80vubvUo78j3zfDw%QXzxftT9Sb99:b0:X:3IP7a9qv9::Sa:A3y:fpR7vv4:Omx9kHlJvSF4GrxF9yc7iLY1%si1SnpudOj5iXURuRS1gbiGtrb3ynfxN0t5cPbIOzo2e3zQ9go:OjWiQTw1QENfNUvFZzVfBxZ1q8iu9fLJ8LZyytd3LAueN9dMPjiijDD5iEvw%phLOrudSgh83wjVvfwHYz7ZRjI:yUTCQRMDlYI%gmzDEoGEBFfA1YVWgF8GSYAdh2X:yUhgv9tJIj:MicQ:1Qpuf3CKm:7dysv%HgrFvTRKmPvoilA6ggo4OQMJqzfwSPx2kYh0ta4Hr3TLBxK0rIZp9JNF7DU8xRE2J4SLt1JECLj9g0Q6rEL2fGOCQ76nQdrAvQF8gquBFQT3APpGoIDWyGpA7UmUwT3KnAFCy7oBswvowj9L4UKii53DKgrZQ6FJzgQMiLgERMcXRPSFb0U3A8CFk4KMRc2BVEYugBcGQL9RRod%gIb6veRGz725xv39PMbxvOkGyry5hrH760Zguz1F1roxBVq4ykT5d08EOXXFg2f0cIJgMtQBtvF2ALXwHT:2bw6:HK6OPnJuW32t7rT8yy9Y:ERwRPvK8be7FnMy%p60%zoMttO50LjA%as6yLlKfS75A:81uT9AnzlBQmz5icOb%g4EpbqDBUO7YEWvO%SFn:ybRU:9SwT5:fPD2n6oQvI:EUHEv83A1EBkP%IA1j8vgW5%fUH5fchCt72Mgx59h4Oi:bbD:32VRGJ93MStfchExz3UhOZ9f8SKfMrEtzv4xDN60APE%dXDe3hPQvS3AEJHdiyBv:TZATa0CsCNs8OAELPCv7S0Bv8ytND%hjYffiH3cn28OMz9S3rzvPz8qjyCvvU8XADafHmC3jx3xMI8g0bJPOAIdD0NSf%9vErlPmFL3n83jGU:wQzxwIRM:kFCDIcCdkvJwy%LBsPRykAEt0l3hSTIrUXdB%HGrgcVx2RGhkg:xi4ItYXJiXzFlknRxY7KaEVrSqSFJwruxL8KwAQwCt1DOIqKwhpKTADZiee:e8kuPchIuzxEh%N7NEbyudxGPzjChWm4aYRAeFGDuvh7wo95KsH4Od7BKzsZAF68nD%Hfm0%04AQvncBzD3vA%W9bIXifRLHxb0QSZK9JIsKfUyMqr27Da5%KE6PPtJPRv%7D44AZs:dwRMP8QH7D0UC6w7Xg4FOaIRRjbhFHszGhi8MEobRi5vHkcsgiG8Km4kiCkkJ44omCnGJ7IrBydULeolaC4JJOYuRyHALr4d7y17GXssexR0KtgO9ifYCCMl2wIZIif97R7y97cbk:OPGIXwgBUN74oSIO%zD5rwBQ1n838KcfciCJD89wWJAgcEFAlnAggQLwFYF3cA0R5UABom1gDzLAYCQjPeA%g4VAa6PVQJnUHDDIVEgxBsRnYUUUeAGChHjBzkRY4gtUOAJANBXCgWPiYsEzveLzU4fjO:NQE30zNfOmgyhj1tMWhAzTD2QncwHEVAML9GyC:MR6YuN0i3LPNHDir5RrImU0WaIgtD3B02QL0Y7DyFE0M5dg5MNcsJGzHQBcQs3gJUKDMB0SPOAEkfkAHFGmEDRRYvBs0R3AloDTgOIwkPExMFQhhQAb0d8v1QIwr7uCir%MIt3fZKMp71JDbq9CQ5ufQwO:30Ozyf9T88ivZCO6T3Qjnb%EE2JfppMn77DC7o:GUpZ:6iJP3:AiCmAcgbXgMPGBoF0RTMBgISYwiRD8wJYw30CksLwgv%CCIMKwYFDLECXgug:ioKA:pyCNX0PwY1758DYumjAKLjW:0y3tT5Vtkf9lvVS:KM0l7uH9Fl6h7RbeZx0nvi%NSM3pPYpNoa3c7WYeIb0z:ooc%U7nbMO:WpyQb8TMfAAm7FQQkXxGQPRMP1FPLCwhkhw7Adz8O1IO7ExyJxxtsjRMjuI1nKCCOnzE4hKc:6HtvRPxy81EgZzddLFgnbhRNr3goR6eHTDnTl1Qz66AQLZuxJCabvgAel8nMFVPXoAp33vP9v%fD7xPqN9537o:L9%1Lt6fvT53P7ZuK1%k3dxvnO2Lv4MNWk97TSh:aR0XL13tFv9JnTf:Ou1pny:drA8Vzg:vCn5l:wwO3y74D1xO%9:ePvTAZa8PQOOPF6F3:ypB8s9DgnN:b8LZn40DNI%684NP6QPEUBWj9lBP1AgAd7QYkK5kB7DWg:UhA2PRAThTq1FYk3RRh%NMAahDEdHZUuSh%gKzMhoijGIpMl8CNdIp4k3x7CJPIaTCR0FjIjVhF1IZULGh85BSccWP6nGBz3shTG72cQnujgC%vhOAfu24EC5NbM:f7SLflf0Ln0Gc918C7PYOyL0HvoCdPQ5IfWauHm2ljeBuCq28Llb9n%67nXivKU1iX5AdaU::7VoQWB1hILg9fCD:jYrxPR2tYW9twhGUnfeBq14c4aKeQZGpvmahgJ6fgVdesGE%Ltyw9O8IAMuvJQCRz1OwZj9zQDffk4AFz7PP3w:Cr6K:7p9gP:YPNt:2rvX::p6tz%0uXp:SXgiPzx2cP6XtOs%KzMXPYpxurzG8Bp8by66u49tnrsxrIp6nmwAehnrwPmk68v5PCwheJlswvh1LbG3xu7wd4SwAnem8Ww3aHLxt0B0lLeethW387e0%DR5MbiU%oo5TLv8Odq8xLrA:d77vb5DPIy:Kv1oP1F%S7%z:zw:UcAKf2vAyH8BQcH%0YKAfpvDSn5dhB0%EcTzPfSFRz3CBhS9tYZVPUqGw:08htp8iEcMfCsGzrtlBp06d0Y5uSQFqzfuhP62W8QENTDDC:OzwibyK0EmMNxAF2:LPwdvOv3A7q48yW5mO%DuZLrDbur56m96%M6wVzgmsUL3anKCtpK0GrXZ9Y91drcjNNj42DSv%m90cPvptFP9RfSTvoI07L%c9R4AkzWmQV:2AoI9tqzCZ7dfwpu4IAKZ%P%CY7mSQni6ZAIWe3vB%bwbQd49P4G:vePBmX7EQab:nEFjwGjBC8EqQNnBnACJwi8AF4JWP4BCi:7CwpG934JtvJiCLTtxwZ46L0EPONZAj3erv%02c:8yNXN%abSuvaQ0KPzsM%R8APQjO150aLq:9Pc53fXR%W:2:fivOD:4Fvmcd%N7F3eM:PR3Q762N3JAHbeJAex3:8MhOFQEubjEBfL5jobKurJHuztriH18cMjL:bnJI76KSUN:8QkqgP%I2QICyM1DQQiEBLuIOYWuB%nG1MeQiC2HKAk2RqyKMMYaCyKFq0vHxRxMkcRqDTODUw2qQlWN%IExjeT:6E37PnrNh70rTVc7vsz5%jvMffjlS%i3:csB9wiKm7ZIicR2P0j79e9IO3YaR3u2gYazN2dFmHhPBOV5fYPVurbDJbv:QlB9XAHJvtBBfMAdgNcBhQCSAshAb0PlwC0E2wAJheXABEaCAFmHKYBAB5fArceLgOSHhIExx0KBZ0cGgZFG0AH0Rl1CDgYrglqFuMKXRQCDAQS%QxTD7sNVwxDDioJgQ68BWQOxgHjDRT9%Qyl96ULlfHtCQnr3gcz5IIFTd3kAo:WFwA40Cv9dMor%lLFH:f7wBX0yL0X8QC8Ke6mu07rl7yM6Lm%4uXuwVXjEMbt4APLt96t0L3c%9YM29bdstkJ5bnYOOwk2A7z99dr%TjYTv:m2LEE:tmNCXrb3w1L3ZERWN92FI7haRbs43oXc%bvFyHpFxj36x8Y8%4LGA7yzxc:9WQXfvjDFrv73RXi:qAU5QETE7cESxFFBzQPdwmGDD0LBQmKDKkEVg2N:54N1floDa3zuAxH7ZgL3OYdCqrgWwje2mEGjtU0BOjQ4QFKzXH:Bcvx:CjKbPqcyu33Scx59RXPEvPe0sDwhdeS7vPcluwb4%Dq6umA6SXxe%hv%NPnfP%N5zYGr%efDD:oqxI:6UsYrOp2HXrsFSKS7vYl3vDpKE:z6ird9Tcsg:gkLTz72y0I:lEu5wB3LtgDRy7VBr4tzwnTLLUMgCt4D9cpChLtJ1QUriVAFtYivhcrH8UYshpSGZUVYhn7D:EY%gkBGLUDmhZe:ckUMfefElXxMBDw65ANO%fNCofj8wcK4Q0FxN8kAp3fQv%G4G78eeK1%WblI:c66cf05u208mfz%vCh%aXvTgDD7hAHY%6tDY:uHRRN72ManvB5IH7yVCbg9OYrrfcPMdD6ojU0:m45ygFxPIwF5z52CRtBgA0pQ6AR:ETLFXxG8xmhRwYeXUjzIaFIryVqSCwpy0dVLNFGFS9lRVsxRkMbMzBATzQVPPo0GDcdNWAxtDQLK8EzQSRPMkAdbDBDFioucw%dKwEJ3Cg4A:Mla:7yIs:67x9u%PgcLfcWGvP2UBe197AUaPk:EvP7CRBL:yEObAOTDD4IZwt5DaYKzBJeChEYkgpHHUILaCJxDGYnJA4vLFcQtjD9Euk0BxakOF8ZvDvuHCU%qSASQIskxkGJKFRDmSylRLcwp0XdNGNG%zjYRvs8AUfNQNtGXkRnRpRHl0VbSkhEpUw:QmJORz%CT1g7:k%RNs5PEDHxTugqaU08JEZLQx2PSCYWT0UBD51BBAiQPX0BOjm1%6Y01:boL%3yDivs7yAmye0mIYTsLhwX7EUXdOx6EpXt3A2F73gJL:JVBU71gQGX%A:%4:sF%yT:Y:hRAjD2XgV19EEIM:PoCmHyPA308RwP3fFmEA3yExF88koRLPM9ERz0:xBH9YUQp:bQDzL48A7Z%ekNkPu6DFD9YAsJ:9cJogAXCAkCCAYsA4cD9ANyAE0EwPwpBIX4gwPX81oCwe6vAFjpiv694:D7C97q%FjYifXN0t3xqs3u7TDJx%mRxXfl4sIM4SrBjdxjwADYhsBw03vB6s4jw4TKcMVXxmTIeML0y:W%8s:ZuyfUL7lt2P22s9xFtergD7QB5WCz7%g:s7Hsq7NE8KS0lfMktn72H7jp%Iy63:pgvXz8ksDP:RfE2:7px6f:%8s%AELQpgCt1NkAKNnLAJrdbwDq4bP:B%aA:uXpvfx67WH6u:B095nzAPQL9gvwC:iX65L5ueac%pfhKPtc3EL7PNf9%nDSavo2zpP5yMqA%ErINffJxrb1SMYK9MbGOvJAyFfwpcp27uLNrezr0QbrsdaD6RncKOj74fvmKOgD5nXuSuXF9N3kA:vL5BoBHOX2BtbliAz35sARdeiGFkDqxRpJ7Hkeie6vIf3wcySo89EmjfbNKJz5ZCrB:JUr6:9mLBMD2SwsBuIsJQl2LOsLjStoDhMqhxDqJzsS%yR6E0AhOxS5HHoUcxc6FH8RfBPyCj8S4gOLEH78bw4D9foLs%0zCcnmKwaE4PMCEtuZ:4nWJ:z50qn4ctAl9f:OofGfziruS8:R6vnQo%eO06zk5tb94djapN8636bd3%MI3K3o0Nqc7f:ZmvKR2ZL3idl3:OvZNwGy2rIF0NvGCTrdXQ3j3ngQv%AeE83iZhUR5WEXg%cOGRzqYxrU7F4bpO:5G3vyJBxF9c8b9ffwGn:6eRnW:FsX8v6KFMsABRFQAsYMewPWB00EUQLMBFr89gQQ9ssEme9RBCDpkAPO4pECzdxkAVXXHACe0r3%x85M:eLL0fv2yVT6:cjY%O3IZPe:yf71a8us9N7NevMD0YXyytTh8RbZmPG53ajxkeIR8o7nzvKr7Nrz2:E29RH36PY6:O74OwFA%:0F0v1yCpYAlw57A3MSfAYaFpcJmBnFDOEc:A:XHzcTZSJwFn0klRkMJpIcAidSH1cnvyEIJ8kjCCZlJUckjSavITgnMh5bJ9YZ7Ca3FOMl%A5AJLgIDyIkAmQfbPtSHLr06hg27j4VE%hZEYXiOg2w3d0IqNlJBHXWj:8g1ML6p9L29QXSPfEr0qHsBNM06IDUBeSS1iPgH9mX3Pnbb9n83rrWFuKE1ETlz9KC6JvRyevl0BfvqNBw8uPQ1vWU0T:5tNKb:DzU2v8k1v8CaNgPBgTbBgnx3dYLH%F1Dnjk3hDn5wgTW%vmFMjuXhYe8lYXSfWwFzP4VBfJ%ioW:fwqFMX%XBEaANAN9ACbCU8B2AQqAa7:iQBQ%nb:7vT::bTvOPzM6i:6Y%bv96DigfWV3:DyQd1J8KDbm%262vbqmdpm6Dnb%OWP3MDjjd7P4SLhNeAz5P:enOc73jvr8d0E7yje9fLi3gr3HeAp%9bhOv8L5DIDvOYRB%HpyApw7UQOZPGDEbT1lBRW%oMXQP9NGmgE5xzBCUAfPA9PIcsUCSNbGl8k1R8:JR8lpiUjKpQlzC78JAkzwSPLNtAhBTouH6c86xuqPh4YD0DjE9hAWQ8BQZ8KikDZBXY:KwHTPbv8szuy%CU5LfU3NjXy8TLD714v1%2NK4PsjCfQ62Ujt%smHy3s4Bov7aIWue58ErjwhA4P880Ko:VoB2P4YARR%8EBav6T:5cB1v25BIn8vwek%6IKHvtTDfT6xQ8r%:sRxvv8E7z8xBUA:kUXh:9xGEIBQhkqA8UZPgUFGnoH%BnOCXoZJwxtGHMOyxafEIwUlBKqET8UKA6RFRYKgBaJBQkXkwAwF0P78har9U8W3%9MFQPq%hND5GsSzt6pENXZuw6B1aAM5tFUCv7O1wfHzC4FTstgApvKd:%hyoL8SMuS%X7MtPY1zu:zXNBS8d:S8u6v1eLszNgz6zbc7Ond3wvplOOP6DbnfOi96tnoNe6c6Z3xturg9B:s9:fU7ev64O:L:UrymgAT9UwDLfjPBYb7GwgQ:y0KwQL2C4gGXw1RClEOBw6:DpkRlw71FMkNDBhUDMgaPgoOHY8Hzh5MBA0ghADYIFD8OyHT9zkhL:POIIbu%R::6cEexuU7HQTifRvQ3pgZMdyVFzTabhXu2B8Ta9ilEKLYCw592WUL7trECOrcNgZm38kDTeKGAYfld:8K6aL92OwT:Ovw1Por9e35cfll%aT9Pfm7AWv5sQXh%YAJj:ofDXH7jBCK:McT4:3RFoD:pxlaAUYcZAOlHo8FtSDQB2EiHQqcI2oMZySoDsYkwxCuJK0SAiRUFKUisRWPIMAWzB1:F3Ea6ReXFvgXVxKiF9AN6BYeCdIVUgRyFIb:2hLd%hsRhPY8D6DyPg1H7yILjOzmCIHqjQY36R4EsOijAd3oLf%z6c38K%uU%kTti:j077r2KvMm9dX22fPp%t3yVP848gEE8vHdCBDy3g2S8vkSdfMZGLH0Jh029gci9veyJub5HysF:EgvWP4mM%IAtjaeA%85ewa%PGQJAT9KDJ1AHw%IQd0Rv0F7FENB8BYNQDAZFj4vG1s74xzhN0EeszNHH%ku9R%mKVIgGSRkIGceLiCtGLYfBRMAH5ENFR57CAAd7wPHGwkAcRrS:PwYRvpsF2D4yBUi9xkUivZoEpH2uRAq9w8PSvh1DeX5%Qvj%60KLf6eCaoA0whOA1IIHQYhCCUJRwhzDMkIAxCkCb0T0Qp9F0gMKxsEDsoeAxBqIkQSEybDFLwpehdWLWAa0TBkHRI0cSD4NnIjaTlbJl87JSngPMIr3T0hLis%LjCePdgxJjwTM9M51DPBNhM0DjPPM9QuDjMnKtYxFSUqMKwfCC4PGnUrdBR8KBcPKiUfCpAhnwXAHZ0ByBka:rEVE:t7EYH4KA1t9sII6fRdBP:zEwCl8:n7wvMd%Dj0jPTz9Erx5fVc7gn3x%td%I7p3Pm353r7SeYs:Uvl7P695LoAmuSXAt3kgASE5W4GieZhCOfnWAqc6U8Mo%s3Du3t:w9d8JIR3PLnElz1:xPY99UUQvpSFYL8TxWE:qoUOwBSE5oBTRGTAqsOIQOCC0QD5wf6AvEDOgKz::oAOfs2:4z27fzE8Sz6Eu0H97nol:Pl5Ozvk%EM7KreAugb3N:j99mw307Ydtsb1zPXU9b50vXV4s4B1gDLatZXxx7X88MW2ObAVdlFvtXaGLyF3GO6Wt4xuVngh7iD4mW4y%TGuCHnprmF6QS7AOzavJTuH78:8cfB9:PExKP2B8gc%XzLN:sXz%X80dIs:qfWDv%K2nv:a95h:zziuP7x5YP9eunG%8jsiPnU7932n:Ln8yj1wvBo94XtUvlH6uL6KecX:Erk5:y%4Un9j99A:c:d2fyJ3Bv8ttsC%z7blPkR2%z3P9sq9ubbX:Qb3ZDy2d7F8ArhBu%Z41Xtbeav63DpHuqa7Kzo8O9b53rzI%Y29wvlEvsn5AH:f%PzAhHj3Qbq4sEKMOO4Dgfk7BJ15XEXZecoHLjpyCBD7PIk0O5SKDvxtCp%8w8spPWILKH3Ryxa%VUrwfqdKeT7ESfa:MQjuf3gH5j%jRuI:%8WgAAkEl4BQw3:AVcIVAJuA1ECpv7kASj67gAD9ln:IfIe:WnuRvrb6vf2judr86fk4%9d4pzs:OC56b:gOeeW4fTkLuOu4iLlNeAf52Ld3ugc2iDqcdbh6tDSi%sD0N7s0c6I74DPvPO00SH5rdT::p:XigTp2SYJNtuKDI3bvA492%0Pv9phEJHadRAg25AQr9z2EDffqBGI4oASi%Z0E1rrlxT28OYV:PYEF7j8SRd8AQ4W3wTsEsMG1Q1CBxsHrgZT:4MFLvdIBE:vcQM46FcDSOInBLDdvQVf2qsH:tdhCQnWZQoG1G8KqtFpCfHObgcUzMAEX8mrARDHfP5MxYj7OcQs%QnEuPfoxE7348be9%HJQPnAzTb7V9Jx:XLXpf:S3KABMuJOA1XnoAQD7I8FGPAqBpvzowa%9isHsPnVB3P8nAjk:noJ6QB9Cp0CxQs6BHIN7wWOD7sH%xF9CYQUBAv4FhwMMRmRDAsbOwxZHAULAR33CA8dNQarHPcC9Rt8:wUb9PvrGXP4qBj19CAXbvEjFdPtjRIN6lgPBOaLC6fhJwcF3TYCTtjq:MPTkvepz3PyN8yw7YHJVul4x3Pl:8UO4gjFC9%TxEHcpMSe2ULFMNdzxvvUNMjs0mjKDdH:zLPPGNBHz:bT7s%%2H3RQ96x0yTkVtb66SLZZu%z2xT0xN3K91XfefqF4Dv8e%FC:Yzi7P1V5M3%cud0APzrCQN08S0GJPcrCWD8RwuNAOMLJQOSCv4DQAdnA0oC8gFe:CsAP:aN:qvwif067Eb9I%lq:SDnZP2w5ff8k%Rq:PPjHPwO5BX81OQM:O:lvfsG5wj75ufZ%WnoIfh16Pb1Eeio83nnoPEE5zvwCee879bnSvCp6eTxl%xd9HTwbvfv9NP6s:lV:nT%vwHgAugEqga4B6EJHQqvCwYM0wyDDSkN7A4bDdQQTg22E0oOthcmEKMcmRIyIlEVEygKGOAtdxokMzAchTfpHOA6kRxEPTwbzz7:GKw::hUEQIES%D:eDpE:VAvIPvkHlT3cBPA7DwLTOZX:Rzdk:Wo0eftdMer5Li7R%PAqO:jLJzT43STF%BIi1vklHxv74htK:FoYVP2:FGD%MxGZ:84NFgG7CvECNwhXBWsGZghWBQcM4gTzD:UE4BNeBYUX0gWYGgcG0hzeBRAeYAVZHqEE0h25A6gc0wIhGycCkBnWATcY2AEkFyQCQRbGAnMVwgOiFO8EqRMJBmcS8gbiEMIHQQ%CCI8N%AifC9QILgn6BysGiwbBAqQEI:9LAm:7lP:N99H8ifRw%gzyxPip8Or3ffDJ92PxF:gA82z45fRu%Lz26vdI%Mb2WPnr9L35WfJs%U7vofg27ML3c%kx90TnM:fu5QP4vuXU%d7mtfwq6YEASuz2BOTvzgmm87EOPvcsE2H60Rbs:FwZ3:68GkgAAxtDAWIaCwIqGesCtBceBD0WxAXmFPUHxxPCCvgSHA5wEsMRAhJnFXMRxRiYEK4bUA:8HX0Nkx8HC1og4AclIPIDyB4t:1Qcu:k5GR70Bhby7hsTouqgEFjnrw4p5V8NJOSeDDjkKwwr5ccLtuZKC53olQqd6n8JdOz3BwHuGgZb7wwEqfDQAffxWP8687H8d:QJ%sr1kPdS93j1LPnx8337H:Nh:v7y1QF087YFgvTnCTr2XA6G%OkSFPszF4f93hq5:70dqgHUH1cDICGrBJEhoAUjIVEG:B:sBlUelwdiHHAITRqOCTYY%QoqFqIMFhRjDt4RFBB0D5ER5Ay6EjoKdhN5B7UTngR5E7YBzhLW:rkREfw:EID5eA5O95EMs:WzCs709Aig9GkHNfVHBr32yQVx%fMFRv2BBukBGwfsBosH9Qu3B7kQiwcCFQ0HzBiBBmIcSAYyIKkGgiSyB2EpWQm6LpILZTRCDh86NRGUPzQUgEQXF7VIuBkDTPQbPE6:HVJPJB9cTzgge04OIdBM4yGsSicjjUgxJdtG7yeRRfcqWETsLeZCsDAuQTkzKj9gNbM86TaUOa83uDWtNy4x6TYYLHQ1sCZ3M0shLjE:HM8uwBeFLOgTeyrSENYopA6mJ20N3CYXDVgmeA33JVgOnSV4DzMllxCfJIQRtSMfEjgiShIKIAESXx18EbgaLhGWGIsRORfGEqUW0RTHFosXjxfTGuoYeR60GjAiwxytJfIevigdIUcrKiM2LQYliC6rJkcvFSiBLzYpNS:8KVQuVirULEIquirMKRsoDikXJSoo4CE4J6ceQiaKG08llRhxJM0VqSM0E9YiuBDAITIOSSCVC4Qe%wiVHI4GgRpVBDQYMwKiFRYA4BIJ:gYQG:wXDT76CgpW%NoGVvaOA0L0NgAk8uP8DfCs%RnupPZo7NHzDOs%8Rjq:e6n6R:t0umj65PqeurB65TpMO3r6Mbuduh18C:oL:Im6PXzgOjl9VfpHfid6pL6J%wY:cvtfv9n76IB5PBnAzfyuQR486gF0:RiBmH2DgcU%J8HwPnrB0H72gd9:GkHWf2TBrT9RAV1:WwDkfwMAQr7Mv7l%On6JfY899jySvMd70HvLetf61:n9%cL5GXlY%Hf41TfSeOb3Ubj99t%40zayOOV2B7kzNZw5OfUsOTx0uPkCdEn5U3PluXMzTfmjswL55zLFOj7ykbppsqB6o3Kquuoyr:s:MrK7ZLLzu5szL:vg82R8NPOQvFn0NfxVNJZ8pnUxvIE1:byS9mp8kPbu:EL3U:w2d6y7sHgEu2h4mTrVOSP6dnllOc754Ple%hd443pHeF16tneQuu93Pfr6dqR7GfZD%0w2G:tOtee7WjWfe2b1fbsytQB7A7UmeqG07zoPtN75jnT:%OJ03DhRtT03oPVt9xR1%vawNmk2cnc0Ng94E3Y4eMY2JbnRdhh69fYSO%y2Szzp9ri9pnbTPp%3Fz9Wd3%:zHeFgIW35kDHeCcBFrhQAXX4pUFjOSbBWvmSwVk6KoEZurKA1rsugIk7okBrO87APXw1P4M8k799fKp%6Tz7PkN9CP4OvRl9kf0zPRP9HnzXPR78lr0wvEs9C7xuvOn8AnzNPAp8urvK:Hf7x:wLPAZ7%zwKe4q8kXtxvNW7JL1TOty9y:qavkG6XX7w%dy:VXmO::A5L0AEePyAUjh0AJj31UDfd2nA9vbCgTE2sYEZtoFBs:azgfw2:8Jmt1TDJLfdA6m4SwQwONvEdnlSBLt574S:unTEhjsixJH7vIRgvAJEbPyzw:L9EsOxvaIDKT4hgpj%jkIBvykBZb92wIZ::r:jgAU:e0BNPoxA2T3XwS19HoFMfJ0Bs7vKQds7W8H7eo%B1PovQbX5SsGyOOtBVbiTAWD4QcFPOHpBHzh%wRL4jQFpeOFBXzl8gW854oGVOpVBybtSQgS8FYJAPNsCuf1eAvB%GEMgfsWDRX%jw1zAMwNkALMDWQEnQ3tBVUNQAcTDX0I9wzECR0NKgucDbMMaQ5GDlYPrQ8nEKkQuRAWEQ4R%hA1EWkQKxFkD98Q3g1DEM8LVA86CRIOJwaIDKICywrK:vEIxPr8Bq723wSP8o4Cae4QAE:qbf1c5qT6qeKs90LfiPQ53EzxntkQ7nvX5OrJ1c7netTM5IjT4eH10h3f0NKl3DfToNpG1BzZANYJ2ErYVtcA2wfXCN4n11rhstfh5JbYgui:2SXsJNvB77bcTPNi3rL2FuDV%czhpvyC4yf:M%VdAdDmRANG6NEEiun0BZfqngZw68QGFexYBonsVgXg7NkDR%0aAvLtWgDw7sH%IvBF:U:xwftO8hX6FPM4%JjzN:bR8yH0t:ML8lXzCfDI8ibuKvJm7I:xx%oG8VDplvAR6DnwF%fo72vmn%8R5mXvDeZF72HmRu8P53LvH%jV75Xpd:Bp61nxiO2A8t:v7:Na8pz12fRi9y33IPkw%dD63vqT:Ff8j:7C:dMANv9cA8IAKwZ2AkMJYQSfDIEGLhDECOUTGgu8F24NpBugD4QfhhFBI:4Syyb%EwsqgxTfLIYUIC:%E7ww6xK6MVgRJDJbDwcyFg1yMbwKfzCBCEcviAbqLeUEhiyiAysrtgLDKfkBICg7AScmawDoI6P:giEK:wUfrf52HIT%5hmM:nYXy:44FUH:LxPq:1wRxwDMD9sBhA4YA3UNXQSPDIgF1QuVBksLiwfmCmUIigoVCSMKkQmwCd8JOQkICsIIEwpLCAQK1gfiCXIHvQk4B60JRwfQCbgHOgqQCOAKuwmdCx4LTAykDNwMPA5LDdgPlw1oEbkN3hKjDTAUSw1PFawMNBbNC9cWvAowF4YJNhcwCOkWugZMFiQFYBV1AyIUsQGWEt7:yxAI:t0OOvzdDH364Qrf%AcJhvdwB6L2MAZQ9j0FhPaDBBL39wPR95cDo:hcA3L5NQMl%hsDtvoaAzT7RAO0%6IDPPw2BMT8:wRI:QYG1P1UB3v%6QhL:7kKRgC1DGAB0A6EAv4QlgMxE38EVxU0BVwXsAUwGfEFzhr0BTscuAV1HTUFbR5TBBAf%gJeHyYBbh:0:mQflPxSHyr6Nx:H9wcfcfXDHjHzbh4P8QQeFO92HU3ttxzN68gbn%qyGsbphBk76UMY8ujqFubocxUR6d0Tb%ktEvzpahCx6pUOiOutDHvsswqJ7aYIsO6RBuzviwRE8boCzPI5AZD0AQB89u:%ZPjr:Sf6Af3H%1L8Yf37%wn:AvzBAGb8ewIl:SgEQf63Ba3:GQdVAUEIHgMrCfEE1Am5BjEKZgg6Cu8J6QlWC0MJmwxNCLsNDwetDo4FbQ:WA:0P9wFiEAcAkxAZ:n4QN:wQEGn6TA:C%FAOafc8DYf2Jwwx9hkLYfYZChb3OQlU%IkIIPoUCHb83gdH:%YHgQIiCA0GhAjTCQMJwA2ZCcwRPArmFdkK7RloC78d7wtOIXoMoCQBDbMncQ18KsgN9SwfDiwvlA4wMTgPCjMWEME0RRFsNtESHjiuFMU5tBY1O7wYQzyvGt08exz2PAQedzw6H1Q7HyCZOcggZTdGIc40qyHeMQ0iqS6AIk8rCiP1J6AjsCQ1JJEhwSSmHjol9BuKJXUZnSUlF2YlDhXjJEITFiTIEQUjnBDEIbgPZSAXD%wepg5UHUoOpxvwDf4Znw15GGoNJhdVDQEWWQ0FFXMNLxSoDYQTAw4ME44OyRJUD7oSWxDWEpwREhMGE20TihTqEyMWhxTQFzYVjBnsFVEbnRYUHUAXyR7BF1ogERiuISYYsyL:F14jnhesIwgXoCNVFkUjmRWmItkUvSH9E3Qg7BK3HqQRkBw9ECIa0Q6YF3ANDBUVDI4SuQojEFUJ0Q3qB54LfAaNCQoFnQeQA8UFDgIABI4ATgIX:64Aqf0e:z78ov3a%kX8g:kd%0D4PfoO96v57vVl%eP0X:nr84f5::LI%SHyHfpe8aT60PCC%4bwyfyD8G7%yvBhAGDxmwJE8h8Fb:PwB9X0BQtw9lAOOPizESD6CRUb:CoYHf75GhkAZh36AV0fqgPEIBYFiyE3BrEhBQc7IXMHMSB9B6YeKQe6HIkGkxqrBU8YowT9FYcDrRNuAmkRWAExDy0A9QzR:qUKMv08CE:7vwUp%SwDvPaEAAz00:0k8TH7FO61%Pbqbfbl52X0:%Sq8lziQfEF4CTw%t1J7zrcpe7C2jPujtny7Z:Y5u321xnukdeL7mfXMe9r1::vmdfw8PPXBvJw2Dbz:dhj9JLZb:U62kv2Cdvt9gncSvcw3VX3cd4O98LfgfYg4bf1ieK19Pzje:Nw5RPy2eaL8Cfo9%5S6WftXOrt60frk%oR7Fjpuuw66D:tPeeS7WTmpO2z5WbtKOXa7MDkB%x95P3qZeTS6YLknejg5G:nhOVI5l:mHeVY5%bjVuii4knpWuEv6h7gC%sD3%jrGt7P7GjdxO3t3MvurNzq767cK:H13IrycN348w:eZfXQ3tD2td9F%LngyPnM4U775eLJ:ArkL:4%5XX:eOaKAKfnWQHC6NMBwenwAZfqpAE46:AArevx:xLs2:587Nj97uz3:GHtOPzX7ab7Uu5S%8nuQ:sp7277ae:F%47vQfyZ79f8g%91:UfvDP7o7p7%Z%40:7rtz::R7GAAq%vZAFfqOAHm6H4BY%euAdzl1AFh5P0BAuM3AsXhgwK14OAC3N9NAznfyQO%3kwEXd7JBBTePgXs3acF6t0CBg:eSgZf3ogG4t7LBpvfGweF4HYHoeHSB:fiIQiL5FMIVOZYCEToIwhN6q8HYOz8BnPuCwZ88OEEevKHA230CAJP9moAGPiu:sf51:xd%%j60vzd%Bn%rvYq:2D0EQAI8twAu%%QAYbtKQJu66ICeOn%Aq7nRQMW5oIDseS%A3zj%wN34jwEp%F:BBHhwwS64AoFpOBSBdbgmgVQ4eAFE%IjBh3jYwZo5J4G7eXWBqTnDQeG6UIHiet1B5:tqgfG7:UHA:JjCFf08Aiz9oYJ9vgQCgH7fwq::M8KJv4ACyz:FAvP:xQLEgAAC:b:1Ap5:5IKmf5HClz9AArR%7cJ:PlWCdz31Ah79TII7:JxB0nwiAaU7W0F2uomBDPotwK55R4BduNZ:2jheP2R34j78d2G%X:cX:cp2xb18NnQ8u:Yr:A92L3u29f07MPXWOv51:bpjtjP6IvZ1ufl2gjnjtxs5oDeBuay4NDlE%O:5ZDl0uUd6Azmtepm5lDt2ubh72bnWvIL6K70x%jU9pbpyfh66o76dOso:HvskP2I7cL%oe66:9HvdwAb8e0AbvIJAbXzwgDo9BoABvYf:wj31f3k9zz8lvhb%iP5RviR%R:23vkB9Ar6::Ea%iHwGvpt7hb66OwY%pnrJPqD6jr6pelW%gDpefqT6Kf6V%ji%kfoKvtb6Hv7k%jT%:DoMvx16ZT8Her0:OTqWP3K69H90%x1:gLuV:9b730A4PDoAZHylANn9HsFWvaXB2P45wl7%moMnfwbD8T%7xHuANgUGwPMF0oFvhpyB6AdgglqIG0LFyMsDaAlvQ7%JxoQJio9EREsKBK9LdkSIS9OEzgwihMFMZ0TjTGZE88xhhPCMVkTXTEGE6EwhRKbL9sRVC4MEdssIRA7KysPfSk6DqEnWQ2hJYYMgyO7C1Qh9QoZHzEK0BxsCXsapQghGOQHzBUtB4EThQZDEe0FHA9uBRYNFgU0C%4EcwkABdkHUAVtBtsFKwWLBgEERgfsAgAI%gHICEEBsAnGAMEKewDuC1kAJw1iAGAOmgCMD:YAnxBlAY4R3gFVEloC8BLRAlsTNgOLE30DeBOfAx4TlgN:EmMDoREJA5IQkQJfD:4BEA5RAacMjQAwC7n:uQnb:lEI9:0CBxb91gVG:NkEkfsPBO:6bANN%tcCpPk%Av34pAFl%AsB2:dsAFj3vf:b9v:%dfZG:jH2o:0R9hr9D:aq:C32Yfx09lP86vaM:JD3Bf1i%LD9WfmA:nL6bf%q%3QA:fyMAWb%rQLj:9EDbgHtBP4C7AWHBLMG:AUxB1YHZQecCFUH1wkKBwwLhQY8DMcFZQ3RBIMOpQOQD0QChhC7AF8RGv8XEnD9qhLF%xQTH:pVE4f4bRML91wTsPUbE370rRJ:8xYSvPJbETvydhDs8WEPvfEdDqHxsQyX8SQLnfF%Cbjxzwfs8SwGQPKjBLPyMQMz880Bq:N1ABT0Mf949Av%6fQL:XL1OPwV9pj7zfYs%5P38:pk%PH6O:kq%xj6ofv3%k:80vsp:Zz8K:5J:U::z:2LACv%0wFj:iADf:5vBIf%vgV8:v8GWv4pCB3%NgnA:SEKQf3iCp78cwvn%98LNvs%DKf6nwxM%gENLfpeDUv6tA2t%gcOW:tSDlX8jQ6Z:bAOHP%3Ds8AoQ6gAmoOfQQVDl4GqA09CCgNGgqbDPULCQzVDX0LwQ8EC70RoQrGE1kK2hU4CgIYSApGGpAKpRwOCxYfwwuOIa4MAiTGDWYm%w6nKEAQtyqTEZMs%hI7Lm8UpS:nFb4wWBd6McAY3TEhGvMxdRvBMbMcRjHZHYEw6h55L%cfNy7OIL4smCEVK0AiSCnDImgnHyOBJU8jliNUI6ohMSPIH%0i%x2KIkscCCK3GmkhPxm0IOYX8B%uFiIfkxVNHo8Udh2bE6IcuRLWG%sRFhs1EWcamhDNGSMQTRnUD%cYsw%bGMMPZRgJEEUYihA3GEoRNhhIEkYYgRNmGPEUlxiKFtIYQhgTGQsaUxneG48Zrh3AGW0f4RkLIfkZfiIRGsEjKxrKJDwaiyU3GvMlEhr3Jc4ZliVuGdMk8Ri0I1YYPyKfF4EgyxaIHtoVYRzIFBcakxOvF0ESMRXTEKMSTQ8QELINgA0GDPwKTgqLCIoINQa8Bv8D5gTsAQgD%f8fAST%Kf9q:Cv9zPon%0n5Ifng9x33lPYq9XL1X:OM9NDx9POD8LDzde%986juHfQc7tT01e3j9crtPffw7dT4Pe6W%qzuevw773L%5O9vAJ:wXwJm8TQENPLkBQPzZwfP87gIlPTPCU:1qQr:9UQLpfafC0T3vAva95wLZfhDC974tgpA%fYJgfkDCZT52gds%XgGA:njBFz4JAN890YBYvZM:w:1O:2J8xf72:Hr%Azwv:Yd7pf0EOxz8unpWvCz51LudOVi7DDjjeru4Nnotd5K54vc4uV12qHkediF46HWkeL21MfhgNMn4T:Ss%A00WjgZdBE4NTPQuCDz13gc8%Q4KLP0%AO0Bvhr9Bg4X7RmuF30sPhldPV4dLUyuEm1p3hiNdT4fLY8eBa2nvguNv03wDdXd8u3r3ePN8b3ijged3u4Nrci%FC3Pnhs9s04irbOeKk2g7iH9q:4abZXOFH2fDgB9l54OLY89:O2FjfwNio3rPY592h2Bzdh9hM3GrYgNtT2MDaS9gQ2lfYctl32OjYrdh22P3YI9hp2fTX9dns16TaDNh921nYhdzT2Lzdddkc3zram%Ac2zXiGtzi4zDdneVZ3l3njN8Y6cPgw%r44VLsL%O%7XDkDO:B5UXwJedu8ZToh:IH6ozzeOt99OLsWvU%7iP2gO:S9qDwZ:eX8ej3XvJX%O3ysPhA8%74WvMR%UPzIvn98iz5jfIy%fbxOflA8Ub5cfBe%Y3vfvmW7qH5k%3F%Y7s8PmN6yn6k%px%qDpwfqv6BH7vOdd%8rmp:vi5fT7D%VM:Fjktfy:4zL9SOPG:fnicv7X4jL:4eIBABTj3QBx48QB%OO2AqnkrgN85aMEbeaMBXnnXwaf6BEH2emdByDr:wdz7DkI0u1LCDvvMQil8OUHBvJlB1rzswai9NYF5PXdBB730wNM%MECZ:mlAWn6fgBT%1L:Kfwv:u:8Hv2l:Sj8TP5Q%%X%nvpw:xf66f%7%UwAhfmYAHf5zgCW%fMA6:kKAXX6GQEv%yUBFfwyASb9QwFd:loBsv9:ASMBvwG0AiQCawS1AksGcQNJCFEEUgpKBVUMUgZDDmkHERCNCLgRugk0E%oKgBQVDJcVOA10FlAODxdWD2IXQxBtFxIRMxfDEbYWURL4FbcS%xTwEsMT%BJUEs4StxBvEvEO2REMDQkREAsAEAAJvg7hBkMNuASSC5ACswlzALMHbP6jBYr8kwPZ%owBYvmR:yX4oP0b97r7Qvbj%Zn1HPgf9WX2zfS%9J:0J:OT9KHxqvQt8N:0zO4w9YbtnPVi7Cj2Y%vW9ovqqPfd6Zr4X%mu%RPp4Pr36Cn8BumB:ULp4P6t6UEARuqdAQXr6gLe6xUExuwPBbLtzAWc7kkGgu%HBmTwiAZB8U0GFfLZBdryKwWN80gEMPQ1A8H0:QE:9akAqvVF:wD22P1B9mX8a:bx%oP2gfmM9iD4iPbR9nj2mPVd9nf0OvZw8xb2g:Lx9a3xyvXn8KD1L:B29YfvU:Xy7kT1ee5P9SHuefXv7cb15O049gLu1fZN7qP3y%6n%ILv4:l08Fj7ofEH:Qnz7P6r9P8AfvY1A3z4hgWc%uwH3fxhCjX:3wybAWAPAgTjEV4GYhSoCNcW1Ao5GdoMhhuyDr8dWxDlH9QR9SEdE%cjMxSxJQ8VSSetFacoDBbGKSwWpSoRFkIrwBWcK0QVuSumFJ4r9BNPKzUTzypuEiAqnxFFKcsQQyj0DxknGw:JJUEOUSRnDbgikQwCIcYLNx8HC2AdWgqEG8EJrhlBCeMX3wgnFp4IfxR:CPEShgiMEboIXhAkCXcPywnaDq4Khg7GC3AOBg2QDmMO4Q7QD1kPQRHvD6YSmBDyE0wRHBUEEhwWtxLqFlsTfBftE9AXaRTmF80UvhcSFVUXNBWvFjQV0RUTFcYU0hSVE3EURxLyE%IQWBNuD6sS8w3xEXcMJxH7CkoQgAlYDwUIVQ6PBkcNHwU0DLoDHgtfAgUKDwHrCMr:0QeP:r0GZP21BUz8wQRM%%oDbvo3A7f5qgIr%UcCzPgTApr4EQKY%EICxfijAiD5NAOm%fIDUvrbBBv75gX4%wsH3fxECL:9jQmW:uQKXP9HDA8AtQ2sACkPLQGhEI0BFBLIAYAT3wHhFNQBMxanAXMXXAGZGPYAnhl7AIAa8v85G2P:xRvV:h8cTf5FHNH9ORxl:f8bDf2dG838Exuo:GYan:yZGa:8rxjS:KoXAf2QFjj9ZBVy:S4UrP3vEuL9qxES:mIQOf4aD1P%2A1j:qIMa:56C3L%Zgp8:m4Jkf6aCLn%7wf5:nAHUf8dB8H:%AZDAAEH0wAyB2sBhQcFAvQHmgJ7CCYDFwmoA8IJGwR5CnwEOwvGBAcM9ATYDAYFpw38BG8O1AQtD5ME5Q8:BJoQ4wNSEYkDEBI4A9MS8wKUE7wCSRSZAu8UiwKCFZMC:hWwAmAW4wKlFi0DzRaRA9gWCgTGFpYEmBY0BUwW4QXmFZkGZhVYB9AUHQgpFOoIexPECc4SswoqErwLlBHlDBQRMg6zEKQPeBA6EWcQ7xJ7EL4UsBCiFggRlxiFEZkaKBKhHOsSpx7IE50gvBR8IsQVOyTaFtUl%xdFJyQZhChUGosphxtWKrcc4ireHS4r%R46KwQgCCv7IJsq2CH1KZYiFykxIwIopCO4JuwjQCUHJKAj9CPdIbcj:R9TIwgezCIJHCYiCBppIQwYmiAaFr4fOhTYHm8S6B28EO4cHQ:qG5IN3hodDMwZxgq4GJQJpReTCJkWygeWFT4HnhTwBrUT3gbfEgcHIRJtB4ARFAj6EPkIkBAXCkQQZAsUENUM:Q9eDvsP8A8MEIARLRAEE1kQcxSKEL8VuxDdFuoQvhcREVsYKxGuGDIRuRgpEYMYDxEVGOMQdhedEKgWOBCrFbEPfhQEDycTMg6vETgNHxAZDH0O2ArPDHQJGAvsB1sJRQacB4UE4QW2AjIE3wCVAgH:DgEd:Zr:Mfs6:kX57vxi9777l:Wz%vHz1:l58i:5NPG%%CHwhfhD74H4mu6u%CbuCPnn7Y:53O1D%gXuI:tf7in84%5N:Yvvh:5R8M3:LfEXARryWgIU848DF:SwBCH1tgUw9p0GQ:dfB1P4%Qdb%WwIXPq5CFP74gg%:OgIFP3ICMv9fQhb:gQIv:5gB:X%lQb8:qwF1P6pBH3%kAP1:WACOv0aAU38vv8w%07%6:nM:IH4Qfv69rT5V:Uq%J3zofbN8Rb16u%H8:zt%PEI7HHwFer17iXohu075iXsW%TS6orijenO4FjoLt8657TdO%Zo3GPlT9u25GnaMuS12dbjMdme493YiOO12I7jsdip48vY0%P92AnkRdlG5KHZh%QL2sXkftr85PPaKeVn20rl19te5UHcZOWi3F3l9dxF5TjdGeVp3d3kiN2T5JTdQ%SQ3e:je92X41XdOuMb3dLiydxZ4mHcz%Hm2zXhXtuQ4M7a5N852jTfn9mA3gPZzd1j2CDdwNeA3BrX8dtz1nfby9UW2yTVzdqC1J7a6tOK2mLTk9rt0sDajdIU20HSk9sO0jvc%NEK3QTS:N0y0gzfgdI14PDSc%F908XiKtQo5PvUmeXz1RbnE9ea6FXYHeqx2ZbrHtv:7JXcUe4O3ojvht%k8PfgofFb4n3yreMz8%fkxPMD5jT0%%aI9M3nw:R36Of09uj29Enp7:R06dP0eemn9F7pcvQq6Tz05ugL9Jbo4PM%6Lvz2%eY82zndvPv5lfzZuZA89TlNfM95Tvzp%RU8xvkg:Od48bzMeMf9Nvij:Sj4hj1kOK59ajicPbq4jv3VeMX%OrjA:mm5Pr5g%Xz%nzm5vuL58v8seid:erpVf4x6%z%f%xa:87tmv8c76z:aPCQ:67xSf:w8tr%LPRK:mD1nP2H9tT8mff3%4:4Cvtq%RP6J:oX%cX6G:hB%yD3mPsm9sz7LvXe%z701Ptb87H7jPJ6%9jxNftC8eT6zPCK%nPwJ:o08L35DPBN%f3v2:gH8G34LfAI%HHwsvfT8HH3UvFI9%3xOvef8kn3ZfN59zv0zvcg9Ur4EPbu%Af3t:kA%KD6%Pik%%35vPzf%t39yPsB:6T8HwBs:TEBHf4xAq3%HAMW:%8DT:%pBFf:SQUv:8oF2v4oBlv%Xgaz:WsG5vxQBvf7Cwbp%pwFwPkDBYP4RgQ7920D8fWAAqz0hQFz84IAS:J7:zzxeP5H8H39cO%K:LXum:sV7q36ie26%QvtwviX7MT3KuzC9sXrvfVs67j0IOu28%bqvfLA6tDxtOr28MbqN:D86pnvVusf79TrzO5z7KDuMO2b7gPuue7n7vTu0%9J78Hwsu%o8SnwhPKp8E7zMPEF9L:xpPRW8ir19fKT9Zjz3:VA9A727fQg9qH1FvZZ9u:1E:ep9cv3R:WA%Mr0L:k19NT5jPNt%tLy9foI8m37M:HS%1TwI:xu72H8h%6N:KLtrfzH7Mb8:Ovc:ELr9fyc6hb9DOpC:Zjpff1H6cT9HukX:h:pd:5N6en%q%lu:zrqBwD86rUA8Ot7ARXtWwJv7lkD:e90BL:xrgWv8wQHy:V2CA34BApu%qwL6fxrDXP:PQ8EAhsRlAQEEx4H9xSbCfAWBgztGFcO5RqHENIcjRKtHmQUbiAGFhEicReUI6IY9iSaGTcmWRpSJ%MaRCg:GwspdhukKY4bCCqMGzIqbxsdKjUbyCnfGjUpbxppKOgZbCdOGUImpRjvJOwXeSMnF%QhXBYzIJIVbB7RFJQcHxSyGn4TzRjyEu8WfhIgFSkSaRP2EdER7RFkEBMSKA9sEiIO9xJSDbETsgyVFEAMmxX3C7sW0gvpF8oLGRnVCz4a7QtPGw4MRxw1DB8dWwzSHXgMWx6GDLoehAzuHnIM%R5SDNweJAyaHucLMh6XC6cdNAv7HLwKMhwtClAbhglbGsgIVhnyB0EYBwcdFwcG7BX3BLYU3QOBE74CVBKhATQRjwAkEI7:Iw%i:i4OzP1EDQ39Zgxm:JYL2fvaCmb7MwoQ%6YJ2foyCcb61Qjb%o0IHftZCI37OQgp:DAI7:w:CNz9Zgjv:qUIJgD7CH0BZAnyAt8JfwRkChwG7ArCB3ILaQnvCw0LYAymDMEMMQ4TDa4PUw0cEYINfRKjDc8Ttg0NFboNMxasDTwXiQ0mGFEN6xgEDYkZpwwAGkEMURrXC4AaawuLGv4KdhqRCkAaJgrxGcIJjRlpCRkZHQmXGN0ICBijCGkXawi7FjMIABb9BzsVywdyFKIHqBOBB%ISbAcjEmMHbxFlB8sQdQc5EJQHug:EB1EPBQj9DlgIwg67CJ8OLAmWDqYJpQ4kCswOoQoHDxkLVQ%LC7EP9AsZEFAMkBCcDBcR2AywEQYNXRIrDR8TTw33E3gN5hSsDekV6w38FjAOGxh4Dj4ZvQ5hGvwOfhszD4scXg%BHXwPWh6LDxEfjQ%jH4APESBnD1kgRQ9:ICAPhyD9DnMg4g5IIM4OCSDBDrcfvA5WH8AO5x7QDmoe7g7iHRwPUh1dD8IcsA84HBYQvBuREFEbJBH5GtURtRqqEogaoxNvGrwUbBrxFYEaOBeuGowY9BrlGVQbPxvMG5AcXBzSHQAd:x6zHRQgbx4MITAf4SHzH44itCANI3EhWiMlInMjzSJaI2QjECPnI5oiUiT7IZ8kPCHPJGQg4iR8H9skih67JI8dgCSKHCckfButI2caFSNPGWQiPRihITgX0iBEFvsfZxUeH6MUPB72E1QdYhNoHOYSdxuDEoQaPhKQGRcSohgSEr0XLhLlFmsSHBbHEmUVQhPEFN0TPBSXFNATbhV:E1wWSRNZFy0TWhgoE1cZNhNIGlATJhtwE%obkhORHLATEx3JE2wd1hOYHdQTmR3BE3EdnhMhHWcTpxwYEwAcrBInGxsSHxphEekYehCKF2QPBhYgDmIUsQylEhoL1BBiCfMOigcFDZoFDQuYAxIJjQEgB4D:QwV6:YkDgfv5AZ:5lwDZ92f:N:Zp:rr0mf1k8:b8N:J7:DLxKPxT8Pj7le:o%:Pu8vtp7hP89%1J:KDtlPxp7fj8U%1y:WHt:f2T7ZX%6O00:2Hu2v:37oUApO8yAV7w2wEe8XgC4fEFA6TyeQNl89IDIPQLBNH0IgR19RsECfb7A4v2yQPz9oMDPfcpA2f3uQJw9zECWfeWASH36ADL9icAWPZO:8r1Vv4j9Tn9YfT2%4PzkPqL8gz5ffFy91rwx:Ul7xL03O1T8oLsjvAW68Xum%n97BXoO%uH5ovp9%T0523jfObu4STlg%Du4zLf2uL93e3h5dwo4ezbieAS2wrgWNqm38HZWd9N2R7f%Nj23r:Y396f2Njeldje3p7Y7t642APf4dgX3xbZI99W2SLfoNkS3:LZ9t5I2s:endqh3u7aa9412yvecNve3Z3bg9272xrdx9uj3L:bHNyg24Tbatve2iDbLdrD2nPZVdq02NfZ9NdN2TnXutiK1iLY6dWG11XV5tbM1ETWTNSh1dfT:tRy01zUItO80%rSItPO0pPSz9IS0u7SpNEr007RiNMW0QjUAdGt1BPRddVN0WDWr9Fu1z7Sn9gA0:PZ9dNn2xjV9Nxm1pPe19c84GbZ6eEJ25Djt9wn5WXeqOYN4Azoq%FT6TvjfOq35IXrHOZu7GjnNO2X6NbtqOlS7pfqo%5i68zuCezO7o7sse7x7HruMe0v7k:t1e1K7W:tIe0D7dnslux17DDs%evY62rrkuvM6l3rJOo663npLOvS6DTrNehX66Pnk%se5%XrpuZL7D:mwezt5UTtseXP7Y3lW%6G5efuo%V17%jlCPBP5qHw0OY98Wbn2PEQ6HHyzugG85rplvNv6iL0Ruuq9B:sMfX87Ln13e1B9sDuyfak71H3h:Dc92bxa:g88v34AfOO%bLzGfpL9Jz6z:QV%zz1gfuT9eH70fUy:Pb1dfz%9af86PXF:LP1z:xk9cj8:fS4:Ib0qfwD9KL8fPOo:PXyvfxz8uL8%PEZ:YbxY:0f8cD9x:Av:oDwsP5H8D::GvDa::zvgQDw7zEB%u:qARvwpwJS8GUDn:AjBAbx3wSH8ZgFG:JIBrfy5wZS83MH5vPtB3H0VQjv9KgIXvXeCLz17wgL9tQITfaMCIP2GQiq9oAHwvbJBsj2:QW99h8FofYvBHT2LQM89hsC:PX9ALj12:9x9br%JvWc:df0gPyE9GT7KfRJ%sPzMvlS8yT41vIn91DyPfbC8Wb1LPGg9JDw6vPv70PzSu%s8qHuIvLy7aTxQ%008Zns0:D664PwZ%tD8N:qEvBk6vHv%unj76Xp6%9n6QnwPuk58Crpd:Au6b7wTOkP8YPpavHP6dHxLupC8p7qufIe6y7zrOuU80bs4vPr7BL0m%0n9FfuIPQd7:7z6%%787:wV:Oa8c7yd:Ig8lDzT:Ea9F7w0fRS73T1Mu4G9gbth:bR6:j2nOpZ92vprPdJ6PL3QOcx%FXma:iR5ab49%Tm%IzkLvlR5H:5SOTa%XDkQfrJ5LX6TuU3%:vlyfvL5m38t%cm:bjo9P3I6dT%4urG:wfsywA%7eQBiu4SA%7vUQRj8aAF5vIAB3b0dQgW9gAKxvegC4X5Tw1P%wcPIf3EEPj%gRLQADYUpALfFW4EdxcqBv0Y0wduGmEJxxvMCgEdCgwaHhgNER:zDeUfnQ6UIBcPFyFiD20hgg%TIXgPiSFKD1Eh:Q7uIJoOYiAnDrUfqA3rHiENCh6TDBUdBAwUHHYLDRvrCgYaZQoIGecJHRh2CU8XHQmkFuEIHRbECLQVxQhoFeAINhUUCSEVYAknFcIJRRU4CngVvQq9FVALFRbrC3sWhwzuFiANaBexDecXOw5nGL0O5Bg1D1cZnw%6GfUPDBozEEwaVRB6GlwQkxpFEJIaDhBwGrUPKRo2D74Zkg4zGc8NjRjzDNAXAwz:FgcLGhYACiMV8wgdFN8HCxPFBvIRowXTEH8Esg9fA5MOSAJ3DT8BYgxBAFsLTP9oCl:%jgl6:c8IofwqCNT7nAcW%yMHavrBBtL5dQZP%T4G3vgZBoL4CAY:%BAGHvg2Bif4gAZc%O8GvfiCB0j5Ngj6%QsJ0fr9Ccv7CQvi:CwMDP5fDUD:nA5zAN4PmQEdEakCWRKdA48TcwS:FC8F4xXSBfUWXAbsF8wGwRgeB3AZTQf3GV0HUxpUB4caPAeWGhsHihr3Bmca0wYyGq8G6RmRBosZewYYGXIGkxh2Bv4XhgZbF6AGqha%BuwV3QYhFfsGShQbB2wTPgeJEmQHpBGHB70QnQfRD6AH3g6OB%MNbQfnDEMH8gsXBwoL7AY2CsEGdwmXBtIIbwZLCE8G6Qc%BrEHRgaoB2oG0QeuBikIEQeoCI8HRwkhCAAKwAjSCmYJugsRCroMvwrRDW4L:A4YDDcQtAx5ET8NuhK3DfcTHg4rFXUOUxa8DmsX8A5uGBAPWRkcDykaGg:eGg4PeRv:Dvgb8w5fHO0OsxzyDvocAw85HSAPbh1ID5gdfA%3Hb8Pzx0PEOIdbhD0HdgQCR5OESQezhFJHl0Seh78ErserxMNH3YUcB9SFeIfQRZiID8X7SBEGIYhShkvIkga6yI5G7cjFhyQJNwccCWIHVUmFh48J4geICjhHvsoJh:HKVgfgCp1HyEreB%nK18fESwoH2As2x6ZLH8evSwYHswsqh3GLDYdqyy6HHosMxwwLJ8byyv:GkkrVBqtKqYZ:Sn9GD0pXxhwKNEXlydSF7Mm3RbFJW0WzyT%FdMjjhXXIiAV3SG6FOkgYRT2HxgUAR:fEwceuBMJHaYTDRyrExQbyxMfGggUMhlfFFEYzxR:F1IVvxbmFREWhxZ0FTQX5hTqF2UUpBjsE1UZdBPxGfYSbBptEr8a0RHnGh4R4hpOELEaXg9SGksOvhkTDfMYuAvyF0EKxha5CIAVLQcwFKMF4hIbBJ4RlQJoEBMBRA%b:zYOLv49DdD8WQyF%40LWPreClT5Uwp6%PMJx:e6CTL3ogm29qQJT:a2Cfr1zwmz9esJd:UICkb1JQok9UMKEvVgChD1fwoe9aUKPfXXCm31GQut9WgL9:W%C0j2FQyf9mcM%va3DFz3CA3E918NNvi9DbX4JQ5C%ZMO2vkDD3f6bg8R%9IPpPsoEC:8bBCt:JkQGf2sEG39phCn:YUQx:1FEND93g:I:U8Pr:2YDoX9vg0::cQM0vyoCzf8Zwpo%wAJafp8B0L56gX991oEpvbYAkb1aQHn8xAAiPLN:inxo:3G75T8Xu6f%%7sv:p46%35Auok%ZLoY:gu56n30uXy9oLkQPZO46L1VeI09bzhEfWP4Uj1veHG9RjiaPZy4v:2qOJi96ficvdo4iX37uGD9kzhq:Wh4MT0DeDz86zfUPOH3%Tyn9%v8uffqPJF4LTyl%Cx8sHgfvK64BTyk%CD8Wfg6vBK4FvwN%DW7xfgSe:O35fuR9%t7Xjef%xe3Q3rA9xh6Xnaj%fd2LTlR9fv48vVWeJw1P:gNdPg3xPS9N4G0TDeBtCI3Q:P89wYzmLcHs3P2yTMOts1y6:aXMo92qTJ7tkPycPZo8i72WTI19lcyBzaj8iO2gTJMNu:yQXcx8oR3SDMVt7Czczfms9k4Y3RCuOH06:kedVJ5lvX0Ocj2TnpzNp56lHciOuv3V:s4d787OHfW%2t4ILtUeGB7d:hZe1i4jrt2%IB7UTjuuya423s4%Mn7C3k%Ot:5Onr3uT860jlMOy45X:sKubi7JXmTO3y5rTtPOcT7nnnZe6y56fu8ufZ7kHo%%6p6BTvM%kx7%XpXu:A6qHvuuv778jsZfDb7dXw5%488eDvkfHA8MrxgfHm8SDy6vGh8uHxDPPe8W3z8vHQ8yfyPPSB8rv0:PJU9ZnzDPZY9OD2NfW:9yD2mPj99lf5tvf1%UH4bfqd%Lf6yfjP%sX4vPqa%JP6XPhu%iT4WPr:90b65:cn%tH39fm697r5sveE%cj3UvkC%BX5U:i:%Kn4SPj5%LP3PPn:9m:5KvaU%TP1q:kh9Lf5BPO6%ejxtfnS8Kv5zu%m%fHuu:lX7gL6GO6M%jLuW:uP7mL8DO%D:Ybvmv7g74X::%8qANDveABN72wAge4MAI3tcP%a7LX%yuv4:THrT:3f6sj83Opv:C:rSvzI61X8iOx3:ELti:zg7Xj8Zu4::O3u8:uJ76v7N:Bt%%TwLft58dn66vFj%i:ywvlE8vX4JPIB%NLx9fZa8eX1zvDe9D7w6PO17wXzPe878t3ulPGX7hTxY%618DjubfAL7jPw2%0B8KTtz%9e7ZXvAu1O74:s%u4L7KDueus:7uDq0u056lPtiunE7OfoMexv6KvrP%hE62voDuv16A:r1OlF6:Pqoes87Azslu1v7PDuu%w68ObsZvHs7G7yzuxR85DsF:Q77Mz02et99XHrN:YP6wT3wurn95rq3vib6t35u%rR%uvqr:sf63H8VOsc:ZDruP3X61H%L%zy:qPspv877XQA%e1aAdruWQLY73QD8vCsBCjy:AVz81MHxfSfCA321wlI9wELffgnDLf5Uw38%oUOTvy4D6797RAg:ysSqAB5E0cC2xT8A1AWyAXVF6oHYxmcCfQalwt:HI4N%h11D1YfPxGGIN8SfiFLFDwigRXEIoYWHCNcF0gjBRhMI34YKiPJGOoi6xiQIuoYHCLFGI0hghjtICkYSCDKF6sfbRcUHw0XeB6gFs0dIRYWHZ0VXhwcFa4bohQCGyMUURqZE5UZAxPSGGoSEBjVEVUXRBGgFrcQ7xUvEEQVsA%kFD8PHxTqDscTww6rE9kO1hMzD0MUyA:jFIYQoBVZEWMWMhIUFwEToRe0E:wXORQcGIgU%BeaFI4XchTlFhcUExaZEzYVCxNoFIAStxMEEicToBG7El0ReRJFEWISWBFqEoMReBKqEXESthFJEp0RAhJhEaARAREiEXYQfhC6D68P0A61DroNmA16DGIMEQsdC4UJ0gnlB4gIQAZBB6EEAgYPA9MElAG:Az4AzwIa:wgCL:5qAXr99gD5:K0AqfyLAIH8iQB2:J8AffzKAI:8DAGt:GMBz:zCAeT8FwLX:FkCofyOAk:8ywL2%yUDq:ulA3v7TQRq%xoFfPsIBq77Egf5%y8IVfxVCbn8egog:ZULhP2gDN:9mQ0u:nwOcv5FD6z%8w:c:ocQAP8FESD:bBFC:7oRav:nEZT:8BG4:9YR1P%fEez:UREGAO8QJgCCEFIAERCPAKEP4gAvD0kBrw63ARoOIQJwDYMCugzkAv0LQgMyC48DUwq5A14JuwNiCJ0DbgdvA4wGOgO6Bf4C%AS:Ak4EhwLGA2ACbANVAkMDZwJQA5kClgPsAhIEYAO8BOsDiAWDBGkGHwVbB7wFVwhaBloJ%AZeCpMHYgsvCGYMzAhtDWsJdA4GCnYPlQpxEBcLYhGHC0oS5AspEykMAxReDNoUjwyzFcoMjRYTDWMXZQ0xGL8N9hgnDrUZpg5sGjsPFBvcD6MbeRAWHAkRcRyIEboc8RH1HEASJx11ElIdlxKAHbESux3MEg0e8hJ9HisTDR%CE70f%hOIIJAUZCE4FUUi6hUiI5wW9CNJF7Yk6xdmJX4YASYCGYQmeBnrJuAZNyc3GmwnexqTJ7AatifjGt8nIBsZKHQbcCjqG%4ohxyRKUUdSioSHgMr0x6sK3QfQCzxH8MsUCA1LZcgki3EINQt0yD3LcMg%i2XINstTCCXLeAfLy1YH6ksvh4NLB4eYiuBHakq6hzpKVwcLCnjG3ooiBvYJ00bQScsG7AmHhshJiEblCUwGwYlRhtyJF4b1yN0GzAjiBt3IpIbniF:G5MgNxtNH7Ea1R32GTocGhmOGi8Y2Bg4FxcXMxZKFSEVdhMDFKER3BLQD60RBQ51EEAMMg%BCuYNywiSDB8HOAt9Bd4J5gOOCFwCTgfjACMGgP8TBTn%IwQN:VQD9:ukAvD6CALz%XUB:fjkAA:4UAAr97r:V:Ym:5z1nP7:9Cf%gPTM:Rn0h:3H81L9h:Ms:VnzG:028x:9FfMw:e7yQ:3F8lP9qPJs:abymv298uX95vJH:hPzt:5C8y3:c:On:6jzHwDg84wAFvTqAE30PgGJ9IoBzfTRARX1CwJa9TACj:U8ArD1LQK49QECqfW3AYP1UQFJ9dEAAfU8AK:0k:9Z9Nz%::Ma:pzzVf0r8438rPLD%yPy9:qX8Sz6DPFp%X7wrvjp7:r3SO9P95:usPbv7SP2OO2i9XbsI:Wm65n0yer%8%PpTvP36IvyBui08RHn0PAf5uzvOeUX72TkV%6f46zt6%IT7Ujii%y54RLsP%Gf69PgJutt4JvqB%D66Z7fReky33:owt6t51De1%be3QXmb90:5QPdh%Sc3NnjOtw249:bpuKN2zHiSdva4RTbnuHp2nPhv9pM4YbaHeE12tjgxNl14DTZ9d%J2Fzfx9ev3u7W790B1hvdA9U13PfTQ9vh0kfax9FI2a3QStiZz1PXjs5p1o7NjNWczL3Uvsv70wHLS9NuyrbSCspB0tjJ9NHYydXRDMro0XPKLdIIy53Sxcss06bM0tOpzYrUxc5P1evPE9YF0cjWBNJo1%jS%de:04nYmdQi2X3Vxdlr1m3aXtcX21bYw9tV2XDcXNoZ3Wfbud1t3FHeZ93m3lbef9853x3gEuC:4ODgY%Gk4QjiX%Kx4hbjYePP4x3kh%Tj5DvlseXl5X7mgeZC5w7n9ueI55Xo8OcZ6Unohuma6N:p6%gs6j7pcuqQ6bTq3un26irqQet76p7r0uoN7CvriuyE6wvt5OuV7VXsN%7i7P3ui%3t70bu::AM7y3y1u9086Pw2PRu8VT2M:Lf9:Dybvmo8:n6YfR%:Bz19f3W9Vn:h:ahACv3zAHB99oCSfjOA8H4pgQp%WMFgPkFBsr5lAYM%hMHSfqIB4H68we1%lsI5frDCBT7MwlB%68Jb:s8Cpn71wq8%34L0:srDN772Qza%4UNxvstDp77yw5f%1gPA:vOD4f6KxDs%W8QNPmbEGf4shCN97sQrfa8EMf1uRDd9LAQ7:OeEADzgBAT8lYQKvEiEEjw4g9s75YPmu49D9Pt2A4a7WkOcOzxDdrrcA1a6%oM7%phDJTq1gtF6k8LBerRCt3pZwrV6RsK9un0CUDq7Amx6vwJQ%sXCuzrMQqb7D0KP%0xCtHtCApQ7sYJvu5yCR3vEwlq76kIpe81CNLvtgf07zAHDPCoBhjwIgYX8KEFC:AqBfTvvQTV71cErO:xA33vhQNL7xADHe%SAvjuDQLe7oMB0e74AM3ubgDT7ur:4e5q::fu8f4U737%NO8L:k:vjP1b7:L8U%8y:DrvTfsY7076%u5G%ezuQPj07kP3Fe9T9lDvc:Wh76f0B:Dy84HwUvMQ8cjytPFV8mzy%vE087jxDfSQ8ff0gPHu9Yjx7val8fH30vHz%Avy8vlM8uv6lfLd%%fyxfw:86H9nPNz:vvzPP9Y9AAAsfTCAAb1hAFb9UoCtPUYAxb28gOD9t8EAffkBZT3:wY%%CkI%:hWCcb5fgqa%qILe:vJDHT89g2M:SgPxP5cEBcAjxGBAb4S:ALjE4QE%BQQBvYVmwfYFh4JnReWCkMY:wvKGFINNRmMDoYZpw%7GaAQ1RlzEdIZIBK2GaUShhkFE0QZQxPvGGIThxhkExQYTxOeFyoTLRf6EsMWwRJkFn4SFxY2EuYV8hHaFboR8hWTESgWfxF5FnwR4xaJEWUXoBH5F7wRkRjVEScZ5hG5GfQRTBoCEuAaFhJ1GzISCBxXEpgchRIlHboSsB3zEjoeKhO:HloTQB%DE7ofoxMsILsTkiDKE%kgzhMtIccTXCG1E3ohlxOIIXETiSFDE3ghDRNSIc0SFCGBEsMgKxJnINARBSB1EZ0fGhEtH7oQsx5TEDAe4A%eHWEP%BzRDjYcKg5XG2oNYBqUDFkZqgtHGLQKMhe2CR8WuQgVFckHGhTvBi8TMAZVEpAFjRENBdcQqAQwEFwEkQ8lBPYO:QNgDuED1Q3PA1oNxgPxDMYDnAzPA1oM5QMsDAgEEgw1BAgMZQQODJMEIwy:BEMM4wRmDPoEgAz5BIwM2wSODKQEkwxeBKcMEgTODMcDDQ2AA2QNRgPTDR8DWg4PA:UOGQOfDzkDVxBwAxkRvQPgERwEphKHBGUT9gQZFGYFvRTTBUsVOwa8FZsGDBbtBjcWMAc5Fl4HDRZ1B7EVcgcoFVQHeBQeB6MT0AatEmoGmBHsBWkQWAUqD7IE4w0ABJkMSANVC48CHgreAfwIOgHxB6QA:gYdACIGp:9lBUr:0QQS:20EBP86BB3:NARa:1QEtf%ZBCwAAwXBAI4FbgE0BjAC7wYCA70H3gOcCMEEigmmBYYKiQaPC2oHowxJCMANJgnkDv8JCxDTCi8RoAtKEmUMWBMiDVoU1w1UFYUOSRYwDzsX2A8jGHsQARkTEdkZohGxGiwSjhu0Em4cPRNPHccTMB5RFBAf1xTuH1gVxSDPFZEhOBZTIpQWDyPmFsojMReEJHcXOiW2F%ol8ReVJikYQCdhGO0nnRicKN4YUSknGQsqfRnLKt0ZjStFGkwssRoFLR8bsy2MG1gu%BvzLl8chy:DHBgwJB2nMIUdNDHkHbkxPB41MokepjLKHg0z:R5mMx8frTMsH%AzIh::MwIfDDTPHgY0iB7rMykeuzOwHXgzIx0mM4ccxzLlG14yQhvwMZ8agjECGhkxbxm1MOcYVjBsGPovABijL6MXUC9VF:suExedLtkWLC6kFqYtchYKLUEWWCwRFo0r4BWkKqoVmylqFW8oGxUhJ7MUryUxFBskkRNkItMSiSD0EYse8hBwHM0PRBqLDhMYOA3oFdsLyBN5CrYRFgmzD7UHww1dBuoLEwUsCtoDjAi2AgwHqwGsBbwAbgTq:04DM:9PApX%bgEP:qgAn:33:0b9V:8B:cT%zvw7:qr8vP2R:EL9ffzK:Gj8UvxO:Nn7Lfxg%wX84:rW%2D6ofvX%Wr7Svk2%734C:sy%Oz6qffa%iH31fqY9tz6Dfbq%n:1:Prv9BL7Y:Qu%%LzVvtz84r7FfPI%8TyC:x%8lD8QfKX:A:y4:zm8TP9w:GI:aLx3f2B8TH%XfF%:jLxwP4B8fP%yPAY:4vwMf9K8ED:BvBH:8HvSP9870X:OO8:::PuN:%u7i3:bO4k:yvuHP:r7RX:pO0K:1Xt9P7%7NH%o%yj:kjsa:7p6yv%gevi:Qnri:2F6iP99ems:F7pJPzA6I77G%ju%nXnSfrQ5qD5L%b0%JPlQPj75IP3Z%S99tjj8vVP4yX1zuJa9FXik:Pl4c3yf%EG8iDhPvHE4HTwaOCo7wjg2%6h3wzuL9877azeZewW3ovrat2v6qncz%nW2%no8dr95:vZB%fx2AXm0Nfy5JfWyuNC1Yji1tMs4VPStt%70CjeEM%C3FbNydqTywPZzMk71wnIetVOxsfTosQo0gvDotCQwTfPOcDqzQu:vcwOvrPLRb3Oyq%8EMpLvHnJFbwIyQ28vcgyvJXIg7yQyPq8qciTvd7IRr4syRC:j8nrvwDK1sB5ys3B98rPwnXL2cPwy%bEZszwxdLM%MYzzf7Hi80KyeLNIMo8zkHLns5ozAjPlc1:z8jOBND:z5fQOdE30XTS4NGw04:S7dRD0yzW%dNt17DUq9ho1ePZHdYQ28:WMdx710ndINhX3r7YXd9W2Vvg59lS4W:aP%Lu2iPjZtv%49jb0ORK3Jvlvdxg5jXdJOe33evnSd656O:ejumr32rqfOBI62HhJexU4vzsUuPO7VfknO5j5Wrvd%Y%8JXnGfG86Pjx6enY8hjrt:ND7JX0au119Y3uU:ar7y33xfD799nxu:jk8mv55fMO%tv0pPrH9S77q:aw%4b3KvxW%KH8G:kU:dT5g:2B%un9I:tE:rn7k:5F:Nj%xvwP:z79NP%r:UH:Cv4x:1r%Av%a:rb%zv5Q:vn%zv0c:y79Nv9u:ET:jvtE:4:6Nf9z%Rb:Pfjn:vH2qf6U9V3%LfQG:sDypf1S8Tr95u:H:H:uT:wg7dP7zOtX%4jq3:pV6Wz6OegA%jnnm:lX5j75luXv%Pjkr:h65IL4G%Rl%NfjWfiu41v4n%Nq%KnjgfjI45:4%%PB%D3k4:iL5Af54uQo%T7lRPmc5Vf5%uVa%VfmTPmu5iv5:Ob2%D3nrvhv51X4k%ft96znffe%5wj3yOeU9svnI:bE57j1tedU9Z3n9vR%55z0WOdD9C:n6vMC547z1uYs86rmxfJ%5ljyUObm8SHmcPHy5fXwxeV28J3l9O975W7vXeXk7kTlWO4u5cvtG%U:7Qzlt%wA5TPs%uS26:7kQ%sU5eHqQuWT6ovlW%rv5Tzqb%Yz6gjnQuq752rqh%iq6mnpAutd6m:rYuvu63TsfuyS7R3tuu7K7ezvhu4o8VLvbvIq8L7zDfEY9frxevbu8uL36vNK%e30s:r09Rr8:vaC:Qr46:4X%VYAJ:rEATj7NQNM:KwEZf0sBoT%tget:0YJ3QDYChMCZQxLA%YNgwRWD7sFsxDzBvkRLAgnE2kJPBSoCjcV6AsYFiYN3RZeDocXjA8WGKwQihi8EeEYuRIaGaETMxlwFDAZJRUTGcEV4BhEFpwYsRZIGAsX5xdUF3sXjBcIF7QXkxbOFxwW3ReoFeIXOhXfF9cU1xeEFM0XQxTDFxIUuhfwE7MX2xOtF9cTqxfpE64XERS5F00UyxeYFOMX7BT:F0kVHhivFUAYIxZlGKUWjhg3F7kY1xfnGIIYFhk1GUYZ7xl1GaoaoxljG88ZGBz6GcccJRptHVEaBx5:GpMerBoMH9gacR8AG78fIRv2HzkbGCBEGyYgQBshICsbCiAGG%Ef0BqmH4kaWB8yGvgeyxmJHlUZDh7SGIcdQxj0HKoXVBwIF6YbXRbqGqoVIxryFFIZOBR7GIAToBfNEscWJBLzFYURJxX0EGYUbxCwE:gPBBOOD2ISMQ:LEeAOPxGaDr0QXg5GECsO2g::DXgP2g0hD7oN1A6gDZEOiw1XDnwNKQ5yDQYObA3uDWsN4A1uDdsNdA3eDX0N6g2HDQAOkg0hDpoNTg6fDYcOoQ3ODqINJw%jDZMPpw0UEK4NqBC4DUsRxg35EdcNrhLrDWYTBA4bFCEOxBRCDl0VZg7fFYsOShawDp4W1g7bFvgO:xYVDwkXKQ:3FjEPxxYqD3sWEw8VFusOmBWzDgkVbA5qFBcOvxO3DQoTTQ1NEtsMixFnDMkQ8gsMEIQLWw8gC7sOyQotDoEKsw1GCk0NGgr8DPwJwQzuCZ4M9AmVDBEKpQxDCtAMjAoVDegKcQ1VC%MN0QtpDloMAg:vDK4Pjw1sEDcOPBHlDhsSlw8JE0wQAhQCEQMVuhEJFnISDxcrExIY5RMNGZ0U:hlTFeEaBxaxG7gWahxmFwodEBiRHbQYAB5NGVce2BmYHlIayB67GuweFRsIH2IbIx%mGz4f5BtcHx0cfB9THJ8fiBzKH8AcACD%HEEgRR2OIJgd5SD5HUchah61IeseMyJ%H8QiICBnI9MgGySVId4kYyKvJTsjiyYbJG8n:yRaKOUlSCnLJjQqsCccK5Ao:CtrKdIsPSqbLQQrWS6:KwovbyywLxQtTTCtLd8wOy5nMbsu4zEsL1Iyiy%xMtYvADMLMD4zKjBuMzIwkDMjMKUz%i%wM7ovsDNjL6oz%i6dM4IujDP8LXYzay1bM88sNzMrLAgzfivJMsoqdzIPKg8yUCmNMYwo8DDDJzQw9iZbLyImYi5DJUotWCQSLF4juipUIkQpOyGyJxEgBybXHkckjR11IjQcliDLGqseVhm4HNUXwRpLFscYuRTPFiMT3hSNEfsS%w8sEXMOdw:3DN4NjAtkDDYKDQv2CNkJzwfICL8G2AfIBQcH6QRRBh8EtAVsAy8FzgLBBEMCaATKASMEYAHuAwMByAOxAK4DaACfAygAmgPu:5wDvP%iA5H:pQNs:6EDTv%RAzb:cwMk:0UDGP8GAxb:tQIf:1ECMv:ZAU7:SwFx:6kAl::w:73:Jv:g:03%AQBr:SAAg:w:AJn7XgCu%nwAxfmbAOH4uwAE%NwAM:cBAW:2KgG69VgBEfWKAXT0wgHi8:4BXPM%AuLygQJ38sYCG:IMA83xUAOK8ZEDUvHLAyHx:AP18CAEy:A1BKLwOgR08C8EP:ASBP:v4gOz75wDWe8:A:XuzQKK7kkCHe66AbDtIAFF7X0A3OzR:3PsG:8K7Fz%oeuS:TjrvvzQ6uD7aer4%gTqB:qj6Q35SekL%PjoA:ey6PT1d%jg9EXoyPMZ6K3y8eeR8cfncfCY50:vYuco7iDn:%zO5tPraeao6uvlfelS5VLoneQn58rj%eXb4sfk0eGQ463gU%Jw3xHhHd7J37Pcet432yLdq9nC2xXYW9p61vHY39SE10bTGNaz0a7UKtBI063O6dFEzZbQ8ctTz7rKJc6iyQ:NrsgVzODHN8s7x3jKwcbYyXHGVslLxvDITcanyHjGd8jIxmHIO8diyM:HdsiAyJnIS8nKyDDKBckvy0vJRsybyXTN9Mm1zlPKBtC4ymHRIsvC0o:LItT:y37VcczR1uXMG9hbzVnZ082M2k3Os9vKzszcSc:W3czP0t5T0L:f39Cg4G3Rd%H90UfijtIO4yHTzuO104TkTtQz5e3U3OWT1YTmQtYt5:zW2OfD14TomNgv6X7Z2uly2oPqdtss64nc1Ouq3Xzs294k7Rngzu1j4XnuueIn7xrk1u%I5YjwAuc58Yfo6fEU6pTyqOs38z:t0fPY7mD0c:Dl9A7yZPWr89:1SPVZ9uj21faJ%FT3KvrX98n7YPhj:e749P6B%XgAFvrsAa36TQNE%5sE2vvTBW:89QYC:f8Hkv3wCB:%xgml:oMKIv8nC5T:sQv2:yEMRgB1DH8AqwyfAMUMnwDBDH0AowwzAGgMvv8SDB7:nwtT:hILY:1uCk:8tQkd%%oIzfkOCGH4Iwfc9ikGP:UkBY7zFATN8fsCAvDZATPusQBk7Ib:mepb:tToNv0c5xj8dOUF%%Lj::ln4gf5COEi%MXfUvef3pn2m9329brcaPX:2%70aNuJ9PbaNvSn2vfzeNrI82naqPN32pPzoNqH8%HagfM523:zptt:8ybcgPO53ILzXN2B8wzefvPE3nfzf99t8zfgXvPo4EjziuEq8xviAvOY4tDyAOOW8lLjUvKO4wXys%Ov8cTjUfHB4%vwreN98IrjCfBb443vIuMI7%DifO6a4ujtUeJQ7QbitOy64RfscOF56yrh3Orr4D:qtuCl6YrgDuln4HzoTODt5zvgYuc14NvmPeBa5lTg3uV74GnlsuD75Pjgl%RQ4TzkueHs4zTiqOO%4nPjV%NO4:7jPOOy5D7jc%VV40PmguMh58TjDOgc5APpiuQF6g3lEeuj5SjsSeZK7f3md%6%56:viejv8FzpN:I26ofzFOvd9PPrO:bT7KD3s%0L%ZTuffp37:L7W:Bs:UHx5:4s8mEAG:PWAQ:0QgMH9aEEAPbvBfj2Jgft90QI3:hGCc75LAq6%vgKofuqC4P8RQxf:coMNf45DQX:lA3O:9sNjAAQDj4BNA7hAUsOdQJaDvwCYw52A2sO5QNwDkkEdQ6jBHcO8wR5DjoFew56BYEOtwWMDvEFnQ4rBrcOYwbcDpoGDA:NBkoP:QaUDycH7A9KB08QZAfBEHgHQBGGB84RkAdrEpkHFROfB8sToweNFKcHWBWsBysWtQcDF8EH3BfSB7YY5AeMGfYHWRoKCBobHwjKGzYIZhxPCO4cZwhjHX0IxR2QCBIeoAhJHq0IaR63CHMevghqHsEIUR7ACCoeugj3HbEIuB2kCHAdlgghHYcIzhx6CHcccQgeHGwIwxtuCGgbdggPG4IItxqSCGAapAgJGroIshnTCFsZ7ggGGQsJshgoCV0YQwkIGF8JsRd7CVgXmwn7Fr4JmRbmCTIWEgrFFUQKURV8CtYUuwpVFAILzRNQC0ATowuyEvoLJhJTDKERrgwkEQkNrxBgDUMQsw3fD:0NhQ89DjYPcA7yDpUOtw6rDocOsg5iDqsOSg6WDkAOdg5HDk4OWw4eDnsO5g2lDqcN1g5gDQwPEA1FD7oMfw9dDLUP%gvmD5ILDxAlCywQtAo%ED0KQBDDCTIQRAkREMAI3Q81CJUPogc3DwcHxQ5mBkEOvwWuDRMFDw1mBGgMtgO7CwcDCgtaAlcKsQGkCRAB9Ah5AEgI7v%lB3T:DAcM:4IGu:4KBoL%pwVh:l4FV:4wBWL%HwV%:isFq:5VBej%nQU1:wMGk:%GBgAAJQd%AN4HCgGuCKYBkglRAokKCgOQC9ADpQyjBMYNgQXuDmoGHRBeB04RXAh9EmEJpRNrCsAUdQvLFX4MwRaEDaQXhw5zGIQPLxl6ENcZaBFsGkwS8BonE2Mb9xPFG7sUGRxxFWAcGRafHLUW2hxJFxYd2RdVHWgYmx37GOwdkRlIHiwasx7MGisfcRuxHxscQyDJHN8geR2GISgeOiLVHvoigB:FIykgmSTPIHYldSFdJhoiTye%IksoZCNPKQokViqzJFwrXiVdLAwmWC28Jkwubic3LyMoGjDZKPUwjynJMUMqlzLyKmEzmyskND4s4DTYLJQ1Zi0:NuQt3zZNLnU3ni78N9cudjj4LuI4Ay9COfgumDnZLuI5pi4eOl8uRzoGLls6nC1YOiUtOzqhLAI6ESyrOXcrNjnTKqE4JyrqN3MpETe2KBU28Sf1NCMntDNLJlYyaSXgMHskUi%BI7AteiL5K2QhMSpCIFooFB96JtsdliSaHLMiURvUIAMa:x6xGDcdYBeCGxMW4BnNFFUYjhPiFlkSiBUuEUsUDhAtE:oOMBLzDVcR%QyiEAwMEhAsC6YPWApbD48JLg:RCBkPHggXD3QHJA:SBjwPOAZbD6YFfQ8bBZ4PmgS8DyME0w%4A%EPWAPjDwQD1g%7ArQPfQJ7D0cCKA8aArsO9AE0DtQBlA27AdoMqwEIDKMBHwulASAKsQENCcYB5gflAa4GDwJmBUMCFASFArwC1QJlATYDEwCrA8r%NASN:dIEXvyFBT:7SwYx%h8HNfn:B0v45whz99UJrfbHCvr1ugtb9awMzvSbDVP0hA7p82cPjvNCEETzFxEH8%MR2PKoErLyYxOT8hIUePK2FF:ySxVE8tEVJPJFFv7xpRbT8fAWpPElF3fxRRdN8VEXKPFHFwrxJhfy8O0W3:CZFtHwKhbF8J0VtvDxFKLwJRSG8DgTYvAtEjXwBhH:78UPwO9tDnXvAA0e74ALt%7vCUDuTQi37Z0GGO3gBF:sFgOL60EBmOph:4bpeP1T6If7:eaR%Ybllvfu45n1NuKZ82PgmPF43pfvedyY7WjanOtK2KTpJdax5:zTxOXV0d:jts8G4qXNO%Cmy4Lev8nd3PTHTdtFxtPZtMRx2EPDJ9f1wfjV0MDj1Na:6dMMvwrTc75F0gy%m9HXvQrR1L2O0P69JdBQvs3PyL6Ez2C:Sc8WwBzP6cD7ztbB587dwt7O%MPgziTF7c5exgTPo8cmz:HIUc9FyoPPnMu7z:TM9c9LzjLQnM9u0ObQqtAm0uLQWdMX0YDUSNGZ1XXRpNaf0aLXydGU2PTRe9kh0lnaU9Iw24rSAtzK0s:cFNOX3WnTV97J0xLfNdTG363UdeAz1SDhxdXH4WTWbOIR1w:jytey447YU%Rf2fLkPNqP5STbKOYa3MDmHd1Y5y:e8%dR35PoheA46c7h4ukr45Dqm%RB6x3m8%uv56XsTulU7fnqAu6u7K:ubO5g7zDwFvD58dTww:Ob8Y31avJT90PzE:kk9Mj6DPVt:Pn1AP7p9n3:2vfjAMv4MAK6%WUDqPp:BJP7gAV4:GcGV:0zByv%5gfv:n4In::8CDUAXgmtAKQJBAHMCTgB2AlIAcUJMQGVCfEASAmFAOAI7P9eCCj:xgc7:hgHK:1XBvv7hAWw%p8ETPmrA9T3rAJL9qQBuPSWABzzhv998XT%3u9j:UTuV:yy7FL7K%tY%rXpbPlS6I74BufA99TlAve:5FT2yOO39fDiKPU44qn0oOE39Cjh0:PQ4HvzleAv83Lg6:Jl4LDyauB98n:gUfKi4C3y0%AP8g:h%PFS4eXxm%HU8erhxPE84rPxk%Kg8e:ii:FP43PxsONW8RDkMPFp5ADxuOTD8PjkePAp5SHwS%W:717lU%9l5eHuX%Vr7k3l9u0w5YPtCuUW7dvkr%yn5E:sb%T26zTkpev341zru%Ma64Dj3%pJ46nqF%N36uviSOrI4hrqrOLs6Zjiv%mL4pLphuJn6YniQOmX4iDpsuIJ6d7i:ugb4wLpauMV6crjOuk65HLptuS%6T:lH%rT5ZTqcuYb6xrntOvN513si%gW7Vbp3e0x6rHuGuuP7xXsdfAg7V7xOu5J8mTvMvOb8Bj03PH69Cfz1fV49Kr2zfV49yT3Pvh7%P340fm2%ST7a:p0:B37wP3O%wX:gPxAADH9cAHi:ZACkv6fAz3:mgTj:34FhABJBh8B%Qa0AY0HRAIFCM4CYwhRA6kIzgPbCEME:QizBBIJHQUeCYMFJAnlBSgJRAYrCZ4GMQn1BjwJSAdOCZgHbQnlB5oJMgjbCYAIMArQCJsKIwkbC3gJrwvOCVQMJQoLDXoK0w3NCqsOHguSD20LhhC6C4QRAgyJEkUMkhOCDJsUugyjFe0MpxYcDaQXSg2ZGHYNhRmhDWYayw0%G:UNDBwfDtIcSQ6QHXEORR6XDvEeuA6PH9MOHyDmDpsg8A4DIe4OVCHgDo4hxw6xIaYOvSF9DrUhTw6ZISAOayHxDS0hxQ3iIJ4NiyB9DS0gYQ3KH0sNZB86Df0eLA2VHiENLB4XDcEdDg1WHQIN6BzxDHcc2gwGHLsMkxuXDCAbbQyvGkEMQhoVDNoZ6At3Gb0LGRmUC8AYbwtrGFALGhg5C8sXLAt%FykLMBcwC%AWQguOFlwLOxZ%C%cVqAuSFdgLPxUPDPAUSgynFIcMZRTEDCwU:Az7EywN0xNTDbMTbQ2ZE3sNgxN5DXATZw1dE0UNSBMRDTITzgwaE3wMAhMgDOsSugvVEk0LvhLYCqYSXAqLEtcJaRJKCT8StggMEhsIzxF5B4gR0QY2ESMG2RBtBW8QsQT3D%4Dcg8nA%IOXAJKDo0Brg29AA8N6:9xDBn:0wtH:jgLeP2hCq38EQrp%4sJL:sSCX:6qgje%VcITPkaCM349Qdg%OcHBvjyB7:3FgiM91EIaveiCFj3CAlV94AJYfcHCnv3mwqh9zcL1PfaCxP4gAxe%CcNtPjMDRX5bw6E%RAPAPqwD4n6UBAe%:AQv:uREWv8MhIf:dMS2:1zE5v%EBRf:6gUIgA6FeMAwhWgAUAWVwKxFgkDFBe3A2kXYASyFwgF7hexBSAYXgZIGBAHZRjKB3cYjgiDGFwJiRg1CpAYGQubGAcMrBj%DMUY:g3nGAQPFBkQEE4ZIBGXGTIS8RlEE10aVRTdGmYVcBt2FhMchxfGHJoYhx2uGVQexBouH94bEyD7HAIhHR76IUMf9yJuIPcjniH6JNIi:SUGJP8mOSX:J2gm:SiSJ:gptSjxKtAp6SvgKuAs4yvWLdYsyS61LbYvfS6dMCkvfDG4L04yJTARM3EwwjOaMFs0oDDbNIQwPzVIMIY17S%vNXUvuDXiLqI1NS5rNXAtFDWVLJ00pysENKcqSTOYKW4yeyhzMVEnXDAaJikv2CTbLYwjcSw4Iuwq3iBNKX8fmCcdHtIluBwAJFAbKSLmGVIgehh%Hg0XsRyhFfAaNxQ:Gc8SpBdtESYWEBDLFL0OlxN0DYkSOAyiEQoL4RDsCUUQ3QjOD9sHeg:lBkkP%gU3DxsFQA9HBGIPfQOaD78C5g8KAkAQXQGmELYAExEWAIQRfP:2Eej%ZhJc:tMS1:05E1v9mBPm:OwTevwzFBX8bBS2%5QUXvunFAn7ohS2%oMUZPpIFBP67xPF%XYTe:neEjj5JhL:%FAR0:haELX4RQ%p%BIOr:jCDMr4Vgv6%NMJQPk%CJv5nAYK%vEEjPpAAx:7jgHB%97:cfw1:iv9l:zv:Qf7uv6I%Yv:G:hgAMT2OQGE9RUCW:T0Akfz1QNJ8rcEYfGZBZHweAba71QHPu8sCLzu:ghU7swJBO6SCsztUAuq7QMMnO2nDKLtOw247b4N3u0vDhHujA5R7tYOm%4KD%:uJA9J7yIPqO8BDwnwvw5p8FgOxfDLDRnxFw1h8TwMmvE5C8LxEArV8cIIzvFSB6vxwgVq8RYEC:FRAo3wdgDy74j%OO%J:FzufPpe7WL4Puw:9vzqFfSb6eTxHOiv73:mee3G5ETr8eIV6QTh7eYB38:k7Ny84snateCb2LneadbI3DbU49oI0gzZ5M9E18:NjtXQy%rT78lb0jDI49CYxoLPKcU8zuPDD83Gwv3L0sEFywbBKMphwGXJ4L%8yIK:LshGv7nHLL9dxzO:F8dcv%fGpb:KxgvAvsaPwMHGL8HSxuzB78bEwhjHtcNLx7rEh8fRxcrH%MYRyC3IW8htyaTIt8rpyAnMKsljzWTJxM6XySfQxMmL0e3J6dITykDUOsqN1WPKztaSygTYy8os2RHLR9pny1Lbz8tN3EzMOt3ezBreg83t3jjOt9:8znrgzM844abQ8eGM0abietJV43LT:%Nz1KXkfdVJ5ZLW7uW015Tm5Ng45yXa1%d423Do39wC6Vrekenq3yDqkOGw6k3jQush5dbrDOdu7AvpCe0e66rtQe1R7nDv:O6q8a3v7PNj8DL2HfF6%Nrxwvqb8gX9X:M::yX0bQHu9IkDufWRBYX2gAdQ91MJGvgFC%L4kgym%fkNYfo4DxD7UBCt%0IRN:wPEq78uxIS:UUTY:2uE6H99hPH:SAU1f0sFMn9HBSk:fATaP2qExH9SROe:NASDPxAElj7mxGF%uMQlfkaEIv4Qg9q910ONfZtDfH0cwyj83ELTvJnCvjwVgmm70EIW%4oBx3tDgbx6:QE2%rfA9zp0AL16MsBJejRAG3n5v:L5gz:PeZC:sLliv1Z5eb8AOVV:Lfk2Pt95HD7UuQb%zXk2Pol5Kf6JOSF%jHkc:pN5G76deR3%qXkivrZ5KT6EeXC%kvl4PqG5fv6wOUR%:jlHvst5iH7X%YY%5Dm::rD5tf6%Oad%iznVPpb5:35f%eb%ZnnMvmn58X4q%dY%Kbn7feX54f3feco91bnz:Yj53z25%Yw9qbm6fVl5qX1JeZh9erlG:W15dX0iOWM9GLlQvRE5fXzMeWm8yjlVPMo5QPzMOW18j:lbvJV5S7yduX38aXlyfHi5abxKuaN8XrmgPHV5oHxQOeV8b3nu:FI6PDx3egy8oDphPIx6uXy8OpV87nr0POI7FL0Xu3Y9ELuZvU17:r1M:CO9jnxH:dH8qz3XPMy%Hb0sPiV9Sb5tfaR%c:38Pnh%EP67PmR%vD63frh%yH7wPxg%5L9oPta:uH7Ev8i:Lr:Y:xVAKn84AD2:FsBSf3EAab9FgIJ:kkCZ:5jAsL%cQIf:3gCgv9yAuf:WAJMAC4CsQAAAhkB3AGGAcUB9QG0AV8CowG9Ap8BGAOvAXcD0wHYAwgCOgRQAp0EsAIBBSsDYgXCA8AFcwQdBj4FfgYhBuoGFwdgBxsI2AcqCVEIPQrDCFELLwlnDJkJhg0ICqYOdQrED9sK4hA6CwMSlQsfE%wLMhQ%DDcVhQwtFsEMGRfyDP4XGQ3TGDINkhk2DUAaKA3lGgwNhxvnDCUcvwyzHJAMIh1QDHodAwzNHbgLGB5yC0weLwtpHvcKdh7NCnUesApjHp4KPR6bCvwdqgqgHc0KNx0JC8QcVwtJHKgLzhv9C2EbXQz7GsUMjxoqDSMajw29GfYNXBlZDvoYuA6XGBQPNhhxD90X0Q%NFzYQRRejEPsWFBGsFoQRYhb3ESkWcxL%FfUSzxV2E50V%hNyFYQUUBUNFTUVjxUpFRMWLxWaFjkVFxc:FYYXQxXqF0UVQRhPFZEYbRXpGJUVPBmrFW4ZqxV4GaUVZRmYFTQZfBXpGFIVjRgWFR4YwRSPF1cU6hbaEz0WQBOAFY0SsBTWEeATJREXE3IQTBKzD3sR5Q6nEAkOzA8tDekOWAwCDocLFg26CikM7AlBCw4JWgocCGgJMgdvCGcGfQewBZEGAQWmBV0ExATHA%sDOAMIA7oCEAJiAhUBOwIsAD4CTf9gAnP%oAKq:QQDAv2RA3P8RQT8%xIFovvnBWb7wQZC%7MHRvvDCHL74Qmo%:4K2fsdDBj8Mw1l:DwOufxRDyj9ehC8:ZoRTP6iEr:%oBM3:5AUyv9fFWEAIRb5APEWqgHFF2UCfhgQAxoZqgOaGTsEBBq6BHUaLAX9GqgFiRsoBv0bngZNHBMHexyfB44cRgibHPoIoxywCZwcaAqGHC4LahwLDEscAA0uHAQOHRwQDxAcFxD6GxoR3xsgEtcbNBPuG1kUKhyNFYscvxb9HNwXch30GO8dKhp2HnUbAR%1HJ0f5B1rIBgfbCFUIIQijCGiI78izyTwIxYmHiV4J0sm9Sh8J44qtCg0LPYp2S1BK30vjCwxMcst9zIAL8A0JTB6Ni8xGzgUMqE52TIXO4EzkDwSNBM%lTSLPwI11kBENeFBVTW2Qlc1bUNbNQ9ETDWbRBY1:0S7NBpFKzTERD8z9kP6MeFCkTDIQT0vzEAXLuM:GS3yPi4s7T0%K888Pip:OxMp4zmSJwM4ySULNgIkGzR5Ii8yFSEsMK0fDy5EHuUr5By9KXsbwyccGj0mCxknJUsYCiRvF4ciFhasIEAUux4ZEgQd%w:eG2EOPxtXDbgabQxQGrcLzBr9C4ccig26HosPMyDaECkguBCMHv8OJRxWDCYa3gkzGUIIKRlzB5IZ%wa8GRoGHhlDBFMYPQLvGNoBoBvlAzcfFgfeIWwJpSLhCdUhtgh8IOwGuh%cBfkfNgWbICMFkiBeBEQfaQLqHKT:NBrh:NAX4PoQFuH5qhR5%QgT::gMEVn4Fw:Y91wNiPfLC0z3fQpf910J5ffRB2P4ZgVS%D4Cp:ex:qX2OfvN9Wf4uvU49ln2TfQ:91zzGPmr9CX9xPfvAm:6RggJ%5QLevnFDG32gQz38s0LK:C2C1jukQxA7RcOsOzqDwjsOBF%6jwR2%jlEDzpcRJU7IoWX:BNG0nzkx5a9MAf%:NiHzXzjR5E83oerPSzH6f2fSHl948invcVIuD1ByBk8wcdPfETGjLw5BcO8EkW7e93FFHvGBKi7qQPiO7FDSnvtwz37x4M9O8hC1nu5QhM60wFv%cGAZ7k9fxa4pb5x%DB9knf0vPU3crwit3x7lrfXu9P4jLxQuRE8sHjEPGS4FTtW9u154fVkOGr0Gzcpc0k2X3MqdeKzDDXiMxv1n7Lk9TuyVTSSMk20QnKptE0y4DScctf0iDKs9CBx8LNZ8RDytfBO8e1wKrFU8H7xR7DkMfrxDLJwMXVyTrFBsmZwwHHssGkxF3AxcKyv3jBSb9VwBa:T79Yv5e%6r8TvmPAfb2xwMq8:8D:u0zBBLuAwdW5ucG6uELCELg7w:a3h8RJuD:GHLn7yAm7IM1zvgnSrcJQ1kfG0tgmyCPZ4Md616XFw9RmwlnSkr9H0TO%zNF9vnnTEMB31SDCB9fnw0vYg8U42uDHM91Hyz3gos7u4ZbQ0%Gx0G:gX8%b3oTNQ90%zCjdXsxm3vDNbOBo0IriItM35IzVJeVC12:lWNiC5TrZmOUr2ozlG9tX5f:bTuUR3bnlkd6Z5oLgzOe44gfp3eSw6WjmUOnv5h:oqebq5mjmeeb35ibnqejg6HTrnetb76TvhvTn9LT6QPq%ABf%KAW1:zkHTv8gB1T9ZgV3%sUCuvcxAPT1eP6L9Qv%fPb::hb4wABp%WcClvr5A5b8VAZT:2MJUgG4C4IBQQwAABcLVv3GCD36AQaq97QDFPZKAjz1dQHH9N0AVPRGAGDzOf:38ab9yPAr:AHwG:sI7:35ee1p%HHrdPYt6VP0%eY58iPlVfCr46DueuIN7YfhrOtw4Dnqtt5B6Jfc7uW:2urjXNl64mzYsOGE2BHiQ9om5ILduudR4c:rReT57hnl9e%j45XuyeDJ63Xdieg:2mXl3Nfr4trWqOEm17XhQtin4sPZ%%OT243l%d255:jgi%qW4wXtheTh7Wbjvey04ArqHt185o3ZA%P11nPgsNUH34nVpt4z1h7fCNfA3zvXv9%61i:fDtar3m3VUt7A1ALeKtTS3bPTvt0h05TdedJe3erRKt1o0dXc%tCF3OTQitz%0J3cvdA43PfPWtvzzkbaFs5K2TLOP9k80CrbONQO3:7Y4uMu3VjosN8r6%nfmetE3iHqC9wU6GbabubV2azli9ol5njcyOcp3wjqK%J07HflEe806RryR%2Z9R:xA:na80X7xPSW%9XzBfq%8Uz3du9U9Mbt8:EX7Z:wj%1w8AnvQPHo8IbyTPJw88bypfOa8nvzUfJa8yfyQPPY8fDy:vAu8qzvI:F67mbw1e1m8LXtDfEn7kXySO8e9MDwMfbU8cD3BfJg%ELxBvgH8Ar3ee%C9ojwjvcT8zf6XvbE:c75kQGl:MoE:P1nBq39OgZk:PsE2PpQA475uQEK%d0AlPkNATD7KQLy:ToE0AFlB1wGVQsRC4cPbQ92E6ASRhb2Ey0XiBNFFhkSVBSBEB8Shg9oEKQPuw:kEB0QGxNMEfAV9xKGGF0UBhq0FJEaExTqGi4TYRtOEq0bOxF8G8sPzhoMDhAacAzgGZoLeRrIC68buwx0HUcOpR9BEJQhBhJ8IuESPCKpEmMh1hHbIFgRZyEYEgojHhQbJaYWFyciGb8oUhuXKbQcLynpHLknMBy0JfEaeiN6GXchThglINgXuR8eGFwgUxlYIukbliW3H2wpBCQTLSgowi9yK7MwEi2sL9gsNi1NKxMq:yjxJosmnyTbJMQjhSRhJGcl8yUWJ70n9CgIKSkqliljKsEpHCrNKaIpbympKFgoASe5JuEkByWfIrgjwCA8I9If5SMEIKolKiEQKPAiQSqfJGYrSCU3K6AkNSo8Izkp8CHWKEohEClkIaIp5SFKKnAizyrlIuQqEiNFKqUi1yiCIasm1B:2I8UdICGYG6keuhkLHZAYoBxhGH8dWBloHzsb2SF0HTUkcB:AJaEg6CV2IJkkwB4gItkb0h4qGB4bERS0FzQQOxVGDRIUmws5FDELPhWxC3wWZwyjF9oMvxgkDbEZQg0UGsEMtRlpC8AYhgmJF3wHbxajBdoVYAQdFvUDbhd3BLwZ6wWAHPcHAB:OCeAg8wpHIp0LfSMjDKEkjAyfJcwMVCboDMEm5AwAJ8kMDCeTDLomEQz2JSsLzyQPCmAj8QjnIfEHyyBTB3AggAcRIb0IpiIHC%MkFQ5TJ34RiSnSFBErkxdxKzEZbipiGSsoYhj:JLAWUyGyFKodzxKNGoURZxhCEWcXNBJgFycU6BeXFrcYIxnEGbsb6Bo6HrkbKyDbGzchORt2IRUaQiHiGAkhDRglIdsXyiGbGD0jkhrWJZAdeinxIGotKyQAMSAnLTToKQw3jiyKOfkumDv7MDs9iDJpPsMzHT%zNFg:MzX9PkY1ET44Nfs8XzUsPOY1tjvLNoI7AjijO6I5PDzHO1M9Rz7FPsBAS0DsQo9BhUQyQg9FukERRL4:gEFLPLc95DdMOR0z4zRxLvAwTiqfLQsnFCvIJFgpZyMjKJQiDCfuIewlNiGyJFIgJiMUH:ogMh0NHoQahRo9F9oWxhOAE3cQohCJDWkOSgs4DSMKPw00ChkOEAsuDyIMJxAQDegQwg16ETQO8RF1Dj0ShA48EkoO9BGrDWQRmAxEEPIKbw6vCFAMJwaQCvoDlQmYAnQJFQIhCmAClAtyA8wNOAWrEHcH0xPYCeIWBgyZGaoNmxthDmIc0g2qG9kLshmqCP8WvwQaFKIAbRHH:DcPj:mkDTr30AzW9ZwMPfWsDC31rAxf9YIMnfUXDM31MAvI9YwJOvUtB:fzWgQ:8mABbvBv:r7uzPuJ7er5Vu0b%WHuPPlw8N35JfOS%iL2F:sK%VX7uPtL%z3%8PqUADj6kwIZ%R8EdvcfBSD1cAUl8iEF9e6UBB3sQwT16ZEEnui0BRjoqQdx6GAKv%noDejrKBKS7scWbfFsGzz00B969mwjf:eeJRP3NiaI9X0lYvPaIxXxvSH97o8fUu2SHTvs6Rvf68EaOewoGgrt%Bkj7vwZhu8iGh3xWhqV8mIah:PPGbzzTRg38%gVHfLdEpTwXg:Y7qwLW%1FCIjskAVq7I8D0uwaAp3tEgGn7kgAue%L:6Xwzv5N8fr9gfHF:P7w4:qQ7yT4E%1r9J7pyu%a5aHqkuF15eXdueDM2rrcftie2SvXf9fc1nXWaNdo1onYDNcI2iLYqtt32ebchNoH3ZLatNtP2R3Z49am1ZbTrdG8z6DNxcvzyRXI:cb6xOvEusK6w1:BNsOswC:Da8Crw5XAqMQoweDF6cHxxnvCp8eQwvbHEsLLxxDBHceFvyHGlL1MxcS7FcWlurrFXLo6x8%6dcnruz7Mkr1fz42:ldK7wazV9cOA2PbF6NqEx5zcfcha3bDID935x%fbh8Y52sXEgdgXwyzX4MGI1nHB1tb8wTfYlsOB2iHGYt1DybXgt8xf5HDQ7%ck1L:qK9dm7AvZzOy92RDsWtmB6hPYjOhY1pjms9QN5YrTN%Qv0xzkuNOE5OjUVeWD1pTmlNg86DDbI%om3gzsH%G27dbjCe8y5gzwMOit8Mfp3PD26tbw:OsA8T:tjvHl7o:y2:AW9CvzIfbw9Yb4HPka%4L8sv31:xcANAMTAvwFdgMiCAMEgwmQA:sJLgKOCRYAeAiT:f8GAvtwBcP4LQQr958Dd:YFBKb2UgVw9zAHoPhhCTD63gvo%3AOPP2JELv9qRFA:asRyvuVEHX5gQ6N9rgLZPOoCEfwrgWG7QwDP%vTAEnp2f6P5wL9PuZ6%4jlfPph5QL6lOXR%d3lrPkE5nX58%Ue%ZvlkPjv5MD3GuTi9nzjS:ZE4wv2ZOME9t:jQfbN5OX2Gubk95fnF:kf6V:6leqV%9XrjvzA7Cn9Ke0y:d7sc:zq6:v6luoS%R3p8faW57r0K%av8iXlLPHB5HXw:eSI8JzlK:F65jHys%en80jphvXa6ln33euL%Pnr0:gR6yr4Oumb9qvmYfS44%HxyOB57zveZO0i3KzrPdod6lfYguib1vrmV9XX5bXUPOWf1A3l19Ql5SbVaOVv1bblmtXl5ZLV4OV61czlo9Xj5SDWOubD1rXme9dF52nYAuim2QjpNttX6grd2esE33ftCeEb7:zinPCj5LTxuuUt8kLmB:J45nPxiuan8Irmy%%V5gLv4uZ77rDnde4f6QnvEesN8FrtWfH:7:Ty::LU9AL2oPaF%On3QPpy%B77IPgh%:j2Yfoi9RP52fKE91vwCPbu7cv0vOuq87PpgPLI53DxKua48BXlcfCW5IfwkOTK8MPkCPHy5DTxDOVK8QvlN:Hd5AbxlOT68HbkNvGr5JTxH%X78cvlhfLB5kbz:ec49HfpVvUe64z2yey190zut:ie73T5rvC%%VLxifmG8Qr5c:F2%Dzx5fcE8Xr39vBj9zTxyvfX8dD4AfN5%q:0rvy29mH:Cvl%ArP7sgVo:ncIrQCFCj8C2wsKA5AMBwPEDGMCqAxmAWoMMAAsDNX%Bgx%:esLK:y%C8D6jwtn%Z4LffgcDCv4EA1f%F8O8vjcD6j5XBFK%sgS0:oMFE:7JxW%%z0WQfx2Fwr9yRgc:iEaWf99G74A3RxSAjIeAQR6H7gFuCBtB9chBwm1ImkKLSN7CxUjIAxlIkMMUCEGDBQgogvZHkELxB0HC:gcHwuFHKoLchy2DMMcPQ54HS8Qmx6OEjQgXBUNImsYryNQG8Akrh0vJVofCiVQIGokryB6I6YgZiJbIEkh7h8tIHIfCR:THtMd9x2gHP4cqBspHA8bmxvVGlEb6Bo%Gy0bRxuCG0cbzBstG:Qb8Br%G5caFhxOGmMcRhrcHHEaYB2mGuwd4hqJHjMbHR%HG30fvxuTH8YbXB%ZG90eOxsJHpsawxyKGf4a7hfdGOoVlha5E1MUfhEzElYPWhBsDe8O7QsJDvoKmA2OCngNgQqfDbUKIg4uC:AO0Qu6D1IMMhBsDDgQBgzODx8LBQ:ECQIOHQjzDFYG:wuUBC0L8AJoCloBmgm1:9QIDf5HCJz8GAh9%04IrfrZCC36oQn4%ZkK7:mzC:n52QwF%hAOFvqKD1T6axHt%pAT0:u:Fcn85xe0:QYanf4IHHP:0R0bAE0fkwByIO4ASyExAdIhTgHcIRoBTSFtAD0gVv:XHhH%Ox3K:I8bl:sCGqH6wBga%vAXIfqTF7X6ghfF%6cXRv0cGDX:0xhyAXUZuQOzGbwFbxlMB6IYZghgFyQJ3hWmCU4UDgrNEnsKbhH%CiMQgwvCDu0LSw1LDAAM1QwcC7YNtAoGD8kKyBBFC%MSAQwtFesMkhcCDgcaPQ%EHLYQHB%YEvAh2hT8JFAXICjvGVMrwRyILq0foDGcIoM0iyUrN2kojzkWK6g7ei1mPWsvmz7FMBw:mTH2Ph4yVz5pMmA9izIxPK8y%jr9Mt85iTPvOFY0NDhLNac3SDY2N1A34zZiOK82QTlnNqE5wzVvOaE0tTgBM3U39TDANZouszMELF4xPCnSLlAmLCxTI2cpPSB2JgcddiPVGZgg0Rb2HRIUlRumEXcZhw%MF5cNyRXQCy8URQrAEvwIgBHyB4sQNwf3D98Gsw:ZBrAPFwfrD5IHRxAwCKEQywj7EF8JXhHtCb0RawoBEtAKExINC9gR%QpLEX4KkBC0CckPvggGD60HXg6hBvINvwXWDRsFCw6xBIsOfwRMD3sEUBCYBJAR0ATeEgkF:BMMBc0UrQRXFfADlxXrAo0VqwFGFT8AwBS2:vcTGv3zEmr7shGh%S4Qwfd:DuL10wwz9EML3PLNCebxdQhD8T8H6fAiBtDwFQXs8AwENPEOA7jxOQKT8qMB0:NFAW71EQFT9:4Adfn5AMn76gBE:r8AzgBvAEYD7v%eBTX:2Ac9:ugJ8fyvC0r7KA1r%XIOhPexD7n1BREl9IoS4PJSFPTxZRZf8cEYGfFcGxrxHB5h8fMg6:HZI5jyriY280YpqvN7K%vzPi3385Au3:N8L7fzDzCE804wQfNCMO7y8i9:8lEv6:FYLkHxHS2c8MErA:BUKnTv3ijx7mknfO7wJRzubyTc7ekitu1ZIaXtvh%w7S0e4u22HDDuURuV7vEZEO%VGInvLRff76AVAPDeE9:v2xFs74oPqu7xDKHtFwpF7O4GiupyA4Dowf9B5vv76eM9%KfhsfSr34bxAt7I7qfccOyO23Xqn9rH6M3ZVOce2RfmhtgE5dvX8eMH18DiBdZp4crU8N9j01je99Gu3JfQ:to8z0XZ7c18163MpdVxy8PTQ8ri0UnJHNCQyIfOEsgozcvHAMywxw3LsMdEysvHnMkQyBLJfsiuyBTJd8jfyXLI3sqhyAzMCclwza3JAc99ypnQYcsh0kTMkdMYzdDUz83H1V7Oe9a4zufWz84F16PO5tZMzrHW58161ozNWdZZzXPWas3W1sXNeddmzlHYQs9Z2VLQg9qP0cvb9dIp3XDUe97b1ZvfFNd44AzYC%HC2FvhSNmF4bzZo%Ew2rfhpNrG4Rnb3%GS2wTiFtw94rbcp%KI3Vbjmt5A5OjfVuVo4YzmEePR59DkHumd5oDqfugF7HvqrO2X7Hnvz%5m8RvxZfNy82z10PV19y34afl2%jP7nPzF:JD%D:5DAPv%rgGE:8sCpv%VA1n:CQSq:jUEvv0wBLH8DgSW%%UDifrJA5v5yAPP%OEDI:gVBJb3XgQf97QEtvYTBVL2dAXa9b0FNPXRBVT0oQU18yYF2PFmBEjwcwOY7mAC0ew6AfvqBgAk6cz%U%eX:ZHldPz443z7neLE%oThUPqn4BP6B%AE%qLfHvp531v6jt%6%uHfP:tx4Or7QOG6:E3iqP2K46f%7eSt:2:mrwAD6KUBlel:AhbrKgN17JQDoe25A4:umQM77zUDme%RAqnvtwGC77UAPu%h::Hukf6v7pb9he67:HfuDPyE7pD7rO5B%%nuGfsw7xb7b%8p%4rvNvth7x775O7Q%hLuP:rx7G75j%tt%P:pSvdI6An2b%av9IPkSfOT4t7xreB:8OveRu9i3UruGNyR7QrbGe0z2tnsj9nJ7B:Z6ezr2EHt%djV7UbZou7O2abvjdra8HzbLvKX3J3z290i9Trfrvam4DP4F%Kk%X:j8:rN5A:8%uXw:Afnmf325wr%y%hM:pjpb:5t6nz%WOt::mnsg:6o7ZP%Du%x:pXw3v498hv:A:Ro:971wP%79xUAfvlLAAH7QwAw:O3::vxA:2r9O:56:er8P:1d%8H8nvkD:LL3FPul9QX6hfPr%Gbx4fdh7:32j%1K9v7rxfWt6mj1nekt9cvoDfU06Av11%cp9bjnZfXW57r1Kegm9qzoovZW6Sv3IerC9wzrXvgS7Pf4Ju2F%ULu::lb71r6ZvCR%lfxq:ot8rH67vKs%qLzrvpU9Mn6D:UI%9z1fPvF9jD80fcj:QP5VP5a%sT:0PtyAWX9VgMQ:18FwQBxB1gCawm5AzUL0QTDDJMFEA79BRsPFQbxD%sFnRCNBSMRBQWFEVoEzRGYAwkS0gJREiICvhKjAV0TYwEqFGEBGhWVASYW9gFGF38CdxgsA7cZ%gMIG%sEbhz9BeUdKwdhH2cI1SCmCTki5QqLIyEMxSRTDd4ldA7JJncPdidMEN4n6xAAKFUR4yeWEZQnvhEoJ%IRryYTEjYmXhLIJcsSbiVhEzIlIxQcJRUVMiU0FnUlfxfjJfMYbyZ9GgAnAhx4J2MdxSeJHuEnZh:LJ:Yfhic8IBsnQSCWJg8gACawH1wlJh%nJHEe6CObHTYjtxysIuEbWiIqGz0ikRpJIg8aeCKcGcAiNhkbI9kYfiOAGOwjMBhrJOwX%SSzF4clexcAJjYXXSbbFp4mahbCJuMVwiZBFZImdxQmJngTeyVAEo4kzxBjIy0PBCJnDYggkgsDH8YJgx0VCBEciga4Gi4FghkGBHYYGQOXF2YC4RboAVUWmwHqFXUBixVfAR8VPwGQFAEB1xOYAPIS:v:kETn:uRBQ:oEPUP1RDkf8Mw09%ycMMfo0Cyf5bQou%O4JXPfFCcH28Qlf9moKMPYqCyr2KAxK9lYNh:ajDtf2CxA395ERq:czEzX43xTG%IIWT:kQGMb5iRko%uYadfobHKf6Fh2x%s0di:pAHjT6bB6w%VAeAPnyHS74Zx1K98IcafYOHJv1VRvq9KEaX:T%GQH0dxnb8wwZ7fO6GDP0fhiq9FcYTPUyGAz29RfW9osXlPfnFjr4BhbD%OcUMfmSE4z5FBLe%YMQN:rwDqX6YA0s%9sL0vt6Cqj8WgnE:Y0INP8aCP4AAAgaAzwIgAXLCCcIpwkGC8IKDg4XDDQRqw12FH8PzheEESwbqRN8HugVriE6GL0kmhqgJ:kcTipBH7MsZiHELmAjfDApJdwxtibgMgcojDMpKe4zKCoXNAkrFDTSK%0ziCymMzItSTPYLd0ydi5jMgQv1jF:LzEx5y9zMCwwki82MHsu8S8dLVIvaStULlwp9iz6Jj4rSyQ3KVkh9SY3Howk9xoDIqcXYR9UFLocEREoGvsNvBcnC34VowhwE3EGkxGNBOgP9QJuDqgBIA2fAPgL0::9CkX:MQrz:owJ1P4DCdv%lgj%:kYIOf8RCIf:9wfj:%wHPQDnB4cA5Ae6AN8H0wDOB80AtgenAKUHawCnBycAwAfk::cHqv9SCHz:0whb:3wJTf9IClD:LQtf:ycMcf8yDYb:PQ6U:ysPiP:lD07:XhDX:owQHv5pECX9%Q:0%0QPkfpaDgj5Tw1r9ygMxvXoCh:0ngmE8mEIDPE%B8nvPQbK7l8FEO6hBJnt:gNh7XUDbO3%ArjtkgI:7jIC:%7iAfrvmQEo8U0BgfL5APvzmACO9SYAOPeh::b4BP:B%kn%jfxs:VL%bfwPAE37wQET%mcD0vgMBZb3uQZo9noIU:VVCmP0TQyf82IOCfOSEKPy3BJq8jcVW:KXF3fy9Rmw8kMc7PJrHhfzVSAm8%8hC:MxI77yGiQ:8q0kkvHvJMTw6CTl76kk:O47JAvupCMc7egiRuwYIpfrRSEU63kgv%qzH5Lq7h6G6iQemOpVHcTqgRwB654bTuunGqzrnxkW7IcYguxXF%bsCRY87ZcUfe0AE6jtSRG37XEPn%1tDVXtOwvV7N4IHexcBi:rugMZ6gUB4%hK:pnnmPtG5vz4%%R99r3jHvSR4uXxeuHX73fg8u2I3zDssN6N6ubdAOkb3XnnQtzl5VXbNuRM2mPiItlr4NfXVN5z1h7cAdXT2ZLThNcu0j3V2NAG05fP4tCAzuPOns0azfjMk8uNzE:KWMxGyVHMdMh2zNvHwcx4xyjNQcekzS3HNc49x9fOc8eBz8rHLNA1yNPQrMh30S:JG9LByb7SXcpX0:PK3tN5y1LU8Mu21FrMC9W6zFjVE82m1W:N%tXbzV:WYc7f1gfPfdfNzznYuNAW2c7RE9oN0yjbbdRQ3ObVf91w16be:9iz34HanuDq22HhMd334VjeZOJh37DiTuDk4iThEePw4UPjwuJ:457jzeOI5ELkjOXt5Lrm1eUc6Pjmr%lP6Gfr0uk87XvrLu9F7TnxIu9O8wrxYvX68nX37PSJ%dP2lPuj%Ir9T:pe:9X7EgEz:agCZv4aBGX:WAUmAFgGqwAbB:YApgcIAfgH5gATCJcAAAgmAM4Hnf%KBwb:OQdn:t4Gw:2BBh:9LAZ9:OMF1:ueBSj7VQVr%gcFlvmsBJ:4OgR996UDLvbqArD0EQIH8x8BN:EYAEzvBP9T7fH9Xuvw:HfpC:yr50P7Duaj%rPkPvqn4xz66eI9%nfilvpM4iD7Z%Ld%8jiyvxn49v9PeQD:0zlQACS5pMBBejwApjpRgRB64YF:eywBsbuxQeW8L8IW:KNCQf0KAqT9ZEK%fbPCjP43wo%%cIKHvp:Ctv6KAp7%8kJ:vtkCWf8%gi4:JII8:w3CBn95gcl:ZQHE:03B%H8zAaJ:E0GAPytBT773wRA%t4DCPmwApn3WgH49d7:MPRB:k:yk:xn8Oj6gu5O%avsy:fu6mz2XulG9QToZvTh5s:z8OV68y:lZPOe5JLzPOQE9ALksfTt4471%%Oa9jDk1feI5Df5%uSu%oLlKvwj5qr93uYw:7LnswCU6CUCfel7A2vqtwRa69kFSuzcBjjtuAcp7nIIJe8SCTDwoAlL8RcKdfJ0CrLzuwoD9fMKYvYbC8b3JQsk%QgLc:rACqT7Swqp:JwJdf2nCAL%ZQdO:t4FWf4VBCT%CgKz:cH:E:1H:VH8sfp4%w:4k:pr9bD50:Lf%F3wLfgc7pr3GOwh90zqwPa76Hf2audC9lvmHPaI5QP25%T29Xrk9:VB5AH2OuQQ9lfkHfaP5C325eRD9l3lXvby5Xj2mOaN9kjnnfYB6Kn2xuix9o:pu:ZZ6s32Jevz9v:rNvfr7Jr35e0h%Ofu0Pj176n5EvGq%j3yzPto8wn9jPRW:qT1qP%s9vEAmPciAlr4MAPq%BUES:nPBID5WgWG%bsFX:n8BRn5JwbD%EYGavhiBhb4iAbQ98EGp:cXB6n3jQfb9yAIOPjRCL34oAls%YwKRPqPCzz7qAxL:NYNcP0VD6v%YxD5:7kRTwETE6YCcBQABM4VYwUqF80GeBg1CLQZlwnVGvMK1xtHDLYcjw12HckOGB74D6QeKREhH2QSlB%pE:0f9hRhIFAWwyC6FyIhMhl%Ia4a1iEjHCYijh1nIugekiIiIKAiLiGKIgEiTSKYIukh9CJhIREjvCDxIgQgnSJAHyMidx6NIbQd4CD:HCQgYBxlH9sbrh5yGwYeIhtpHeca1By9GkscnRrMG4AaUhtnGtkaURpjGj4a8hksGoYZGBoYGQAaoRjgGR8YtRmYF3wZCBcuGWoWyhi7FU8Y:RS5Fy8UBhdNEzsWVxJaFVIRahRIEHETRA94EkoOhBFbDZoQfwy%D7sL7g4NCywObwp4DdsJzQxQCSQMxwh3CzgIwgqYBwAK3QYtCQYGSwgWBV0HDARsBuoCgwW7AaoEiwDoA2H:SwND:t8CN:2pAkf8rAJ6%%0C1fptA1X6JwT1%RcFtPk1BpD5egeA%eMIf:lsCo:5DQyx%b4N4:l6DyD6ORFf%vMSnfqgFNn6OhYO%7oXNPsbGUj7VxpJ%2UbNfs%HAj74xzA%lYdYPqbHfD5uB15%bkd::imHYn4gx0b%FQdu:cYHWv30Rwn938c7vYdHMH2pBuh9hAbifZdGnT2hBlf9oIYSvZWFzv2CBY19qAUO:YqE1n2rhGd9jgQDvfVDrP3lA2V%H8MvPmcCzD78wr1:I4KBf9sCl0Bjgr2A%8KygaOC80Jawz1DIcNPhDgDqETcxAZFz0SmRo8FBYeZRaGIawY4SQHGx0obR0wK9QfES4zIrowfiQnM6smTTW2KCY3mSqxOFIs8TniLew6Ti%nO5kwJjzFMWs80TJ6PLwzUzyFNPI7KjVVO6Y1fTryNWY5BzYOOOE1bzZ5NYU0yDRTMs0z3C%MMiUtDTE2KlYvGidyLeEjaCuZIEkpTB0gJwsa%CTkFtki5RPMIBkR2x6GDgcdLwxQGxgKthlECDsYsAbhFloFrRVFBKIUcAPAE9sCChOAAn4SWgIYEmECzxGSAqIR5wKPEVoDkxHkA6wRfwTUESYFBRLOBTwSbAZ1Ev0GshJ:B:QS9wdGE2YIrBPNCCYULQmzFIQJThXQCfAVCwqTFjAKMRc8CsEXKwo7GPcJmhiZCdIYCQnZGEYIrBhOB0sYJQa4F84E%RZQAxMWtwESFQ4AARRh:usSuvzXESX7yxCv%c8PYPjoDj33Fw5J9lgNh:WqDPz0Dwyl9IULhfQNC5z0pgrt9E4KePUFCjz2yQk095EJW:hXCa35GAkn%9UIxfyLCIT%OQhhANoHVgJtB1sE7wZpBmAGeQjCBYwKHAWkDHUEwQ7YA%MQRQMHE74CKRVCAkIX0QFLGWgBPRsDARIdnADEHisATCCn:6EhB:%6IkL%kiNU:SYkQPx4JAr7iCS2%VskSvj7I8:2cyNP9c0i0:MSImTySyEH8YAgxu%4H6Xu9x6m7T4exeyMHQHs4hxZ6z0cyuqaG1Lq9hrr6U8al%mkGVTp8xgg6TgY9ehsF87ojhao6JwVguiVFFzoeBMx6EcS:uf:EL7noA9u5ykODOeZDJjm9QoY5kYJkuWTBw7l4AWN5DAEDuSDAo:j1gAQ4yT:jOJq:QPiovtw4cn50%Db9ybg0PVm36DzjN5G8Zfdvu6I3ArsYtsq6SXaI%bY2P:igtfJ3zDWkNzr1F3ZudM71qHSNdOn0VPQz9CezRbQGst6z8vI%c6zxpLO08RFzivDDs64wejNeMDUzWy:0c2Svt3N573zzWa9Ds4JvS:Oz7xYzrW8jM67vMnO37wOzx29Wc90vafP3b3yz1e%OtDivoPQgb:W0DrAOdEQwazRBMIw0hPDw9I7xGTTdsUQ1MDGxdQTyIHVbMlA1sfK:9YczLPXZM1V2JfO4dixz1jZsdC82ZbRENph0lraGNOj2sLT9dpo1FrbEdXT28HVZ9x%1hvdTtf13TbY9t422RzgTdpk4XjbzuK13FTkAd7w5VffnOe04FTpF%IZ63:j5Ozn5KzuSeZo8J7nD:Lh6J7zEuoU9S7rbvYz7Kj3Hu2:%OztsfmZ7nf6Ie8S%4TvhPvH79X78e8L:AfwJfwM8CH8APD8%%LvtPuw70n7ae%5%g3vBfqd7iz5G%4t%ITtAPfV7KD1C%wP9CjrUfIw6m3wK%ls7h:oWewY50HqIeYz6EflOuaR5GHkBuSy4q:jOeGT4wHguOMN3x7kX97C5Pfdn%XT3a:m893r51TeTeny3s:qzd9u7OTgKO4x4vXvqOPL8T7lofPs5nH1rug494Lq9Phk7KP6Te5A:DPwx:0L8jL:yfN6AGb1nQHj9p4CRviFA5L5VgTH%hMF3:u5BdL8RQab:bMGM:7%Bpj%JQfH:icHv:4DB33%tAb8:TMGOP18BTP8jATz%mcDgfkVAuT3nQAj9gr:SvRo:WLywft48CH6le6P%MTsGPcT68f1iumo9C:ov:MC5w7zAuaS8i7lTPKD5Djy:%NV8p:jo:Jl4yTzUuPX82TjufSW48L14%Pp9knkKfjL5ID5auXr%ibmaPz95u:96Od5:%Ho%gDh6WkC5Oq:A%3r:AQB7SMGI%41B1HvMAiD8BEJtPHRCeHyaQoH9NUKJ:USCz:2HgtK9:gKQfiaChj5:QnE%RsJQvrxB4:6gAau%s8EoPrlAmf6yAAG%oP%g:kf:OH4pfkp%CD3YPed9JD2LPLA9dfv8:Sn7Sz0n%ts88HptvIP6Azyi%Zy8Tjl7PAa5H:wNOMw8Ini:%8X4ujv2uHn78:h9%:z4RvwRuJV8Mrip:B84xHxWOSR8VTlIPJo5rnyiuda87XoA:Tm6br0IOuC9WLsWvar7UH39e40%DrwMflz8Tj6nvJI%7jzYfzC9H79uPWX:pX2ov9S95gA6vdzAVf4MQKc%M4CuvhMA7b4qAOV%OMDWvgDBAv4DwSu9w4ETvcMBPX2EQSv9iQEgvZIBHT2gASE9ssEs:YpBQD3mgVs9yEG:PfABrD4eQeL%U8IjPpACa:7SArv:GALSv6FDL7:tw1MAfgO9AJKELYErBGOBhkTdgiJFGQK9hVUDFsXQg64GC4QEBoaEmcbBxS7HPMVCh7bF1AfuBmJIIYbsiFBHcsi5h7SI3QgwSTkIZElLiM7JkokuCYuJQUn1CUjJzgmFCdaJt0mOyaCJt0lBiY:JW4lZyTCJFgjCCQfIkojxCCPIlQf4CHVHUEhTxy1IMMaPSA2GdQfpxd3Hx0WIh%cFNUeKRONHscRSB52EAUeNA:AHQIOdh3fDCQdzAvMHMoKcRzcCRYcBgm8G0QIXhuUB:ga8AaFGlYGBhrDBX0ZOgXvGLsEYxhLBNwX6gNcF5gD4BZSA2gWFAP0FdwChhWpAh4VegK4FEwCThQYAtsT2QFbE4oBzRIlATESqQCJERUA2RBs:yMQsP5pD%T9rQ4J:fUNJvxLDUL7uAxk%kYMlPn9C9j44As0%PELqvctDDv3jgzm9hENrfa0DZD2dg6R9lYPrfZPEOD2XREn93cSfveVE%H3sBRK%MIVufjMFiv5zheh%cgYGPq1GYv6jxr3%lEbVvv4G6j7hRzt%:ccJvxRHVf8lB2F:MAdsPzSHdj8yh38:KodHv11HT79Kx1g:cscg:1SHKn9vRvR:Qob%f02GiD%RBlG:jUYa:4MF5X%zRXG:nwUAv8cE07:txGv:1cQLQAID9AA0w2gAcQMoALhC9UDLwtABbEK4AZoCrIIVQq0CnkK5AzUCj4PZgu%ESwMXRQfDRQXOw7bGXoPrBzWEHwfSxJFItgTAiV8FbEnMxdNKvcY0CzDGjUvkxx3MWMekzMxIIg1%yFUN70j%Dh0JXc6GSfPO6Yo%zwUKvY9XSu9PoAsTD91LaE:OC66P8Eukz8JLyg:Cy93PsMuej0vLjI8US2gOi4syDjLKrA2LildNGAn1DFqJSAvWSNMLDghYykTH3Im9ByGI%caqSDxGOQdFhc%G1gVuxi4E18WNxIxFNgQNBKZD2sQfA7YDoANeQ2kDE0M5gtSC0MLhQq7CuQJTgpwCf4JKAnOCQsJvQkWCcoJQgn2CYwJPgrvCaAKZwobC:MKrAuSC1IMQwwMDQMN1A3IDagOiw6BD0QPWxDrDy8ReRD2EegQqRIwEUATSRG4Ey0RChTVEDMUQhAyFHMPBhRuDrATOg0vE94LgxJgCq8Rygi5ECkHpQ%HBXwO8ANHDXECEAwTAdwK3P%vCdH%jAj2:XQHTv1nBt78aAWp:HkEtPycA:780gKG:RwCS:55AUf:6gB2AGwA1AEDAGADrv8XBW3:9wY%::oIHf8YCwj:Sw35:o0P8f7YEez%KBTs:nwW8f7RGPz%IRsL:2YdGf%YHyT:sSEo:6kjIv99JQ7:Jifp:p0osP7aKV3%2Srs:ZMrWf0HLKP8NyzK%yYs0frbK7v5WyuK%KwqQffVKeT13ih49M8nBPOxJpDxiiUi8F8kwu4zI3LtCSI17N4gC%u1H:fpjh766GodFuhLHE3nMRud5hsaBeYIGYLl9hcR5eQWseTRFWHkvxQh5LAT8uOkEtXjmhHJ45EQzOOHD9:jew4A5HANL%RnDGrkYwux5GUKAuVuCVzleQi65YQHGuaKBnrmhQXW5nMELOdNA3fnDgKx568A1Ocr:9rnfv3A56T7g%ef%SbncPet5hn1G%ah8nLlCvC35Fvt7OOc6hjj1edC4g7lb%FN4qXgl9:o3:DcNt9a2pHe19f13WnVY90S093c1NBk3LXO%du1zJnb18pB2x7J79qMx6DaI8ZS2unEA9rfw7fZC8Nu2W:CLNkMwvLY48HD2PPBotg8wpTYvsKc2HrDvNhwxPjYncVS2QDHzNmSyGLaTsoT2yvM29skzrjcMdCm3UnSot5i1Kjfc9a04HPYxOFZ2tPiINzf48Pd5uRA3%jll%Dk5sjh2efX4sXoyOOr6Z:kjepj5W:rGuZV7MjmRO1x5zzuGOg%777oSvBk6VzxCup08q:qkvNU67X0:Ovc9aTsBfdN7S74%O1X%aTugPpS76j7AvDO:Lbw7:1t8Qn:J:IXAOHyFAGX8:wBQ:TMAuL0gQNz9RoE9PWVBGL29AS:9jgFCfdiBUH3cQVl92MFdPc4BXD37gRX94cEKvcCBOf2XgOK9pwCFfa8AYf1vQDg9J::IvRl:k:zFP1t8rH7gPE:%o:ww:ih70L3vu7C9fDtSPQ97dzyrOyE8ULsRvAE7Cnv8usx7g7sYu1W7MHsyOxS7GLtGewj7hjsCO9O7A3wu%wv8V3tbfIx7sPzM%8v9V:wrvax8T:4JfPg%bb0i:te9jr9Ffjm:tb5iACa%xsCWP2bAwv:AQWuAEsGPQJ5B7cDhwgWBXUJVgZECnIH8gpoCIELNAnwC9IJPAw%CmUMdQppDHEKSAwwCgMMsAmYC:EICwv4B18KywaVCXAFtAjtA74HSgK8BpEAsgXK:qgE:fyjAzP7pwJy%bgBwPfZAB72DACQ9FH:GPOq:rnxF:538Jv9U%83:U:u6:xr7br8qOyk:AbsqfyD68r8H%sG:djqX:2u6tL9n%pe:qrq::7L6rL:A%tyAFHrPQG06wsCK%zaArnsowNe7WMEGO4WBeTuuAW:70YGpPC8BpLxGAeE8lUHePNuB2j0XgdQ9SEHJ:a0Buf2EQaI9zYFB:ggBGH40AKV%EYBpPiG:434lP1U%Hj7:Pc6%Yf34fb89nb0X:YB8rT1ie8B9RTtRvSn6ofzSOjG8vrlCPLE41DxqeGh8K:f:u:Z3WfvKtzg7qbaau5N2QbuIdi37SLXf%1S1mHtr9Vb7TrVa%3v1I:tzNTG7dHUD%751GnuQNXU7qLVU%8d1unvsNaW8FjXWfET2DDy3dgb87TZF:SW2iP1fds59mXcU:dH3Wz4Id57%fHed:qz31v7Y%Al:P:g1fyG4Wz99eHq:UziTP6J4pH%rOK6:rfiy:6y4sn%pOK4:pTinf6I4nv%hOJV:o:iL:6t4g3%4uLz:S3j5P2O4%P9DOTx:avkEv5x5Uf%XeaS:m:n9v6k6Hf::%kXAIHr1QAn7bEB7%6oAtTwuwPa8uoEAPUxBkL3jAeZ%fgI%:t1CmX%AgzUAJ8NQwNJD64F%RAOCKgSXwpQFJ4M6RXEDnAXyRDiGKISPBpLFHsbwBWYHP4WjR0AGFQewRjtHkIZWR%FGZgfjxmvH2EZoR:5GHMfVRgtH30X1h54FnMeURUFHg0Uix2yEgQdRRFzHNAP2BtXDjMb3AyCGl4LxBncCfkYXQgjGOgGQheCBVUWLQRaFegCTxS4ATMTnwAJEqL:1BC%:pkP9P1fDkP9Kg2t:AEMNPznCtj74AmY%:AIdfsbCG:7ZgeC%9EGrvtdBuz7BwY3:MoFjPyjBeP8jgU4:YoFiP2SBc79nwUJ:qsFMv6yBUL%tQUz:rkFB:7BBcP9zgVv:d4FDP3vBZb8AwYL:B4GbftFBsH6eAYP%rkGXvkIB674ZgcD%NYHY:dYCNH26whO9osJ1:U3Cmz16goP9aELwfRaDH:0Dw1C9L8NBvRqDsvzDA%V86cPZvM4ED3zwRAa80MR:vLAEe3yOhLs8rIS:PIoExnzmxM:8wQUa:NgFKDzqhTi8%QUNPQMFZr0JxUV9TYVqvU1FVf2IRUW9:gU4ve8FLf4ahSS%fwTaPprEzT7txLz%%QRpPz2EEj99Q:l:e8Ohf7uDTT:%Qz4:xQM1wBCC9gBhAr6AtkJOwRHCZkF1QgQB4EIlghICB0KKAihCyoIKw1UCMcOowh3EBIJPBKeCRgUSQoMFhkLGxgTDEMaPA1%HJMOwB4SEP0gshEtI2oTUCUrFWIn5xZaKZYYOis9Ggct6BvKLpwdhTBUHzAyASG8M5QiGzX8I0c2MiU8NzAm9Tf4Jm84mCerOB0osDiEKIE4vygbOL0oejd5KKE29ieWNTonXjRSJvsySyV1MTQk0C8ZIw8u:iE2LOYgSSrIH0YolB4iJjwd0yO:G1chLBrBHpQYKRwJF60ZmRVeF00URhUjE10TEBKREQMR0g:yDxkO2Q5oDLUNvQqLDB8JeQuuB7gKqAaACkcG3AqcBqoLfwesDKsIpQ3ZCV8OzwrDDnML3g7PC9MOAgzFDioM1A5gDB8Pwgy5D2ENlxAzDp0RHA%8EhAQ%RMZEVUVPhK1FmcT5hdeFLYY6BQFGdQUyhgRFBYYshIOF%oQ4hX2DrwUDw3CE2QLERMfCrYSVAmaEvUIkhLWCGsSwggAEosIPBEWCCEQYwfDDosGQQ2uBbUL5QQ1Cj8E1QjQA6cHrQO9BugDHAaFBMEFfAWfBcEGqgVFCNAF9gkCBsQLNAagDWUGew%YBkIRzgbiEgQHWxQ6B7sVcQcOF58HWRi4B5YZuQfKGq0H:xuiBz0dpAeJHrYH4h:SBz4h7geLIv0HuCP2B8EkzwegJXwHRyb8BqkmWQbPJqAF0ibWBMMm9wOlJv8CcybyATUmzwDqJYb:hiUI:vYkT:w4JGT6VCNU%E0iLPYlIQH06R:q8awe:O97HUTuVhzC7DcbcusiGkvqIhk:6TcYPuhVFzjncRYz5pIVPuXBFGLk:xOh40UTBeOeEqTiIBKK4s4Rq%KXEfPiaBFO4y8RouPNENXjIBDb4yIPuePmDXnjfwwl4:cK2eJrCcbiDAgX4wkH1uNmBuLk:gUG5pkFC%f:BMTnAAQS6HYC6%dZAGDnxf2V5un6seXv99Lk%:QW5Djyj%PB7yzjge3G4kbrTeL16Nnhn%aG4VrkT%Ej4hjh6d%94JzdJOAs20XfjNgr3rrV59zI0obb1c8a2gXNxdiLyqfXkcjK1ivHLNZPxsLV5MV71dLFQNUCxv3UZMat1OfGT9R6x%PTE8hh06rIxtI3yR7SwcmM0WzKRNFvy2nR7MwH0ubOFdNG0XfU6dMO1qfWttdT2VLZytvO2vndI9zg31fdheF%3vfip99F5NzggeUi4rfmf%Pm5%3kBOle5gfqxefw6iLpwet76n7s1Osp7S7tye2I7mTu6O8C71Txp%:Q8lXwTvT%8Lf1jvH79v3xFfhZ8g35t:Lr%R7zs:qD82r74vMa:EX00fy59JX9QvVg:tj1K:9x9uL::PZyAGH3xgCL99IAbPeZAAn3JgBs9on:p:XQ:sz0C:7u80r9IPOZ:Gny:fvL8W37P:HZ%rzwN:o28H35p%%r%A:vyfdy7uL22O329T3t:fSa7Ovz7OvC8jzrjvGU6ljw:%kr74npFe5B6TLtQOmf7KDpbOxw6o3srOvq7DztbO0B7wPu3vCh7rzyOO%I9LvvMvYj8LL3dvAL%cXwUfoj8aD7p:ES:Wryvf6A86sA8fTZAq32NgWV%KsHhfodCl:8cwwJ:pUOaP9pEGgA2xEGAeQSTgGME1IB4xMhAQEU0wD:E38A%BM8AAUUFgA2FAkAjBQMAAEVFACKFRIAFBbx:4cWmP:MFvn%0xYU:pMW6PwFFnT7IhW2%ewTwPd6Erf18BDI83gPE:IuDqfwHg2K70wMvO61CzjuWAv07SoL2e0ZC9LtEAvP7f4KyO3VCrXtjwqP7S0KVO2xCQ7tJgnK7JcIkuwQCGvsmAda7DcHa%z4Bqvs4wYg7f0Gx%1DB57usQek70QI1fDuCCPynAlx8zUKpfSlCq:14QqJ9uMKM:erCq73OwoD%J0JO:jbCGD4AAh8%BQHl:geBrX4JgXa%CwEAfktAyD5GwIw%e4ALfmh:xX5Nv7n%LL8ofgU%0P4WfnN94L3RveU9bb2mfMn9p7xoPWt7yP1y%229P:rZvRU6kD01%hJ9IznffRu5sz0cOUk9YLkcvWV46j1puLC9brhz:Xe4Ob1JOAl9qDfo:Zg32b3cN9l%M3fjflu4Mv6QeEP:DLiSf0s423%H%Rx::vkVQC45RsBV%bEAdzmTwJP58UCwec:A0To3gPm6K4Ep%mjBXjqnwZD64gH%OtRCI7s8QgB7WMJTu2iCXDtqgll7X8JMO0nCdvsqwh37BoIGeyDB9Pr9wa264IGyussBhbs%AWf7OYFaO30BXPuHQa6710GMvGwBtDyFweD9IkHPPb6B%z3VwiH%ZYICfvHCID8BwkC:nYJpv8iCncBCwt4AykMoQV3DesH7Q5LCoAQsgwkEhMP1BNfEYsVihNDF4wV7xhgF4oaBRkPHHwafB2:G8oewxzwH3sd6yDmHcAhDB57IvsdKCPDHcwjbR1sJAIdDiWGHLUl%xtcJl0b9yajGnInwRnAJ7IY3yd1F9InDhacJ4QUNifWEpwmBRHMJRAPyST6DJ0jyQpQIocI7SBABoEf:gMVHswBrByu:0Ubq:3jGc37iRgb%j0XmPj7FUL3wRQV9pMTEfV5Ejf0fBGJ854QAfPeD5nyOw9M8rsOHvJkDhTyPg4w8kgObfJ5Drrywg4G8xcPQ:NvD27zyQ%L8ysQqPOhENHzOhET9PsRcfTbEun0zRN29cIUDvawFan2jhY891IXvvf4Fyn4iRh5%AoZr:h7GcX40Bm7%AEalvgbGmr4OBpR%HUaXPjdGo34ZRvX%PkbKPmDHGr59RyT%UcdmvlyHX75cR0:%UUd3PjxHFv4fhzD9:IbHvdUG3j2qxrc9QEaUvVdGd70uxiA9BcYNvRsFwD0txbi8:kV2vM2FenzchQP9LYTTPQCE570SRL79HoRUvWIEJf1cQ:G9UEO5:UIDQj20ws49qgKfvaLCdj2eghE93gHvfeHBkf4rQXi%O4EjflMBEf6xwMM%14D4fsOA8r81QLI:bUC2f6wAvP:wQIOAeMCJAITAzUDWQNKBL0DbAVEBKMG6wTxB68FVQmNBs8KhgdeDJcI:Q24CaQP5ApMERYM8RJSDZUUlw46Ft8P3RcaEXQZOBLzGiwTTBz1E3odlxSAHhsVYx%DFSMgzxXAIPwVNSEJFoQh9BWtIcAVtCF1FZwhGxVmIbYUESFJFJsg1xMHIGcTVR:3EokefxKcHfMRjBxREVYbnBABGt0PlxgVDxoXQQ6HFV4N2BNxDAsSgQskEJ0KMQ7SCUYMKQl3CqkI0ghNCGAHDQgjBt8HHAW7B0MEmAePA3IH9AJEB2sCDgfwAdMGhAGXBigBWQbZABYGlADOBVsAjQU2AGkFNgB6BWgAywXQAFIGXwH:Bv8BvweZAoUIHQNGCYMD9AnJA4YK8AP5CvkDSwvlA3wLtwOPC3IDiQshA3ALzAJMC3wCHAszAuAK8gGVCr0BOwqSAdEJcQFWCVgBywhHATIIRQGPB1gB4QaBASYGvAFXBQMCbwRNAm0DmQJZAuwCQAFVAzQA3gM8:4sEXf5XBZf9PQbo:DgHUvxICNb7cAl0%68KMPsDDAT7ZQ3u%tAO6vo:EPj6rREY%xYTRftvFHf7rRWh%8YWw:u3F937hBj2%zMZEfzOGS:8XxpP:Owabvx6G438Chyn:JscsvwkHZ78mh1h:O8d%vshHnH7NB7L%i0eBvoOHh750x0V%Hod8:YEHcL1dxyG9NUbQPMhG:LxWBqc8HsZP%%NGNvtlBd17JcWFuudFcfpqRSR6LsTd%fTEnvm7xGa5RAR0uQ0ECHkWg%I44AOB%OkDaTiyAxn4vYLUuI3C2HijwqJ4vcJvuJpCQHj3ghX41gIy%PYB13kYgcJ5fYGx%WYBo:mSgZY5wsGHOjVBdrongWO6VsFNeoCBcfqiwRB6:UDoutBA%vrbwIc7H8BNexzAD7sS:9C7BD%SuzG:FnscPtk7Aj6W%yA%CrsxvbI6870NOuX8nLqKfCF6Y3tbujO6jDn9OfX5QzlcOQo4gXjWN%d4abcOeAa2treudeC3YjVMdyH0%batdGl2Q7QcNiSzknXQM0t1hnMHNUfyxfUVMoi07jJPdJGyWfR:cih0NrI8M:iyGDPHMn:zpDJ2c5ByvDOK8tDz0TMzs%HzZDQ8s6L0YXQvtJA0iTUGtS21QrWb9cF2E:ZBNpT2wHcc9333ajf49:l4cDhG%SL40DmQOVP6NzmROpf6CHsy%nm7STrl%9t7DrxrO3Z8uXucvQY8Pr1PvFk90zyo:g787X5CfSc%r70Xvth9f:79fWE:Hj28Pzo9kn9RPeP:Y73xf3L9%39%vcI:hr4Fv4r%Bf%LvgL:iX48P0S%Mf98:eV:cb3Wf2I9xP9NPe%:Mr2WPxL9uX7uPVk%xP11:pe9ED6mPOo%cnyHfn58af4MvFC%Hfw5ffG74f3IO8p94fu1vYC7pr2lu159kbtcPYP7XT28Ox99u3sifYK7Zj2TO2r9rDtwvYw7t:2yu4F93zvOfdI8Hz3MPHP9zXyM:hW86z4lPQ%%ev18vlb98v65fjL%4z66PxL:A:%FP4t:9f:NwCGASkBHgMDAp0EwwIFBmgDVgf3A48IewS5Cf0E2QqDBfgLEQYXDaEGOA4vB1gPsgd5ECAImRFxCLgSnwjQE6sI3RSUCNoVWgjEFv4HlxeBB08Y7AbrGEUGaBmMBcEZuwTyGc4D%BnIAt4ZtAGtGZgAbxl0:yEZSP7BGBv9UBj0%9MX3fpVF9n52xbq%GgWEPj7FU73kxWl9i4VGfbLFKr1bBRa9REUKfW6ExP1ZRMR9RATHvW4EjL1XRJI9QESW:WnEWv1URF79QIRkfW7ELH1fhDW9UUQ:PUJEBv2wg819m4PUPYUD3b2vg6t9nAO9vYoDk733w2x95ANGvg7DYX44Qzr%IIMS:kbDKP5qQvx%SgLNPqWCm368Qmb%jkJwPptCNn6igfj%o0G3fp0Bcn6PASo%ucCdfpzASz63::Q%S7%avlj:Af5ifqw%Kn4ZvjJ9iP46:Tj9xPzqPdG8X33j%9s9:btdvd97Jb3IevH9%HpBPi%6Ev4vOeX%N:m6Pgr5j75oeWd%UTlBfoR5Xf6A%Xy%hPldvs75QD8dOWR:LflJv0B5sX9UeZx:qvmK:8R5%z:guemAPbnSgFi6M0BvegrAgPpZAIz6XkCT%ltAlrpRgJa6Q4CWOnQAV3plQFy6WABmuk0AdjpFAEs6v0AmurtACHr3wC:69UAc%zOAD:tyQAi7sQAH%%9ADLwuABe8bsAoPLJAPjz3wBf9fkAz:YZAUb4RAHG%YEBU:vUAe:8PgKX:sMCSwBlAwgCKQTSAxMFqgUfBo8HTAd8CZcIcAsCCmUNiAtZDycNRRHXDiITmBDsFGUSnxY6FDgYDRavGdQX:xqEGSAcGBsTHYgc1h3RHWke8h7OHuwfCB:BIBgfbCH%HuchsR4sIi4eOiJ1HRoikRzRIYsbZSFqGtkgLxkuINsXaB9wFoce9RSLHXATcRznETkbXBDiGdUOcRhVDewW3wtZFXUKwBMWCSkSwwebEHsGFw9BBZ4NEgQtDPICwgrfAVoJ2wDyB%L:igb0:i0FE:7oA0f9zAKV:OAB::slAYH7mwAZ%0UAy:ooAJ:6QgCZ%pAAvPoNAQT7swFu%30C9:tnA538agRa:YMFK:6uBgv:5wf2:yUJ6ABkCtwBnwvNAtYMtwMKDpcEOQ9pBWEQKQaCEdYGoRJuB8AT9QfbFGgI5xXBCNcW%QijFwkJSRjxCMgYsAgfGUUIThmuB1gZ8QZEGRYGGBknBdcYKgSCGCQDHhgcAq4XGgE2FyUAtxZD:zEWd:6nFcX9GxUt:Y0Usfz7E0:8YxMC:McSyfspEqL7hhGK%9oQfvsiEHb7XQ9x%5EOcfvCDXn79AyM%ykMqPtlC837qgr8%:4JOvxeCYj8zAjn:EkIV:3eB9r9jwdy:mAHIP9QB%L:Xwe1AI8HlgHfB4YCSwiDA80IigRfCZkF:QmuBqIKxwdKC%II8QsACpcMJQtADVYM7g2WDaAO4A5RDykQ:A9mEZ8QkBI%EakT2hG1FHUStRUOE6wWqBOaF0YUghjqFGgZlRVNGkQWMhvzFhQcnxf0HEgY0h3sGKseihl7HyUaOyC%GucgWBt6Ie8b7yF:HEIiBR1yInwdfiLeHWMiIx4eIkcerCFLHg8hNx5OIBUecx:oHYIesR18HXAdYRwlHTcb1hwEGoUc0BgzHJ4X4BtyFowbTxU6GzwU6xo%E50aVhJOGoUR:RnLEKgZKBBOGZ4P6xgqD4EYyg4UGHkOqBc2DkEX:A3fFsYNhBaPDTQWVw3xFR4NuRXgDIMVnAxLFUwMDRXwC8wUiAuIFBULQRSVCvoTCgq2E3gJexPnCE0TYAguE%cHHBOABxkTLQclE:AGQBPKBmITtwaDE7QGnxO8BrMTzwa%E%0GvxMUB7ITRAeYE30HchO%B0ATBwgBE1MItBKeCFkS5Aj1ESoJjBFyCSERvgm1EAwKSRBdCt0PsApwDwwLBA9wC5cO3gswDlUM0w3VDIcNXg1NDfENJw2NDhMNMg8QDeAPGg2YEC0NVhFEDRcSXA3XEnUNlBOMDUkUng31FKQNlRWbDSoWgw25FlwNRhciDdAXzwxPGFwMvBjFCxAZDQtKGTgKaxlHCXQZPQhiGRsHNRnnBe4YpgSQGFoDIBgDAp0XoQALFzX:axa::b8VQvwHFcL6RxRD%YETzPe5El728RH69CgRo:NeEFnykQ8f8cEO8%:uDc7uFA2s7TAMkOxCC3:rTwqB6mAJnOl5CNHonAcg6MwGiecMBhDnYAW15soEdOZKBEzm3QM85oEDReY0A2bm9QKb5r4C4uaLAjjnXAKZ5y4CAej:AWzoywHW6I0BP%lEAabp6wAJ6n8AZer6:7jqWP8A65T%Ouus:V7rn:xk62b7Ruv9%QDrY:iS6pb2%umX9DjpZvJN6AXwPed77Q7m0urE5BXoYuNP5erhh%Ji4Mffzd4W3S3dedqE2:LX0dmC1RTYKdNR1unQi9TDzsTSuMz90MbKN8:wyHbNNse9y5vFEsoexHfIvcLzxnnBj8VYwFLEX79Fw5O%bcL4vczBjr1lwVa9OMFSvUfBg72Twei9HMJ:vufCSr:0w0fARMV3wdXG2MKiyGnEpMomxtDMDcgdzxbKgNE5zPHTb85r1rHQ6dj90mHbSdXL3Y:XIeDK2WDi9tuL5BXen%Yj4JfoGuJt6u:jHOye5aTtJOcI74LoR:C66WPxy%pc8rbrNfN87PLzHO2V9JftHvXs7Y:1G%7q9SXuMvYL7mf2ze2O9m3tqPbw7Lb2XOy59rfrsfYF66D2SeqL9oXpc:a66Fn25%c29grnBvYe5sf1JeV:9SXkNPUl4%z0KeKq9DfhbvRQ4Dv0ed8Q9Lbe7fMI3s:zcN2z8:LcmvOP3IPzS9xt8ybcV:Me3EPzNNwz82ncKvPC3CvzP9058%PdVvOs3oTzmt:D867gEPTj4Wv0OOPU9KnkS:Uz5s311OdU9obp2fZD61b3Au3H98HuLPh98IP4NvLN%OjzCfmU9Tv5OPdk%dj4hvl0%qP5Dvy8%af91:lD::X55QAX%o0CPPo6BGH66gWE%pkHpfpECcD66ArT%oEM3PoKDtj6gA:F%t8QofoiEmn6RBMe%kAUwfkUFVX5xBXg%FUWZfjOFuj3Lhdt93cX9vapF4f2xxck9tMX0fXSF471xRdd9a8XPPWSFyz1bhcr9UUXOfUaF1b17xZ%9cYWrfWfFtv1dhYF9kcWJvYQFjz20BVE9oQVPfYqFSf2whQI9lEU5PXYE731WROT9c4SYvUyEiv1hBHw9MYQsvT9D3f0LQ9B9FsOEPSIDefzuQzI8%8LtfMtC7PzcwrC88QJ4vMfCRP0gghP9OkHlvRRB%T0tQY49RcGjfV2BeD1zwQu9iIEd:ZtA7n2rALx9twBGff4ACz3:f8p9%3%FPfL:fb2nfzR9mb7qfYm%n:23:hT9pX3J:ZK9v31APXV9bjzr:Vx8oz1LfFp9e3vRvWy7iT1fe0E9U7s5:Qo69L0DerF9P7oxfT959H0DOft9C3mGfVj5Vb1suSk9RvkBvag4332QeMJ9:vipPfL4kj4quLq%JbihfmM4hT6juKW%pviCPuz4mr71OK7%:3i%vsw4yf8bOND:LXjTvwL5En8cuQ4:OrkG:x25fb7FObK%8fmmPuR52T7dOgu%3Dp9:qG6sH6s%uM%vTsW:pJ7i36r%8E%iXx4fml8sf5MPS5%cX1vPll99T5EvkF%sr6UvqM:ML6Vv5W%ygAEvwCAvf84gME:scFOf%vB5YAmAkYAoALvwNnDYkFSw9zBy4RdwkME40L4hSsDasWyw9iGOURBBrzE40b8RX5HNgXQx6lGWcfVRtmIOYcPyFXHvAhox91IscgyyLAIe8iiyLeIisjnCKiIyki8iOJISAkwSAsJNUfGiTKHuwjpB2kI2YcRCMRG8oiqRk2IjAYiSGpFsYgFhXwH3gTCx:QERUeHRAOHWAO9xuZDNMaygqkGfUIbxgbBzYXPAX7FVsDwRR7AY0Tov9nEtf9VhEf:F4QgfqEDwL5yQ6m9zAOc:a7DWr1bQ2M9EUN2:NEDVfzaA0E87EN4vIdDvHyrQ4x82APnvMxEDT0HhHw9CMSzfU%E8f2ahTb96MVBfnkFkH6JxiK%2oZ2vyrGi7%5xuA:xwdywBCHgcCUh8uA0YgOgQaISgFzCH1BV0ioAbLIigHFiOOBzsj0wc7I:gHFiP%B80i5gdjIrIH2SFkBzMh:wZ2IIUGpR:6BcMeYwXRHcME0BweBMAbdQOkGssCfBkiAkoYfgERF%IA0xVQAJQUxv9ZE0f:KBLU:gURcP72Dx3%:Q7e:RsOtP1TDZ:9pgyc:RcMrP2mC879UwsB:h4LRf4EC5r%AQv%:hULcP86C:H:bwt:ALALHAH6C8cBSQyAApoMRwPpDBsENQ36BHsN4AW6DcgG8A2zBx8OoAhHDpEJaA6GCoIOfwuUDnYMnQ5oDZ0OUw6XDjQPjg4MEIcO2xCGDqQRig5oEpgOJxOvDuET0w6WFAUPRRVFD%8VkQ%UFugPNRdKENAXtBBjGCYR7BibEWkZEhLWGYoSNRr:EoUacRPHGt4T%hpDFBobmxQnG%QUIhsdFQ4bSBXtGmkVxRqCFZcalBVmGp0VMhqfFf8ZmRXMGY8VmxmBFWwZcBU:GVgVFRk4Fe4YDhXHGNkUoRicFHoYVRRUGAgULhi2EwgYYhPiFw0Tuhe3Eo4XXxJbFwYSIRetEd0WVBGPFv8QNxatENEVXRBcFQoQ2BSwD0IUTA%dE%EO6xJxDjASAA5wEY8NrxAfDfEPsQw8D0YMkg7gC:cNfwtxDSMLAg3OCq4Mggp1DD4KWQwCClkMzQl3DJsJsQxqCQUNNQlwDfkI8A2yCIEOXwghD:8Hyw%SB3wQHAcyEaAG6REkBqMSqgVeEzUFGxTHBNcUYQSRFQQESRa0A:4WcQOwFzwDXxgUAwsZ9QK0Gd4CWBrMAvYavgKOG7ICIBykAq0clAI2HYACux1mAj8eRALDHhgCRB:hAcMfngE9IFABsyD2ACYhkQCXISMACCKt:3giMP:kIqv%SSMf:qIjjf3uI:b8KyRb:Fgkvft1JBv7giR2%n4kzvloJCX5QCR6%AIky:euIxb3QiNY9r0ikfUiIsH0byHq86cgDvPKHzDy2h5U8dkde:DLHKfvsRva7o8aFe5mGVrtORio7A0XAezkFWfrxRTf6rITbeqwEhHqvRHM6dwQnOkMEITpTA%G6ZoOpen3DeDpYQ016tYMoupWDCTr3wu5628LXuwECw7tnQrI7TcKie7SCU3vagkR8P0I0:CICJDxCghF8n8H7:LnBo3zPgYd9IEFnfSuBAr1wANc9bQCjfWHAZj1OAB59cb%MvUy:cL0f:sp9K75Z:PE93zyw:Vp8a:zMfCN8dXuXu9Z7Sbtv%vm6gvqouhB6FrmZ%YS5H7kyuGK4offj%BJ3Y7eEtuL3OTYiNq%1ojYodSR1ozSp9SB0NLSgc4a0Y7Mic%uyibO5cj4zDrHBMyyxUvLUMTQyhjDmMoQwqTKO8H2yp7Ajcs8wGfMGcCAzTbA186UwGbQNMEp0hTCGdQ0wzLWkcRu2CrGx9r7xzXd:8mv3zDMLOKHzqfk%9AY54TTeekd1sfrwNgA7mbbH:AK3iLyoeAF9CPjxPWH5WH3yOfa%OHpMfrP62f7ke18:Cbvcf2N8En%xvEF:87yp:%l8y8ASvScALz07AD59B8BA:UzAdn0KQF:9AMB9fPEAEHzcQBo8gsAbvGY:1nwGf8w75P%9%0H:rXsef1x6%38M%pq:ALp9vvk55b73%ZN%:XlGvso5fz6duTx%uDj%vpk4xb7AeNF%7Xig:uB4s77Y%Ij:Fviffxn4tr8h%I3:bvilP0D4%:9X%NI:s:jn:5T5PT%6%RL:5jlo:9b5v::NudfACjoxAAx6TABUeqhAYTrFQLK7IcCH%71AoHvXAPv8LoDZfIPBOLzWQRk9ZgE6PbLBG749AT2%RMFgPsrBQ39PAWb:kUFKgBIBboBQwVIAzcF1AQlBVwGDAXgB%sEXQnABNEKigQ5DEcEkg31A9oOlAMMECUDKBGrAioSKwITE6gB4xMqAZ0UsQBAFUAA0BXX:0wWdv%4Fh3:ExfQ:mEXjf6lF1T%4Bcj:hQY%P1DGNT9bxi2:ZkYnf3BGIr96Rh6:Q8Za:0xGVv9ThlH:WUZLf10GQv9eRng:HAZq:xWGWr8KRke:OcYxvuOGGL7Hhj0%pYXfPr2Fv35PxZ9%XEV::iPFIj4nBMb%J0SufeUEWT3hRAe93QP5:ZiDsL2UQ2u9kIMqfY2C6:2LAq%9iIJ0:YaCO32EgcN9wsGM:cEBV:3:QOO9:YCv:fuAe735AAX%Nn:OPjL:k34u:1X%Kr8VfiX%0r4g:o4%G75IfhV%AX4N:fl9xH2wffh9Jr3o:Nx91fyRvf88Bn3ku:p9hvus:aY7HX2Cusw9nTp4vXW54v1MuYs9YvkxvTj4lr0PuHr85:ffvMJ3hTzgtyx8gvbVvKq2QbyYdjD8TDXjvEb1mjxIdVO8UXUQPGH0zvx6dI98WvSQ:EN0k3x0NFY8bPRYfG10Wfx09Fo8Q3SZPFi0lrx0NJK8VbTM:H00xTxp9Tw8HDVxfBN1pbwPNdi8D3YKvBM2e:vaNqz75HbeO:G3ETvBt4a707f:%6e4Pvu9eES71TjTO%75K7vK%Y58Kbn7:Aq6dDxuOrZ8k3sCvTp7V:1iO:Y9izxcPjT8ib6ffT1%yf23P3T99X:fvneASf78QPN:AkGbf4iCAYAOAqYAUgMIQNMDqAEPRARBhcSbgfUE7YIchXlCewW%ApAGO0LaxnBDGoadA09GwMO4xttDl8csg6yHNQO4RzUDu0ctw7YHH0OpRwoDlYcuA3rGy8NZxuODMoa1gsSGgcLQBkiClMYKAlMFxkIKxb0BvQUugWrE2wEUhINA:EQoAGLDygAIQ6o:rcMIP1MC5X74wkL%n8IhfgmBwr33AWf9asESfSXAw3zpgLs8doB6PA1AQLwuQA872gAme5BABzuRQDI7XEAn%3DAKDtOQHN7dABJ%6EAqzuUwNb7zoENPA3BTTxRwZY8moHnPObCPz01wl19hsLBPhlDKT5sQ1P%:sO::xBEKv%fRFMAKwS3QHJE1gDzxS8BLsVBAaMFjIHQBdBCNcXLwlQGPsJqxiiCugYJgsIGYkLCxnMC:EY7wu7GPMLahjYC:8Xnwt7F0oL3xbaCi0WUwpoFbgJlBQOCbUTVwjOEpYH5RHNBv4QAQYeEDUFTA9uBIwOrgPlDfkCWQ1SAusMuwGYDDYBYQzFAEIMaQA8DCUATQz8:3MM7P%rDPb:8gwXAEUNTgChDZ0ABQ4CAWsOfQHSDgoCNQ%oApIPVAPjDw0EKBDRBF4QngWFEHMGoBBRB7EQNgi6ECEJvhAPCrwQ:Qq2EOsLrRDVDKMQvA2cEJ4OmhB5D6AQThCxEBsRzxDeEfkQlRIzET8TfhHcE9sRbBRIEu0UwRJeFUITvhXGEw4WSRRPFssUgRZKFagWxhXFFkAW2xa4Fu0WKxf9FpgXCxf8FxgXVhglF6cYNBfuGEgXLRlhF2IZgheSGasXuxndF94ZFxj6GVUYEBqXGB0a3BghGiMZHBprGQ0asxn0GfoZ0Bk:GqIZghpoGcIaIRn9GskYMhtgGF0b5Bd9G1cXkRu7FpUbERaIG14VaRulFDgb6BP0GikTnBpnEi4apBGpGd8QDRkaEFsYVA%UF48OvhbKDdwVCA30FEsMCxSUCyMT5ApCEj8KahGmCaEQHQnsD6UIUA8%CM8O6wdqDqwHIw6CB:wNawfyDWUHBw5vBzcOhgeBDqkH5A7UB10PBAjpDzkIhBByCC0RsAjiEfUInxJECWITnQkoFAAK7RRtCq8V4QpsFlkLIhfSC9EXTAx2GMIMEhk0DaIZnw0mGgAOnRpXDggbog5pG%EOvxsSDwscMw9MHEIPfxw9D6UcIA%9HOoOyRybDskcNA7AHLUNsBwhDZscegyBHL8LYxz0CkEcGgodHDMJ9htBCM4bSAeiG0sGchtNBT0bTwQCG1MDwBpaAnUaYwEiGm4AxRl8:18Zi:7tGJn9bhik:OMXq:tMF6v6qhal%f0VmfhHFYf3ihRw9scTWPX:Ej:0NRIs82wRIPKnECLx6A828DMPX%%LDqHu8g0B7msNgu32DCjtlQzy7EYM4ewGDPLs0gsk7akLcu2HC9ztawtc7lIL8u47C5nvJQtO8A8LDfH6CtDx5AqS8ssKTvOvCgL0jgqp9GcKRfU3CtL1:AlQ9rUJvfZgCRT3:AhU94UIeff7B4D3Wgdp96AGMPfNBdX24ARV9tkDsPW5Aub0gwH28zkA4fLc:qjxbf1M8Oz7ze5a%i7tuPhw6wb3mOlF9anndPOo5ZTxmeOl73zhp%1X35nrKt176fnaTufI2BPlndbK4nzUdeBs0hbectCv25TORdnXzNzWQMt41NTJHtKXyNTPj8egzb3GiMsjxpLJw8XFx53FJ8ayxb:EAsaRw47GpMJVx:vBV8ibwZLJhcEEy7vBqMw%wnzOC8N70CDEoNJ6xeTUF8dB1:DIr9kCyyjcR82m3rjPJOFP0p3jBtUL5tPXa%iw2rnqlN3x7HXgEu9M4xzxDuYO87To6fQ566v2le1S%MPv3fm98Uj7ffOS:AL1uf1H9rz%Tfec:xH4WACW%O8A3fhhAev4sAHD%N4BavjuAeT34wE198ABZPaKAXP1RAFq9PEATfOVACPyMwDx8ND:vu9w:4:uF:9q7cv%VeyO:lLrZv5k6lP%jOlW:snobf4c6Jf%hufP:gjnEf%i5ln:V%ak:ybm7v8S5jIAGeZtADzmnAB75rwA1%bLAE:nywDk57sAleidAF:pcwBB6j8AOesFAEfsxf9n7YH:me49:9zv9:4u8bH%jPJq:vfzI:5t9d797vaZ:Xz4Vv0X%hL9vvvM:HD9hPwr:zf87QDn%7QCk:t8BDv7RAbf%goIgPrKCR76ggu7%TENWfnTDvj4aRCa%PERPvhpE%X30xSP9ywWPPd1F%72rhij9tgZXfbxGh72:Rvm9foct:XqHZH1zh509aUfX:VwIFP1MCFO9echUvWYIl:1RCN09e0jkPWSJLD1MyXV9cwl:PVbJiX23iZR9lInfva2J6f2CCjJ9kQo4vZpKO72dyju9mwo4vZJKMv2DSip9rgnfPZJJ0b2vyYH9hkmwPVWJXX1diQm9Xgj2PRdIo70JyFN9NkfGfR0HvXz:hzk83kb5vPrGfnzWhgc9MoWTfRAFYr0wRPP9FASGvXuEGr1nQ%99V0OFfYxDXH2FwzR9hALNvcbCp73NgkJ%F4IdPiRB%D4zwZK%RQGsPliBRP6tQRz%g4E0PpoAyv7wQKE%xIC2:tZAS38kAB4:LX:u:zG:vH8wP0Z:aL8Mv1r%zn9G:ot:bX4Dv0899z8tfWZ:CL0RfyJ8uP77fB1%0:vAPuz7YX6HOwI%ozqjPkG6RT5jOeh%B7mNvjB5NL3duN390HiJfcj4dr2IOCZ9jvfX:Z33i:2190G9lvd5PUG3cf119yu9c7clvXp3H31J91g9YXdQPUA3hv1ld7x9ELfw:QD4JT02OBl9MHhOPS74hD0xePx89:k3PMH5tfzO%fl83voCvTH6Uj0Heuk9H3sIfXn7cD1We%C9tLwaPdS8m:41:Oa%WL15fr09lP8jPjg:Sz6jP:S%1QBfv01Ay3:KwXcADQHiQJMCTAEbwvPBZcNYwe:D%oI4RFiCvcTyQv:FR8N9BdiDtUZkQ%fG6wQUR2xEeoenxJnIHYTyCEzFAsj1BQvJFgVNCW7FRom:hXhJh8WiiceFhUo:BWBKLoV0ShZFQMp2hQbKT8UGCmKE:souxLGKNQRdyjUEA4ovA%LJ40O7iZJDTkm8QtsJYgKiiQQCZQjiAeNIvEFeSFMBF0gmgI%H94AIh4a:wwdU:0CHI:7BxvR%R4aHfhMGXn2lBjl9PcXZPN4F:jxFxel8NMWb%%tFlruoxZq7bQWo%zdFgnsHRef63EXZuvXF2DrTRiN69EY6%tiGXrs:Rk27aMaG%5QGybvAxxS8LocmvFyHfjyKR5n9N0e4PWLH1:3MSDf%MwgW:pZIc771SE0:T8iiv6WIs3:2SL5AAUjCgIaI:8CFiPUA:gihwTCIhcFdSKCBRIiyQWbIesFEiHqBXkgxwXQH4YFGh8pBVgetASMHSkEtxyJA9wb1wL8GhQCGxpEAT4ZawBoGI::nhez:uQW3f0%FhD9rhVP:DQVnvvOFP36ehRv%jQU8:n8E4z5zxM5%asT%viNE9D4cRO5%FQTs:gzE7z4ChPU%NkS9:ieEiP5VxJZ%QESlfmaEdf5IxEg%pwQbvoFEML6YA8Z%64Oc:vwDc37KA0k:FoMdvyKC8D8vgoA:fkJNP1ACVr9lwhz:QEIfP1%B3j9EAdm:bgGSP12Bh:9Sgbt:DIGtfwuBnn8OgY7:FUG%:t6Brr7pgZ6%9kGPPsRBwL7TQfQ%o0HpvrPB4f6Eghz%lcIa:qdCG365Ah8%i8JmPp%CcT60QkB%yoKUfuICrb77Qov:FoLvfzNC1:9RQwT:r4M2P40Daz:ow2NAAkOeQFjDmwCrw5iA%wOWAQYD0sFMg84BjkPGgcsD%8HCg%zCNMOYwmIDvsJKA55CrMN3AoqDSILjQxJC98LUAshCzYLWAr8CoMJpAqmCDAKwAekCdQGAgniBU8I7QSPB:gDxQYGA:YFGwInBToBXARnAJkDov:jAu:%PgJP:q0Bw:0yAUz90QDs:IsApfxiAHX8WABa:G4AUfyjAFf89wBq:GsBiPz9AbL8rALo:HkDKf1hBHX9YAXM:XUGL:6bB53%0AgV:xEKlP9bCxcAqgybAPsNHAFKD5cBkhAIAtERbAIEE8ECKRQDAz0VMgM8Fk4DJRdXA:UXTgOtGDIDTBkBA9MZuwJEGl4CohrsAewaZQEmG8kATxsZAGkbVf90G4D%chub:WIbqvxFG7H7Ghuy%uAasPmXGq34PRqt99QZsvZcGb311hjP9EQY6fOnFwvzAhcy8lUWX:GkFY:w7xTA7zkU8O6CEx7uzRJL7RsSeOxrEanrwBDi6hkQJ%p4D3rp2w7g6EQOXOizDfLnJg2l558MduceDGrnowuD5zILxefKCjHobwrL6B8KkencCYLqpQmY63sJz%xdCSDuTgmG70sJ%:BUCXjyZQn083wJafWVCdL2rAko%L4JaPnJCY:6yAmb%7kJifybCVj9bAkE:iwJjf7aCPD%dggt:wAIQf92By3:2wbw:i0Gif5uBfj9nwQ9:b8DWfzRAk770wEe%sgAz:iu:2L3h:7c9VD9QPQI:I7ysPrL8EX59%7H9xbtNPYq64n0NunD8jrn4:A55efuNOPR7C3hpeop32ToKt0S5jPbseNK2UXhcNfR3qvVXNz:0%rZc9KC1wzRKtXOz%bSvc660NzNqs4szbjMsMzqymrMQclZzMTHf8x0xtnMWMVlzXHEH87EwwXPVMMT0CHDRtEuw5nSesMJ1AXEkNXPxCrX1cXS2BbHhdqPyD:cPMr%3RvMwN8mzoDhVdA946LS9eQD1aTmcddJ6OPZ3%lQ3GTrsd7W7ADhNO4143zvS%Wt8DznxfEC6cTymOqp8:rrc:Qm7SP1HO639dzuLvZm74j2ve:D9uLv4fbV7%P2m%:N9jXvpPao7mz2%e0r9i3t5fVF7J:1R%td9TbqJPUW6fX07efT9MHmvvSX5bb0duS69GDjzPRc4uz0beEY9ZjgUvXg35j1R9:o9dDeQvZ63qP2Rd4L9zPedvdB3uD3cN5F%L7eofgq3:L4s983%VjgcvkY4aT58uHN%eXi7vnv4wj6DuUb%kHmKfqF5zT62eg%%jnqSPqk61T6GO1l%pXuevob8JX6qvG2%kPz3Prl9Aj7jvY6%z34cfvw%a:7pPvy%1r9OfwN:4L8vgDJ:GgCDf0KBEn9oQV7:SwHn:2oCLb9FAq9:W8Ltf25DJ798g16:RwPTP04EBX9SxHZ:FkSnvxnE2b8eBQ1:I0VDPypFuz7yRfV%%8YxvsZGr77SRu:%3scyfuvHdz74h73%w8gHPw0IUj8TiJ8:FsjtfxYJPD8QiUq:RkmX:3ZJoz9gCes:Q4ovv1:KMH90yi2:Qcpnv0bKXn9DylL:eQoFP2YKNb8LiiS:KQnSvz8JgP8OCbA%1olhftmJFT7XyMs%0YiEPsdIf365B:0%p4e9fpNHf769BsP%5YaJvs3GT:72BdZ%4AWc:swFYz77ROl%7oSv:ucEdr7khD4%50PGPy9Dj387g1o:C8Nm:x9DNX81AsY:TELYf2SCq:99Qn::VgJUP67CKD%HAju:nsHOP:UBnv:Jgaz:2sF3v%jBPf:yQP9:9wC7f:cAcX:xwCD:5z:Jf9b:qr%A:0T:pX7Yf0R%pj8ePi7%8r2z:oL9dj5PfPa%GXx3PeI7%D2q%3p9dLr%:QE6hX0Rug485vmY:IJ5ZXxlOPO8EDiD:AN4Vjv:9%r7hffC%5U3nntuN337EPdh%z03CnszNzf68zcpuvw3H7rON1l66DdWesl3lnrxN5l633fgOtQ4KnrPeHj60PiMOxg45HslOQJ7d3lnO0650zuqugd7y3qEPC:6yXxX%1d8gnvuPO88DX1d:LV9jf0kvj79Wv6vfdZ:Hn5Wv4s%2kA0:yDAm7%pAT7:8gGfAHoCO0C:gpPBAQNoAX1DuAGzBAQCIYSMAkhFD8KmxU9C:QWKQwrGAQNPRnNDSkahQ7uGioPjBu9DwYcPRBeHKoQmhwDEbwcShHHHH4RvRyfEZ8csBFvHLARLxyhEd8bgBF:G0wRDBsDEYQapRDoGTMQNxmvD3AYGA%SF24OnxatDZgV0gyBFNsLYBPKCjoSogkVEWcI9Q8dB94OyAXPDWkEywwFA9QLoQHqCkIAEArt:kkJqf2WCHv8%wdo%3kHdvoRB6j5wQYB%YgGgPhiBib4Swbv90IG3PdFBun3UgYW%GkGYviIBsv4rwZT%d8G%:kZB8X6XQe0%6kHxfz8B:j9VQhJ:7MItQATCTgCdwnNA94JbwVKChkHvArGCDcLcgq7CxoMRgy6DdUMTw9kDdQQ7A1HEm0OoxPkDuUUUA8JFrEPDhcGEPEXThCxGIoQTBm7EMAZ4xAOGgARMxoUES8aHRECGh0RrxkWEToZDhGrGAgRCBgIEVcXExGgFigR5hVMETAVfRGCFL4R3hMLEkYTYxK6EsESORIjE8IRhhNUEecT6xBHFIcQpxQtEAoV4g91FbEP7xWhD3oWuA8RF:APqRc%EDIYkRCcGNsQ2xgQEe4YLxHXGDkRohg3EVkYMxEKGDQRwRdEEYkXZxFmF50RWRfgEVkXJRJcF10SXheAElwXihJeF38ScBdlEpsXRRLhFx8SPRjwEaUYrxELGVQRZxnaELUZPxD2GYUPLBq1Dlwa1w2LGvMMvxoSDP0aPAtGG3UKmhu8CfUbEAlPHG0IpBzPB%0cNQcqHaEGXB0WBogdmwWxHTcF3R3vBA0exwRFHsQEhB7mBMseLgUYH50Fah8xBr4f6wYTIMgHZyDGCLcg3gn9IAsLNCFDDFYhfw1dIbUOSSHgDxYh9xDEIPQRUCDRErgfhxP6HhEUGR5tFBkdnRQDHKYU3RqMFK4ZVhR3GAUUPBebE:4VHRPAFI0ShxPyEVgSUhE2Ea8QIxAKEB8PZQ8sDr0OSg0SDnkMZg25C7oMBwsODGMKZgvPCcUKTwkxCuYIrwmbCEQJcAj2CGcIxwiACLkIuQjNCA8JAgl9CVYJAArGCZEKTwotC%4K0guhC4AMaQw3DUYN%A02DsMOOg%XD1AQcxB0EVURpBI7EtwTHxMUFf0TRhbNFGsXhxV8GCQWcxmeFk0a8hYGGx8XnRsnFxUcDhdyHNgWthyIFuUcHxb%HJsVAR3%FO0cRxTCHHgTgxyUEjAcmRHHG4MQRhtQD6ka%w3vGYgMGhn8Ci8YWwk0F6sHLBbvBRgVKgT4E18CzxKWAKMR1f59ECT9Zg%G%2QO:vl4DYf4ngwc984LtvX9Ck30IArc8iwJYvEdCOPv8QZq7rAFAu1lBLzrHQOk6uYBxunMACnp2f:R6BP:veh5:ufoCf5D6bv9yOmI:WvqaP0r61v9Cexh:Qjtfv0n7rL9Y%:5:bHwTf4H8qX%WfP7:qH0Sv:Y9Y7:9:bH::v39f:f%BgAovkzAEX6SADG%loAKPtqAGn7eACI%38Agft:AFP7cQD9%lMAe:ogAM751v:1%Hb:8:cC:8r2e:589eH9CvQx:XLyavy48If73%6L%u:sevnz6lr48egx9%:m::Xv5ML08OJ28:DgE:Lu3pLw7Nzv7ubaJu3d2DPr0NYZ6cTU2%a80oDkv9AO4tfOjd8JzQTdXMt62tfJ9Nd9yHrVTscN00vGr9BvxWDOusQgzCrE8snEw93HicPoxXzDGsSdw3fC6cMBwV3Eur:4xKW%usXIvaPGJL2xx7u84ciMvDLKlLyfy9O8J81HvcnO8r2D0NO%UtLpvzHUMcEd1qnCEthNxBDaGsYU3A3IHN4hyibgT8wt4o:OLeTZ0CHmJNME6GnV1eme147ru9kr7bjbqO6O3QPwOt878brgUfIM4kjzLuMh9Bzk3fTV5H:1WOUF9qbldPbA5c:2rOUc92vlXfcA5Zb3beTL97Tj:Pfc4i746uFl%Ofgo:ja3%n4yt41%bndhfmr3NX5pdsk%qvacvrC2bz67NgA%yrYPPt812775daY%2jWv:sO1uf729UR:NPVOvz01Vr8NtZq:JLWZPwB10f8f9cO:AfYuPuX2ET7K9m0%sTZDvpk2lz5E9us%NXbCPix3Hn3qt0G98Lesvb834H2WuFy9trig:Z65Kz2M%bl9v7nJPfR6WT3qOuh93:t2:dT7w:4IvE6%OfyWPig9Gb4S:Zi%Ob3UPh0%TD49:oG%G780vfe:Zb3Sv9U97UADvcmAsf2oQN%9ikFNva:Bu31Ygik9RIKXPXNCxT1kQ3P9F0PjPQwEUv0BxMN9N8UzvOwFozzcxhC8yEa7vK1G5DyLx0t8pMey:HnH3HxLyEj8W4i5fCiI7bwySSW8N8lgfDgJnTwyCdr8JMoX:A9KU:wwyk48CQqG:BiKvrvgSrW74EqsO9kKojvKyph79cpOu9qKRjv5Sj87kko5%6VJ9ruzSbW7vEl3e4GJfLuESQU7xUjQ%8TInzvCCG%7:MfCPDTHlrwqh2z8HocEvFEG3bxCBrc8cQYRvJ7F7XyMBYt8%cUr:OoEzr0dxLN9FkRZvVSEAT2ZA%n9pEOT:faDfr3PQ2l%LcMT:lDDPX52wuV%noLLPsbC7X7uAos:E0KivzVCcr8TAno:KwI5Pz0B738Hwd0:CoGCPwUBXr73APN%ocCAvoWAR:5jv8n%PP9IfdI:BL2j:oA9cz48fME9%zyPPX08XfzCfG58SzwBfBa713uju7B7MbtM%v:7LLpN%xB6Gzr4eag6pXl1%lj5BXpTuNh6FrivueL4S7n5OCz5mTgTeYN4Prl3d%95dPfl%Xs34nlJuCU5X7gteXz4O3lhOE75jPin%b%4hzn5uO25%nkb%gG5kvpPOdN6ovoeuvy6dbsdOtk7hDtIfDG7gjykPAP9GjyLfZI9Fr4KfaR%gb4z:zZ%RD:n:tPAVb9hwP5:rAFiADIBwECzAlmA7oLtwSRDfQFTQ8gB%wQOghsEkUJyxNACgwVLgsuFg8MNhfkDCQYsQ37GHkOuxk7D2Ya%Q:8GrAQfBteEekbABJDHJISihwRE78ceRPfHMIT6BzoE9Yc5hOtHL0TbxxvEyMc:xLOG24Schu%EQ4b6xCiGvYPLRrgDrMZqg02GVgMuhjvCkMYcgnTF%gHbBdWBhMXxQTJFjwDkxbAAXQWVQBsFv7%eha9:Z0WkvzOFn77CReA%kgXlvmFF8H4vhcA%PMXVvclGMb2VBhT9oEY:fWrGML10Bih9fAYmfUMGar1JBnW9ToZHPZQGXv2aBny9oUZgfeqGSj42Rnp%BUaxvlcGrz6qxrL%wAb7fxZGyL%tRtl:xQctQB3HA4C3hxsA0YdxwSuHRoGFB5fB3cekgjWHrEJLx%4CoAfpQvJH3gMCSAvDUMgyw15IE0OriC3DuUgCw8eIUkPWyFxD5whhw:hIYwPKyKDD3oicA:QIlUPLCM0D44jDQ:1I%IOXySyDsokfg4xJUQOjyUEDt4lvQ0XJm0NNyYXDTsmvQwkJmMM8iULDKoluQtNJW0L3SQpC1ok7QrFI7kKHSOOCmEibAqRIU8KriA2CrkfHgq2HgQKph3mCY8cxglyG6EJVRp6CTkZTwkiGCEJFBfuCBEWtwgeFX0IQRRDCH4TCwjZEtgHVBKpB%sReweZEUkHVxEPBx0RxgboEGsGthD9BYgQeQVeEOAEOxAzBB0QcgMEEJ8C7Q%9AdcP0ADDD93:sQ:t:qIPB:6WDzT9jw98:JAP5vudD3f7uA81%%UPJfslEEn7eBCj%9sQMvxJEfL8wBHf:T0S9f67EjAAOBOLAbET:wIeFIQEexQPBsEUmQfsFBwJ%hSWCuoUBwy9FHANchTPDgoUIBCGE18R6BKKEjQSnxNsEZwUlRCAFa8PShbADvkWyQ2LF9EMAxjaC2IY6AqoGP0J1hgZCewYPgjpGGwH0BijBqMY4AViGCEFDhhlBKYXqwMsF:YCohZKAg8WrAF3FR0B4hSgAFQUNwDPE%L:WBOn::MSh:%jEoT:bBKf:1AS1:9QEiwAbRKeAKkSLgEEE9sBgROhAh8UewPcFGMEtRVUBaYWSQarFz4HwxgxCOoZHQkcG:0JVhzOCpIdjQvOHjkMBSDRDDIhUg1QIrsNXCMGDlEkMg4tJT8O8SUuDp0mAA4yJ7kNsSdYDRgo3gxlKEoMliibC6ko0wqfKPIJeCj9CDgo9QfjJ90GfCe4BQkniQSKJk8DAiYLAnAlvADRJF::JCTy:WYjc:yUIuL6rCFA%a4gj:ecH9X1dh4T9D4dTvL2G4vwnxrN7jkZF%3GF23rSRbT6cYUTOhBE9:mwBGR5UgQa%TdDnPjgg2v4jsMI%IJC9Hh7wm94fAI5uEOCE7iSwf04qsG1uMwBvDk2gU95qoFs%ecBUnprAX06tQFqewLBl3uSgYJ8I0GpvHPBjLzDgep9EgHCvZ6B1P3pQeC%MgHmPnjB5H6%Ads%wYIKfwPCMP8Ewg8:RUIkf0XCMX9GQjY:RwIy:0bCKD9FAha:QMI%vznB4L8vQfx%4UHR:s6B4L62wai%WQGqfjUBZn3KQV09mIEO:V9A%zzdgKK8kwBFPH::5HvkP4I7gP9f%xe%:7qpPmI6df3Iej59cvmDPSH5RLyWOQN8D3j:e024uLrQuG86WHgjeeT31fl3N4f4z:e6OC83bjeUt2R3ALddtrK3GzYqNx21pvcl9Sj3NDSvNwk0efck88j3R:Ocd3MzNHdnctG3pXK0N64yXHfCcko4InI%eA5yOThHMjq4jHICuR2yEHl7MiN5o:J6%dgylrpX8vV6ojMW%zbzeXtU89u7%3Q8vCi0m3ybtTb80rWOfUt2If2DtrA9%Xb5fio3fL5Tt:n%tHgxPsp4or8T%M4:T:kzv305Er%b%Wt:rHl9v695Sj:m%VI:1DlWf:k5GH:X%Rj:8bjY:8f42P:b%Jl:7nhbf8E4X7:VeCZ:7Hfvv8b3%z:ld4eAB:eUQC43YAAYN2nABXdwwDY3NIAqdzSAIfcwAB03JwAb9xlAHvcGgCX3Lv:xNxH:wHdwf5M3S7%pd2R:Qze8fyD3lP8Dd%8%6rfMPta4LL6HeFG%u:h7fnQ4qj5vuN2%bnkWvm:5VT50eZk%e3njfkT6c35Qeoi%nnriPq57Pr6Ae5y%0zv7Pua8GT85vHX:DLzRP179Kr9xfUI:g:3Yf5b%Lf%q:kK:wH7Xv9d:LP:wf0KADH:YwCtALwANQITAcwDZAFwBasBIwfjAeIIBwKrChgCfgwTAlYO%wEzENEBEhKYAfMTUwHSFQIBqxepAHoZSAA7G%L:6xx4:4ceCv8KIJf%ciEe:rsin:3gIxv94iSW:MMlE:yEJpb7KScf%7QnsPomKEz6gCjy%cMopPnwKGP5Cykw%RUpCvkOKfH49Sji%Mso2:iOKNv4PSjg%Nkn6PhgJ:H40Sb5%Csm::hpJf:4iyT3%I0j5PhwIsb4MyGe%NgfbfhjHjb41hz69zcbuveKGXf31hc09x8W8vZtFLb2xRKD9iwRW:alDz:2NA4y9twMNvahC032hQp49osJtPazCP32%wdN914HnffaBub3ZwYk%AIGUvilBWz4SAVw%OcEW:h6BCv4%wPf92YDd:e3AvT27AFV9gMBm:X5:8X0zv7V84L9y:IX:Kvxjvp48Ov4NO8v9%PtXvWJ7H3zKOuN8cTplO9f6JXt%%aT657lkulJ5JXnAOOg5cXhteOW4Nfhc98J4FveTN5P3aPcU9wS22zbnNmg2kfY89kV12jZCdb%2CPVtNhj1IvYy9OC2FvTndgU093Y%NJF2QfT1tlB05Dao9Nz2yzUgNza1LXdqtUP35jWi%Ch1yXiw9ja4:3ZpeVL24Xnrtx56SLefeul35HtNeGx787i2fFt5AX0DuYw9q:nVfhK6W:62up6:Frsdf7I7V4AIu8zAmnw9gOe8aYFxPJCB93zzAjt9EIK9fWnC:n2%gz79zsO:PhpD:75gxAC%4gRB:x1Egz9ShMP:gUUDP%mFAIAKxXsAJYVyQHmFZMCHhZFAz4W2wNEFk4EMRaZBAMWuwS8FbAEWxV3BOMUEARUFHsDrxO5AvQSzQEnEr4AShGR:2MQUP53DwD9jA6r%6QNV:rGDAv59QvN9zQLofaHCoz17wmQ9G4JrvMECefyrwg78m4IqvE8CDPxFgjT8PoHifDiB1DwzQcn8LcHDPCeBwDwfwcA8FoHEPAsBy7w9wZc8LoGnPB4Bu:wMQZX8ecF1PGcBWnyUAUU8wYF2PO:BLT0fQSn9UEEsPYOBMz35QP6%MkDOfq%A4b7xwPg:OUDRP4ZBLD:YwQfAb4EjQIpBfgDnwVcBSIGuAaxBgwITwdVCf0HlAq8CMYLiwnpDGoK:A1YC:8OVQzwD18NzRB3DpgRmw9OEskQ8hL8EYUTMhMJFGcUgBSXFekUvRZFFdUXlRXcGNgVzRkOFqoaOhZyG10WKRx3FtAcjBZoHZsW8R2lFmgeqxbKHq0WFR%rFkgfpRZkH50Wax%TFl4fiBZAH38WEh93FtUecBaJHmsWMR5nFs4dZBZlHWIW%BxiFo0cZBYnHGgWyBtuFnUbdhYuG34W9hqEFs0ahhazGn8WpRpsFqIaSxapGhgWuRrQFdIacRX1GvkUHxtlFE4bsxN%G%MSqxvyEdAb4RDqG7EP%BtjDvob:gzxG4YL3hsECsIbfgifG:0GdhuKBU0bLAQmG%sCBRvQAewa3gDdGhsA2RqK:%EaLv:zGgf:EhsU:zobVf9rG8b:oRtjANsbKAEWHA4CThwQA4IcJwStHEsFzRx1Bt4cogfeHMsIyxzvCaIcDAthHB8MBhwnDY8bIQ75Gg0PRxroD3gZsxCQGG0RkRcXEn8WsBJdFTcTLBSuE:ISFBSvEWcUZhCnFBwP0hTTDegUkgzoFFsL0RQ0CqUUIAljFCAIDRQ2B6QTYwYqE6kFoxIGBRISfQR9EQsE5xCvA1MQawPFDz0DQQ8oA8oOMANkDlUDEw6ZA9oN:AO7DXwEuA0XBc8NygUADpEGSg5oB6sOTggkDz4JtA82CloQNAsWETMM5hEyDcgSLw63EyYPsRQUELIV9xC2FssRuhePErwYQBO4Gd0TqxpkFJIb1RRoHC4VLR1vFd0dlxV4HqQV:R6YFWwfcBXEHy0VByDOFDUgVBROIL4TUyAME0MgPxIgIFcR5h9SEJQfMg8qH:cNpB6iDAEeNQtBHbUJYxwlCGcbiAZOGuEEGBkxA8YXeAFZFrj:0BTz:S8TLPx5EWf6sQ%o%N0N8vYEDEn1Kwqv81kIJvKUBrPw4ARZ70MDHe7BAQTtXgAV7B7:VOsD:sbqD:1v6kL8Uuqa%3DqFvvI6rT6V%tx%hnsSvoK7T36I%5H%l3vZPq08JH6IfLL%p3zD:sh9Vz7pvaw%yP4CvyP%Wf84:rG:Bf8Jf0n:YT9Dv7i:cv%P:5d:53%xP:8:gAAXP8UAL7:AgAgAMv:gwBx:%YA9P5EAVX%ngGW:fABufw4Ar77dAKr%qICgfnBAkT4zAL39sQCnfWkAjn0bALP8hkCYvGqAfXvHAGH7nAAG%2k:7LruP5K6q395eiE:ITnP:sm5t:5zuRp%H3j3:Yz4kP18uCZ87rf4vGO3iDwbd1X7lfciOxO27fqUNrl6F7ZFed62EXlpdd44%LWreE01ubfntUl3iPVbtzD1MPaf9Qp2VfUotdK1DLWWNTb1IHUoNPE1ITSItWK0ZnVtNAq1gbQ1daDz5vXLc972AjPd9kWz43aWc%928:PBd130GbeTdHc303SZ%Fy0wPjt9Sv5BbWZ%aJ1yfoC9nq6ZTaq%se3Gbto90V7xzftPCE4EDy1%G08xHjEPUv5FH2L%V39w7mg:jM5nX5aedO%ubnD:tE6Lj7huhJ:K3ow:y76Cb9s%hy:Zfoqv1q6NH9Lujr:ejn:P2Y5wb%QecO:uTmFP6C5hr%GuYf:q:lIv5B5ST%0OQj:l7kIP7s4xn%e%MM:g7j%f2m4t39ReK4:e7hiP2j4U39ZuEI:Tnhufwe4V:8F%H7%ybhjPtL4RH7heGM%tbh:vk74mf5teLL%ELjLfjh45H3keT49lHlaPYf5uX1%OZx9dvnEPXI6MX0vemQ9Lrqc:S%6270yex%9Nnto:Tu7tz0CfAl9SvxevVV8tn1ifM89sj0nvYR9vv2ZvdP98X4mfcw%tj3p:sN%Cv9OPi::lv4YwB1%BcChvjbA474rgWM%I8Hffh9CWD4dws0%HwN9:eJD6r3nBFM97AT4PbBFWb2zRfg9dEZUvXIG770sB0m9IcfjPNJIfTy8yJd8oQky:H5JT3xUCe38IkoOPCkKcPvoypY74cr%u5TLKjuCS1i7qwtKe48Lv7tui7g7SUvz%18L83tvy:Y7esv8e3%LxXu9i9D7tEvee6KL7buIC:67pEuQe:dLY3vBS3a7wwsKPD0KnXwvym:8HEoBvENJ0rxlyWK8RUkx:GNIgLyBCE68oEfcfIJHqfyoBze8ksbF:MNGlPz6xiV8%gX4PMDFzX0PxaW9JkVBvUOFYX1nBQU9kAUtPb1E2P3uhMf%IkT4:hgE6z5OBNz%g4TMvvdEuT7ohKC:FkSCP0BEnD9mBG4:RwR3v2MEN:95g%7:SkPcf1TDgL9Yw1u:FgMtfsvC9n66Qna%YUIu:gEB4D3ZwUq9q8Dv:TfAULz%P%48f39J:Dx%5Xu2PkI7bj3huuV9RXqc:O86Fjxf%dH72TmRu1t5VfrnOSA6fPjxOdy4yrmGeOz5OjiY%Pf4jzi:%I:4UbjbuC248vfTuRX3w3lE9:z5f7e:OYW3yboWt9u6cjfz%pb4EbsE%HQ7ezha%:j4hTx9uPK8iDljfRe5lz2q%c2%AXpGvpm6gb8zuv5:Tnt7:%k7ugBDfDeA3Tx0AXW8roHNfSZCZD1agvm9ioNOPjWDof5bxDR%vQRGvxoE2L9zBSq:iIW9f9tF0EBrBiPAt8Z3AMHGyUFIBxnBisdngclHscIDR:dCeEf3AqgIL8LSCGCDNchIg1PIpwNriLwDfciHA4rIyAOTCP7DVwjrw1bIzsNSiOjDCoj6gv5IhMLuCIkCmkiHwkMIgsIoiHsBi4hxgWxIJ8EMCB6A60fWwIsH0QBsh44AEMeN::jHUL%lB1Z:VUde:wnHar7Bx3k%vQcKfrqHHb56BzM%OscKPjwHIz39hz29vscafb7HOT19Rxp9egc%vTQHJn0rBxH9HwcBvQ9HNnz8Ru%85YbuPMvG8XzvRrm80QaHfTHGWn0ShnL9NEYQ:VeGM:19Bdt9pcXGvdLF9X3FBec%PcWbvn5Fkv6HRcy%2IXIfzJFxb9ThgO:u4YCP%lGQIAcBr7AEsb8wEzHOoCIh3eAxQe0AQFH7wF8h%hBtggfwe2IVMIjSIbCVoj1wkcJIQK0SQiC3Mlrgv%JSkMbCaQDLsm5AzoJiQN8iZSDdgmbQ2eJnYNRCZwDc8lWw1CJToNoiQODfIj2Aw2I5sMcSJXDKUhEAzUIMUL:x96CyYfLgtKHuIKax2YCoocUQqoGw4KxhrRCeUZnAkIGW4JMBhICV4XJQmRFgUJyxXhCAsVtQhSFH0InxM1CPMS2QdNEmMHrBHSBg8RIgZ1EFEF3Q9hBEYPUwOvDicCGQ7gAIQNgv:vDA7%WwyJ:McL%PoyC2D5nArJ9wMKN:ZnCbP0xwhB8yQI6PF9B6zw1QaS7y8GoO6NBdvt9gRG7W0E5ez3A7nsmQPB7FMD:ewpA2ntGAME7h8DyO48A7LvaQO98KID5vHhAyfzIgR89GAE4PWaBFD3zQTG%PgEP:oaBbn7MgUv:T4FoP48BQoAJwVqAf4EvgK:BAQEaAQ6BfoDXwZ1A3EH2wJxCC0CXQlwATYKpwD7CtT:qwv9:kYMJv7MDFT9PQ2O:JkN1vvhDTL7Fg6k%jYOL:pDDtP5Pg6S%SYObPn%DWP5yQ11%YoNpPlGDe:5:wxU%rkM0fp2DGL7OwwG:AkMu:zjC379ywtN:sQLJv:PCwoA7wv3ACYM6gF0DOIC2gzdA1UN2QTlDdQFiA7MBjwPwwf9D7gIyRCuCZ4RpQp8Ep0LYhOSDE0Ugw08FWoOLRZFDx4XEBAPGMcQ:hhnEekZ7BHPGlUSrxufEoccyxJYHdYSHR7BEtUejhJ:Hz4SGCDSEZ0gSREMIaIQXyHdD5Qh9w6mIfENlSHKDFshgwv4IB0KaCCaCKsf:QbCHkkFrx1:A3UcpAEYG73:nBnP:QUY4PtXFvX5mBQS%M0SPPb6EHb0JQ:C8lUNI:GNC5nv0wkn7ioIz%yWBpPrGgVz6roDdOl3ApfoUwHh508AVudp::rmo:7P5vr91%Zs:RLn%fyA5578H%hX:OzoJPzk6QH8AOvt%zzs5:uS7ez7%%75%23wC:zi8SH8VPM8:L30WvwZ9nz8ZPeh:Jj4yvyx%fn8qfow:Xz7bv0m:LL9pfz8:fr8Tf4n:aT%Lf0D:xD9af:U:NX:fvxFABP8twCY%yoBEvucAYX6CAL1%W0CZfnGAtf4EgNM%E0Dw:dzAzj3ggOr9ngDHPZTA4v1FAP69LkCZ:RDAtHzsgE38wcBmvJDAPjxZv9R8W:%p:Bf:fnvN:xI7:v6ku6t%dbtTvgS7d:2Rexf9W7r0fON6jXyo%mN8LHo2O665xjtxeZO69bleunx5KDnGuTC5VLj4eOc4gHi%uEm4HDhU97%4I3cp%DW2mrgMtlI4KTXQeAx1lPg2tR:4KPTxOCM0iHhmdGW4crQIeIj0MLios9440bPQ%QOzyPl984Y5v7OHucezzLoVM9R6ZnPeOrsz6jrSdDd7K3QFu4U0VHvf9GM8OzRxPFc0vbyztIf9ELTOfW300D2LNQw96HUBvgY1b74j9VW%QbWzvl91ib69NZe%mnXevrb13n6Sthg%rPYMfoW2fD5cdmf%cPZQfkM2tn4Stpo%H7a9Pel2n33wdoE98:aifbR2g32yNqQ9bbaEPWc2o70fNoH9FbaevMu2unyBNpS8trZt:Gx2Rfxjdlx8HHZxe9g2RLvXNlZ7mjZme2C2dXsq9kP7OTZTOsv2o7qi9rb6fjaNel1257oANwY6Jrcp%dE3Uzn%90L58De5%aP3%TmaeAE507hSOc94rHnNeM96DXk6%g95bjpTeaf6mbnmeuH6KHssemy7eTqyO4i7OHvbe348MfuCfIy8A7zrvEE9D3z6PTf9Ln1mfZ59mn4JfdQ%r33TfxA%F7%rfiDAAX5uAJL%foEgPlFB6j5lQnF%egL2vk5Duj5hxDw%csS9PkEFfX5Lhf2%UsZ9vlaG:f5WR35%Ugf%:kjIQD66iII%p8kFPpAJib6zic9%kUpW:qlKoL67Suy%hwt6PoxLiX7Ky9m%wYwqvvBMPD7WjEy:M8xb:weMqX8RTLT:EMy%:wZMhz9yDE0:VExQ:21MEj99y9F:RkvOf0fLib9DC0L:eMr6vypKsL8YSmV:A4oYvy0Jiv8ViXw%:ojtPuiInf7UyE7%w4g::rXHsf6rh2X%pcccvqSG1z6oRpZ%sIZa:r0GJT6NhjT%ocXJvvlFoX7TBbt%7wVWPwxFcX8qhQy:SUUl:2gE:D9GBM2:osSY:73EXX%WhFl:rIQMf77D9L9NQ9G:WEOiPx:DZb7jQxu%owLFfl4Co33Ugnd9RsIDPTRBh7ydQUZ8AYEBO6FAunr8wDO6VD:u%eb:bTl1vu%4wT64OEq%CDgTPaG3mv0FN2L8s7brvC02tvuxdkX7QHZaOtp2M7p:ddN6L3X5uaq153lwtd15ALYceNm2JDi7NjU4ZTZPeFe2s:gStuL4Fbcb%B%3Xzgw96x4CTgC%Gf4YvhMeMr4tbk6eKM5sLjUeiy5CTqueUE7NHm8O345%bvK%nn8Wjq9POw6wz2A%0s%F7uUPrA73P8J:GP:pTyoQAF9KYCevWdBO:2gwZi%FkI0:kcCkP7yQu0:F8NI:7bDo3:QRDvAJARRwLLEpMD7xPRBPsU:wXvFRgHyhYZCIwXAQk1GM0JxBh9CjkZDguTGYEL1BnVC:0ZDQwMGioMAxovDOMZHQyvGfgLaRnACxEZeAunGCALLRi7CqkXTQodF9gJjRZeCfgV4ghfFWQIxBTnBykUbAeOE:UG%BKDBmYSFwbbEbIFWRFWBd4QAAVoEK4E9Q9fBIIPEwQOD8sDmA6FAx0OPgOcDfUCEg2oAn4MWgLeCwwCMgu%AXgKcQGzCSUB5wjeABYIoABFB2wAdAZEAKQFJwDaBBgAGQQZAGQDKwC%AkwAKAJ%AKYBwAA:ARUB%gB8AdsA9QHnAH4CHwEWA4QBvgMaAnYE3gI%BdEDEgbuBPEGMwbZB5oHzAgaCcgJrArLCkcM0QvmDdoMhg:mDSQR9A65EgIQQRQOEbYVFRIUFxcTWRgSFIUZCBWVGvYVjBvcFmoctxczHYkY5h1PGYYeBxoSH68aix9DG:QfwxtNIDAcliCJHNIg0RwCIQkdKSE1HUohVx1oIXAdgSGCHZchkB2sIZ0dvyGsHdIhvR3lIdAd%yHjHRQi8x00IgIeXCIMHo0iER7GIg0eByP:HU0j5R2YI70d5SOEHTQkOR2DJNkc0iRhHCAl0BtsJSQbsyVeGvQlexkrJnsYVCZfF24mKBZ4JtgUcCZ0E1kmABI0JoEQASb5DsMlbQ13JeILHSVbCrgk3ghHJG0HzyMLBlQjvgTXIokDXCJwAuYhdwF0IaAACyHu:6sgYv9YIP:%ESDG:tgftv6sH87%jB8M:3Yfbv9rH:L:ah%VAHEfUgGAHyUCkx8KA6Yf:QO1H:oEvB:8BbcfAAejHwIIfh8BCUYf%wn8HvAKoR7hCzUezQy6HbQNMR2VDp4ccQ8CHEYQYRsSEboa0xEOGocSXRktE6oYxhP3F1MUSBfSFKAWQxX:FaUVZxX5FdsUPhZcFHUW7BOdFooTtRY3E70W8xK2FrsSnxaOEnkWaBJEFkgSAxYtErcVFhJjFQESCxXtEa0U3hFOFNUR8BPWEZkT5hFLEwMSCBMuEtASaBKkErEShxIJE3kScRN8EucTjRJrFKsS%xTXEpcVExM%FlwT8BazE6wXFRR0GIMURhn%FB8ahxX5GiAW0BvGFqAceBdnHTQYHx74GMQewRlNH4watx9UG:4fFhwfIMscGSBuHesf%x2TH24eEh:EHmke%R6YHQkfoRztHoUbox5HGioe6BiCHWsXqhzRFaUbGRRyGkYSFRlZEJIXVA7vFTwMLxQWClkS6AdyELoFgQ6RA4wMcgGXCl3:pghV:bsGXvvZBH35AwO59z4BGPaM:5307f1N82T8KvLy%jXxl:ls8FT4zO8p91XvGPYF7yL13u5J9N3ujPP:7uryQO9g8pzv7fEP8JDxlfBH8SnxDvHD8ePwX:LD8PnyrvCO86HwHfSa8KP0mvAd9Z3wivWm8OX1tPAt9sfwXfbg8HT2AvF09i3xXvZl8TP2qvHx9f3xmfVb8iv1xvKq9DzzHPS884PzQ:Tj8s30PfJV9ZTx2vXr8Fr2Q:DS9p3vP:f87p33Yu7s99PtJ:hO7U34zuxb%FDsTPjO6yH4R%va97nqePch6vv2fulj9tDosvUZ6O30W%cX9JXmNPPH5UPy7%RF8Q3kO:Aj4yjvMuIL7jvh5exA4LPrQ9936kbeM%lL3efnUNyV5lXbOuVY2tjjXtlw4mjYB%F7157fmtY23snV0dwK1XXbYdQk2svT49hI07LX2NKQ1nzSfNU60nTUEdJ30wTSg9IR0pfRPNKz0IbS2c:y0gnPgNNDzi7UiM381NrM6NU6zPLWp8sY2CHLV9mmyq7aN8ob3NfJmd2JySTfT8m14CrJR%IZydrjHsls5TnJ:uZqyYrosMkJ6gnKeOt1ytPs88oa7n:LTu8YzG:wuMx98VzNdfIDzlXzrM4b9FXPw:T8z1D1n9DD9TrRHfbP0WH2XdKQ9uLSrPZf07j21NO39j7Uqfad1Iz27NRf9izVI:Zb1dj1etV99YzVEvWR1ZX0itUI9HnVbvNh1cryRdUe8ifVavEN1bDw99Tz7%nUNu:h1Hzu4NTI7eTUG%3v1HPsAtXR6yHVNetM1aPqhdUg6svVseke1lvpf9Yd6evW%Ohj1%jo59ft6HjYBekW2S7pwdlp6Xbasek02wXq:Nth6s3cvuqq3Rjrj95v633fwut24BDse%FX7JDikOy347fs8%TK7Ebmzuyy58XsOOm07Nfqm%yP7HfsXO5L7EHwFuw98t:rT:Sp63n2deu5%EHrDvsI63P9yOrm:4XqYgJF6uIEEepkB%:p5Ane6V8M3unUDuzpQBEK6qQTOOr:FXTqTBi76ogaCeuvHF3rvx6367YgGuyQIoXsSiT47OIlcO1XJ%rtqShk7tcp2u7fKkvvvyu473YsIvAILYfwdy3l8MEtOfHoLYHx6i288cwt6:GQLQ3yOy0e8s4sGvJMLAHytivU8RIrmPFiKlXxqykR8e4o0PAtKJfwaCdn8J0mQPDMJSfw9iQe8CIkLPBUI0:wjyKG8NQh0PAdIS3xayCf8cAfJvIfH7:yjR5m8wgeGPSSHdb0Jx2h9cgcefZwHFj3Hxw3%NIbDfmGG9b5ORuO%uYaMvuJGr37Hxot:KkZe:wnGaX8nBip:AgYiPxoF0P8uRbe%:kVW:smFbr6PxT8%UMTHvkyEiL4DBEK99EP1vWCDo70HQ0186AL0fEPCmbwbgj47sIGie0OBR7sVAPB6pABeOnD:0bo7f0p5w78G%Yr%hrlRfgo5F:2SON89H7ioPLK4c3wKuEJ75:gXe0w4M3r4t9d6r3fC%nB39bn7N%95jvgwuWv4OnkSeE15AriqOPw4kHj%eP%4iHl3OJm5tniyOf04knpLOPp6oXjpOz843HukORL8D7lK:IF5hH05eb%9d7n7:fu6OL5DurP%zzrtP1y7JH:sO1lAfTuMgM98PQEhfGnBsrySAgJ9NUJQvVMC3X2rAye9:YNuvgrD8f5TRDF%l0RuPtbEqD8QxN8:RIUS:7HFA7:YRXH:98VdgBBFhoBihayAbwWPALgFrcC:BYfAxMXcQMnF6oDNxfKA0AX1ANEF8sDRBe0A0IXkANCF2EDRBcoA0oX5gJRF5oCWRdEAmUX5AF4F3wBlBcRAbcXpgDbFzwA%hfW:xEYc:8eGBX:Ixi8:h8YZv4SGBX%%xfH:dsXfP2uFzX9dBfu:CkXpfzNFlv8YxYP:OsVwvtmFXP70hQi%zIUz:qKE3364xIq%kIS2vmpEY35GRFH%ZIQC:kXENv4rw%4%F8Pn:gwD474Jw%E%EkPhviWD5X4CxCy%KUQ3:hiERz5QRJs%T8T0PlbFEf6kxXS%uQWcPtMGCH8wxnj:EIbs:2%HIz%MR5t:5kfVwDzIE0BOyJPAmsjWgN:JGoEeiV9BV4mkgYtJ6gH5CfACH4o1wn2KO4KTSkDDIopFA21KRsO0ikXD%UpBxDoKewQ1CnFEacpkRJkKU0TFSn4E8UokxR5KCEVLyijFeAnGhaHJ4UWJSfoFr4mQBdVJooX7SXBF4Yl4BcgJecXuSTVF1AkrxfjI3QXciMlFwAjvhaQIj8WISKkFbIh7hRCIRwU0CAwE2AgLRLxHxcRgh:uDw0ftw6QHncNBx4yDHId7ArSHKUJJhxeCHAbFwezGtQF6xmWBBYZXQMuGCgCNxf6ADYW1f82FcD%PRS8:U4TzPxmEvD7gxEt%6EQg:q7D:X50Q6A%eYNJvn%DO34IQzb%FIL8fiOCi751QmN%SkJDvqKCLP6%wd8%3gHYvz%Bl:9iwZs:iAGh:%%BbAAZQXnARIFKQPEBHYEeATLBS4EJAfmA30IngPNCVkDDwscA0YM7AJzDcYCmQ6kArkPgALQEFoC4hE2AvISHAIEFA8CFxUUAikWJwI3F0cCQBhuAkIZmgI7Gs0CKRsNAwscXgPhHMADqh0qBGMekQQJH%4EnR9BBR8gjwWRINcF8CAXBj0hTQZ8IXcGsiGaBuQhtwYSItMGOiLvBlkiEAdwIjgHgyJlB5IilgecIswHoCINCKIiZAimItgIsSJpCcYiFArlIs8KEiOVC1MjYwymIzkNCyQYDn4kAg:8JPUPiCXtECMm4hHKJs0SeSeqEzAoexTvKEAVuCnxFYoqiBZdK:wWKSxNF%gsfReXLY4XMi58F7EuRhcSL%sWUS9vFm4v0xVnLxQVOy8vFOouIhN2Lu4R4C2WECstHw9VLIkNXSvYC0cqDwoZKTMI3CdGBpEmTwQ5JVACzyNNAFQiSf7IIEP8Lh9A%oUdRfjQG1z2FxqN9FwY2vKiFkDx6hTA7zQTYe6FESnt4A8e7EYOPeu2DIPqMwvv6b8Jg%lbCEDpCAck6cMFLemLBFXpZAOc6VICAOpZAX3qeAAQ667:suv4:lvsVv4J7cj9t%1J:WTu1:wM72z8ru8I:Erwrvvd8F77YPEV%9Xx0:pE8p36sPJ3%hbzYPps81L6rvNL%uPzUfoX9Gn6SvSW%nj0z:qc9BL7uvRg%9n0uvsB9SD8NPWP:G71A:2s9X796:UB:iP2hv5R9gL:fPZz:6n21::Y9ioABPdsACn3ogBC98gATvfbAFH32gBJ98QAM:eTABL3TgDr9vb:uvaF:4L2:P5N9mj%FfbL:c:1Hv1:9Wb8MfWt%%f07:qi9Cv6ZPRh%Sv0kPj387f3x:Pc9prz::Vp8xr1OfMx9BDzS:Pl8l7ysfJi8XfyXPA68lHv9vFF7qXxM%1H8Rbs4vDn6ofwrOlA8GjoCPAS59fvpuWy7yvknu%r4pjvI%GZ74:fnO:s3bDvQ9zn76PaPvAO2ajwedcs8e3V1:F81KbyKtOC8%7RXvTJ0Dj1xs8Z9urOA:c2zvb3o83z%C3N%vndzAP7tcz6%6nM1vyyzJ:928xe:ijNDf%Ozar:Bc46AInOvwAazz0Bt8%wAWDQEgII0WACrdGiAljS1QIG0:ECstPtAlfUyALy1IUCgtU1AhPW2QGk1mABJNfHAI:XIQD213b:X9i4:rXY4f322AT9L9kp:F:ZRvt72VD6ftlC%WfZKvhD2SD3J9kf9g3ZGfXf2Bz0pNhF83vYivJi2MrxQdgG8RnYYvD:1%nv8deQ7%TXR%:U1w:vx9f27sbXB%:b1zrvA9h47zDYtu9l2ALwtNhf8B7ZwfCT2SDxC9qE8Y:a7fEm207yzduh8oHc6:JH3THzJN5w8xjfpvMh4NPzP%H883TiKfTD4170M%WS9L7muvRW6OH0Auoa9dbrXvXL7Zj10O:N9evxEPYn9GX2evbN9tv4TfdJ%933wP1v%DUAAfmvApf5LgUt%qQHx:oVCmv7kgwK:AsPk:xrERj9uBOw:fkVU:4bGPP%FBqR:%sbJwChHbEALx84AaAgwwH%IUgCPiO%AmEkKwNvJYkDYybSAzMnBATnJyYEiCg2BBgpMQSYKRQEBCrgA1kqmAOYKj0DxSrMAtsqRgLYKrQBvSoYAYsqdgBBKtH:4ykl:3QpZP7qKJL9RCjB:Iwn%:vFJkL77SWX%ggl%PkVJF75EyPU%A0iY:gOIQL4DCCx9wIffvf4HW339xxw9:obe:cAG4X3ChqN9xYZmfcnGLf3RBfk92kWDviOFS34shQ%%NsTQPgGEy:4MxIK%F0Rzvd9EHX3kA:%9p8OZvamDaj1oAzF9IwLxPNwCq3yTQl:8SUINfDwBtLusQVl7W4E7%slA23qzQHj6GsAWecG:8nllv005Bj8peKS%hzhAvmQ32L3CN669YrcFfQP223yldm%8CnYEO:W1mftntW%64LUGeqD03romtLf5sDRTOX20MXjQ9BO4rHP7OBFz5:f:85o3uLOTd3vzlfcIs9:23zPvNoJ0BPaz9CL2czRK9kA0:nYXdTy2NXVB9lu1zPZNtl82STb3Nkr3U7aS9:f2nzhkdut41fc3%Uq3RXoBt5I6tzeeOyv36vui%DQ8Gfh0:I54rj0CeOI9tvjPfim5OD5a%V6%zfmAf0E52j%zOe5:5no:ABv6TYCTOpyAzzrqwRE7MAFTe2hBknuXQdG7w8ITfDKCF7xkQlz8kgKePPWClr0Ogsk9YML6fXKC7z2Mgyr97cMpvgeDW:5Nw3S%Q8N4fnJDM:5jgzJ%YgM7vmqDC:6xAxc%twMgfo4De766w3E%7IOvfw4D3j9SA%w:dYOXv0iDsn8iA1f:CcNUfzdDIL8gAy6:O0Lv:wYC3v8SAox:OkJV:wVChr9Zwoh:lkK3P6rCf7%hwip:lEHPP5bBgb%pAUL:ukEB:7hA6f9eQLO:OgAr:t9:5r6bv7J%cD9TPlX:Qf5E:3K%PH8gPgM:T34eP0S%Cb%:PcE:wT49:8g%NcAJPiUAfb3TQKs9yoDbfc1BFf3bQV%97cGz:cCCDf4owkG%R0Mu:pXD0H9ghLW:%AUywE%FvIC0hZ4AxsXxwOlF1kEqBhdBfkZugZXG0gIeRzPCS0dHAu6HWUMyB40Do0grBCQIkwTPCSRFVwlWxcAJsgYaSYZGvEmlxu8J00dkyj1HiQpPCA4KfYgzCglIR4oAyGMJ%ogTCcDIUQnKSE2JyQhDCfrIOkmqSD%JoggVSeJILknbyDbJ%MfkCfBHusmMx0xJpIbpyUrGm4lEhlnJRYYUiXqFjMllRV7JZcUjyZdFC4oqhSgKcoUVSoxFCMqtxIzKYUQ%ScPDgMn4AuwJlMKCSd1Cb4nAQlAKG8ILShvB7knRwZsJ38FfSc7BaUnKAV%J%IE0SYzBKwlKgNPJBICByNCARIi%QCSIVEBZCEfAish:gKiIJ4Dvx:qA5ke9QNiHe0DSRwIBEMbRQQhGnYE%hilBA4YBAVtF5sF7xZIBnMW8gbVFXcH8RSzB9ATtwewEsMHwREECA0RhAiIEDsJKRAeCiYQTwvBEAYNzxEUD6wS4hDaEgUSRRJ7EhURbBKdDx8SXg4EErANaxKNDUwTvw1vFAkOmBUvDpUWOw5zF4EOhRggD%wZuQ9SG84PQRw4D4gcIg4:HOYMshvmC0UbZgtJG2ALwBuWC3QczAspHekLvx3mCyYexAtVHpgLYh59C2cebAtZHk0LIB4qC8MdIwthHUkLFh2pCwEdSgwvHQENZx2LDV0d3w0MHTEOsxynDn0cRA94HAsQrxwSETsdixJAHngUvR9mFj0hsBcjIiAYOiLrF7YhQhfFIFkWlx%EFYge9xTZHacUgB1%FF4dYxRQHSsULR3nEwUd3BMoHfsTjh3AE7wd0xJWHUURYBxLD:oaIQ1aGRML1BdRCZsW1AefFX0GwhQaBdsTcwO3EoIBVxF2:%4Pav2PDlb7IA04%Y4LF:fSCfr08gcA8xgGQPFvBKbv7AIl7nkB0OwgAJ:r1P5s6mr9OOnf%ynoVPpM59b4q%Z8933mjPb15j72B%iJ9nLpLPfI6rf3lOuk96:ru:ZV6zX12ups833qr:Fy6kXw1upY75Pr3e577LLua%287mbu9e6E72vvxfAW8Nzxq:Bq8tDwUvJ08LrxyO:S8Arv2e987hLvVe6b7p3ubu4973zuHvCh7hjxou7w8W3ulPIg7ivz0e3K833tafQn7QP11uyX9ZDsJ:Zc7LL2Oewv9xbshffx67L30uvM963r0Pdl66j37%pP91Tq1Pa%6WD2gOk49trpkvbE6lz3%OtR%BbtHPm57WP5rO30%BDt%:c67NL2dOvG9fjqDvXf6sD0EevC9GDr6PS46x71H%xk9aLsw:VD7T:20e2u9u3ttPZi7Rj2SOzu9NrqZ:NX6bXxCOgT8BPnoO5z5lbtG%Yz7OflJeuU5fHp:%R56E3k4%ao40:lFuOv45zi:eFD4kbgBeKH3uvh1NwO4kzbZuLu2eLirdiT46HXfOTT1mrlCtYk5g:VpObe0w7nl9Kr54DR0Ojy0IvqAtGa7HzRtO4n0pbwxdLv8QPTpvK90vjyLNI285fRkPMs0SX0DdH39E7R8PXi0Qv3zNJb%B:U3PnM1XD7rNfr:IzZAv4b22:%DNw1:l:cmP1a3N38P9w6:Efc2fuf3Lz7UN3F%0Hez:tQ36L7ROAK%%PgC:oo4dX4OeGF9ynhIvb64LX0vOBK84Pg8PFh4MfwbODV76PgCO:o4F7uMeHd7Ybha%3L4dHs0eH764zhCOsi4Trq0eDT6djg6OlS4VnqH%Lz6g:jjOv34:HrneT469XkrOul5DbrOOS:6rfjYOpI4yvqDuMt6iPjfeqk4y:rp%Q47CLmde3s56:u0%mb74zr8e:S7KDvmO3Q7gvuvu1o7q3s7e7T69LvTesz8SHrE:NE62H1iuvt97vrd:rD6%f8s%tI:5frmwFl688DF%viBbfq3Qdj6tkJRur3C3DqOw7T6pAQcuvzElLsahVJ7c8XEu7iGYvuixvN7uYcC%8mHnnvgB8x8BYhI:HgIjjyxiRZ87ImY:R9KC31%imw9R4rBvb%K0r2tiyM9lot1PYBLjP3wy7G98AvqvgXMeH5xzJO%7I0w:ylNgD%XTi3:oo5uf7:ORL%yTn2:Bs5qvs0OHD6VDd6%ak26PhNNsX4Pzb0%Fo2PPlqNnn5UTan%RM2w:mzNb:5JDWL%Vg0J:lSM7f4KjJq%AkxVfj:L334FC:1%F8ux:n0Lcn6ri2z%0gtW:yZLMn8oiso:YMqn:1jKTr%VCjp:lMnmv9YJjcAViWVAC4klgDHIkMALSHI:4QfVv:xHQj:ihzb:k0byf4xGuj%TxlP:8EY5v95GIoAXBglAVgYkQFBGJAB0hf9AN8W4v9tFWL%mROy:JURCfuhD4j55A0:%HAMQPdOC3:2agrQ9ZEJFvWnCFX0rgeJ858GpvJmBaDx%QNx8FACIe9vANXtdv607JD8z%vU%kLrX:kx61X4keur9y7sJfff7Jf2nO309W3uQPVh74n0fvDi87nxSPP:8qvySfQE8or1RfGu9lvwvfdO79r4Q%4l%lbto:uU7Ev9AOwc:53rJQF8628DqevmBRfsZwip7N0KSu0nDdrtEg8g7nMQ9u1OEWTtyhGW7A8SvutBEg:rgRK06u0SyOqfE1PrkRQ87KcVWO3DFoTu1xez79YY1vCpGdrxORqs8nkaPvN2GpbzVBrQ8zUaBfQtGkb0Whqr9NIaS:WRGyD2cBwO90cd9:f%Hcn4lx6I%RgfP:p8H%b6sR9q%7ofwvujH:D7bR:u%xYfvvunHnD7LR4a%7gd0:pVHbH6BB28%skc8vrAHGH7:hwX:HId:fz9HfX9iR7w:vQeyv8FH0kAlx5HAK4dxv9lHNf%5Bqc:VIZRPzMF:D6bxa8%V4Vx:ijFBT4HxSB97cT%:ZoE4f2KhMe9ugSqvWMEhf1BRJS9FcRWvOiEE7yBhBL8Y4PYPBTD6bvdw897:8PLe:REF:v1hG:7:8SQfBLFN:wtRWV8SwXVfKSGALz1hmM8:0a9:MDHED03xxh9JkdaPRHHmv0:x6B9NcfxfTbIEv1DCIY9nQjN:clJbn4CyeT%v8oovznKtL%pywGARguEAMYL8YEny8WBrQv:wZyL5oHAC8WCHEukgjSLR0JRC3SCd0sugqJLLYLMSyoDNQrjg10K2cOASsfD2EqoQ93KdMPMiilD6AmIw:cJGIO9yJpDRMhTQxnHzoLDB5HCvoccAklHLYIhhsZCBAbkwfCGh4HkBqzBmAaMgYaGn8FuhmTBDAZYQNlGNYBXhf::zMW%P35FNv7xhPG%bcS3vfcETX2RBHY9AIR3PMOET:zQhHi8n4RsfKqEZ:ynxGI8ioRO:I7EKPx2w7D8CINs%86C6DuQwm17U8HB%19BbHs8QPR7KYCWu18ASbubgAn74f:YPC::rrx:P0T8yf9TfQu:FL1CfsZ9sX5rPZy%BX3JPdd9:71ovce9QP4hfSK%CX0NPn78wb6CfQF%1H0MfzG9IL9UfXf:tT1LgA89l4Bd:ZnAnP2OgMs9tIDvPVEBEb1sATk9CsFqPTIBav0nAYC9bwHvvU4Cdn2EQs6%DUNwvmLD1b7%xHM:FwU9f13FrP%HhgI:0cZD:8EGuT%cRqe:qoaU:7NGiT%%hov:lMbev7fG:X%kBya:18dcQBSHngBYh%WAnQgqQNnIZkELCJbBcMi8gU1I2cGjSPMBtQjNwcXJLkHZSRdCMskHglJJfkJ2yXwCoMmDQxJJ0YNIih8Du4okw%OKXcQ9CkZERMqZRHYKVoRQCkMEV0omxBPJx8QMiaiDxclMQ8NJOAOKyPCDoUi3A4kIiIP:yGIDw0i:g9BImYQgSKUEKEiYxB3IsUP8SHCDhMhaw3xH9ILmh4HChodIgiDGzsG6hlcBF0YgwLdFrIAcxXy:iwURP0ME5n7:xHc%egQ::e3DwD2ZQ7l8:cMvvFyC6Pv4wmr7VcI5%vdBl:qgwUR6UwE%%czAyDnOAKL5l8BNuacABLm3f8P5g::IOYq:jHmJf0p5u77%%V:%qzl3fhP5Rz3%eRT9b3kk:Ov5Orx5ORq8GrlJ%9C5ijuYOdv7bPo9%wq6rzsquut7Artqewn7ors7%487Gjvy%uo70:rvO:c6rHvfuqV70Dqd%8v6lnvTeo075PqB%8A6%Puouvb7oPs9O6a7SXv0O5m7w:wre9J8fDvcfIk8HjzT:BZ9H7wG:W:8Mv1FvFx9oLxEfcG8q33qPJN%Gnz9Pg:9Jv5G:U3%vL1wPq89jb7aveS%%z3y:s3%Nn7TfjB%0D4kvsj%F77DPgy%w34G:s3%B37kvhB%x:5jfvY%f77q:qI:If7Hv1f:LD9F:0h:o:9R:6z:QX%hP1h:RD9bfxo:D77mfvh%bb6ZfjS%dX29vg69R:4jfNI98zxgPYI8N71Wu5o9cfsE:VA69P0u%mg9DTobPSn5iv0DuXg82rjlfPD4VjzJeAz85zeJPMn3SrzwttL83XaifNH2djzMtgm9CzXbPQx1qf0O9XQ9ELU4:Q909v0JtLA9P3Qn:TQz4X0sM589KbNj:S7zMf0:csv9XzLy:VDy5j2WsuL97rLl:hYzLH5Kc3H%hbOtPv0zln8pc%t:CbQtfyD0Hf8y9D%%wjRWvtB0Zn6e9HJ%bfR7fj00f:3KtIG92HSEvas0iv1EdNI9IDTX:Ps02ryUNRl8azUTPD:1CXvT9X67aPV2OwE1svretbU6v7W7%mB1ybpAtiG6IrYCegV2Z:nltlA5wja5eZn2oXmrdoY5tPalOXP2vvkoNpd5FTazeP52VbjldkD4zHZ5eLd2AXjqthg46LY8OPN2KrkLtmE5cLZd%aH2nnnc9tw6GjcROlP3fHpKt566gXf4Orn3yTr2eBO6%ThY%sM42zrVuRu68blZ%tX51nrCula6:DqfesR7cPrXu8i7MLxkuwu9AvtmvaH7f74A%5X%4Hup:0L7:P:r%9HAnDwowRK8fgGPPI%CVDzewt%9KkNs:W4D%H2oBEH%GgTIPkVFSP6phYB%xcYtftlGUr8nhrU:NIbXv0HHfL9QB6b:okfZ::uIFUAcyJgARckfQLVJaMDpSfMBIAp7wVbK:sGHS3WB6kucwjxL9QI9TD7CLkx7ghCMrUImjJZCMky4wfVMl0HxTLIBpoyJgZSMocF%zECBakxnwRfMVUEFjEbBMow6AN6MLEDHzBwA7IvIwMwL88Cmy58AvgtMQJOLekBmiygAdUrWAEDKxABIiq9ACUpVwAAKOH:tCZc:0MlxP6pIxP%5SFI:fofa:zxHYr72xu3%skZ9:nFF1H52hXO%BwUcPiREjL4NhEL%AYQ8:f9DuX3GQ7a91UNw:elDIr39Qsb9zELcfZVCpj1aAmX9GwIcfNkByvyVwbK8EgFU%85BMjtKQMt7BgCjOoIAfvoBQCK5xX:N%Y1:vTkW:2544T8g%Kv%1Lh2:ou4An6JN9E%T3ekPh93e:35txh93rc5fY43Hf2ItwT9jfcr:Vs3D71tty19BHdFPR23Vnz2t1%8jref:Gf3mHwF98t76:f6O1v4J7sWeFX62niHuqh4:7oAeX954HmGOce6E:m2emn5arrHuWD7avkT%9B5P3w2OOD8m:j6fMO4zj1xuJ09p7imfeZ4qf4veKf%Qnjffp440L7BeT3%7bkrPyR5Wr9meYv:svn6:4X6ZH:b%oiAM:rqQAy7S8BlO7BAfbvaQJe8SUDzPLvAz70vwSz9ZAFJfddBo34Iwfm%dwHI:t7CDz8%ggx:VcJCP6ICcL%hwlc:10J3:8cCVcA1AjOAIsITAFECNUB%wdsArgHFQN:B9ADUQeRBCwHTgUTBwEGBQelBvcGLwfaBpAHnwbABzwGtge5BXoHJAUZB4YEmwbeAwIGLwNRBXwCjQTGAbQDDwHIAl4A0gG::%AAPf:9:9v%NP%O:oL%Tf7i:RX%Vf3u:dj82v1p:N:9B:wD:rv7Sf6L%6v%ePsm:4T7tf%p%1UA3:sHAR:8ywFk:JcCo:xnA9j8OwQK:RIFOP3pBVv9ywZ3:csHmP33CMn9VgoS:usLgP6wDRz:ow:r:74R7QD5ExoCSRZmA6sYzQQaG04GiR3eB%YfbwkgIvYKLiRvDAwm2Q28JzUPPymFEJEqxhGwK:kSniwfFFktMxXgLS8WOC4TF2su5BeHLqsYkS5oGYcuGRplLrwaLi5SG%Qt2RuLLU4cKy2zHMgsDB1pLFodESydHcAr0R12K%8dNSvzHfsq3B3CKqYdhipOHUIq1hz0KT4cmymAGzYplRrLKHYZZCgmGAoorhbGJx8VmieFE4Qn6xGHJ18QoifmDtAnfA0RKCEMZijaCskoqgkvKY4IiimEB84piwbzKaIF9SnPBNkpGAShKYADTykJA%gouAJrKI0C0Sd:AhwnjwJUJr8ChCUWA7MklQPjIzUEDiPnBC8ingVIIVYGXCAJB20fsgeDHlMIqB30COMcmAk1HD4KnxvfCh8bdwuxGgEMUhp:DPsZ8QyiGVgNQhm3DdoYEQ5mGGoO5Re8DlcXCA:CFlIPLRajD6AVBxAfFYYQrRQlEU8U5REKFMgS4hPME9sT7xT3Ey0WMhSCF4YU5hjlFEoaQhWeG5EV1xzOFfId%xX0HiEW5B9HFsYgbhabIZIWYCKzFhQj1ha6IwIXVyRAF:cklRekJQEYXSZ%GBwnBBnYJ4sZjCgPGjMpjRrLKQYbWCp8G9wq7xtcK1oc1iu7HEIsEB2ZLFcd2yyOHQUtsB0TLbUdAC2eHcksaB1tLBMd5yugHDYrFRxfKnYbZynLGlgoHxpEJ34ZMybrGCslbRgsJAsYOSPEF1Mimhd6IYkXsSCHF:QfiRdBH4IXjx5lF9QdIRcBHa8WFRwSFhUbThUIGmkU8xhhE9kXNBK4FuEQkBVuD2QU4g03E0MMDRKaCu8Q8AjjD0cH5w6dBfMN7QMDDTgCFgx:AC4Lxf5OChD9fQlh%7wIuvkKCB:4ZQeW9soGIvU0BsXzoQV78g0FQ:FuBBvwvgMF7:YCAO4QAg7tCAE07N3:dOuR:tLqLP1T6rj7:Ok7%s7pufjI6TP36%mv9TbqMfSk6rzyLutU8czr%%907LPuHu177cTtT%xZ7izr1%4Q6jvvBOmJ7xTow%9J5%jvqeb17zPm6O:n5cjvxuWa78:lZu8C5jLvYeYF7%3m3e6g57Xub%iK7lDpWO476iHuLOvp7R:ste0U7YntCO5n7ffuU%3e703tuPBW7X:xau018oft2fKm7Wrzwe3k89btRvTi7ZH05O3F9N:t5PTV7fT0y%379MPtAfXC7Q71x%0j9dHtQfXg7Wn19u2c9RHu2PUw7hr2Ue5f9nPunvaQ7s:2pe7o9qfu3faQ7qf2X%5I9hvux:XK7Sv1bO129APtp:ON7L7yD%y98Y3rp:AP64PvmupZ7jDqLu3V6Qjsg%nl6jbpvenp6I3onuhX51boHOYW6N7k3Oei46fnaeJy5zLhOef53:vmvN625njdauYs3Bjm1tq:5XXZYuUG2ATlkNan5BbVTuSb0:7jJtLB48HQn%Nyz53jQM7C4zHND%RGzIXkgMsj5eHK6%VsytvmH8rw5:jJI%nzyWfqB8qt6yjK5OxOyv:tb8r27onKye%eynzwtcoR8c7KhfHoytXxBcv:8STLBvJKy%:xecvA8bnLgPEOzDLxesza8PvMdfCOzQTwLc6I79rOBe%Uz37uXdDz7TPRYu0W0sjsA9Mh7PXTbevo1Kvq2tXd6cXWBOml1yLodNg75y7ZUubP2WvlVtqK5MPatuMX2:XiV9tP4ojbx%Gv21:hz9sZ4e3b9uAJ3PPgJtwP4UbcSeFt3J7hmtwI4s3cgOIF3fviP91z43vd4uO63UTk:N2c5Eve7uSt3jvlKt%A5cLfueV34OXlSeEF5jriIOZK4zvme%Rc5s7lguY%567myOjc5mTqCucL7Dbnue1k52vvlOcd8cbnzvL753v0MOgi9mXowfea6Fb50ujf%g:pXPxQ6cz9lOku:9npgwAd6s0BYOoRA6XqVQTu6p4FQ%vzBqjrWAgg7NIJruxkC1HtEQ0I7tkO0O67EKbvtxKJ8MoUdfHtFmbyGRlW80QbP:RjHRv1ax:m9VUhoPYbI0z3viTx90EmkfinJy358yjD%SYqUPpEK9f6UCxZ%00t3Ps:LmH8Jy:s:AYwef3bMAX%pTGM:l8yCv8GM3::nDPp:yA0RQCPNJEA5zTJACU17gBHNf0ASTX3ACk13ADjNKoAdzRfAOEz%f8fM3j:MTLf:hkxNP7dL3:9hC7L:BUtIfyaK4r7GioN%5wor:omJ3H6vCVW%mIkXfobI4X66yHL%tEgLPvKH5770R4X:OAdi:zyHO78ARw5:QwbaP0QGnz9Ehl1:RUYV:0aFyH9JBbW:DUVd:xQFAr8ehOU%7gSGPsKEpj6dRES%vYQhfmKEO:4LhBR%N0Pr:eVDwv3VA9p9hYPyfXYDiz1lA6Q9EoO%PPzDWHzjw3N8hcNPfKLDK:x5Asj8R0LmfAwChPwGwmW790HKO94BtDu8QSV7k0Dfe6RAY3uw::H7uj9K%8C:LjvFfpt8Cb4R:E59kXyUPRf827yjvSR8Mf1u%7%9ursKvgf60b5XelT%qrnU:sM5kz8juQ::TTjLv4F4hj:BeH8:zfg3gCe38ABPd%nAhPfkwMe34MEXN90BcbfYwZV4E0HA%EzCMnhFgmi4vUJiOPPCnXkogth5WsMSuYnDSzn1g0E6HgO0%gMD5rplA9Y6g4QDOt1ELXryBBU7AQR6uwrEXztPxEP7kURqe5CEU3vOxH%7zIRvvAnEYzxGRFl8gYRSfPuEDT0zhAi9aYQDfZyEO72LRC699QPbPhkD:v43g5j%UYOovmkDbr5AA2u%WEMgfnLCzj5PgvV%LwKX:hHCtz34glR944JxfZMCT32Gwm89fcIQvXcCM70yQhg9LsI%vO0CJ7ztAhL87sIBPPFCMfy0wiT8uIIZvL0CD7yCAkb8iAJ:vE8CeXxWgnQ8XoJvvGeCa3xyAmh8f4JnPFICqXxrwrC8ToL%fHxC1Dy2AzK8vANZvM5DyX0sxAE9VoSAfYrFBj3HxZE%C8YfPlRGrr6eRz0%5weIv2yID7%tCJC:5wkLwBmJgQBDijEAZApcALqKgwDGiycAyItIgQFLqUExy4pBWkvsAXrLz4GSjDRBoEwageQMAYIdTCkCDEwRQnHL%YJOi%HCoouJQu4LbsLxyxGDLorwgyUKi4NWCmHDQkoyg2pJvMNOSX%Dbsj5g0zIqoNpCBJDRYfxQySHSEMIBxgC8YahwqLGZgJchiXCHsXhweoFmwG9hVKBWMVIgTrFPgChxTNATEUowDhE3v:jBNY:i4TPf3BEjD8RBI3%7gRV:ogEZj5fhD9%NUPjfgnD0r4dw43%MoNV:giDav4ggwz%ekL6PlXC8T6xwq:%zcK0PyjCe:9CwkW:2sIPQDFB2ABFwd5AmAGhAOgBXsE2QRfBQwELwY:A%0GcwKbB6wBPAjtANMINgBjCYj:8Anj:oEKSP4cC7f9yAsx:YsMufxrDVH8aQ78%4kPu:vLEJL7LxKA%7MThftUFZ77CxfH%9MY:fulGjv8eBx%:EUexPwIIA79vyFd:Wkjtf0FJRj%lCaK:hgoEP%TKa3:BStjAHMsNgHeLSYCTC8xA70wUgQyMoIFpzO5Bhc17Qd%NhkJ1jc5Cho5SQtIOkcMXTswDVU8Ag4tPbwO4j1bD3E%4A:ZPk4QGj%kEDc:4xAuPwkRAz8XEbY%ChFLPuYQxD2sECU9YhBxPA4QsDu0D%Y6Wg8ZOgEPTDmvDoM4Zg7BNycOBjfzDVE2yQ2fNaUN7TSDDTk0Xw17MzMNrzL8DNIxuQzhMGgM2i8HDL8ulguQLRILTSx7Cvwq0QmdKRYJNShMCMkmdAdfJZEG:COiBaUiogRYIY8DGCBkAuIeIgG2Hcf:lhxX:oAb1fx3GkT7fBmn%Y4YAPipF1L2zBaf9PMV6:IbFTnxQxSM72YT4%2AEkHsjxGn6o8QGOl%D5rnWA4x5h4N5uTRC77jcQq%4gAJ6uGAB0fh8QXV4FUEleCuAoTg:gCd4Ef:2%CL:TbhzPun4Qz6J%JM%LHijfZA49X00uMq82Xkk:H35BjwiOXC7hzml%2z5p3sUOfZ6:bnTeuo6P:qZunv6jHqHusG64br4usf7MLs4%yl7cjtiu7H7m:v2O9U8PfwOPEf8hryTPP58nr00vOk9aL0x:Zq9eH3KPbx%Nv29fmE9%z6I:jV%7v4sPxM%X792vk%:mb68v7x%p3:e:tAAAX83gCO:HcBFf0LAp79mgIo:iEDtP6fAz3:EATC:3AEPgC8BK0A7wQPAQQFYQH5BKYBzQTeAYMEDgIeBDYCoQNaAhADfAJvAp8CwQHDAgwB7AJRABsDlf9QA9z%jQMm:s0DdP0NBML8SAQN:HoEVfueBJf6tATS%bgEAfmqBCT4igQ291YENPYOBBz1sQPt80QDp:LIAk3xQQLd77MBWe4fAcHsiQAY6:L:Yulb:6Xnxv7n5Tf%L%S0:YTiQf3r4OP8aN%c:P:db:yx3F78gttn:HLaiPyB2cH8q9gP:e7Xb:1F19:9qNZb:hPW4f6C1W7:9NT::2nUkADf0x4BV9OmAdDSJgJM0pkCzdH9AlPRTgPi0IsDfNC0AyPQyQPYz8gDmc%xA2jPgQNFzzYDNc:OAjfPSgJNz6oBd8:yALTPJAAE0EX:ZdBW:tfQWv1Z0VX869FJ%4nSOPou0yT51NMO%HfU%fYU1ef1p9Xa9DHW1vOw1uDyJtf98ZPXMPH2137wTdjq75rYd%:c2CbvFtn07kjZ3u502eDum9nz7r7ZE%:e2Tnv%9lh7xfah%832qzvXtrN75Da6%:R2grwI9sq8InbTvAG3Hfwmtyn8Ejd4PAQ3iPx9N5w8fHfxPEE4R7yKuJ98l7j3:Kf5ETz6OWs8zbnGfSF6Iv01ukE9Sbrg:V07AT2wO2F9gvvBPdV8Hz3oPHq9%vyTPg49KH4ifXs%OH2LvlD%Gz5sfmr%TD77:nC:Dz6av6W%ikA:Pr%AXH75wP0%%IFhvzrByf9:wnV:RkMjf4zDk7:SRATAFUS2QBRFJwBORZbAgoYFQPDGcgDZBt3BO8cIwVkHs8Fxh99BhghMAdcIugHlCOlCMAkZQnjJSQK%ibdCgQoigv:KCcM6imuDMMqHA2IK2sNNiybDcssqg1ELZYNni1hDdYtCg3oLZEM0y32C5QtOwsrLV8KlyxhCdcrQwjtKgcH2SmvBaAoQQREJ8MCyiU8AToktP%bIjH%9CC6:EsfU:ulHQH6BBzG%Gsao:fbGJf2VReh9dsVwPRsFPPzCRM5868RkfJdEPjxEw9u8c8N8fCUDIPwYgsj8DwK0u8jCY7vGAhU7x4HHu80BujuWwWv7pMEb%7eAybuOwPT7akCdu0nAg3tswGZ7E8BFez3AIDrrQDa6m4AIuo5AFzpCwCK6N7:r%et:87mdP:p5Sz:AuXS:hzkYP4349P9V%In:X:hWfyw4GX7799M%kHfD:mp3rP3LN479szdrfSK3Qrzad1W8Wndku%K3cHtzd3l6zDeAeqt3hjoQd8w5uXfTeSS4HLiReGm4Pvh796y4lTdbOPb2yvkidrw5GXZvuVx2JTmr9d05yHXXejG1lDpntZP6qXWWOvX1m3sL9eM7afXte472Obv5tge8aXZXPJ22p7zVtvh9ELcIvY33V73M96R%DLfuPkz4NH6NOHZ%zfi0Pw547T9POSF:j7lQf9A5uj:Q%d8AEro:wBX6XIBburaAZHrNwLD7IoCAe7RAkrvCwOb8DoD7:FdA0DzdwOK9IgDx:WQA:L2jQMI%HwDA:laA%P5JwOk%uICR:uPAsz7MgI0:NABgPxuAbP8EQHR:L0A3fx4ANz8QwDS:CMAwfwVAKz8GgCT:CwAePxJAFr8bAA8:JIAHvy1AAH81QDm%%4AzPv:ALL7CgGW%xABd:sTAVT7GAEt%yEBBfswAdz6RQG1%mABkfqCAXL6qwFb%t8BT:okAlP6fwJr%vQCmfqIA%L6PARF%xQFwfsOBlT8LAf6:GwIsP3QCXP%VAs%::YMDgCyDt8AghCtAWASdAJIFDIDNhbkAygYiAQeGh8FFhyqBQ0eKwYAIKMG7CEVB88jggemJe0HbSdWCCEpwAi6KisJNSyYCY4tCwrBLoMKyy8DC6gwjAtUMR4MzTG7DBEyXw0iMgoOAjK5Drcxag9HMRsQtzDHEA8wbBFTLwcShi6TEqotDBPCLG8T0Su6E9sq6xPmKQAU9ij4Ew8o0hMzJ40TZCYpE6UlphL3JAcSXCRLEdYjdxBkI44PBSOSDrQiiA1uInQMLSJaC%0hQAqpISsJXSEfCAshIQe0IDgGWSBoBf8ftQSnHyMEUx%0AwQfaQO5HkADch41AyweRQPmHWwDnh2kA1Md6AMFHTUEtByIBGAc2wQGHCwFpht3BT4buQXPGu8FVxoZBtcZOQZNGVAGuRhgBhwYbAZ2F3YGyRaBBhUWjwZdFaUGpRTIBvET:gZEE0wHoxK3Bw8SQwiKEfEIExHACaYQsQpDEMEL5w:tDJQPMg5LD4wPDQ:2ENwOaxK2DucTng5kFZEO4BaQDlkYnQ7OGbkOPxvlDqkcIg8MHnEPZh:SD7cgRRD9IcoQOiNeEW0k:xGTJaoSqSZeE6snFhSUKM0UXymAFQsqJhaWKrgWASsyF0orjhdyK8kXeSviF14r2xcjK7cXySp5F1MqJRfBKb0WFylEFlQouhV8JyEVkSZ8FJolzBOdJBUTnyNYEqcilBG3IcoQ0SD7D:cfJw8pH1AOZh53DbAdoQwFHc8LYxwCC8cbOgotG3gJkBq5CO8Z:wdIGUgHnBiXBusX7AU2F0cFfRaoBMAVDQQAFXcDPRTlAnoTVgK4EscB9hE1ATURmgByEPP:rQ86:%YOb:4cDpD9VQ2d:JEMl:vVC3z6HgtL%W8KBfjECar2Hwk:9YEIyfPoB07yVgfS8McGWe84BuXtpgV37A0FFetqBMLpvQOD6AcDW%dHAk3mfAFb5aQAh%S8:9Djwv4447T9vuKT:GDiXvsh4hb6:uG9%PrhVPcU4tz1S%Ja9Jvi0vID403xfePQ7wjkZO6g5A7tQOXV6%flv%qT5tLpROcR6fvngOi36B:oeent5z:q5ecI6wLo1etA6Kbsm%h87RDpVe6d6TLvQeoP8Pnq6:DC68TxluyX8nPtY:NU7ib0N%:d9BjwiPX38CX2z:Gz9qDyMPdo85n3JvTt99v0LPiJ9Vn4MfZ3%NT2iPhw94:4BviP%JX4ifgd%YL4nvl4%Br6bfiR%l34AftH%Gn7K:jH%wv4Gfzq9138y:eT:LL3uvyf99L8k:fZ:I33z:yM97T8kPeH:Jf3S:yh9wH8rves%773TvvR9%j65vd7%vr3B:oL%Iv5GfgF%SP4dvgr%Nz3Mfg29zT4g:Yy%MH1J:jv9A:4DfTp9xvzsvcc8mv3EPET9:rvrvba7jv2r%289XnsMvU365:06%kG9JboavM859Dy4uU98ozks:E:4zbxAOLG8NLgZPC73xDwvt7L79zdlO8W3WzvbNxS79zbRO9j20Lv:tpL76vaXu9m2nvvLdqh7:3Zz%:W2QfwtdlH8JrZjvCE2d:wc9k38WbZlvFe2fjxWNlZ8lPZs:JM2f:yQtk68zTZYPMh2W:zDNll8:XYQvPh2AXz0div8snYPvLM2LXx3tgS8QDZV:A12YbvfNmi7tXZru0%2q:stNqn6zfbnOrH25XpY9yW6AzdpefB3cXmg9755U7fQuUi4KLk%%AZ5Nbhp%Ov4krjgeMA40rkx%IF5Zzir%V94kXmbOLG5mbiMedq4ojnduLN54XiA%iU4i3ooOJR6Kjicuir4pLoq%K36Kvi4uit4hXpseJR6bnilunC4uXpz%I86t3imuru4v:qAeNo6xjj1usy40fsTuO77G3jM%2N46ztrOMp7svjq%7p4zPvCOTD7ynkXfBK5AXxauS78Ybkg:Kc5F:zreRS9LnkYPXE5Ir20uTU9%XkPvkD5cj6L%Vw:G3lNv7B5RcAKuYPAqnmHQQ85zoG4ediCJbokQpa6cEMLeruDg:rFRH:6zMT:%xGFQ:uSxcv70AZXPAlG5Xx%RzX8rweH:RvIG31FCK:9qgjEvgrJWX5nCa1%vgnAPw:KUT9cyqB:pYrs:%oLNcAqy3pAZwu5gJ6L8wDQTCXBO4wRgV:MdYF9TFFBk0ylwaIMs0GozLsBp4y9QZ4MukGLzLIBscxlgZBMVMGoDAFBuovrwUgL1IFRi7yBGEtkgRzLDYEgSvgA5AqkgOjKU8DvigVA%Mn5QIWJ70CVyafAqkliwIOJYAChSR%Ag4khwKpI54CVSPEAhAj:gLaIk4DsiK0A5giLwSJIr4EgiJaBX8i:QV7Ip4GdCI2B2YivQdOIjAILCKJCP0hyQi:Ie8IbyH7CAkh7QiLIMgI8x%MCEEfPAh0HtcHjh1hB5Ac2gZ6G0YGThqqBQ4ZCgW9F2wEXhbVA:IUSwN9E9ICABJtAnoQHgLuDuUBWg3CAb8LswEdCrYBcwjLAcMG8QELBSkCSwNyAoQBygK4:y8D6:2fAyD8GgRe%p0Ep:goBQH3uQVs9U0G6:PkBn7yfQcm8RsI5u:CCL:ucgm07SwKxuzuCvTrtgs764IMmepRDQnqIA6J6fAOF%nAD6:ojxBP6F0R9ecrEp3n9hJG574T7%aDFJnmRBVG5v8V:OWzFr7lXBeP5fQXc%V6GGrl6Rh25UUZmOWNGdLlxBkm5usZleYDGiDnDhrF5w0ahOgDGljp8hk:6twZMuvBGS7soBkt7XsZKe5OGR3vGhkE8N4Y2vCZGJ3xSxhK8vcX4PKcF1zzPBe989kWA:RzFiz0DBY69KUVL:RAFQ303BTY83gUkvMVFD:zshPi8lATf:LxEhnylRKz8TwSUfHkEfPwjxGc8DwRTPDtEAPwoxDE71wQkO8aEGjv3A9O76QPQu90D0HvTQ9M7zEPYu8iD4HvIw%q7zMP3e9VDxnwhw9a8MsPn:AgEObwiBAu8QMRdvGTEcDxNxIN8u0SX:KzE7byiBQR824VcPNjFtLzaBc29HsYnvSaGQn1xBp39fgb6PUzHVr2dx7M9sMfPPcVIaz3aiIa%L8jh:gPJfD4UiZV%YUntPmgKAv6oSla%oIqofo9K%D6zisZ%y8sS:tdLHX7WCyY%yEssvu5K8T7IyvQ%2Iq1:t3Kdr7ZijZ%zUn1fvpJc77iCTC%xkjsfugIZz7ICCF%50ebPsYHVL7lBs0%xAaEPuQGOP6FRer%qEVZvo2FBb61hK5%YIRUfk7EOH4:w5q%M0N8PemDHf3hwsD93EKlvZkCTb2YQjj9WYHofV1Bm:1iwVN9akEO:XRAzn1BANF9UMCYPWNAYj13wC69TkA9PWX:zT2%f529l3%uPbD:fb2Kf0q95H8U:f7%2z3aPty99r6aPdS%k730Pko91T5:Pbd%Mz2afif9vb3efaA92D2BvdZ9on2bPYK9p72i:X09g31dPeQ9B74FvT2%KHz:Pk08zT70fKc:HzyNv438gAABfL3AenxGQTl8V8G%fHDCCTyPgtn8soNwPJiEC7zABOv858VQfQ7GOH0zRqP9VMdSfbHHw73JCLe92Uku:iFJqP5giiU%lkqi:sILIb8jy2B:e8ufP4pMHP:PTFkAC0yTwH7MjICrDMKA0M01QPDNJMELjVDBYQ14gXENW0G7DXiBvo1PgftNYIHxTWvB4U1xwcwNc4HyjTFB1c0rwfaM40HVDNhB8YyLwcxMvkGljHCBvkwigZZMFEGuy8XBh4v2QWFLpgF8S1RBWMtBwXcLLkEWyxoBN8rFwRnK8UD8ipxA34qGwMJKsACkClhAhAp:gGGKJcB8CcrAU0nugCbJkEA2iW9:wglLf8kJIz%KiPX:R0iCv3%ICL80R8d%5se%vlfHbz4IBxl994a%PWZGXf0Txjl8v8WRvGoFZ7vSxTu7eoSOuyHEYXqJRDW6MQOM%dkDaPlAwwr5J4Kz%I0CZPhxAd64FAGhd:ZBLXeXQMG3t0Bd91ZAAXd0v6s3En9a9y:%0LcM:ow3Kn4N9wi91fcpPWQ3DH05NzL8lPddvHd3TXwgN4K7zrf%u0G4Abt4eAx7Mjhe%u44uXqsuNu6rTkFuq%5d3p0ebD6ernx%kJ6eTpLOoX6lHrXOp67LHqp%0S69fue%sM8OfrRvFV7ILyw%y98y:t9PSX7SP2%u1K91nuavi47oL5Gu%R%oDvlfvw74:8a:B::fTwZP6L8Tz:MfIFAOTyvQCl82YBcvT:AUn1igIm9gcDB:d3A%r33QPM%DkEq:mNBIH62QRL%x0FB:xbBbX8kQVV:cEF4:3sBV3%EgbC:jQGD:9UBkP:cwZf:5IGY:%yBlD:0gYl::AG4v4KB4f%HQcT:icHif0pB%j8Iwcz:BYHavsCB4766Qae%ckGmPihBnv3cAZG9jUG%vTuBZjzmwUk8jsFofDPBBDvWQR07dsD0utbAyzq2gKG6FkC4%bbAUnlXwG74%QAO%JrAMzg%P9y343:Mt4v:xDd4v4P3Kj%L9t::m7aZf7M2Vf%R9lR:t3YUf6O2Fb%Vdhe:i:YaP4Z2HX%DdiE:gjYlv4G2K7%A9jM:vrX7:7o1xX:ydc9:5vXY:9d14X:C9eb:6PWov8k1pT:kNVr:%rUJP821Lr%dtMv:q:ShP3k0b38GtHc%1bQ5PqZz9j56M65%EbOjPe5zVT2Rc0S9ezMyfOwzH7yk8w28ZXM9O%1zL7u88yY7U3NiezEzZXrVs7A6v3OC%qzz3XpctD96DrRoegH0lzo2tIp6KzTAuh81OXnSNXR5xPWx%fc1sjno9fX52jY9%cr2Sno7tlr6LDauOhv2w3pK9xj6eLctemT3f:pOt496tnebupv35Xq:t%26ojg0uoP4evqk%EG6xjiJOuf4kfrKuNx67Xjoes:5Nfrx%QW7FPlYezn5bbsheYT7S3nde3h59jtp%g%7oTppu6A6hPvn%uG7%XsA:BV7o7w7%8l8bDxyPGU83Tyl:Up87T35vPm%av0Kvx69Xn%UvbNADP3IwMe%HgFD:nJBwX6EwoB%1QMA:yLDgz9tRAd:s4SNv:TFFcAwxZ9AZ8YpwJmGtADGBzxBLUdCAY8HxEHryAJCA0i8AhVI8QJhSSFCp0lMgucJskLgSdIDEkorQzxKPcMdikpDdgpQw0WKkoNMCo8DScqFg39KdUMsilzDEUp7Au3KEMLCSh9Cj4npAlZJr4IXCXQB0ok3QYmI%UF9yHpBMAg6QOGH%QCTR7bARgdzwDwG8H:1xqy:tMZpv3nGJ78Fxie%2gXq:rdFsj5eRb2%D4WOPgsFo33Qhb29n8WcfbbFv31Uhed9dwXUfVwGBr1Ahnz9IUZ2:TuGc:0NhrM9Fga0PRTGtb0JRrZ9NAZ1PRXGcP0vBig9P0XZfQZFxP0Ehaq8%4ULvOyE6DyYRIA8vcQTfFxD4jw0g227yAM2e5iCvXtnAgO7dYGLOwUBVLrXQOF6rUBw%kdAA7plf5l6B39zOe1%0bnXvrV5hn5e%bn9znmzfYO5sz1%%Xl9P3lGvQX5m3zSObj8o:mffLp5jXyU%cH8s7n7:Fa6Onx9ujx8Z:pAfJO6g:y:uoW8q3rFfJa7BHyCO0L8rbtBfJp7v:xH%:68drv9fGW8OvxTvHX8f:xsvGm8nvxQ:M08drz5PB09JjwIfVj8Oz1V:DZ9nzw4ffQ8PL4R:H3%dLx4:pm8q37%:JV:JTz4fw19F396:TU:b:1Tv669s7%2:dV:xv54:92%nwA6PsjAW392QEC:5kCnABYAywCBQShA5UE6QT%BPoFRAXRBnAFdAeNBe4HqAVMCMgFlgjzBdgIKwYVCWoGTgmmBn4J0AabCd4GngnLBoEJlwZICUgG9wjjBZYIbAUtCOkExwdhBGsH2wMdB2AD4gb7AroGrwKoBn0CqwZkAsEGXgLkBmcCDgd8AjkHlAJfB6wCeAfAAoEH1QJ4B:ICXwcfAzcHYwMDB8ADxAY5BH8G0AQ5BocF%AVjBsIFYgebBYMIhgXECYEFHguIBY0MmAULDrAFlA:UBSYRBwa%EkoGXxSeBg4WBAfPF4AHpBkTCIYbtghuHV0JUx:8CS0higr3IgILrCRjC0gmrQvLJ%MLOSkJDJUqJAzfKzcMFS0%DDAuOQwuLycMCDAGDLsw0wtBMY0LmTEyC8UxxQrHMUcKozG8CV4xJQn:MIkIkjDyBx4waQelL%8GJC%BBpIuGQbtLbQFMy1QBWYs6gSKK4IEpSoaBL4pvwPjKIADIihsA4gnjwMbJ%8D1yaFBKomRgWAJh0GRib4BvElzQeAJZkI%CRfCWEkJQrJI:EKPyPOC80ivgx2IrwNMiK6Dvchpw%9IXsQhiE1EVch1hEwIVsSCyG%Et0g8hKbIPISPiC6EsEfShInH6gRdR7cELYd9g:0HAMPOxwSDpIbLA39GlgMfRqZCw4a8AqpGV0KSBnhCeYYfgl7GDUJABgICW8X9wjHFggJERZGCV0Vwgm:FIsKRxSqC:0TIA3jE%YO8xPxECcUMRN5FJUV4RQPGFoVkBrdFQsdZhZzH:IWwSGDF:IjHBgJJr8YCihsGfUpIBrKK9oahC2WGyIvVBygMA4d:jHEHTgzch5ONBofQjW8HxY2VSDMNuEgYTddIdI3xCEdOBQiOzhMIi44bSL3N3oinDd1IiE3YCKJNjki1DUCIgY1uSEkNGAhNDP1IDcydCArMdkfCzAhH9UuSx6JLV4dKyxeHL8qVRtOKUoa4idBGYMmPhg3JUQXAyRWFugidBXmIZ8U%yDVEyIgExNWH1wSmh6vEfIdDBFhHWoQ5RzFD3YcFw8QHGEOrhuiDU4b2AzqGgAMfhoeCwkaOwqTGWIJJBmZCL8Y3gdhGCgHAhhrBpsXngUjF7cEkBauA9oVewL9FB0B%ROW:9US7f2WESz8RhBg%u4OmfiXDd:2RQw49fkKpvOuCSfyYgi38BMHU%%6BfTtUgSX7NMCPOs7AeXpjP%V6Mv9U%f%%yfmLfoZ5WP4NeSv9oHjG:X:4qzzreJm8ofiSvGK4lrwq%KU7%Hi8u4g42zuZOP%7avjo%3x41ntNOQY7XHk3Oys5KPs8eRy7EzlUuzD5UfsWeZT7Avnc%zV56PstOjd7KPpGO2b6kztlutw7Yrsf%1y7XTtSe5P7RHvEu3O78Tsg:Bp7DPxBuzg8aDri:I76znz3%rs85Pqp:Rc6mf1Oeoo9izq6PY16qT3WOpa%JPqBPnk6p35Rese%q3rgfoa7Mj6h%z0%vbsDPtp7RP74%0Q%2PuB:vo7v76cO:4%vbv%vp48P:68PAB%1nx:Pqt8ev66fHP%gzyqvoT8n36:fFG%svxBvp:8b:5HvFz%anwI:kj8M:4iu95%N:uIfgi7sr3Uu1z92:sGfd567v2b%pY9lLp7:Ue6ID10eYJ9Wblh:Te4:fzO%Jb84DgtvK23hHy59xy8Rzb2:Bb2Unwqde37wXWI%9y1Izu9NLy7YzRVO070LLsAc8N7OLNZuvkzL:qDcwY6mDLeenfyu3oksqC6H:KQOipyifoCsst6JXLR%g9zHDo%cyl6MPN4OiVzhzpZs9P6S7Qdenm0Ivpi9GU6RzSlemY0o7pAdOC6VnTc%mj02Hp4NNN6RLUNuk31BjpTtTr6FPUquhF1E7oJNTU5:TTOue203zmZNOU5fvSheR30lbj4dEY4kjR2%C60KvfPtCN3tXPht2Az5ncP8:G2xbPD9sDz2:aBs:l2RzPcdlJzxXZjs:R2O3PqNhm0JzY99Cu2J7R29hc0h:ZLdN32RLU4NkL1VfaGtbb2kHXaNt:2Pzb0tmU3DjbMN2u3M7dLd5o3qnf%d4X4XzfbOLu36LjUOC05J7gnuXX4GHm%OD85gDhc%fz4Mrn0OAE6JvgJOhV4DDoAeAt6KHfIeg83xLo194F6HjeAegl3gzo4t0s6LTdZeic3bron90v6bndxeno3YDqKd5i63neaeza3pftT9:p7tnfXvB54PjxMuG28wDilPXi4on30uOL%c:kj:vb5ZT9%eac:yzoqwF06cID0eriBUHsBwjC7TEKU%9cDPDwhA6S8qMQM:S0Es31sxRd950W3:hzGFL6Mhq0%9sbBf1sHUf%6B6A:1MguQC0IfUBDCM0A1UkbwSGJZ4FlCa8BnwnxQc%KLYI2CiJCUkpPQqMKc4KoylCC5QpmwtkKdwLFSkEDKgoEAwbKAAMcyfVC7UmkAvlJTQLCiXECikkRQpOI7wJhCIvCdQhoghFIRcI3SCNB5wg:waCIGoGjCDLBbkgKQUJIY8EfiEGBBcilQPQIj0DoiP8Aokk0gKCJcACiibDApkn2gKsKAADvSkzA8kqcAPJK7UDtCwBBIItUQQrLqUEqS75BPcuSwUNL5YF5i7XBYAuCQbdLSkGAS01Bu4rKganKg4GLingBYknoQW5JU8FwCPnBJ0hawRUH98D6BxHA2EapQLBF:sBDhVKAU0SlwCGD%X:wAw6:wUKmf5aBwT%ygSC:V0CF:0cAMj8C:6U:DD8fvyO%oX8KPmp:P:36PwP90D9Vfas:cj1J:5k9az%IvU3::r0xf:l9FcA2:TsANf0hgHT9CMCyPTBAqz0XAN39O4DIvR0BKvz6wQS81QFXfKxBZLxCAa38FkG0%%pBuju9Qb37T8HAe2EBwTsxAcD6:8HAOo1CALpaAgR6JoIMefLCGbm%wix5SwJFuViCZzkoQlH5OwJGuRCChXkoAow5AALY%RcC6fkrwv25PkLS%U8DKblegwE5rQMY%brDL:mHg0Y51ANaeeBDbDnsQ3q598NFugKDjboLg5K6EcOVOhSDlToSQ5L6CwOPuj5DTDosw0m6F8NIuj:DCPolgwp6CMMMuikCz:oGAtN6IIKX%jsCXnoWgmd6NIIzuhUCAnp3AdJ6W4HjekNB9fpvQYm6oQGeepjBs:qXQYl63UGfeuqBtbr%QYu7F4HguzSB83sUggR7doIT%1nCYrt9wnF7YwKA%4pC0vu1Qui7pcMEO91DZbvcA418IcP6fC0EK3x8hF78j0TT:OSFCn08hUL9VwX9:XLGOn2Oxre96ob0:gWHcf5fR64%t0fofsyIX:8eyJS:bYjGv7kJNf%AiaF:w8nIAAKKKUA8CgTAcApaAF3KqEBDyu5AYQrqQHQK28B7ysIAdwrdwCYK7::Iyvq:oMqAP69KQj91SgD:M0n8vqpJtb5byW1%CMkk:fLInb2ayFk9QkgYvSoHnXzTh2m8v4b%fG8GnfxiBkk8WIYB:FJFyHxPRZ18TwVAPJHFL:yYBOv84QSyvS0EQz27xBv9zUQ7:iJD4P66Q4j:FEOw:26DVP:IQ3GAIEMEQLaCy0DLgsUBIAKxQTRCT4FIQl%BXEIhwXCB14FGAcJBXIGjwTTBfcDOAVGA58EgQIFBLIBZQPhAL4CGQAPAmH:WQHA:qAAP:7o:%P9Nv%x:Yv%q:3q:dH9Uf0k:sH8pP49:FT:x:s5AGb7WAEg%7EC%PpEBPD6DAYF%wcIN:sxCoX7hwzr%wIPaPyaEfr8SRSg:QoXWv7YGSn:qxwJAHsf9gBAIu4B9STtApYn7wMiKvEElSzuBe4u4gYsMc4HUTOvCF81iAlTN1gKKDkdC9w61AtrPHoM0j0ODRI:kQ0pQAUOF0FrDt1Bww57QgoP8EJBDztDaA9eQ4MPWUOSDy1DlA:cQocPaEJmD9ZBMg8sQeoObkCRDp8:Jg7APqoN0j0dDdk8gQzZO9cL1TofC9A5WwrMOI4Jyje7CMw25gfYNRMH8TRJBh40jgVmM%UEyjJPBEkyygPhMVYDkDHxAlQxlwIqMUQCDTHxAfYwmAHjMDUBzzDHALowTQCfMMj:fTA3:1Awmf4YMO790i81:XovbPwLL5L7gC6k%tQtofkELYf4DyxX9:MqEfaxKbT0SSg:87smr:EEJQLwHyM67g4hXOzTHm:qcRx86PAZieZSF53knhTA4t0R%OAZD0rfXQy53bEJSNwbB:baowTG2U8CudgmANLXL:4S1278e9bl%g7WlPnL1Xr4stWX98HV5vb31WP2UdYI9sfWzPVW16n1%NeX9a7YkvV52ZL1W9qV9Vjbk:Vu3Iv1n9169eveXvVS4Df10uEF9WfjyvQO5Yj0w%ZC9IPo:PNL6rbzFexw89rtKvOU7%XyQfGl8t:ybPJy9Dzy%vUY8nj3BfLt%AbyWvof8r77U:IY:aLyZ:4J86j:hfPaABX0%wG09A0DYvURBCH2DQXy9gQG1ff3Bsf45wfF%c8IyvqqCdT7dQre:CgL5P3DC%D%QwzN:6sMqgAADXYBRw0wAoIN1AK1DV4D4A3NAwMOIwQaDl8EIg6BBBkOhgT8DWkEyw0rBIoNywM7DUwD5QyxAowM:QEyDDIB2AtRAH8LXP8nC1X%0wo%:YUKGfxACuf6AAqm%cEJV:iCCfz2QQmV9fwIJvSzCLDyZgg18RQIuO%%Bz3uZAfG7AcHV%ulBvTpQQag6NwFYOd4BTrmGQUw5cAESORyBILjLgTg4vYDXeLIA:bhpAOm4YsDauGAA0HhhgMp4aADIuHPAyfhEwQ24WkEUOHOBHLhPgWc4bUFzOEuBv:howYy4hAHZeJxB5Livwe14vgHy%IXCNLiHAjG4gcIpuLYB27ijgca4ioHqOGrBhbhEAZh4FoFit%JBJDengN43ZoCRtx9AQLbSgCy2QX:W9i1:QLXYfyu1RP7ZdTO%S7TmfgP0nj3EdFu9jjQf:WKz6v0DM:y88DOUvOpzsryxs5b8hbPBPKUz8XxPNCg8QjRlPHz0aDx%9LB8RnU8vFH1TDyfNZ18q7XvPLV2APz6dlG8%XahPPI27zzj9zy8zzdJfTO3Vf0Rd6I9KXeufTv3uf0J98Q9U:fMPVq30P1fd9G9Y3fOfWe3x31s9:y9M:fufTz33T0KOAl9HLg0fPZ4HzzXeEr8wDi4vLE4qPyq%Nu8rjkRPLs5SjySOcc8sroIPJx6jfyO%xi8iXuovIs8PjyT:Jo84n08vPZ9pb0OflQ9aT7HPYV:vP2hwDQ9:cCsPhfBZL5vQd1%g8KXPtRDEj8gw46:aMQL:6uEiX:oxQZAIAWCAFEGO4B7hnKAnsbmwPpHF8ENB4XBVsfwAVcIFoGNyHgBuohUwd0IrMH0SIBCAEjPggCI2gI1CJ:CHsigwj4IXIIUyFMCJAgEQi0H8AHxh5XB8gd1ga9HDsGqRuEBZAasAR2Gb8DYhixAlcXiAFZFkUAahXt:o0Ug:3IEw78HxOX%pQSJPkoErr33RFg9rQRF:WuEeLzyxHE8gsSv:FrEtTw6BIH8H0TV%8oFMLu4hRH7qYV5O1xFpjtPRdg7QUYOu3CGCDtbRkO7f8Z:exxGursuRrQ7NMarey3GnzsZBo%7NcZ8OsSGZPrExgl69gWpupiFRfqsBN36cYRxOinD:znWg0c5%MKJeZNCBXloAXv4%UCt%InAHHhbf0m4ML6294t%Jfdt:Vc3GbzLttC8RDaUO8I2ZbtGNgV7EfXz%qX1sXpDdb16KnVXuhq1frnT9XD51bVsed61bznutXf5xTWE%iH1lPoEdea6LPX5Ohr2CzpOdlw6RrarekP2%LpFtwO6i:dMepY3krqj99V6s7gVOoQ4kjqT%M16obkHOqz5QHq0%bo6eXn1Onp6Mvp3%nR6cfq5%mh6xDqcOxQ6jbtp%r37RbrtO6b63DvNews8OLs5vCg7Z7xb%5S8krv::Iv8KjzF:FO9P:x9PTh8pz1vfNH9pH09:Zd9ar3I:Zg%OP2Fvmf98j5WPh2%g75G:vB%bj7cPpL:Bn71Py8%1L9V:zF:en8LP5y:Yj%8P3Y:mP%G::N:lH:Lf97:4b:m::Y:7P:IgDI:2cA3v%nAPj:5AAVAB4BNwBWAV0AiwGIALsBuADmAe4ACQIrASQCcQE3Ar4BQQIXAkECfAI5Au4CJwJtAwwC%APnAY0EtwEpBX0BygU5AXAG7AAYB5oAwAdGAGgI9f8RCar:vQlp:3EKM:8wCwv::gvx:uIM5:7cDez%7w4D:x0QK:9lEWb:xxK0:0AUFADOFYgAbhcLAR0ZnAHXGjgClhzZAlcefAMVIBsE0SG1BIkjRAU7JcQF5SYzBoQojQYRKs8Giiv3BucsAQclLuoGPy%vBjMwTgb%MMYFoTEWBRwyQARyMkgDpDIzArQyCQGhMtL:aTKW:g0yXv2MMTL86TAZ%ygwGvpPLzz5Yi6G%GUt:vdcLKn3SSuK9zAqo:cVKfX3:Sd:%OwmP:noJTP68iRV%wwkn:w3Iwn%cSKJ:7khFQELIaACYyAgBL8fiwUbH9kGdh4BCMwd:AggHcMJcRxTCsMbqAoWG8MKbRqlCsoZUQouGcwJmxgeCREYTQiOF2IHEBdmBpUWYQUZFlwEmhVdAxcVawKMFIoB%BPAAFsTEAC2En7:CRIN:1cRwf6jEJ3%7w%j:j8P1v6XDjj:%w3I:28NiAD1DHUBjwyPAj8M0gMIDDsF7QvIBu8LdAgRDD0KUwwfDLQMGA4xDSIQyA07EnYOXhQ2D4YWBBCwGNwQ2Bq6EfocmhISH3oTGiFZFA8jNxXsJBQWsSbvFlsoxxfrKZgYYCtgGbosHBr2LcsaEi9qGw0w%xvmMH4cnDHyHC8yVh2gMqgd7TLkHRYzBx4aMw8e9zL7Ha4yzB0:MoQdqTEkHe4wrRwOMCEcDC%BG%gtzxqmLAwaSCs4GdUpUxhPKF0XviZUFiUlORWJIwoU8CHKElwgexHUHiMQXB3GDvkbaw2uGhcMgRnOCnMYlAmFF2sIuRZWBw4WVgaDFW0FFxWcBMkU5AOWFEMDfBS1AnYUNAKBFLwBmRRJAbgU1wDbFGYA%xT0:xMVgP8eFQf:FhWF:vYU9v24FFb9WBSj:NAT2fscE:b6NhL3%R0R3PjND6L3SA5M9o8M2:SmClHzkwiy8VwG:%8KBDrupwFn7Dz:iurV:KrofvrN5kP4%%Qv9jrjTPSP4aDy:d8w8YTe:u8l3Qvv4ttW7rza2%232Zbt19iC7SHYmO2Z19HtQtcm7h7Xj%4r1wbvadeG79TXCPBq2InwJ9kC8QfacvEJ29PxKdwj8mfdYvLC3o7yOuCo8s3hsPJ546jyPOWP8hXnaPL%6DXy9er58fTsufH07nnx7:A78d3yA:G49NHwfPam8CT4hfCv%W:wHPtn8Gr8b:CZ:YvwrP698KT:BPGFAGDxUQHR8QsCU:K1AufyUQOJ898DOPRfBPP00QS09TQFevaIBUH3zwUE%AgGwPg0BnL5UgYX%mAGrvpbBjP7Qwam%xUGBfzTBU:8fQWD:BQFoPyaBKb8DwSU:HUDavzMAib8FALK%1EBVvuCAMz6rP8u%tD%f:ny:cH4FP339zv8Ivdo%0X2nvpg9dv5c:Qg%X:zafiD8rb3fvEF93DwV:ZZ76v1Oe4D9RHtYPTg68LzqOoq82npmfIk6A7y2%aH8Y:lBfFD5IXw%uIH8LThie924AvvQN%O7hbeEu743Jjt69sj7fDatewK2lLsO9n%64bYuuvq14nratds6wfXY%vD1nDrntaS65rWyOu21hPs89Zu7EzX1%y%10rtRdjB7dzYOO582avuIdoV78Xacu9i28Dv8tv772:cIvDT3DLwGt0r8ELdDfBJ3djvMd2M7:ncK%%k3LXuNdwv7rDbme0b2:nsfNpP7NzZoOtC2evqttgy6kDYdOno17TotNfz56nXNOfM13vmItjN5avYLeVq2ZvkWtoY5HrbouPD3DrjL97e4rffkOJV4VXiAeMu4rXkHuJq5iXiFuhD4rTpd%I867zip%wS4:LtdeMZ7%LjGvBY5PXw0%Sr8VLlP:LS5bHyUeYE883mPPNG51rzu%dk8yroXPOT6Ejz8%gu80npEfOR6fnyyunr8vPp6:IN6v3yGuol8xfqZvMG6sPz5ek89LPp0:Rz6Yv1J%ll9tXoYfeF6IL4PejG%QLoLvva57f8yOde:s7nIQDs5:0BIejtA2:o7gXW6P0HVukVCu:pNAyg6lUOaOt3EETslhIx7bEULO7GFjPv0xhD8NYaWvHNHHfyth6Z85Agv:RZIun1DiQX964lSfg2J3z5pCiv%vYp3vsrKwb9QCwn:jctQP8PLlIAyi5eAWgvZQLqL2gDUzBkBKMwVwXdMD0GAjESBxMx1QcTMYMIAjEcCeEwoAmyMA0KdTBlCi0wpwrbL9IKgS:oCiMv6ArCLtUKYi6xCgUugAqwLUMKZy3:CTAttQkOLWgJBi0cCRst1AhPLZYIoi1lCBQuRgikLjsITy9GCBUwaAjyMKEI4THwCN4yVQnjM8wJ5zRTCuQ15QrRNn4LpjcYDF04rwztOD0NUTm%DYM5Lg58OYwOODnWDrY4DQ:yNy4P7jY5D6o1Kw8oNAMPajLADnMwYg5GLuwN6CtfDV4pvwyyJg4M7SNNCxkhfgo:HqAJahuzCKIYtgfxFaoGXROQBe4QbASpDkMDlAwaArEK9gAACd3:ggfV:jQG4:0TBQv9HARR:EsDtfuZAjr7AgLh%oABq:oLAZv6nwCx%jcA7:rR:1P7av:b%:7%hPyN:kn9E:4o:pD9HP8D:SMAbPw6Acv7XQIi%4sDcvq:BL35%AUD%TQHRfhvCIb3pwnJ9tcKD:b9C1v1FA2x9BkOEfQID33z4A:18qAQevJJEQry2hGm8VMSS:G1Evrw:xKv8DQTbPBXEy7wbRP173oTwe%BE5DvhRNi74cTNe%IEwjviBPb7oUTr%6AE4LueRNW7nATK%5kEwDuVRPV7UATqe0kE3zt:hJP7coSIe2IEvPsNhLF7NMRmOxiEWzs5xBA7GUQGOzjD:XrZg:Z6:EOx%uGDsHrJQ7I688N3euDDQHsQg007A8NduzqDMXs1Awh7c8Mhu3aDPPt8gxj7hUN1e5ADUTvbw2u76ENEPDSDWrwBA658DYO%vBoDi7xmw5T8dAOafEID3LxRg9v8Y0PZfHdD1fxORBJ8aEQQPETEUHxkBFO8RgSavGrEpfxTRPZ8f8TL:LDFJzymxUf84kWuPOLF2f0oRgo9coZ%vUEG9n2TBzA96Edq:j%HpP5XyBz%r4hRPsVIwD8YSSj:J4lKf3JJoz94ifK:eYo4P3TKcv9piqJ:V0rGf32K3:8byy8%8cs1fr%LND5Ey2w%AUtfPfWLDn2hizv9Bcsp:OKK2ny4CpA8RgqNvAyKVLvMCia7hAnE%7UJcDtfiSk7REjv%2TIRDuBSCV7m0eSO:OHCPwKhsf8YQZMvLeF1XzPBZ%9KAUpfUOE8D2iBHI9xIQs:iuDn35XA0f%hsMl:rqCub6xwkK%64IBvudB9r6kQaL%osFHPqJBJH5igPx%JACQficAYf3rgDI9sj:Cfbr:k71F:6c9En9%vN::Gzzt:v48u36o:Ig%m:yUPlg8oD4d:Kz97Ty7PYZ8zD2qfOC9WL05fRH9Vv0WPbm85P3iPP2%EXzfvoe8yn8FfPw:Svz0f9d88UBqvPJAxH02QWO9PEHIfUNCsj1KwyB9kkOTPdkECX4fBIJ%Y4U9PmZFuD6mxjK%5Qaq:yCHIP9ZR5O:jsgD:8EIsb:wCN1AG0lHwEKJ8QBlyhlAhAqAgN1K5wDxCwwBPstvgQZL0UFHzDFBQsxOwbcMaYGkDIFByUzVQeaM5QH7DO%Bxo00gclNM0HDDSuB9EzeAdzMysH9jLOBlkyYwagMfAFzjB4BeUv%wTqLnwE4S35A88sdAO5K%4CpypnAp8p4QGnKGABxCfkAPomcABMJggAuSWv:0IlZv:nJC7:piQI:34k8v5tJOr%cCTu:oIk:v6eJBj:viQ6:9wkYP:wJIj:8ySs:94kx:%qJNL:USTK:84jq:8cI3L:OSIf:yAhr:7PHyL%Rx52:YYcq:yPGsD7ZBiz%gsWhvmKEzj46BDN9i0ORvViC6bzkQjw8cUFKPAIA0:uZQBo7OP9deqL%3roYvl55mz3eOSs9XviJPSH4NLyo9628dPczfAc2xLwgdl:7wXYDu%t1rjufNV57njUS%6l0yruCdMT7qnSAe6K0vHtrNLf7RDTyu2107DtltSQ7a7Va%351kHtcNgU7Q3a5ezM27Tspt2G7JffW%yc4TfsseMb7NXlDOwF6AnsPeoY7HrsOuy37nHs7:DC7B3zLe099bTtTPdX7kb5Fe8r%%3v%fzc8K:%4fFLAPnyzAEi9DQDWvWCBJ32uQXp99sGOfnrB4z66gjb%9oJI:27CmD%iguM:0UMpADqDKUBdA2LAuMNVAMzDgAEZw6PBH0OAAV4DlYFWg6TBSMOuAXUDcYFbg2:BfAMowVaDHEFrwsrBfAK0AQjCmIESgnjA2sIVQOKB7oCqgYTAs0FYQH2BKMAKATa:2MDB:%rAiv%AAJG:WIBWfzSAGH7TABe%s::TflY:yr44:719m3%rPX1:U30ev3a8v38U:F%:LnvAPwN7oj7UewW%4jqrfq26E763ub6%QXlsPkv43H5YuE6%aTfC:n63eX4bNzJ%P7auvi22br4ldjO%J7X%fjR1jv5LdaV%bPVBvpg1Yv6NNUj%yrVyfs%1X38adU7:aTVAP7n1cj%KtaP:2bWTgCU1gIBr9amAbPWNwKc1rYCaNYgAxbWeAOm1b0DGdXvA2:UDwSr0xwE0dIVBOLR%APk0MQD3M95A9DOFwPHzaACycwXAt7LfQEOy9UAX8ofANjJW:99yYv%Ucmt:VTJxPyIydD768nW%nnK2Pkwy9r4Csze9::M6PYIzvr1Hc8X9TbQQfRL0XnzVdLD8k:TIPI01JPxANUe8a:Vw:A:1oHwsNZZ8ALXR:A310jwU9dY8FnXc:BO15TwONe48BrX2vD71vnw39YR8c7WIfHK1irx2tYs8f:WKfFA1yLxndcZ8RzYDfG%2P7whdnq8HTa0PCL267wyNyH8CneWvCt3yvwUeH87xPj0O:y5Knv6uaL7:rod%8d63LvUO2A74:vpO:W8eHvJPQ38HT2qPDD%DHxD:vO8VT9fvKO:zzzugEE9NYD0vTgBab12Qd79sAJUfeWCyT4Wg31%AwPwPmuEIT6PBI:%7gT8PshFZj8dhY2:bcXzP3lGFr%ABrh:ggbYv:8G97:3BxWAKgdygBdHjwB:B6tAYQfHAL1H4kCUCD0ApQgWQPDILYD2iAHBNggRwS%IHMEiyCHBEEggQTgH18Ebh8iBOweygNfHlwDzR3bAjgdTAKmHLYBHRwdAaAbhQA0G:H:3hpi:58a2f58Glb%dhrX:Y4aXv3GGuz8HBuD:I4bJvwYHNX7uByT%2gdXvslHjb76x4Z%7UfBft9IPj6PCHw%uwh6vqEIuL6:CLV%kwjwPpuI5:6XSNu%hQjLPqQItX50CFp%dMg5viZH034Jh6e930c2:akGgX2ohgc9X0WIfQ9FBLz6hHw8YwPuvAtDXHv1QoY7o0IsexeBj:rTwTE6WUCQeilALXmEv8j5az9jeNz:PfhZftm4ID6396:%WrdHfkJ3JT4wtoe%JbZtfeJ2FH3ntfv9tfWivY61iD2yNWw9YjVOfV61bz0otU69P:Vs:OP1inzUdee8j:YFPJV2Y3xjNoM8d:blfBH3Svwv97Q70Dghu:F4VDvS%Mu783kIe9K5invvudF7yfpde%D6rnvz%sS8Aftf:Aq7gHxNe%W8SrwPfII8fTy0vG484vyhPQ081b10fMr9mP0Afft9Nb3c:Wn%Pj1cvmA9jb6Dffx%qL3ofs%%EX84fjf:In5bv0y%vP92:pu:oH74P4f:Er:s:yu:zn9DQCx:WoAF:7HAGz%JwGw:ooB4:7yAQf:XwIg:9ACL:9HAzr:wgNF:0AEVf:BBG3:QgWQ:8IFv:8%Bvv:tAZCACAHlACCB:AA1gdWARsIxQFQCD4CcgjAAoIIRwN9CNIDYghcBDEI4ATpB1wFiQfMBRIHLwaEBoUG4gXRBi0FFQdoBFcHlgOYB7oC3gfZASwI9gCHCBYA8QhA:28JeP4CCsT9qwos:WsLsvxBDFz8Kw0t:CkOJPw7D0L8YRCD:JwR5fzsEmT9TxT8:cQVqP5HF2T:1BgqAGsa9QAHHL0Bpx17AkkfKgPpIMEDgyI7BBMklQSTJcsEACfbBFgoxgSZKY0EwyozBNcrvQPWLDEDwC2YApcu9wFZL1cBBjC9AJ0wMgAdMbr:hTFd:9IxIP8GMgj:IDIZ:x8yV:8CMsH:yjFWAHUxEwEDMfUBdDD1AsovDQQHLzcFLy5sBkQtowdKLNQIQyv3CS8qBQsSKfYL7ifFDMUmbg2bJe0NdSRDDlcjbQ5EIm4OQiFHDlIg%g13H4oNrx77DPsdUgxXHZMLvxzECjAc7AmmGxIJHhs9CJUadAcIGrwGeBkcBuQYmAVMGDUFsRf1BBYX3AR7FusE4RUlBUsViwW6FB0GMRTaBrETvwdAE8oI3xL0CZQSOgtgEpcMRRIHDkQShg9dEhERkBKmEtwSQhRBE%QVwROIF1kULRkJFdIazxV0HKgWFB6QF7AfgxhJIX0Z3iJ6GnAkdRv:JW0cjSdeHRkpSR6kKi0fLywJILkt3CA:L6UhvzBiIjcyEiOlM7UjBTVMJFc22SSYN10lyDjZJeU5TCbtOrUm3jsRJ7Q8XyduPZsnCT7HJ4Q%4CfbPuYnDj:ZJxo:uCf9Pn4ntj4sJ0Q%vialPTMm3DyMJec7ySTLOu0jiTn5IiU48SGjNtggCDW0H1oziR6dMV0d2S82HBMuFxtULAUaoyoDGQUpERiCJzEXHiZhFtwkohW:I:MUxSJVFO0hyRMzIU4TkyDkEgggiRKLHzoSGB:zEacesBEzHm4RtR0pESUd4RB%HJEQuRs3ENIazw:EGVUPjhjDDi0XFw6hFU4N7RNmDBISXwsTEDoK9w35CMELnQd4CSkGJAegBMkEAwNwAlUBIACY:979zP20%:T7p:kQ%r73JPj:9TD2bPQ59ArzP:LY8Ubw1fBN7gDwWOxX72rq1u6F6HnuseY77vTkGO5U4wru1%EJ7oTgD%5c3xbuZd4Y7p:dEO4O3fvttdzW7ZXcou2x3F:tCd0O7Z3dsuxt3k3sdN:i667gdusW4gzrpeOn6lLlTOoX5wDq7OjE6crqnumr7I3pie6U6WDwtOkv8uzp9PM96q71pepf9yTrBfm765:6aOwr:Cntp:397RD:3%5mAMzvpwG:8NUCtPHvA6ny9wSc8%sFivTKBnP1kgdV9kEILvfZCP33WQm:%MMJcvkYChT6Vgqi%nwKHPuHCn:7dArK%z4K:fvlCRj8Zwkd:MQIDvz:B%z7Fwe6%w8GevvoBC37pgPU%ksCcPraAAD6V:%G%cf9Avkv:HT4kvrd9:b4O:dg94720fXU9U70DfXW8jb0avFO8wvwVfK57krxdO0s8D3s%u4T67Pt9ulW7OTo4era51Pp1Oar59Dl6OXL5A3kwuMa4rbiFOCm4f3dk%Db24Hfsdly3obXa91e1XLcP9OK2y:RudoyzwHaT81m2YrL6djoyYnYbMhI2BzHJNj6xR7YBsU22EPEbNiuw8DYSMMx2Q3Dvtn9wmTaE8Mf20zD6Nuiw7zcEMSV3Y3Eb94UxUffnsUa4CbG5uCoxqrhIMdi4ozHDuPsx6zjQMg65IfIuOTFyCbl%8iE5S3J0uVfyRLml8lE5tjJaOYnyn7miMqH5gHLgOaUy2vmRsxH5hjNFeYNztjlIs%P5VfQPOWm0eDkDNN65IPUC%QD1pTjiNcZ4wvZn%KG2iri9Nu%4VDdXuGW3gvhwt:F4NDgjeC:4WLgjuJG4DzjPODN40bgQeRk4J3kmODl5ODgHOU84UflqeFr5SXii%Wu4q7lQOPZ5dfjEOZu5FfmAeWy5ovlI%cJ5qznd%ZP6NXmCukk593pZefI6pnnyuvD5%Ds5ecL7v:nSO8T6JfwIuj28S7oZPM36N70Qehj9lDo7:dm6IL5h%gZ%7Xotfzy6FT%P%n1:5zpmAEJ6jsDhurfBBTrgAay6yEIX%y:CRvtWgvg7fQMru6KDn:vHxBQ8LERHvFBE%Xx0RSi8mAWVPPvF:nzfBmR9AcbHvWPHKH1Eh4d9o0flPYAIQj3aSJ698Yj7:cVJWj4VSbn%IInbfmcKP35nymU%owqM:tjK9f7IyyA:M4sLf1lLd:96S2W:lwuUP%9LgwADS:EAEwvdAF6LxgCly%rAqMvLAOgL5sDjS:5A28vSQRFL40EEy:IBNou:QSbLi8FWi5gBRgulQXXLdEFmi0UBmQtYAY1LbUGDy0PB:QsbQfjLMwH2ywrCNosigjbLOYI3SxCCdssmgnPLO8Jtyw9CowsgwpKLL0K6ivrCmgrCgu%KhsL6CkbC%QoCQuvJ%QKSiaoCrckUgr4IuIJEiFWCQsfrgjpHO0HtBoTB3QYJAYwFiEF7xMNBLkR6AKSD7MBfw1wAIULIP%mCcL95gda:EUG6frFBHH5ZAP19x8CePbzAP302v%G88:%FvLM:a:wzvxT7877Bu7I%szsuPmq65z4pOpx977pNfb76On0X%iP8%znKPKj57nwiedE76Dnze3q51jsaejq6h3phekD6i7oGevo5lnst%W97Z3kPu%d49Twu%J58vjhI:RV4c311OBw93TgBPky4IX6DeDw%wDgQv0I4Hn%IeCV:0fglQB44HkBsOBBAu7g7wIt4YIDbOH9A6fhYwTc4bcEBuL8BCTiOAU14m0FOeKdBTLiywUh4vcFCeIkBuzhUgbO4YMGsOG3Bpbh7waD4SkHeeFiB3vhmQeM4ccHrOHqB9:h:wck4gMIfOL2B%ji2gdn47AH9%N7B5jkPwdG5f4G:uW7Br:meAaG5zcGUej5BR:pwQXr6ZEFtupsBXrrVAU27EkF5%xKBYztVgUj7mkFq%6DBSPvoQWK78QF3u:sBR3wGQZG8EoGWfB9BlTwsQY58OIGCPAOB8TvNAdt71QHBu9tB5LuggcV7pQHku2oBw7twAeM7OEHEewQCKHrUwhD660I:OohCdDqsgnE6l4K2uolCxPrBAxt6:gM6Ov:DX7sGA8u7UEQ8e15EcPuvxKe7xEUe:BtFVXx0BYk8jgY5PKjGZDzDBsh9HIclvTQHev0JB8g9WkgNfWeIS31viIM9coj2fTAJJr0oCVY9GwmGPQmJ%TzzifC82UouPPuKMzzaSkB9NUpW:QxKtj0eyp69bAqPfbNKh:3ziod%LEqM:lzKlz6FSqT%5Up0PzxKA:%KihH:z4ncwAtJo0B:CSPAqwjcwNDIjQExyDOBDwfPQWkHYIFBBycBV0ajQWwGFoFAxcGBVgVmQS3ExcEJRKIA6YQ9AJAD2EC8w3XAb8MXAGkC:gAnwqxAKwJigDICIoA8AexAB8HAQFSBnoBhgUaAroE3wLvA8QDJwPFBGUC4QWtARIHBQFVCG4Apwns:wYLgP9sDCr:2A3s:kQPxP6vELX%FBK%:nIT3:7IFBr:FhZr:10X0:%eGE8A3BnfABgbggFSHDUCih33AsAexwP0H58EJiF%BVUiXwaCIz4HryQZCNsl7wgKJ74JPSiGCnYpRQu3KvsL:yunDE0tSA2eLt4N8C9nDkAx5A6MMlYP1DO8DxU1GRBQNm0QhDe4EK84:RDMOToR2TpwEdI7nRGyPL4ReD3QER8%0hGmPsARCT%cEUc:ZxFdPyIRSz:QEBE:cRCxPgUQLD6LD4M9AQ%4PGgOzTvADcc6Dg2oOVUMdTicCzQ36QrqNUAKnDSmCVEzIQkMMrII0jBeCKYvJQiMLgYIhS0ACJEsDgiwKy0I3ypZCBwqjghjKcoIsigLCQUoTglWJ44JoSbGCd4l8QkHJQkKFiQJCgQj7wnNIbkJbSBmCeUe9wgzHWoIWhu:B1wZ8gY9FwQGAhXyBLMSvANWEGUC8w3tAJELWf85Ca398Abt%74EIPqnAkj4sgBq9uH%hvQ3:Z:yt:uz8GH6w%40%dDsLvjc6kz36uiJ9vzm4fUU5U71NuPM9GXhVfSk3%bz%91%83DcGvMJ27jyzdlX8sLY9:Hr15bxTNc08eTW0:Cz1nTwutYa8PfWyO9r14PvFthM7:jYKe8R2hzvYdso7%bcUO%a3pXveuD5737iffCf5B:x1Obf8RXpuvJd667zpe259Onv1:Uo8gb3YfRG%JP2kvm:%Ov65vpO:Af9t:0i:yT:NgGTAEAD:wE%BWYDLgfHBA8JHwbeCm4HmwyxCEIO6QnTDxQLSRExDKMSPw3cEzwO9BQmD%kV%w%6FrgQaRdbEfUX4xFeGE8SphigEswY1xLOGPUSrBj%EmUY8xL6F9cSbBesErwWdBLuFTASCBXgEQ0UhBEEEx4R8hGsENwQLxDHD6kPtg4bD6wNhQ6rDOYNtgs8DcwKhQzuCb4LGwnkClAI9AmKB%4IyAbSBwcGngZHBVMFigTvA9ADcQIZA9gAZgIl:7UBWP0DAXL7TQBz%ZP:X:fX:jf1G:7%8mP9uPC2:GnuGPwY7I:7y%kf%4fnzPpT5Zr6NuON%jThqPpV3%36nt1Z%xHc7fux2qT8ftl7:XXYcf6V14L:29asAELW7QHI1UEDaNWjBB7VDgbk1HoHtdTkCIzUSApj1KELONTtDAfUKw7Q01cPlNNwEFLTcBEP01YSztIfE5PSyRNj0lIUQtK4FDHS%xQz0hwVSNIaFXLS9xSv0rcUAdNZFGXT4BPa000TXtSgEuzU2xGD1QARHNYQELXWEA9I1wAO09flDFDYwQu%2JQKGtlhCWPZKAiZ2ewGvNmxBc7ZegTP2UsDw9koAqzZFAGO2REAbtkg:0:ZP:452W:9Ltmw:DPZAvxK2WX7dtna%rnZYvoT2vz5h9qn%RTbXfm62x35dtzh%Efdpfgr3mn4IN8q%CXg6fc44af3V%Jl94LjI:e25OT28eWp9jPndfZ66Er2x%kq9hnrF:Zx7BL2zu0c9jDvNPaY8Fz2BfKV9nnz4Pb19Dz3evap9wj4I:if%af4P:sv%ej8t:ma:jz6UwC7%hMCMvvXA6H7ngUF:GYHXvwtCaf88Qrg:LIMCP1tDhz9IRAd:cwRDP1tE%v8AhW8:IsWg:wFGEL8cRn7%8wasvsWHGn7Tx0i%3Ue4PqLH6X6kiB1%oohUPp1Ijj6VCMt%iokLvr2JDj6uSVI%nUmW:oqJ2:61yeD%noolvoRKaf6mym4%hUqyPp:Ktj62Crm%iAr8fpXK:b6fiv0%pMr6fqaK9X6kiu5%n0rlfpbK2r6LSs4%vMqAPqtKsX5XyqK%QsqUvm0KSD5Xyn5%A0p2:i8KMP4ayit%BIolPisJ3D4MSc:%J4m::ftJa:3HiVQ9zAk5PYkI2z2:SHr9bwgX:VkH8j09x0h9HQcafPeGpryNBmx8XoXrPC1FYrv6xNN7iUS9expEITrvA766SANVuiVC5nmGArF5KcI2%JCB9:g5QXX3o8Ex9w%A7La8AGe2KAAjNZL:3:U7f180oP8hdAJ%53OffnGzN33Acsn9k:JXPSyx3:yLMaU8MDEoO5zw6rsSsK36k3ByuiBwOrm678d5Y%:aONxv9Phkr9m4PG:J9%MwBreX8FA3WjCnNygwyzcAsXv24nG5dsuyArc6Mld3LDL2tx%zXzdSs8%3hHRG9:N0g:gfNQU4R3WJOKt1zrjKtlR5JbaY%Xv22zmN91p53HeWuig3z3px%AT6ubh3uoB457rF%RV7CnlBu045rHtROdZ7k3oAu9T6azvVupa8FjrDvFZ7MjxXO2K8mLuVPNs7yj0efAF9Yjx6:WV8tf2nfPI95z0vPiO9a75cvac%kb3hPsJ%GT8vvg5:WX5A:7:%cH%jfpy:xH7EwCI%6IA9PseAVP8gwGo:NEB8:wGAjf9IQJ2:SACs:0EAvH9ywEw:nUBcv4EAbf%eQD9:tj:Rf8i:4z:Wf7P:3:9DwCU:EsAmvuDAJP6uQCC%e8AafglAUr3WgEn9o0BBPW8AeLz5gHG8g0CtfEyArPwWwLF74wC8O7IAjfuFAOc7XUDIu3wA8vsiQSa7EMFjuwiBqTsIwfY7EMIIe18CXjtxgrT7RwMK%54DXvu2g6%7kIQ8e6yERXvKxMp77AUL%9BFivv3Rch74EZFu8qGw3v0xwI73UeCe8MIBPvlCEp7wgjUO9pJI:vtCXr7%kmafAFKArxBynN8eopr:KsKqvzTSu89M0r2:UrLAT3aSwx%IosW:mLLH36byyR%zUskvzcK3n9ZStD:s8q6v4ZKmr:RCnA:04o6v84J%f:BCa7:7QkZ:9LI:H%ziFa:kMgqf2uHuP8FR0N:H0bMPvtGVj6aRiP%fYW4PiXFVb4TRT29xwTxvcCEsb3AhH29xsQVfhOD%D4mg6V%fwNcfpyDXH7%AyQ:IkMy:0kDB::xwuHAHILAQImC4oD5AoeBa8KugaIClsIcQr%CWkKngt0CjgNkQrJDsEKTxAEC8gRWgs0E8ILkxQ6DOYVwwwwF1wNchgDDq0ZuA7jGnkPEhxFEDsdGRFdHvQReR:UEo0gthOaIZkUoyJ9FacjXxapJD4XqyUZGK0m7RiwJ7oZtyh:GsApOxvOKuwb3iuTHPAsLB0BLrcdDi8yHhMwmx4NMfEe%TE0H9QyYx%dM34fUTSHH%40fh9xNWQf2DU8Hx42Bh9CNsMeQzZ0HiA2GB7XNa8daDU2HdE0rhwSNBkcKjN3GxsyzBroMBoalC9kGSQuqxicLO8XACsvF1UpaRaeJ58V4SXRFCEkAxRjIjoTrCB9EgAfzxFkHTgR2xu7EGoaWRATGRMQ1hflD7AWzA%fFcAPmhS6D50Tsw%gEqYPnhGOD5EQag91DzcPRg71DgENow6jC0AOLArKDZsIQA31BqIMPAXwC3UDKwunAVIK1:9nCQj%aAhB:FQHhfopBtr45wRE948DxvUhAmL0nwAZ8wv:6:Fm:dfwtPva7:f58%4y%CHuafZg7aH0r%ze8grsIvFw63Hv3erM7U7qN%zC6bPqNulC6aro5Occ6JvmjOdl5fvmReRq5jvj2%VJ4k:lc%HI5L3gR%Qo4M3jud9c43Hf9uJR357iWt9Y4o:fKOLv3xLifOAZ4jXhP%Ib4oXiLOPr4mfkcePL5RbkV%fa5Anpu%Xc6rjmy%zO58:u%%jg8Dvq%vKO6xf18Owy92LuSvnj71v7cfFj:QzzYf%09FMBZPY7Axz4GAXW%eoGkPuyCEb9awrz:hIMlgCiDSsCGA%uA3AQHQWnEXYGuxK2B6gT2AhrFNsJAhW8CmsVdwumFQwMthV7DJ4VwwxkFecMCxXpDJcUzQwJFJcMYhNLDKMS7wvLEYYL3RATC9gPlgq8DhIKjA2DCUkM6wj1CkgIkwmZBycI3wayBhoGNwVJBbcDbAQzAoADrACFAiL:dgGW:VMACPwa:3n6yf3p%F:8V:fb%sP1PPkt9IL3lvKs9f:wuvNq763x2O2F703sQ%3L6uvqU%l:6OfnA%aI5n7jNuX04PLja9684uvbmOF52YrgHdeW393Uxd7B0h3ez9Ck3QvPX917zU:dHsx23ffK0t0DymDeQckd367IA%BGyA7hCMg24u7Hd%P3x83kHsg05l:Ipue4yCHpJsmg6qfJHuw6ypbt4MoD75rLZPBozLLxS83s8kXOC:RTzwr1d9Dm9a3Rmfb10iL3S9SD963VvPcY19D3h9jD9:fZlvdi20z3xdzl9hveZfZi38z1luAf9bXhYfS%4pfzr%PD8ojk6vFH5RDx7%U68IHmae8B56Hucefg7dXnJ%0y6HXsiujJ6%LoJOs76YbqmOnw6fnpY%lf6t:oy%pk6Dvr8uex64rnLewu56:s3eY47ZvmyO1n5l7uQeb67inmme8f5jzwIebh8DLmifFQ5jTye%bi8rXmlPP85kr0UecH9bPny:Uj6Jr2oOh29yrpYPi:6Vr5Xupm%gXrg:u067P8bez1:S7tS::57bUAy%4yAqPvwgN%8GQFWPEYBzDy3AgD864K0POMDJX0cw5Q9V8Q:PVOEpj2PhQi9ywWmfcVGAD4%RlY%NUbpfinHer4bh8o%SchYPnSIpH5biS9%f0l5Pl%JwX68ygh%lsqOvq3K0:6CS1k%lEuefqQL5L6yTCz%vwx3:oqMxn7VDRk%3k1wvuYNjP8sje5:MU4U:3SOQH%2DrB:tY7kP:KPG0Asz1TAY0%PwJVPzADCUAkBKZAGQUnQQ4Gi0EDB9BB9gf0QecI90HRCdpBsgqeQYYLQ0FJDMtA%Qw6QJQNkj8bDtc%kQ4NPvgONz1VD1o8rA91OwAQizpVEJw5rRCmOAkRqzdqEao2zRGkNTASmTSNEooz4hJ5MioTZjFjE1EwjBM8L6MTJy6pExQtmxMFLHgT:So%E:8p7BIMKX8SJCj4EUgnVRF1JpQQqCWxD9wkrA4OJIENOiMxDFsivApuISYJbiBzB1YfqAUhHssDyRzfAUob6v%iGfD9zRf3%84VA:qkExz4UhFE9t0OgvRJDNrynAlP8d4G5e8UBJ7uRQF77Xn%fey1%6LrAPnq6l:2VerX8%PpbvGV6SfvbekF7WzpC%uP6Tnp2OmQ50PqE%bP6sHkeeua40Dsn%Ii7czhHO4e4S3vk%BR8CXghfHR38nyk98Y9Gjfb:VN38z2P98p%DzfhPlB39j6Td8j:F:fZP1235v%lN:G:7jf5gDk3:oBGeABA1jg%wOj4OgE%%DJBWHhnQbX4WYHXeIjCPTi1Aib43oJU%QVChnlpgrt5S8Lz%axC7vnKwyx6J4MrukIDbHqag2168UNuewZDrrtaQ617rUOpu:8Do7wPQ9p8XcPNvKoD:byzw%l8%sPRPT9D8:0AxBG9fwPpvXoD%:1xA8h9pEPO:ZODz72:Q4q9p8OAfY3DsL1yQ1v9VkNCfXsDJP0hQwO9CgMffPWC%Lyjws:8lILlfEcC%bw6goy8LoKeu%KCsDuWwoF7iwKTe0ACpns1wnq67IJQ%uTCaLqeQkH6mQJcOlUCd7oRwlQ6D4Jxec8CUHnQgnD5lUJUOZ6CeblswmI5QYKNOV0CunkAQuk5KwLY%R4DCXkZA3p424OsOOUD33j0hBR4yUSL%OJExzj:BQa43wWLOMGGFbjmRmb4y8b:ePGHILkWR4q5eYf%uVqIfPm4SIT6EkkWumcJcTq1CZM7Osn7u3dKKLvpSlh8UMqI:O2Kt:0ASuM9iUrIvgiK5n5%yrr%rAqEvxDKg39tSnX:Qkpcf5BKNr%XScU:18mIv9IJQj:GiTL:tYicv59IQT%DyCH:YweA:3yHH78QRv%%30ZiPunFyD7xhXM%uATjPr7EWT6HhBW%kwOY:qJDIv61wrQ%jgJMfuvB677PAZF:OAE9fyfA7z9eQKX:nEBhP%IAIEAvv%LARL:ngKB:rYDB:7QBKD96gVH:QIH%vwWCLf8KAl8:DcKS:xFCyH8UAz%%1kN4ftfDsv7Yg%7%2AQs:tbEbP7UhK5%0UTxvs1FNj7JBXu%xMWCvwEFyv8%hdV:PQYiPz2GcX8:hoL:Q4cWf0jHbD9Px4P:l8feP6EIOv%sCFo:%Ii7f8bJHcAXSUEAaUmkAH0JxgCRSmdApQqHAPeK5cDHC0KBEwudQRpL9QEcTAlBWExZgU4MpMF8jKrBY8zrwULNJ4FZjR7BZ40SQWyNA4FozTNBHI0iQQhNEcErzMGBCAzxgN0MogDrTFLA88wDgPcL9MC1y6ZAsQtYQKkLCsCeyv5AUsqyQEVKZ4B2id1AZsmUAFYJS4BEiQPAcki9AB9Id4AMCDPAOAeywCOHdIAOBznANwaCgF3GTgBCBhxAY0WsAEFFfQBcBM4AtAReAInELECdw7fAsAM:gIFCwsDRwkFA4sH6gLTBbgCJARtAoQCBgL3AIEBgv:dACn%GwDt:Dv:zvtB:s36Lf3n%QL8GvnC%mH4bfm59wX4HPeN9oT2CfXu9XzzU:Xs8bL0WvAJ9MvuVvNB7ZnyvevU8ULqBfHR6C7wa%dP7xPmau7K5ILtkeOa7Grit%tW4d3qVeAR6mjfV%mO3q:ox90d6BLdoedx3Dzn5dvu5nPbt%Yg25bm89qN5u:am%YY28DmcNv85vjbUeeu3L7nkt1D6KPe4eje35npQ%Fq6s:iVuuE5F:sYOaD7WToxO6O6iDw2uyV8UXvIPPG8b70V:Rs9vD2KPiJ%e75Hfy7%6b%i:0hAVn:igMfAd4F2QIbCIEEPQoUBkEMjAckDugI4w8lCn0RQQvtEj0MMxQXDU4V0Q0%FmoOBBfjDqEXPQ8VGHoPYxiaD4sYoQ%SGJAPeRhsD0cYNw::F:UOpxeqDj8XWQ7KFgQORxasDbUVUg0VFfYMZBSXDKMTMgzSEscL7xFSC:oQ0wr0D0YK2w6rCbEN:Qh1DDkIKQtcB88JYQZnCEYF9AYJBHkFqQL4AygBdAKF::IAwv1x:9:79f3d%Xv8vvcF%4L1k:ks8yX4v:C%9j:uYvWx6xb0GOnd8nvmu:Hf47TwSOHL77veA%883GDuz9nl7XjXle051XTtF9OG7RLRzu0uz0:ubM0L78vLA:BLyjTx7cic8rDHN:SUxv31mcXp98HE8PkNxAv8fMMy:g7DWwDCwoMCmcKiBJHCtgarwroI5sKqCkLDgAy:wzcOXMTHDxbFKxHtxV8S28ZfE9zHLBTqyMUUAsotFRzLYxU0zGkVRM1DFUjO8RQ8z3kUHdDfE%nQKBOg0VcSQ9JxEdPSdhBT02kPx9NMDjDUIg2Q1OwL69SuCkPVawmZ1ScI8tXkBk3WpQWr1mwEDtc5A3PXDALa1%MAQdi%:6fYm:4K2Xj9aNlW:L:ZN:sO2h76VNoM%ZDaBfjC2gz36toi9gvbSfUl24T0OtvU803bO:Ni27vyfNtW8qDbD:LV2%bxHtze8YDc9fH%3Czym92B8lfe8PI233bzN%AP9Fzht:Sl4mr1EeQl9p3l5fZI56j3Delp%OnqJ:nY7N752O6L%uXwKvv88rn7GfUz:Dj3l:xW%eH8cPsS:YP9Kv2N:yn9iwES:X0D5:xgBaj8MwdX:PgI9:uvCon7WQwT%:kNmvqSDyP6JxGy%bsSS:lSFO747hWd%I8XWPg3GR:45hr195sc2fdXHs33GSDT9%Eh6feuIw:4fSVE%Ewnh:gXKdj43Co1%ZYsn:lCLhb63i%Z%mcxKPvbMsH7NTRj:HQ1Cf2SNq:9jTdS:mM47P4ROXv:lzn8::M5bwAmOtUALzowARE6gQHKOcoBXjkLAs84RgIfOHoCUDeoAmY20AJlNfQCUDQUAyszMAP6MUsDwTBkA4MvgANCLp4DAi2:A8Qr5QOMKgwEWyk0BDYoWAQfJ3UEGCaIBCUljQRFJH8EeSNcBL8iIAQWIskDeyFUA%sgwAJiIAoC3R8zAVYfNwDIHhb:LR7Q:YEdYvy9HM363BsQ%dkaK:ewGSD1XRjt8t4WlvAvFR:uURON60QR5%gMDzbmqwyE4yoK1%CQBzne5ASv2y8CP9l4:%7WyPzA1CX6udKW99zQI:Urz9Hyqc2k8FbMn%40y8PsQ8oQ64DJhenqyCDofsjf5jjIweUWyMTkFsjk4zbIION5yHTi3sjf4WXJX%EOyvLg18qY4L3LUuC:zB7g2s393w7P8d9a0PrfvNEa4DTTU%DA1KbgXNYU4QbYneG72ULidtsD4zbd4eP33tzktuD15XLiLOcp5H3o2%Xm6YjnZOsv6fPs0%qR7nPsOvAN7uvxou%h8y7xWPWv8gv3IvS5%IT1W:rT9u:7Dvhy:TX53:5J%jQASfttATf8iQIR:YUD2f1gBI:%GwU2:7gF0P82BmIAmQbwAOIGewETBwMCLAeIAi4HBQMaB3gD8QbcA7IGMgRgBnoE%gW0BIIF4gT6BAYFZAQgBcIDLwUVAzIFXwIoBaIBEgXgAO8EGwDCBFX:jgSQ:lYEzf0fBAv97QNL:MIDivugA8f6hQMC%m8DOvldA2z4TAOZ9zwDwPYuA971IgP09BwDAPQeAwHzKQP58T8D5:BgA8zvjQOq7sgDhO0SBFzsbQQ169wEE%phBfnoAAbp57wG6OaYB:jllwgf5bwJYeQIC8XjegxR4xEOCePKD:PiohES45QTZ%ObFfPjsBe25M8ZsOXyG97mEh496Csgyek2InvrMCRM7RMmNu:bJy7xhSks8w8rKPV2LBn3uC33%NEuu:q:L138fDDY:QYxJ:9bMUkAeTE%AWUxBgIgMaYCsTAgAx4wfANqL7wDmS7oA7AtBASwLBYEnCsmBHcqOAREKVMECCh8BMQmtgR%JQIFOCRhBfMi0gWxIVQGcyDmBjkfhQcDHjII0RzrCKcbrwmGGnwKdBlUC3QYNQyMFyANvRYWDgkWFg9vFSEQ8BQ2EYcUVBI1FHwT%BOtFM8T5xW8EysXvxN2GNkTxxkKFB0bUhR2HK8U0R0fFS4fnhWMICYW6yG0FkkjQxemJM8X:yVWGFEn2BibKFYZ3CnQGRUrSBpELL4aay0yG4oupRuhLxQcsTCAHLox6Ry7Mk4dtTOyHag0Fh6SNXwedDblHk43Ux8eOMYf5DhAIKE5wiBUOkwh:DrgIZo7fSItPCMjszzQIys9gCSUPS4l7D3WJTE%cSZiPv0mfj53J4U%3Sd2Pi8oUj5vKBg%nCjIPbYoYj26KOU8qShSPH4oqzs7KPA63ickOmknSDniJl84SyZqN6wlajYIJV81YyRLNL8jLjMcIwgydyLaMNEhoy8oIWIufCAVLc4fvCsgH1QqdB7aKModTSckHaslgRz1I%IbKCJHG0ggsRpUHiEaUByWGT4aEhkhGJUY:hUgGNcTtBewEVAXjw:2FncNpBZuC1gWeQkOFpwHwxXaBXAVNwQQFbMCoRRQAR4UDwCIE%7%4BLt:SUSCf1bET:8gBCL%5UP6fqZDlT6jA3H%W0MPPk8C634%wkX%KsIdfdNB8P24wUA9m0EKfXrAkD0XgFF88f:O:Io:iXxhPwH8N365u44%cXtlfen7Pn1j%ti9H:q1PJ56U7xgOjT75XnZe665gbt8uW66z7lgeqd5F7pEORR6JfjWecy43fm4eKo5abi7%SA4kvkcuK:437iUeOl4gXj6uLi4lDj7OLZ4yfjhuSV41rlNORT5gXldOcC5rroK%co6nrouuvv6W7tiOtC70LtL:Ec7zDzFPE%9SjzVvdS9XH5j:eM%9j5ov0k:K::bP6vAaUAnAPIAnAFzAQoB6wGvwhiCDIK7gmBC08LqgyFDK4NkQ2LDnQOQw8vD9cPwg9IEC0QmRByEMsQkhDiEI8Q3RBtEMIQLRCQENIPTBBeD:gP0w6WDzIOKg9%DbQOuQw1DucLrQ0ICxoNHwp7DCwJzQsvCA8LJQc9Cg4GVgnlBFYIqAM8B1YCBwbrALcEZv9MA8X9xgEH:CUALfps:jX4m:wi9rX69PO6%K7xrvZV75L07exo8nzqM:AG6PPtkOWr6x7jXemz4AvnUt605P:bXOK72QLgjdeo3XnVT9uH0:jYvdGl1iLQV9S7zg:Sjc3Rz5rMn83ly3zLbctsyTTLdMc4y5nFesvgw:jLTcKxzOXApc2qv9HOn74z0Mi9yNEnvYrTv7x11ZG8gtedvKjZ5Lze22K9Hd4Vvlvg%b6R4grAu%RDwdTmoMLY6BzExuqxxZnsWcdN7hDJ3u:Oykfxj8yE8kzOkfMC0G70rNEa9UXTlfXL1OL1PNYC9pfX%PXe2MX1Etpu9TXb9:RK3GT0VN2681Xe:PJP3y7yQeBT8SzhbfAN4nzv4%KB7qzjfu1m5HTsEOVm66flWOor5k7pmuZM6PPmU%c152bmYOeF5XXnr%R15%HjYucd4z7nYuIL57LhzuYQ4YrmgOBE5gXgAOai38TlWd%W5Szfe%Ud33jlLN%T5Vvf0OWt3zTmJODD5sDgfeeD4WLobOJx6XfjqOqj5ATs6eWB7UTnHe%v6NPwJeqh8p:rgPQZ7W32jO5j%PPvXfpJ8Vj8iPJS:q7zSQC39DwCoPUrBGn2FQYP9:oHkvfYCfH3sQss%IMNRPhNDz34EBEa%MwS4veCFJv3MRZI990X7:aIGZP2Mxs59uAc5PWPHpr1QSBg9fMhOvWmIyz1WCU69QgnZvW1KLD1WyoW9vsrmPaRLTL3HS:g95wwn:gPMmv5czNA%sg0G:sNNvf7QDfS:F84qf1qOXn%XTpB:zc7:::3O7UAmTxjARo9CgJ5PawCsT1HA8E93AOoPWgEZz3pBP48XQVtPMIFtzsYBt06YQbiOaAGxzjWBpE3CQdCNjsH3jRvB2ozqAfrMeUHZTAoCN0ubwhYLbkI2isGCWgqVQkGKaYJtif4CX0mTApdJaAKWST0CnIjRAuoIo8L%iHSC2QhCQziIDAMbiBDDAEgPQyUHxwMIh:dC6QefgsUHv4Kax1cCqYclgm:G6sIshqaB3sZYgYZGAMFihaBA8sU3gHeEh8AxRBG:oIOV:waDFH6kgk4%PEGDfY%BNTzfwGR8bz%Te:6%w7tP:nc6pD2v%jv87zmYPHY5OPuFeN47HbhH%r639bno96a5XHda%Nm3Efhgtst38jaHd042hfb0dke2ZHZM9dz2VvVdNmZ05DZ8NHE2WbQEdr:znbavs312qjMjtvBy0PcCssU3YjKAd47ygvfJ8ow4EvKc%GnytTiPMtU5AXM8eUBzaznLM6B6YLPb%v%0HDtm9KA71bUmfEp1rXzENjN9Qba3PcG3Nz5Ct7L%xHgpP0V4mX:FuQMAQ:mmAL:5wgE5OlcBbnrkwZ87awHKu%kCL3wewk08i4Ki:O:CsD0LgvQ9YELuva6C3:34Asg%PULnvj%C:v4:gs7%fcLXfnsC2b54wtU%d8LKvniC%j47QuP%AEMIPgaDJ73NQwK900MZvZfDLX1Zwz59GMMNPRSDGnzMwyb8gYMzPHMC:7whAsz8C8LbO:KCqjuVQrp7c8JLO04CW:skwiw6%QH6%oyBx3qggZE6dsFXehABWbnsgRe5jEEReW9AxnkVAPb4vcCi%GmAivgYgK83i0CQd0JAsDb%QE82v8BvNgdAkfXVgLk1asCm9QdA3HTrQNv0lsEnNEoBf7QFwab0CgHe9BcCKHQtAkS0TELztHPDNbSjQ4l1GcQttVXEoLXWBR%2WQWottzGOLdgBo34IUcluJ9HvfkZCBU5zMipennI%PreiUL7ucmGPAqKAfyPynX8yYqhvXgKhP3ayuB%Mkr0fn5KwT7%Csd:MYrIP1hKxD%zCrv:gkqwf8dKYkAEChHAecmAAKoJbMCWiRiAwAjDQSfIbQEOiBVBdQe8AVvHYIGDhwMB7UajQdmGQUIJRh3CPMW5QjQFVEJuhTACa4TNAqoErEKphE8C6gQ1guvD4QMvw5FDd0NHA4ODQkPUwwMELALJBElC1ASswqRE1gK4xQVCkUW5wm1F84JMRnJCbga1wlJHPYJ4h0kCoMfYQorIagK2SL2CookRgs9JpEL7yfRC50pAgxHKx8M6SwmDIMuFwwUMPMLmzG:CxkzfQuMNDIL8zXhCk83jgqdODoK2znmCQY7lAkcPEMJGj33CP49tAjIPnwIdz9UCA1APQiJQDkI7UBJCDlBbAhwQaMIj0HxCJlBVQmNQdAJakFhCjJBAgvnQK8LiUBgDBtADw2fP7QNGD9ODoc%2A7wPVIPVT28D7c8FxAaPGMQfTuhEOQ6zxBMOuwQtjn1EB456RCCOMgQ3TeRECw3ShBqNvUPkzWXD6I0Mw%SM8wOXzJgDgYx7w2DL3kN1S39DPorfgzyKfwLvyd6C2Ql%ArlIncKSCD3CZUdeAnVGvgIEBh5CFAV%geeEnwHABAAB38NhwYhCxQG7AioBeQGRwUPBfUEbgOyBAICgQTKAF8Exf9KBO3%PgRA:jUEtv0pBEn9FQT0:PMDr:y:A3b8eANE:B0DE:ywAuH7MQKr%6IBbvsCASf7TwDU%oj:c:qu:gP6v:2D%b388viq%1H4iPqj91f56PYX%CL2yvZW9W71hPQH9K7zlvLV8iHx%:Gr7yHxOO5J8M3sc%9t66PuGura7dfoHO2m52vsiObJ637lOuuL5L:qsONc6vDiFOpM4urpxuHi6V:h:%kX4ULq7OCu6t3gRevr4AfsFeH37GLhE%7U4VzvcuLQ8D:jbPI:5C30cuUQ9tnmD:hx6CX6OOpN:Crsf:5F7rcAg:DuAuHyIQVX9UoH4vdoCX36dwsi:XUNzP9dD3QCLxETBeYSnweBFBEK:hVgDF0Xhg6eGH0QwxlDEs0a2RO%Gz8VmRx5Fl8diRcUHnIYuB44GUwf2xnQH14aQyDCGqEgCxvqIDobHCFVGzQhXxsyIVkbFSFGG9wgJRuIIPQaFiCyGogfXhrcHvkZEx6HGS4dChkuHIIYFRvxF%UZUxehGKYWShfmFeMVDhVuFBsU7hILE2IR3hHOD5IQMQ4qD44Mpw3jCgsMMglYCncHkQizBbsG4wPbBAMC9AITAA8BD:4x::b7Y:3E%ar7ePcJ%hD1hPiL8hr36e:N9SztnvRV6o7zaeeh8mvk3fFh4UbxUt7h8EXbr:BC2LPwUdXt8HzSX:HLzwfyRc3m8vDK%:PUyEP19sa79lzFYfgKxDH6BsMn:FDCP:7qwXYA0sHGAgbCKwWAwpwHPMMQCjTEfgxhxd0OvsYhEULIRRPnyUEVpssSF3fNthhWzy0aPNF3GyXTlBwN1YMd7dZDHsPY0h6I2jAfOtxcH9bdWB9Z3ycfw%DKHhPiQx5I45IdY%S5HGHluBtB5pIaAedKGZ:n5BcY6GcWaujYFJToPBOX6JYRcujpDyjoOA6654IMK%fKCn7mEQm45VgH3%SiBffj8gMJ40wCGeKzADDhK:9S4Lf9ht9a:NHeFPs33un5vt3a%Grd7fdA3ST3RN2D9nfdDfbc3cH1cd6g9TXfqPUl4NX1PeEm9njimPbQ4yn3QeXU98XmlvhY6Gn5%OlJ%qPrMPtW7Rn8Ee:9:NPw1:2Z8qL%ZfRX:zX28P8K%GkA5Pm%AMb77QCv:fkAoP:iAJgBrQCWA10AmgX5:6EHgf%sCfn%uQtj:scNwf3VDxP95BFe:PMTpvsCFu:6Ehg:%iIamvk0HAL5Rx55%FkgAPhrIpX3eSQ894Mm9faIKMT2hSqt9nsssfZnLtL2SDAP9x4yZfflM9D3nTVM%EU31PjaOGX5Wzr7%cc7k:odPSj7WT63%3s:Pvx:QLf8Y0Eh:SZCev3DQsH9OUP4:YZDIP6nQzz%nUNR:mVDYP7:Qmv%a0Jz:qhBdf62QHH%lz9k:kw%Tv7YPDD%QDsM:oo55P27N7z92zWW:fAzdf0CMlr9FTBG:TEuOf1aLDL9lSox:eUoM:1QJzb91iU3:XskMv1AIyT9IiIL:R8h5PwyIK38Vx9i:IYeAfy6HYX77Bzq%hYcK:ozG0b5QBo5%DcZAvcXGKP13RYd9IoVc:IfFKjwnRK87gQRsexWD4nqkg1F6LoL6uXOCXrj0Af94MEFd96jA%vbeAFc2UL:y9YA:TnUtPqk0V34D8:89XzMkPPwyRvxb8ee7gDFGeyowo:pbMAB50%%ceRVvOThgbpd39W449xTt3va:rUu2Ni0Atbks:7TIbMo0pCyhdAxshrPA7LpzQSy88w0sjzMkbLDyx2zicvZs47LyLTSy%y1U8xFtxDN1bgFzpi6L8%MvIrQrb4Q0vnAvdNsw4rVAcZz17XIc9mDy4TbZc6k3VbRzt9O1P7hRdcw5DTaYOYV3Yno4N%p6o7ivOwb5b:uguey8MHpkfLV61z0v%0Q9oPvqvci8Sj5ofKG%gP0xPtK9d:8ePbX:Yz3rP6F%F7:ZPnv:yj6XwDT%rMAZ:vrAOn7DQFd:BoBxPwVASH9:gB2:dYAxv2dABH%UgBc:vb:qf6J::v%DP9S:4H%rv:p:Q0ARP1sAJX8xADb%xMBGftTAU76gwF7%Z8BovinAcD3mgHV9noB3vVGAdn0AQHC86wAl:JJAFPx2P:271z:fO7Y:ubsUf4z68z9YulN:XTn2vxp5Xj8Q%Mp:ATh7vuw3sj7TNy4%%DZv:t11977FdUX:MvSbPyi0OH8o853:dfMLv5Gywn:98kHAPDIKAE1yGoCyMfNA6zHTgXhx%wGZciiCDbJbwpQyk4MrMs8DkPNNhAPzzUSB9E1FCLTMBZZ1SEYpdcDGgDazxtj3IIdyt4ZHzLhkCCW4%Yh9eUYI0roJCST6gglzuzBJfbuTyYI8bEmAPPoJtr0%CaW9uQmMfiwJqv5YSYE%:glPPx2JVP93CRL:igkJf9cI%P:eSKJAIAhGQF2IJcBXB8FAjYeZgIGHbwC0RsKA5caUwNfGZkDKhjhA:0WLgTcFYQEzBToBNATXQXqEuYFHhKGBmsRPgfSEBAIUhD8COgPAwqSDyQLUA9gDCIPtA0JDx8PCQ%hECQPNxJcD94Tsw%TFSgQUxe6EBsZZhHqGikSvRz:EpQe5BNsINMURSLHFRwkuRbtJaUXtyeEGHQpVBkjKxIawCy5GksuShvBL8EbIjEdHG8yXBymM30cxzSCHNI1ahzFNjocnjf2G104pBv%OEkbgTnqGuI5jRohOjMaPTrfGTU6kxkNOlIZxjkdGWU59xjvOOIYZzjhGNE39RgvNx8ZhDZdGdA1sBkVNRYaVzSNGpgzFRvcMqsbJzJMHHsx9BzZMJ8dQjBHHrcv5x43L3wfwS4CIFUudiDvLdcgjC0lISctXyG3LIUhNyyZIZ4rmCHlKoEhBypSIQApCSHLJ6YgZiYoINAkkx8KI%oeEyEzHuwech2YHK0cGRrmG3MXHhuqFFYaxRGPGcsOyBjECwUYughGF7UFjha%At0V3f83FRn9mxR5%goUA:iFE7v1DBOm86ESyPFCEiHw8BGx7qkReO1tEXLsOhGa6w0R6urlEFzqvxDr6ZgQkOlqEEfpMhAK6ekP1%iLD6noEw996IAOT%jPDR3oAw3i5x4MnOclC0nnGQrm5v4IcebVB%rlnwZO5VwFoOQMBN7jrwIN40UBLeLO:0PhTf5S4MP8XN8x%2Temflt3fz3e9xd9pHbv:S02iTz6NmP8TPZA:CY2IDuG9gK7b:XoeuH10XqdNf56IvXvufM15jmOtiJ5dfYmOSk2cnjodoi487bpuIp3VjisN444mLgR%I84oPiOuTr4lfmgeOR6EXk4eo75UPtZOaw78TnIfJb6ZH0J%v69ibtV:lS76b7pPHj:RX0DgCe9iYCN:krBNn7GgZ8:vQHFwG4CaIDZAsYBvgMcgh0DqsK1g:BDB4RsA5MEnYQYBMREloUfxM5Fb4U:xXNFakWrhY5F2QXrRfyFwMYXBg7GKUYUxjPGEsY3BghGMwY2BeeGHEXUxjsFuoXTRZlF5YVxRbLFA4W7hNAFQETXRQHEmUTARFZEvIPOBHcDgIQvw22Dp0MVA13C98LTQpVCh8JuQjrBwsHsgZKBXIFdgMtBI8B4QKT:48BhP02AGP71f4x%Wn97:bx%6H0aPpI8sv45u8X933tSPUQ61zzpOhR8T7mJ%:k49zsnOFs6m:f2%dh3SvleNti4rjZhd8m2Jzcxdas2ZjVv9aj1N7T6dMS0W7TZc4009:LPNOJyYfTa8cR1I3F2dTzw9vVpsIT16nBftgBwRjar8Dc27TAx90NwdHft8H34a7CMeTpw3nmZMXK6BbHHev4yG3tA8ux7zDN4:F4z:vz09Hw9TrUvfem1l:5ENnS%nLbGPzE3TL9AOAh:iHi6P4g5If:%OX%:6XnTQAk6XIAcupuAI:rQAB77Or:Nu1r:8Ltx:4g7v79Tu4T:VHuCfwp7uL62e2j%WftTvjX7On2Lux59XHrAfSm6ofy0%kO8fzomO8o6CruXufE7KLmbOv65STqauXy6Pbk3Oeh5ObmbOQV5ljkbeVm5PDkluSe5OnkeORd5X7k9OWv5KvmDeWE55blf%hK5pnpJufR6iboJexG6ZPtfuoY78jrs:Ac7WLydu4j9NDv9:Un8dr3ePLK%cHzxfv:9Mj9LvbQ:0v33AFS%OoDQfn8BRP6EAjJ%iYKYfs:DN37Ww4::HgQiPyYErz8uBTe:NkW9fz4GAX9FhsS:TAdIf1FHzL9VCFF:V0jWP1fJWr9Wyd5:VAphf09K479JC2Y:QMvo:3aMLT9qTLL:W006:0pNhT%2zdJ:oY5i:4qO93%xzxB:14%uP:uP0IAdEHgAO5CkAFaRE8Ct0UaAwNH7QM9SMMEYkmYBXBKagZkSzUHO0z2B:BMqwh:TVEJ5U3mCR1OZwojTtQK9U0sC45NcgvsTKgLEEzUC:lK%QupSRsMI0g9DG1GYQyMRIgMh0KyDGhA4Aw3PhMN:jtODcc5lA2YN%YNejVGDnIztg6EMTMPtS%8DwYuThB8LOQQFit9EdcpExK8KKMSwycrE%gmphMnJhEUeSVnFNkkphRCJMkUrSPPFBUjtRR1InkUxiEZFAYhkxMwIOYSQx8REjoeFREUHfQPzhuzDmQaVg3UGOILHRdaCj8VwAg6ExgHDhFiBbwOoQNGDNkBrwkLAPsGO:4uBGr8TQGW%lv%vfhc%932U:jx9Ef1%PI98vDwPO:c7kvsv%xu6Z7qqOaA6P7jbuZz4W7kDN%G4s3cvuC62hjf2dia3SzXSNy31SXbfNQ42n:ThdnE0hDZS9Lb2BXS6tgi0jvZb9LO2fvSo9rC07nbwtQO3ffVot5c13Tg7diA4qXaweR%3DHnc97J6X7ggeyb4lDvw%Qv8vTmFvUp6f:3X%vk%pPtwf2:75AA4PFNA:Lz8wXw9X0I2ffmCqz5KQ1n%0EPCv0sEZP%5hIBAG8UUQHFFYMC6xaVA%MXhgSvGFQFVRn:BdgZhgY9GuwGhRoxB7IaVgfDGlwHuBpEB5EaDwdOGsMG8hljBn8Z6AX4GFcFYhiyBL8X%wMRFzMDXBZbAqIVdQHmFIQAKxSK:3UTif7GEoD9HxJx:H4RWvviEDv6RxAW%agP6vcCD7j2Tw589Y0NN:S6DOby1wuF8eQKEfDkCYfu2Qjj7MQHIuuoBkPphQVE518EJ%U6A%ziGwKW4AkBKN4LAKnbKP8d2Wf%jdbN:QHUXf2D0Rv9Hc8G:drMHv3EymH95sjQ:UvHaf75xSv:%sQVAFHEJQEDxFcCEcSrA33EGgVGxaMGacY:COTH6AmwyZoLyMtNDSPO:Q650KIQgdM5EnPWvBOG2SoVsNx:Fuvfuxct49oYbubdGafpwRrP7IUb3%8qHNDysRyd9R0dP:hxHbT6sB33:N0dB::4HeEAAR6FAvcd9APaHTAFqR07BmYdGQcRHcwHrRxYCDkcwgizGwwJGRs7CWYaVAmXGVwJqBhYCZYXTQlkFkAJFBU0Ca4TLQk3EiwJtxA1CTIPSgmuDW0JMQyiCcEK7AllCU0KIgjJCv0GYgv8BRkMIQXvDHAE5Q3nA:sOhAMwEEIDgxEeA:QSEQN:FBkDIhYzA9sXXAOjGZcDeBviA1YdPwQ3H6sEGSEjBfgiogXTJCAGpiaZBnAoBgcvKmMH4iusB4Yt3wcaL:kHmjD4BwQy2wdVM6IHizRMB6M12wadNk8GdzesBTA48QTGOCAENzk5A4M5QAKoOTYBpTkiAHw5Cv8sOfT9tzjm:B845ftmN:T6kTYX%qM1TfmiNJn4kjP893kyefdbMRT3OzDP9h4vrPYFLqv29izL9vErDPf8Kmz3Fyrt90UpjviGKE352icn%j4nG:uyJiP8MyY7:cIlW:5ZJXv:9iSRAJQklQEtJIECuiNNAzYj9wOYIn0E2iHcBPYgEQXlHx0FpR79BDEdsgSHGz0EqhmiA5sX5QJcFQsC8RIZAWEQFwCvDQ3:5AoC:gkI::woBQn8SQIk%3r:UvrE:Jb5MPry%MX3Z:iL9fr3h:Ot97vxfvct8Gv33u5x98ztiff17K33V%zZ9%:rCPi16zj4pOtl%Lfrj:jm67b4KezX%Hrs8fjR7AX5Ju0S%XXtF:m87RD59e35%Bvu0Pgt7pD4Ke46%Avu0PfT7VD3f%299g:tHvaC7HX13OvE9CDrDfRP6lDza%mM8n3ovvGK5%jwlOYJ8J:lIO%v5C7uxuM17efiNOwW4irrWOEZ6q3gA%kZ4Orno9:O5kzfs%UW35zkAd%H4xHfe%JG33:hod%X4CTgxN:R4AvfpOFx3qDi%t3F46fdD%V%3Xrmhd0D6Lrdqukf3mjrtt497XzfJO9s4BrxhuEZ88riH:U15Cn3w%Uw%XnnL:tY6Sf9XusT:4jt8QDV78ECPPKBBLL0MAY399AHxvlhCVn84Qrp:k4McwGlDfED6Q5aBhkQqwgzEeMKORL9DCkT9Q4BFMwQwhSBEm0VDhQBFm8VehanFtkWtRcdF5cYRBdQGUwX5Rk2F1MaAxeZGrIWuxpEFrYauxWGGhgVLRpcFK8ZiRMPGaESTRiiEXIXjBCDFmMPgRUtDm4U6gxOE50LHxJKCuEQ7wiXD40HRg4nBusMvgSIC1ADIQraAbYIXABHB9P%1AU9:V8EmPvgAuD5UQES%Lj:LfYV:i30ZfwI8qz6ue:y%ELtOPem6nz14OfB8%:kDfLY4WLwnN7C7jzbN%3C18nrO9R:6q7QY%kmzYDor8nV51vGXOc0wxTnQsD95pC9Fucnu2HnDrni50m3lujftX3p2bSY6jm04uv3s1XtDbTr7nm0pPA7tXjyS7Ze9KK3VfY7uVv4Drto%g%9cvwvv3v%asGEAL3DhgIexn4EhMhoBuTKPAg5zfEJe8%FC6PR9Qy00z4OrNVcD4TXThAw2RIRqNqkEebbDxLq3GASv92aEm3euhLw3rsSQd%ZEmPfUBJg3%YRP99fEQXftxCv3uQPNt7gDpLdrA3K3E8M89vXChrbTwlH2rkHeNkQBqfYXwTX178CHtdAAY:W2v8d1nP%qNXy:BnVUft31Kb53NMZ%G3Tx:ZC07r1WNPk9JrTM:Ty05jzU9Qk88rU:vJ91Tfzhtay88nXRPQX2db0Y9pr9brbFvYr3eb2xd7a95Dg1:h54r75YeSG%jzmN:sb6OD7B%qR:A3sVP007h3%dfDa:rryhf:%9CIAUfevALf5KQEm:JIBnP7lARIBGQJ9AygC1AURAhkI2QFPCpEBgQxJAb0OAAH%ELgAPBOMAJAVmgAaGNUAyhoPAWEdHgG4H:EA0SGTAL0jHwCYJbb:gidq:4kpOf%iKxn:wS34:tovy:7eMav%4DPG:hA2KP99OKj:9DoUAD89XABNP48AIkHOANNCNwF%RNMBKkaIAsBHOQMiSc0DP0o3BAVLfARzS7sEpEsNBa1LbwWKS8YFJEsDBnFKKAZ2SUkGQkhxBuBGlAZJRZYGYENqBiBBHAacPsQF8Tt:BT45XQWfNlcFGTRXBZ4xXAU6L4cFHS31BWcrlAYFKjIHxSiiB38nzAcgJr4HtiSeB2wjmAdoIr8HtiENCE4haggdIa0IASG%CN0grgi7IKIItiCiCM4gkAjgID0IwSCWB1MgqAabH5cFsR6EBK8dfgOkHIgClhuLAXsaYwA0GfD%qxcw:d8VMvvXEwz5oBHU9ksPiPTeDB:yUgqe77AHI%0PBbrqbgJd6Lv:Aebx:JnjGvoZ4Tj3e95S9NDbePEo2bPuitYG7PfTcOl20fvmGc:B5OvM1eLYyh7hvshu34zGpt1GxMXb:cHZ2dG:B9juvYDWdLxf1Wm7odTEujfUbroE1Fe689ORuhHUPbuF1F28VdXLvWHWYb%C1xLBp9juwtTZDcUf24DHoNxCymHeRc1Z4HbQeeLF06vkJNfi5o3aHen73V3rauGl7dfk:O806Fvybeuz9H:u%vZ38TL5XPRX%y33aP3g%Wf:XfxJAYr%9AJpAGMEFgKnBaMDzgYUBeAHYAbeCIsH0QmkCMMKrwmvC48KbQweC84MUwvKDDsLdQzpCt8LdQoeC:wJTQqRCX8JOwm7CPEIBQidCEsHKgh9BqcHqAU1B%QE0wYnBGUGSgPOBTgCCAXuACAEeP80A%z9YwJh:LoB3:o8AWf54wD595wAhPZPAPH08:8285D:WPEx:1bv1P4s7XD%0ur9:Ujogf2X5QP9xeKI:NTfEvzF3KL7pNk7%3vW2:pK04P6F9A9%vDMEfrkyQX6A8cn%l3EifoOwj37McBB:NO%e:3qvcL%V731:wG9CgHovA8CHL0gA7O9UwTEvroFWsBTB3nCDgkTxdQKEMiWDFvLVg7wzhkQy9LYEdvWeRP32uEU%d4BFsni4xZr5qAX7%lUGGDtFRnD8OoZF:TSGlb3vhtx%pscWf1cHf:::R1kAoIeiwT0HnkGVh8sCKgfpwnvH:EKLyATDGkgFA2bIPQNwiCxDt4gTw:wINQP9yBFEPAgoxDWIPEQqiA3EXcggxFOIOYROSBvEjUgHxMvIOsTByC5FKEfdBX1HhQWDR6lFgkdPBcKHPAXLhvRGIAa4xn:GSMboxmGHGkZCB5VGasfaxlzIakZWCMAGkQlWBoeJ6Ua1yjmGncqLRsOLI4brC0YHFkv0hwUMbkd2zK:HqM00B9iNtogDDjTIZ05uiIZO5QjhjxgJOM9GyUuP8ElZkBRJoxBzSahQjgno0OTJ4xE4SdZRSQoB0ZVKJJGaCjxRk4oHEcEKBJHlSfeRhcnkkahJkBGOCbuRdAlkkVPJRRFnSReRLIjZUOZIi9CbSHNQE4gVj9TH989iR54PPAdKDuCHfA5PR3MOCIdwzc1Hdk2dB0NNtAdTjUwHoM0gx6eM8UepjIFH68xWR:OMNEfDjB6IHUvVyEIL2EiwC6AI4kulyRELo4l3C1fJkstDSeRLJgnqiv7J4sqLigwKTEonicGKN4lsSfyIzYn2SGgJpMf%SUmHUIlkRptJMgXZSO8FCUicRHAIP4NVh%LCgUeNgfeHBQE4BstAf8aff4mGvj7RRmN%VYYN:dkF::0hxb38s4VMPFBFbPv4RSB7qsUne2gFAntuhTA7PIUuOw7FeHsgRUk7asVYu2gFX:tVRVw7dEUO%0rFPPseROp7M8Saew1EjrsrBEe7CwRDeyfEPXr8A:A6xgPZ%scDu7qAQ1d6sgLseltCuXo8wj952UHCufQBRzmPgQ85bQCcOQ2Ab7jxv8m41j%neLW:AviM:tk4Xb5sOCz9w7g::WW32T0Vd:d8krfYvFv3%fvvN9b7ibgtOyh4PPqK%En6c3hZOeV4rfli%Ms5K:kzeIC5qfhiufH4EzpMeBF697fae3B36Tvyt:f8eXfCPQJ4BL2OOD894TgzvkC4Zj7wOFm:cjiQ:8Y5C8BqeUlA27nGgVW6f4GWOvKCG7tfQqU7xcMwfGTDerz7Q4J9iEQIPg0ETf6MhJR:CgTcv4gFJoAIxXGAi0W5gQyF%UGGxi0CNkYTgpqGbkL2Bn%DDAaHg53GhgPqhrmD8UafxC:GtwQkxr3EDsa0hC8GXYQHxnuD2sYQQ%nF3UO1xaTDQAWpQwqFbALWRSvCo4TnQnEEm8I8BEYBwURiwX0D74DtQ63AUgNiP%7C0X9Gwr:%nUIxfjTBqH2PQWc9LMDr:IqAs:wjgD27tP%I%31:FTr8vqC6cH4oOdX9qflrvOa48jwg%Gu7WrfaepZ3QXnWNuS42:ZHeCa16fczNUn2fvTmdUr0gPSaNB1zrvO:coozaXHr8t1xFPKd8EZyba%:8c1vAXH9rkvxgK4i8VotiDFNLX0xGu0CcUNtGTFILQPxqa0B8ebtUTI8ba2yZK4UcttugjNb7zJzoS%hNCYwDLSpMLd06zEkdW5xlvX0cg:2fjKQtsyzWXdf8%i39nR5eEs1B3kZtY%5nvYQuho2h:qJ9zC66zdH%3s3jXu6N8N76fgte814Tfwm%Gg8Ofh:PAk4k3xV%KK8XripPGB4pbxZ%Jj8S3iDfHW4ZLwYeHv79DgIu8l4CzuZd8K7ZPevuux3VDqxNzR6NrbUOcC29XlRtpn5K3ZEONA2d7hCNnb4AjZCeA52WXflNnu3hDand6n2mfeS9s:3vHbIt6S3BreNt013urdgN643gHfrN%%38:gwOAs4gPiw%N844jlHOVs59rmZemw6HHrleqK7Xfspe9E7rbx9e%4843xrfUP85v3gfSJ%e71g:te95b91:jI:0z6FQKw%3AE%PzNBiT%JAk1:24LJgCmDfEAxw%UAdERDALHE1kCqBV8AnMXfgIqGXEC2RpjAo4cWwJTHlsCMCBnAisihwJKJMECjSYRA%wobwNbK9ID0i0xBEowewS5Mp8EDzWTBD83YQRKORkENzvLAwk9gwPEPksDa0AuAwZCMQOUQ00DC0V5A1tGswN5R:0DYEhVBAxJrgRwSfgEfkksBS9JTgWDSGIFfkduBSdGegWFRI0Fq0KuBahA1gWHPvwFSjwaBvM5MgaGN0gGCjVaBoIyZQbvL2UGVy1dBsAqTQYyKDUGsSUaBkMjCAb2IA0G2h4xBv0cdgZkG90GEhprBwgZIAhEGPgIuxfpCV8X6gokF%0L:RbjDNkWsw2jFk4OTBaxDswV5w4mFf8OYRQBD4QT9g6UEuQOnBHNDp8QrA6aD3kOhg4uDlwNyg0dDEkNyAqfDFgJuwvCB5QK:wUsCQ0EhgftAasFpP%lAzn9gwG7%lL:OPgY:bn11:pD85D41PBI9m7uAfQP7LrxtOls71nnEu395KfqoOIo6EHgkOXc3eHic9sl4AzZat201rzaetQk2GfSqNWI0FXT6c430ZHNU8%DzLDNv8tUzELLQ8sJy3zKDMv2yT3Lq8mOy5:J%cvcyX:McMoozWLL%c23zPzOc8480JTQv9ET04bT5NWH1QLZvNdn3CDaCuCs3NzjVt:F5xHisuvR5JTvi%de8zjqCvfS7JL6WO:4:czxPQEx9GAEi:ZcB9X4MAoO%94MMP1oDzf:yREYAfgTyQLsFUMEnBd:Bf4YeAYJGiMHvRp9ByEbhgdFG0gHNBvMBvsaHAakGkMFPBpOBM8ZSANgGTgC8xghAYkYBAAhGOH%thez:ToXb:yfFgr73xV%%f4UzPcCFPn18xIM9NUREPKxEA7wig8O7mMOEuw:DRfqJAwa6BwLG%YwChjkXwkO4qMI89:0B7:dTgdo260G6NgNBj3WbAVp080EddAxBGzNmANZygEDRMdwAjfE6wE:wXQBZb4MAbG7rwAruVwA3LYUAM%01f8Ks5z:jbFs:16wTP%Fr0j:D69p:wmvtf96rzIAaLDnANix1gHKswADObZeBBm57AVgvKMHBMB4CfXDWAsdyDANZMz0DrTQnxD81C8SMdmiE0rd9RRC4SgWGuU%F9HoOBhl7BgZ0e:mGRDzpxol9mEbEfkSHNb7sxxv:j8d2QCyHQ4DCx4NBUoe1QZwHmgIgx7NCYgeCwuHHiYMgx4kDYQeCQ6OHtoOpR6fD8MeWRDjHg4R:R6%EQkfaxIAHxcT2x69E5geXBQ3HvcUvR2UFSsdOxaBHPEWwRu7F:IanRgYGpsZORm2GlkY7ht6F0MdoRa0HswVPSD7FNYhKhR0I1wTDSWXEp4m4xEnKEsRrCnUEDMrhRDBLGEQVy5nEPUvlxCZMfAQQDNxEeo0GBKVNt4SQzi6E%45oBSRO4MVIz1WFp0%EBf9P60XQ0ErGG5Cixh7Q8gYZETkGCdF4BjDRb4YN0Z:GIVGJBirRqoXrkYTF45GWxZKRoAV3EV%FD1FVxNrRA4SZ0OrEDNCMQ:UQKgNUj8ZDLc9jwoOPBMJXTqsB604XQYFNy0FcDUhBPQzNwORMmwCRDG7AQcwIQHYLpsAti0oAJ8syf%YK4L:pipZ:84pT:8QKV::ZyiH:84nx:9DJyAAxiaWAFMmKwHlJd0BcyWqAvUkigNfJHAEpyNOBcMiHgavIdoGayCBB:IeDAhCHXYIWRu8CDsZ2wjwFtIIfhScCOwROAg:D6kHfwzzBrMJFQbgBhAFCQTmAzYBogJw:k4Bw:v3:zj5p:7Y9mr9rfRN:L:yV:sT8Yz6q%:t%YjugPmq7Uj5EO1D%bXsbfmM7L35iuwt%qbss:rX7Ej7Fu3k%13tgfyp7Rz9%e2u:UfuMP6M7pn%xe7p:vLuIP8X70T:OO9Z:1PvYf9m72D:bO9S:2DvMf897:X%:u6d:qTuKv4y7qD9qe0A:QntSPxU7Hn7j%uX%sLqovnz6Z74J%mP917oe:ad52X15eZM9DfmLfOW5QTyAuXS8ILkme8Z5Fruz%MX7anj0%uw45Hq6uNP6VrkD%gA5dLm3eWd5fLmeeQ86Grjt%lz4ljrlOEW7dDg6u4o4M7wnt%58jffqfT%3p:2:d6d%Drfn:q136H8beCe:mPhlwCX4o4CCOSEBLLldQaO514Imuk:Cs3rFAwe7tsNhfCTD:3yPhGI9eESI:h:FMr6FhZz:aIXGwAlGbwCoBpTBRMc2Ad6HUcK0R6fDBIg4A49IQYRTiIME0Ij7xQVJK0WxSRDGFQlsBnAJfMaDCYOHDkmBB1LJtcdRCaJHiMmGR:oJYkfliXcHy8lFCCyJC0gGyQlIGYj%B%RIqUfmiEoH34ggR4:H7Qd4B3EHGcctRvZGocaNBk9GXYX3BegFW4WthP6FLoRhBOoDw0Sfg2ZEDkLKg:WCMINUQZgDKcDBgvZALkJ7f14COj6QQfM9w0GmfTaBFTxpwMD7nMCr%o5AVnn9P8G5KH%t%A%:XLdyfs82kH6HNer%BbUDfcz0XD1e87g8:jLZfKzyQvxtMfd7wDG5O6bxCTuhsOh7cHCXO1LwlftIcKO7T7C:%2ewqTuOsN77wzEf:AMxavxM8b88nvHc:TjyAv2acrA9wnMiPm%zVr7gM8w:U7RCP8m0%AABdW2AurWhwTT2FMGu9oXCJ3czgly3nILMuAADdnhdw5n49cP1%QaESbmOhJN5zUTSegIFBnpsRS96SwVNup4FYLqkhWg6n8VlOpAFV3q2BT96UkUdOmXE8foxxL659wRE%fWEBnmuQ8R5YcOBuRBDf7i5gsA4nUKEeHwCDjgWQd637MF2t4EBFneUAL53ZwAu93t:p3dSf2g3bf7wt1A%gXe8vhu3tb3:97w9rjfRPaV4NT1luGf9bripvUC5OT1auVW9vPm%faY6MT3V%qy%Crst:kM7s:6%u:0%:bxJv0B9GH%Gfah:zr43wBf%hcCiPxCA7X%WATiAFAFEAMoBj0F3gZqB3UHmwnzB88LWwgGDrIIQhD6CIQSNgnNFGcJHheNCXcZqgnZG74JSB7JCcQgzAlPI8QJ6iWyCZMolglMK3IJEC5FCdswEAmpM9MIczaNCDQ5QAjmO%0Hgz6XBwpBPwd3Q%QGxkWEBvJHGwb1SakFy0sxBXFNswTiTjIEHFCwAxpRMAPXUbACUFIxAn9SswFjUjkB:1HIAFZRYQBsUAcARU%5:%JNdv9ITDz:fEoJ:4RI2f5lRqf%JURw:spBMv5bP%793zyh:Vs6Sv3WN%j8VDV9:N8yDfx9MJ37NS42%wws3:oGKqD6Jyh%%nImffrlJJz6fyPY%j0iMPsaIaH7EiAk:B8ftvw9HlL9Zh30:ZccnP7NG0j:CBvz:0YamACFGTABxRiyAQAYGAI1F1wCYhZ9AocVegKkFFECuRMCAsMSjAG:EewAqRAiAH0PLv85DhD%3gzK:GsLXPvgCcb5OwgG%HsGHPadBAb0pALF8Y0AWe9a:sPsCfwI6pv5LucT9zvkdPQz4b7xGt717vPaHuzD10PpkNRp5l7RmeM0ztbgGMsp3hDIl9sfxSXZRcLW1oK:q9TZvKnSTbrT0OO3LM%etbbNhLNzzJ%xZ8v5r5XKnK4CypKtr8nhrJ7JkKzSyaWsS8ojrQnLDa4LzGavU80tseDOYLOv0Pe1vNLluP3UILxp15q:%tlKw6fcJMdr3x7LP%Ixzx:lUNME6HHX6eqJ28Ttjt%Q8HXjRvM159:1xOpV%BvupPo28cj8E:S%:rL2hAAU%RcCOvt2Ayn9owTl:p4FbwBmBskB:AbyAmAH7AOTB7cEmAdRBXEHvAUfB:gFpQYKBgUG8wVEBbYFYQRTBV4D0wQ7AjsE:ACUA6L:4QIu:iYCn:xiAff6lwAz%cP:Vffo:lv1Cv5G8y39FvFX:Mzuh:tn7L:64%n9%T:nQfl55I74kuHp943eVfdv29j2O9hz9vfUJfan0ez1Us7G9f3KsPWxx6f1dMSo9U:BsfVNvr71d7vQ9dm44vV5tvT1YLQG9pOyGvYasTb2%q9c9javkfbRrtj2zq439y%vsvf0r034G7EM%aGy8fmCtAH7t7Y5:Dm5lf3%uw::%r6iACfCSQJ8xQEE8cjEBX:Mjgcf0FkJytMdC3nX1Awk23YOxN7%D1XiaxHS5bgSOunhE4js4hS377kVxPJoFqv18RZs%FkXA:unF3L94Re4:w0Y1QEuGMsDRRiYBVYYQAdhGMQIaRgoCm0YbwtsGJsMahixDWgYtw5nGK0PahiXEHIYdhGAGE8SkxglE6oY%hPBGNIU1hiuFecYkhb0GIEX:Rh7GAAZfxn7GIsa7RigG9IYuhynGNYdZxjxHhQYDCCxFychQxdEIs8WYyNcFoUk8BWtJZAV2SZAFQsoBRVCKeQUfyrlFMUrDRUWLV8Vcy7aFdgvexZDMT4XsTIdGB40ExmGNRca6DYjG0A4MByLOTYdxjouHu47FB::POYf%D2gINU%PiGRP7whKkAVIp1ARiLoQE4iB0EuIvtA5yHDQIAhYUD7INY:XiAmP6wfUj7sHl89IR5QPE8dKTt4HO05mxuhOLgaRjfOGeA12hhyNNoX:DLPFoQxuxUMMKIUmy6MEzQtfxLbK4URlCqjEGEp3Q9BKDUPNSesDjomQg5PJfkNdCTSDacjzQ3kIuoNJSImDmUhfw6cIPEOxR96D9oeFhDYHcEQvBx5EYQbNhIuGvQStxitEx8XXRRlFf0UiROJFYsR%RVsD0YWLQ1tFtEKahZdCDwW1QXkFUADZRWjAMMUBf4FFGv7LhPX%EYST:ZVEdfzYRBz8XIPKO%QDvrswg3t6g8NA%l9DD7nDgyf5cULJ%SfC9jinAuz4bkLuOD1C%nfTQxE378Myd5HDXXe4A1E3oMOMd4rDzje0Q9W3m4Qhd75EMHeaxEE37wRR9:oEYXf6RG5374R399pEfTf7BD330sQ5N%KD7vfrA5537UNIN%mDK:eggsn3kkKjN35CN7ckwcg3BUGWNuBBIva3ALA2SsB:9h1:1HYv:281w:8Rtdm%vTWxvjI1jD3xtaj9fDWIfRG16nyyNc98XTY2u9I2YDuQNor7Vfb2euJ3Inq1N096TPf%%el4MfmKeKr5bzjq%Rd5c3jCucU48DohOJ:6iDiRezs4RPu7eHp7yjix:Ge4q7zUuOd9UDkk:do5Y:5xeaQ%1Polv0M6p::6uusAePtugPv78gFCPLUByj03glL9uQLcPjlDZX63g%3:MsR1P6rE%cAexXsAjgX4QTjGMMGfBqRCAEcTApzHfQLzx6IDRYgCA9FIXQQWyLIEVcjARM3JBwU%SQSFZkl3hUVJngWaCbcFpAmBReMJvAWWyagFv4lFhZ2JVkVxSRuFO0jXBPvIioSzCHaEIYgcw8dH:YNlB1nDO0byAooGhsJRhhiB0YWogUpFNsD7xESApYPSAAhDX3%kQqz:OkH6PopBR75VQJT93D:i:V8:MXzffkD8nX2QfBo83zuWPCv7Eft1%o36vLoLecA5yzkBOU54QHjV9784Ivb%N7W2PjcOtb:2rrTENlY0TDXGs9l1QPNtNMWyyTSV8m%0MjHiM9rxonOQcXEzUzEPc2Ow:XMC8PqzMbCHM3EwofNB8MqzpDDAs9hxA:Qd8VQ0dDGxNJnyGjUNso21jjMJdhizi3arNBB3AzTWd541W3g6dd14lXacOS13FnmAt8x6DLh9uk:46vrI%VO7dfm4e5X6GPwoOnT8a:qLPOC62r0GeyI9XXsgvab7FX3j%wB%FnsiPj:6%34i%s0%QHrXvlp6m75x%lm%SLpSPl%6BT54OfM%EvncfjE5gL4S%aA9%Dl6:aE5UP2N%WJ9fnkv:TP5OfzueQG87zkIvLa5EHxFeVr8G7lp%:m5fzufuZt7jTnAO4J6Lft%%iT7QnqlO0x67vtcewG7sbtd%4v7w3vqvDI7zTypfDM86Pxb:W68hv35vPP%CH1ifpl9kv8sfcU:gT55f9e%r0BwvubAy79gQWj:m8HHwBpCZ4BcwsfA5ANngTHDxoGGhKRB40UAwkfF3EK0BnbC54cQw2HH6UOhiIBEJYlUBGxKIsSzyutE%surRT:MYYVBTUzFvo3sxbbOgYXpD0wF1NANhfiQiAXTkX2FpFHvBaoSXgWkEssFkVN2BXDTnsVB1AVFRBRphTZUS0UYlKsE6pSJROwUpgSdlIEEv5RahFKUccQX1AcEENPaQ:8TbAOkkz1DQxLOg1wSYQMxEfRCwtGIwtKRHoKhELXCbpAOgnwPqgIKT0kCGQ7sAekOVAH5zcFByw2zwZyNLEGtzKpBv0wuQZDL%AGjC0fB9grdgcoKuUHfyhwCN4mGglIJeYJwCPVCksi5gvtIBcNqh9iDoYewQ%EHS4RpxyiEu8bGxReG5UV8xoMF6kafRh9GuEZaBoxG2QaYxxoGnAdbxpOHnEa9h5nGmUfSRqWHxIaih%7GUEfPxm9HpkYAB7HFxAdxRbvG5MVohovFCoZmBKKF88QwBXVDswTrwytEV8KYg:tB%4MXAVUCrMCmgf3:8cEK:3iAVX68v569:37oPQH%c7xFPYJ7yXzWexA8MHpau1H56nq7eQF6LjiheWq4C3jyd4C4RndB9%e20DdXtqx217ZXtqi2EzZL9iA2AjYANgw2M:Xpdjw12fZZthy2jHZxNtP2lrdvtsu33vdPuGC34Ljz%H15Vzkj%gl50frI%oY7k7t%fCe8OTzCfTS9oT3vPkG%5v8hv5o:wACGwJtBa8EyggbBxMMXQlDD3ELUxJUDToVBQ:yF4UQdBrSEbwc7hLIHtgTmSCRFDIiGhWVI3MVxCSdFcAlmBWHJmMVGif%FHUnahSZJ6gTgye5EjMnnhGrJlkQ7SXtDv4kWQ3lI58LqiLACVUhuwftH5EFeh4:AwAdxACEGx3%BhpJ%4YYSfgDFx31exXK8fATU%5iErzq1RAK50sPROPFDXLfRgye284K0NdcCRXU8Qd20JAG:Mw7Ba:J9QOXxsECuMOhARfBlgC5vqD:oLy::s668:1GuTn9CLiS:BO3::tmtn:7:7UV%9u1wfr4tYb6U7Zj%uq2Wfq8t2n6yLiS%g261:qKuzn7P726%yy:XPxSwSH9sMMJ:kTGE:8NyT0ACMyDATLP4AKI0k4EBNbKBZ7ZTwdQ3dkID%FjCtPk6AuT6GMNRuzKDubvFxBr80QR0fZNEhD6LRMm:eUTDwB1FMkC4BRUBSgVsgdSFeIJYhXoC10VxA1IFXoPKhULEQUVehLdFMwTshQEFYQUJxZSFDkXGhQ:GN8TPRmhEzUaZhMqGy8THBwAEw4d1xL%HbMS7x6OEuAfZRLQIDYSwCH:Ea0iwBGYI30RgCQ3EWUl7xBFJqUQIidZEPwnChDTKLYPqyldD4Uq:w5iK5wORCw2Di0tzg0bLmgNES8GDQ4wqQwVMVUMJjILDEEzygtnNJYLkzVuC8I2VQvwN0wLGDlUCzY6bAtFO5ILQzzACyo98gv4PSIMqT5LDDg:agyjP38M5j%JDP8:hwzrP3kMqz9cDD4:KwymPuQL5T2BC:08AgvxO2UKxDqrCXo51AgXOOMHnjbaBhM1ugV6M4cE1jFDAyww7wF:Lo8A0iwl:ycrsv1:KTr83Se%%kEmQfmsJMX3HyNO9pkh4fQaIILzoB448igdCfGwG:fvNBoG77MYNu4tF4XtoBXx7A4Ueex2Ehvs2RDY6zcPreuSDZnr6QuW60EKoeubCLHr%AbC61kFz%u%A9frJwLZ65IA1ev8:s7rYv3D68P7susd%prrbPh467H2S%vq9BHrFfPL6jTxfOpF7yfqSu3P6Ubreuk76SzpMOfp6Crltugx45XoTOGJ6IXflOjj3bnobNz86CfbX%kY2uPpQtmJ6qjYTutL2C3sK9gh7UbYI%6Z2C3vHNk78MjZSfGT2lXycttb81vcWPRD3UT1I94a9vDe0:al32b3O%DQ963gDfj54Bz4HeH89xjhsvfs4D:3meCn9iPg8PWO3x:139459BveRvNJ3Ujyb9xE8ZbbOvDD2invANoS7lPZ9ezC2NPrUdiv6gTYjOna13Ho1ddf5:TXWuY02GPlldh65BHZn%On2dTiUtoa4g:bdOHc2%Tgttxq4J3dCeCR3rzfkd%D36HgWt:B4UHf8uI53zbkQt%M5WHf9eaX33Ho6d8B6lbgpevf4F:thuEy70jiH:Em4yfzH%RJ9TXlhfdo5tj5uuc9:Crps:646jMBYey8AyLuSQb179cI1PFjC7vz6g2n9WYQl:fUEov5MRWG%3gXhv2lGYr:uBuRAasdlAN:H48FLyF7B7kiVAkcJBMLUyW3DF0mPA42J6AP3CfiEE4o:xGJKPgSjijKE1wodhT1J:sUWCdbFYgmkxWEJaQVTiSMFeciTBVRIeUUjh9bFJ4dsROCG%0SPRkUEtEWKxFBFDQQkREwD8UOHg7jC:4M7wjQC%4FlQrkAlAJ1f8BCMb8qga7%UsFuPbfA8LzZALc8NYACe4z:0nre:2b6LH7:eXZ%Wvj9:fi4A72Xt4f9N3bLPJc2Tbw2dY%7lLURuzG0VDqNc9h6J:MfeYGyqjkbcfp4tvEQ%FXwrrf6r9S3p%9EN2Eu:bbpLkM2wq4V9q:tt:ZyrWs2S%1wtnztCPaFbXO2pa1vttztuzcqbdO3jG5298Cu4zhFL1Z41i:QOXEwTvnScRJ6dvGY%tsyYbt88uq72TOx:G10NXz4dLP9d:UsPer1nP5QdgX%57ZnPzC2gL%q9tL:1vcewDS3JUBFN2dAibdlAMN3X0Ez9xVBXLcGQb828YGddtWB%HayQdE2h4Io9lWCALZdQhi2H0Ix9dxCDDXUwih1iEIGtbeB5zVigco1SgHvdS7Bl3URwYH1M8FvtNTBYPT1ARY01IEQdPKA0LTPQNb060CkNMbAuHTiwFM1AAB0dR9AG:VBQAl1pr:89Y::9vX9f7e2Lz%:dmW:jrbhP6U3Ir%Dt6s:qbf7f5e4VH:NuPa:y:lhwBL51cBjOlIAvPrVQOB7n8EOPHCBRf0IAce95gITPoqCp:90gsVAYwNqwRQD2AIFhEwDNUSGBCFFBMUIBYdGKEXLxwHGUIgThpMJHYbRyh:HCosZx3uLy8ejjPVHgQ3WB9NOrUfZD3sH0dA%x:xQuIfYUWhH5NHOh%GSbMeNksRHqNMWx3MTZccsE7LG1JP%Bq2TyAa4U9BGdpPWRioT2YXU09oFuFOYRVaTlUUxE1HEyNNOBJ9TCoR10scEDNLCg%RSvQN8EnZDExJvAugSJ4K5keECRhHcQgxRmgHLEVrBgVEfQW4Qp8EQ0HTA6U:HAPfPXwC8zv4AeM5kQG2N0sBczUmASMzJQHSMEgBiy6NAVws9QFRKn8CdSgpA88m9gNmJecEPCT8BVQjNwerIpMIPyIKCg4ikgsSIiENRCKpDp0iIRASI4ERmSPDEiYk4hOuJNkUJCWjFX8lPBa1JZ4WvyXEFpYlrBY1JVQWmiS5FcAj3hSoIsETTiFlErIfzBDVHfsOuRv1DF4ZwgrLFmMIBRTfBRARNQP0DWkAuAp7:WIHbPr5A0D3hQD68wz9o:CU%UHtJPbf6cHyhOZx7zjjOOwC4B:p59wr5uzZYuMW18rgadRn3uzRPNylz07am82f2NPLM9dPyg7WEckz1RfIpdRdx2bU4MZ31JvG19SLxoTVr8Z71gTHuteKxz3ZQMj:2iXJ:dw4yi:fecuR4ejMG%SHzsfmVtCN6VbSZuyH1Evv59Yy8nXZFPUr3Ov3BN%y%vnhZP0E5f3:Huh7AkLr2QRp7hMHkfElCbT0CwvO98IM2PpJDsr9oA%dAMgQSAPBEcMFixIKCCQTGAqKE%0LuxOKDbQT7w5wEx8Q7xIbESwS5BEnEXkS3g:aElIOCROCDAUTcQrOEiAIZxKSBc8RyQIKEcb:HBCL:AoPHfndDX71nAy18VELy%0ACsfprwi15V0HoeEMBpXdugSf2WgDydUYAh3SzgCnzo3:b8tW:nzIK:3VxQv8fMP3%nPB7fm6v:D4Tr4C%Ci9J:dDvGD2lruw9Rq7FvXHupX0mLor9Ii62fOTuqDzubqB8:m6evNTu43zyru782G8BvQcvXD0Ab799Be:rvVjwIT27MF%97fDm:jHxdn5H8g4%77KtvyhzVT%xdAOACXU4gG818kDg9u%BXPfuAeE47MJreeqC%Trlw0f8HkPU:RKEXb4BxN::KwUZwA0FiYEnRe5B%MYHgsFGlMOARtWEdcbKRSKHMsWGR08GYodfBveHY4dGB5yHz0eKiFOHrkiTh4jJEEeayUqHpYmDB6pJ%Ydpyi8HZUpix11KlcdSisgHRMs7BzQLL4cgS2eHCYujxzBLpMcUy%qHN8v0hxnMAYd7TBGHXIxkR33MeUdfTJEHgUzrx6RMyIfIzSeH740HSBiNZ0gEjYaIc82kiGaNwQidDhtIlw5ziJSOiQjVTtxI2M8tiN5PfUjkz4xJLA:bSTLQKwk4EHwJO1CPCXrQ5Ml10T1Ja1FZSZpRuEmCUdqJ41H%yf1R5EoQUgmKXFItymFSEAqfEjAKlZINSsSSJ0rskf2KzdHPCykRmws%kWCLDtFeyxoRFYshEMSLI9CryuMQS8rekCRKlw:2CkvPgYp9TwdKK47ISdaOhMm%Dj2JIs3zCMSNpYijTRWIfsyDiBdMb8esC9tHfctHBwzLNEaZCqPGZAoWhi6JjMX5iQdFhgjFRVWIRwUoh8wEwIeTxJ2HHgRARurEKMZ5g9ZGCkPIRdxDvgVvQ3ZFAwNwRNcDKgSrwuHEQYLVxBhCg4PwwmkDS0JEwygCFYKHAhqCKIHUgYxBw4EygalAWsGHf8WBn78ygXU%YsFKfdbBYn0PQUA8jUFme9EBV3tawVW66oFiun:Bf7naQa05uUGruVxB%nkCQhg5KsIDeRQCejj9Anq45IKDOQkC0bkpguQ5BUM4eRuDDHlsQx15doMpeXqDLvl3gyw5bUMhOVsDDbl:wvI5GsLPeSvCpvjyQnk4rsIH%KJB0:hNwZ64MwEpd9KA9PeuQEI3hsAR913:pTcz:zy2yj7Y9uD%eva4veL2kP2Rdqn9BnaDfMH2nfxDdrn7yvaYu5f2uzsqdqJ6wjbPep82wvpA9z0557c%eZN3RrmD95a5ebet%TS3zHk1ODG4%7hcuMi4zLjceQD49:l4uJu587iHunH4vLqzeLp7ODiBO8B40LxMeOi83LjIvbF47:4K%R4%6bkSP455SwB4%UgBKbmHweC5yMKeegnDYzpJhC76hwTB%wEFm3t2xjq7p4bevBKHhny3CDF81EjefWkJTP30yfv%Nopqfq2K1v8ZC3::eEukf8rMAoBQDFpAh4yrAPCMtEELDPVBVkzugZJM3wH:TIbCHQylwiwMe8IsTAjCXcvMwkELh0JWSziCHYqgwhfKAEIGCZeB6MjmgYFIbgFQx66BGMboQNpGHACXxUqAUwS0f84D2T%LQzj:DIJS:tOBpn5gwPO99MA6fU9:u7zwPvf8Vj5v%8B94:ttfRQ62:yAuko8KTm1%045HXrweH46ELfWea93JPjN9qk4K:XjN0p1U7aptLw1inQe9O2zfjPUct0zADJ%8jJxpzFssRlwsDCZL:8wKm8ab8:ug%%M7jwvJC2ELxbtXG7mbQWu0m0ALtptC%78bSiu9i1VrwVt0i9nbhxvma6yr9lvErBkb7rwtzApMQ7w2:GoMVGyAHIJspRygjMh8zrzZzOyM%K0J7RTNJo0%HTItVG1cvWfdZh2IXX49lh2FHbFdmt3KLZ%d0M2jbfVtpn4IHajuGQ2q3ihtrF42na1%Q82uHlBdri5sfZ1%eF2b7oQtmV6f7YW%q42A:rctiz6yvYSezk19LsntdR7VjXx%0T1zTuztaZ7ojW9%5A1k:v%NWg767V6e9j1SfwGtVX8NPUdPCU1HvwXtRr8DbUQ:Ag1AXwItS27z:UW%991Pru39Sb7mrVQ%4g1vvtBdfI7RzYsO1m2bft5trg7ZzcLu6J3qTureBD7wbjDvCU5QbxVugq8krrevNs7vT0u:GV9jL1W:jM%ET6g:xM:E8Acf4qBK0ACgj5AuoLTgXBD6MHixPvCT8XLAzaGlAOVB5XEKkhOhLTJPYTzCeIFZAq7xYaLSoYZy86GXMxHho%M9YaxTRhGws2vRsTN%sb4TfrG3s4vRvmOGMbKTngGko5NhpNOWwZOTmFGBU5iBfoOHkWuThdFY44NxRuOAYTWjjLEVY4hxBfOD0PdDjuDZA4nwyvOE8LyzgACts4rgjWOFkHtTj%BW44ngT5NzkDTTfVAWc2cwBCNRj:3DPH:Tcyg:xWMFD7QC4x%vsrK:mTKUT4FCeB94kk5vYBInj2iB879iodMvb2Gl:29hjC9jUXW:e8FSf4kBQl%bUTUfoqE6n77BIo:fUSy:46E44AsxNrAlQUWQQRFU8G4BVDCLUWKQqFF:gLRRioDekYMA9nGYwQtRm1EcwZqBKkGWATORnYE4kYDhSRFwEUUhayE84UIRMGE1IS:RBGEbgOABA6DIIOiQnODKkG5gqfA84IcgCLBib9IgTE%ZcBVPbw:t7yL:xs71j5Buxw9rToffN65YjwXuKX7WXftuqR3O7n59lG5W3XxeIm1XDgGNNJ3kTRUtyuz43aVs782D3NoddkzH7WycuT1W3L4NRPy2HUccsU1NPL9NN0zP:TVc0x1HTOh9TSzwHVa9Gb1T7TVdZG1S3Xgtcj2O7ZOtmG3HHaRt:L2yniS90o5fPePOjF4F7rw%KH7u3kr:FB59H0venp913s8vod7%n99vHIAOP0iQPh9ycG6:qYCP791goXAdoMLwSdDkEHGhBECkwRLg0vEvgPwBKYEvwSCRXgEkUXahJHGZcRDRtlEJUc0w7eHeAM6h6NCrgf3AdKINEEniBxAbcgxP2UINP5OCCo9aYfUPHiHtjs7x1M6NMcuuOTGy3fNhqx2sMYUtZAFx3SsxUdziEUXMqOEuPG:BC4w20P3sDlDVS%ZAwavO8KKrqGCYG4KggWt9wG5rWZBee0YQQTtDMDYbMRAsuy:gBJsv7:1rEV:22xQ:4OsYv9t7Ds:GuwafwusAL8BrC5%:uvjvsXsIP7YrCZ%%Sw0fuosSz8srKq:Am0S:2ytRH%sbf6:ga6BgCzvDUBtL%HAgbD%wOhxo4FfMo:B4zOCQnI0ugKJdfVDJjbyA4Y4LoQnOSkEhnpgBSH7UsW3fECGBL2pBke%i4b:f2cHKkB7B0fBRgfXwgfIGoL:iBADrQh5BBCIlkTpiKhFeQivhf8IrIZ9CJ9G80iIx2NIqUeOSIHINMhSiFfIXUi4CCMI1YgkiTCH40lJR9:JoIeayfdHVEoOx0zKaQcECodHOkqrRu:K1cbkiweG2MtAhszLgAbAy8XG9QvRBulMIMbdzHSG0kyLhwZM5Qc5jP%HLE0aB14Nc4dPjYtHgM3gx7KN80elTgLH2Q5Oh85OlUfEztdH:I7Tx:VPC8fvD39HqQ%vx6NP3kedkAuHltB5B05Qp4dDUNjHdVDNh2NRBkdM0UNHcRFER0%RiIdnkY7HeJGWR0IR3odDkebHfJGvB2zRtwdUUb2HcpFBR4eRQQeTETsHVJDuR0wQmgd5ED4HG8:ahzPPb8bBDz4Gg86FRrvNxYZqDX7FzwzxRavMHMVCC4GFE0rfxKCKOEQsCUtD9wiZw0OIJELTR2wCaMaxwcVGNwFrBX0A28TFAJhEUEAhw9%:uENyvxwDCP7MQuJ%R0K%fctCXT2WQj%9JYHmfPZBknyGgYQ8U4F7e9wBODudwPo7V8CBu0iATjsu:%C6yn%5epq:GLqf:r76W34ruk69nvp8PNh6ZnxYelB73rp9Oyu6b:q:umt6Gzqxub36hTloeud42rsZOJO7W3hTO634GDvQOCF8AXguPEA4PXyKuA59HrggPXp4Mb2bOEH%P3hPfmV4mL6LONt%7:jWfxJ5B:9xOS%:S3lNv5%5Yv%s%XA:srl2f6%5df%keW3:kLleP7W5Bb%UeSR:bfj6PwP4x78X%I0%6vhMPr34Bj5R%Dw95zfwfb53o71YN5c9NPdL:NT3Qjy4tzq8ILc0u803MLu%9u47dXbtOzE27jrydvJ6uPb6ukV3CLpXtx16MDc6Oc73X7n0d0154DeDedJ3wPnLeAW5yvhROdF4oznfOPs59HkXuhI5t7o4udm6aHp8emH633qle0H683vkOsv8hrsuvSn7Gz3Oe1B%tLtNv117kcAIu9wA9vvrgah8P8JdvFdDVzyxBBV8ywUYfSPF3:15Rqv9ice7vdPIT35WiSY%kMn::sHKnD9oizr:g0vbgBDMfkBQDOLA:00HwV5NrIGsTc9CKQ4uwlQOSYLtDl7DM45tw2dOdwOHznqD1U44xA:N8oR3jWdEjU0WxNGMv8TFjCEFKot6BQLKykVQihEFVklOxVeIhAVWh:GFFgcXhRfGdwTdxZEE6cTmRLzEN4RYA4VEfELPRCmCVQPfQdWDnEFPw17AwoMkQG2Cqr:RQm::bwHxvsfBrf5cQSN97QCQfXnAM3yCf8v8Bn9Zu0b%3TqEvla5wP3IOT19Mzg7fJn3e3w%dn47pDWEe020znr%s906erMxecTyjLmg8e%5EPFcONbw03i0sFZ4avAmeDpvw7gjb%635S:nN:9v7TfwcAC4NnBheA8wz3h4MQo4rnGROO6yIzk2sr65QzNhOdFzx7pfdG:6qzTZOzO1Qvu4Ne27%DZaPHM2x3zod3S9FzffPb24BP4aeKP%bPj6:rS5Cj8yeVI:Z3mUP5W50b:%ecuAI3oDQEU6eYBkem9AgLqkgNn6moEwepCBQ7rGgZM6%wGe%uwB5brXwid6:YIjet0CWbr3Qkq6zUK3uqFCobq1Qol6ikLvumDC1Lp4gve6D8MYOiVDNbn3Qw95xYNleY:DeLlVw0p5V0NceRPDcPjJw0p4%UMreKIDFniEgw14ooLSeL2CpziXQoy48YJD%Q3CTfltQip5kUIZ%joB23qowe67HoHSe9yBxjykQcj9dsHZvhUCN77%wiG:9IJVwPYCkwHCgxeC2UNhA:lDrYTgxDrFzwSGRwJFDQg6BUwJNMXBCjFGaQrtRsKL5kdMjJnHxk1FiG:N58iIjr8I0M8KyUfPiomtD:3JgBBkScFQvgnxUIsKEZDLCiTQ:kntUOUJ7tD:SavQzUmnUM%JZBDGCSQQ8kipENTIc5DvR8SRA0ecERKHOZEfBpyRacYD0bNFrtG8RRsRxETHUguEcNIRA9VSVYNxklhCwtKaAkaSmsH6ElpBW9JZAOrSF4Bm0dX:0NGVv2oRGH71UKD%dVAxfeyPi72eTzC9DQ6fvPsN1:yqTVi8XUzhPBYMcfvXi8v75Etwe79K4XurCqA7qQptu7rKCjvgSjT72IosvCIKL7x6yjy8oIpR:RAKrf1Gis79wIsyvjnLFn6uy3i%3AuXP34LsL%Sy8NAGAvNgEzLzgCwS4OAwkutgMILS0EvitzBCkqhQRIKF8EHCb9A6cjWQPrIHIC7B1FAbAa1P9AFyD%pRMy:OkPE:oZDND3Pwh09WQEB:ORAI:wyvwQ7hL5i%ts9f:o2:Fu5mPu1%MH6zjhzOeU3rbk7NvI4UjZBt%v1nLcLNQN2svR2deUz9nVj80P1L:LetIjyhzRusj1z4HHA892xkfOmsW:zezEbs1txFPNGcRyzevDzs3Zw2jO3cNCz:DDXtAPxLzRPMRc03vEQNXPxGXXP8XL2c7Fb9yAxk3fV8dc4lLIleVxyezos8pX7BjMyu%izTvzU8%h9ivR8vkr0yb9UtU2AJzXGQMG2skFitw:CCXfdQrR4WIMiuQBDk3nSA8U6jEQ3Oy1EJ3vzhBO8nkQ5PS0D1T3gA6S%d4MmvvRCmf9Xgj7:ooFWABfAoEB5f55Ain7RAM39%MDG:NYBOPungSc6rMEUuaRBBTiNwTu3aQD7NnaAhvW4QGE0r4AL897:yPMJf5iycX878Zp%8nEFvrswtH4UsGY9:O:Z:bBvjn1sb0K9La82vLDu6jxz7p28NO5Re:LuBnutrf17JS23OtrtdLqPrTb6RWz:Oj4sT3o8bCj5wiwM%dGr%:mtK7W5lqu6OY9riLnZa6C59euB%iYr6:orbB56RiyY%rds23r:bWa7Hi46%1Mu2Hvd7798PLBv:KzxaX0ssmu9uPN1:g30hr7pNZz:Rzb2:%V30wCA%S:BF3oLQed7I8Ju:DdC7H0Ew58%C0QGPwsEoL:EBS5AtwVuwWNF4oIIxklC5gajw3oG8oPDh3aEQgewhPUHoUVcR8pF%EfrxgmIBsaRSBwG0YgrhwsINkd:x:yHsIf:B96H:ogKh:uIdQe2yJ5HsEjGh6iJLodeyVbHUsmAx0PJ7ccxSd%HGooXhz8KFkcfClxHOoppBxGKu8clSpOHdgqvR0UKzgeTCu7HoIrRR%6K9Af9ytaIDos4CCILFsh4izHIUstICLELWAiTC6JIuUunCKOL58iSTCaIhcxkiL4MY0i7TKQIvMznSIHNbUiIjbcIkA3EiNYOFojZzm1I2Y6IyRTO6QkJzwzJeA8zCV2PWsm5T0LJyg%qyc4PkgoET7gKLA9bikQPe0pLjxWKgY7oyqWOcwq3jfLKtw1nCqTMzwqCDGsKT4u7yg%KwooECgDJ8Ak3SVZIZsk6B0%I3oaxyEcFzcg3BOMHsUQyRziDe4aPQv:GNsI:hbABu8U6wTVElgDshADAooO4gBjDO7:Qwog:zEIb:4zBtT9SwRF:XgCuPy3ACL8B:93%2X9rvrU%775VPqi%Or4VfeX99r1XvYw9EH1XPJB9GTwYfNO7qLyIewG8uXpkvGl50nxauUt8T3jQPEq4YHxON:t8W:dgfLX2zfzddoK9EvZ9vRa2PX1o9cF9yPXIvjX1kj5udZz%sPWn:vt1sf8L9fq:YHXBf:Y1xYALdgdAXfYFwKy2AMD1tjdA%HYoATP2EkFn9jTBVHYPQbj14YGVdevBqrWvAbi1a8GANWLBgjUUgb90gIG5tGbBcjQGQWnz3sEi87AA3nN6gJ1zPsBhcv6AKzK6::sydP%Rsm4:bvInPxLyIP79cdy%rvHa:mcx3L4nMeI97zHsPb8x%v1W8g49drImfR2yRD0L8qe8wfLRvP%ywrzFs3t8lDO7:KuzxDzMNFM89XSo:Of1BT0jdad9KLYPPXg2u31R92o9tnfZPeY4hv4guXH%JnoY:nb6:D5R%9s%tzy2:qX9j:7dfqe%3P%%:uLAlr8uQbA:PgKLP1BD6H9jhMg:tUXqv4PHEP:MyDr:zokpAAcKG8B1CtLAlovOAOoMjEEtjUxBX44NAb3OjUHGz0yCOQ%KQlQQBsKWkEGCwJC6wtIQsUMLEKUDbJBVA7dQAMPsz%eDzo%JhB6PJoQfDr7EEc4ShHmNYURYzOqEcgwthEhLqQReCtxEdgoGhFJJpwQ1CP5D38hLw9PH0IORR0yDWAbAwyaGbYK7BdOCUwWzQevFDUGChOIBFMRxwKCD:IAjg0G:28LAf0fCd:6mgag%N0DQ:bnAMvzuv088Vr6m%7N9u7rGvM66UvvhOZq69Pjf%ct4Zjjmd7A3x3cBNy:2W:Yg9cP1WzV8NF70xvPr9GZzAnQccqIzqjIK81Ax:XLOMboypDFB8pDxVLJTcXMyKbFcchHxkDIJ8c3yD3IVsiAyZ7I5coQyWPMsMnzzXzKis90yyHRlMyx0tjNNdQ5z6nVr9AJ1zPSUti%04TZTdWd2t3Wndtu2IPcAdpQ3ZXbBt4q3afevN4230jgt9:J4SngOeOP4JTk6uDY5TrhBud:4SPouuE06enhO%oO4j3rJOI67CviNe0h4izuBOIi79XhFPCU4QLxQeHo8dzgxvJk4Jjz2t9g9D:fHfWV3tH1391:9iLdKvdj3NX3pduA%OzaLfk62tf5k9l%%vrYIPt12Lz7DNhR:MfX2vyu11b9y9e::STYFv7C2Fz%q9mT:uTawf5z3O3%Wd4b:5jgUv8u45j:GOby:1HpYwDT7O4AmPCVAZf0WwLI%EMDIP1SBJUBiwUeBvEGsQqECEUPQgrSEyUMTxgmDrEcOhDvIFgS:CR3FM0okhZZLKYYmC%wGoMyrhwWNZ0eUDd4IDI5OCK%OtYj9ztOJeQ8miaNPbgn%j2oKDU%ailJPv8pQj5tKio%tSoNPtsq9T3gKu09xCr8PYQqKT4dKno%iinxPsgojz:YJ1BAuiYuQXUlIEIPJBxDkSIVRAMh:0RsH85F0B15RjAc9EaMGjZH4xg4RzMX9EZ6FWVGtxONRewRbUQZEAtDQg5uQW0MoD%dCqs92AiYOyQHczmFBUg3AQQkNZ4CEzNiASMxUQBdL3D:yi3B:nMsRv5cKwH%hyry:fYpFf6mKWr%lCnq:rkplP8QKmMAkSpVATMrZQLvK40DuyzIBI4tDQZbLlcHGC%kCLgv7wkwMDoLeDCCDIYwxw1VMAcP4C88ECYvYhElLnES3CxjE00rMxR5Kd8UZidnFRUlyRWNIgcW0h8eFuwcDRbgGdMVthZtFXYT3BQnEB8U0gw2E3wJIRIsBuMQ5wKDD7D:Bg6N:HQMfvnUCoj2LAmr84EH6:DWBUruKwTN64ICd%nXAEnnKv9G5Xr9buPJ%8LhHfpE4H749N709tbdhvXu3D30Ptwf88rbLPKT22XxmNvH8NzbTfBd3PPvHd217x:ekO9j34Lv6uCH77TinO%:5LzvC%fn75PpGvBV7FfwTu%d8Hny8PDP9U:xSvnA8eL8RvKNAOXyQwSi8:kHgfSlC4b1PQ%z9rYSCPgFFof5IBkt%:4b%PyWHuL%4CDlANUi%QJrJBgFmSU9B1gmYgmfJoQLaCafDa4lsQ9vJLYRrCKpE2kggxWrHT0XfRrRGOkWOBr%Em4byw5xHF8KQR3KBd8dGwFMHmL8jB6t96AeC:OMHojuUh4y6vIdEuZrHTPivByZ3uQbSdvhGkPYtBmG1V8YCtPkFsjQSRW1zpMTyMzLEfXK9g8yyRsOecc:DMLFYQoJxIEIScKfBoLAuQSyvtEC3LzoAAS7A:8yuST9brdR%8G1jvk0tOD31LJL9qix0:S7sH:zFrBU8sKvV:HEr47wIbD9796wpO:6sYPveLOb71a16u%Ut27wMLol8Se9CfJ2wBXzFcRD9ADIkPUtzPj2k9B3%CnVCvrj2a:7tN5i:ZDjI:9q6PAAN%3JAu3xqwSF9pQG%Pp%CD::ZQpYA0UMPQcZDusK3g9hDpERnxEzE6YUwRR3FzwWFRqiF4Uc7xjJHh8a5SAtG94iFBy2JNEccSZiHRAowx2VKfYdAiv6HVYs0x2TLYYduS4cHckvmhzCMAgcozFqG20ywxofMxcaujNpGT40uBitNAcYBzVXF001qxZ9NQgWmjV0FaM19hSaNZEUhDVJFGI1HBQ6NQkUDzUMFOM0IBS6NEIUlTRrFHg0mRRmNMcUYDTyFGs0FxWINDMVuTREFf80SRVbNUMVzTUyFVc2GRX5NvoUsTfWFH04sRRdOY0USzpvFEU7WxRDPFUUPz1gFDI%fxQSP7AU1z:1FHdATRXsQLQVLkElFjZBmxb8QA0XeEBzF6U:xBd9Pv0X:DwYGCM7FBj0OOwXdTadF64zJRepMIEWcC2uFRAqqxSUJngTCSMWEnsfiRD4G9QOixj7DEAVBQsiEvQIOw:PBpIMmgQsCloCDAgTADIGxf2bBHT7QAMd%RoCwvYhAWP0SQAC8or:ou:Y:kftKv716nb9sei2:H:m4ftk5PT6YuLq%XjgwPil3nb359wK9j3bgPSo2dnyKtgd8cfWUu%A1X:tV9St61HT5Olu0irotNGH5iXRAOXG0JrjmtBa4qPQROHk0FngW9Gb3wbSCd:h0qLe6dNk3hXVS95h1lXexNd73jfZud6x2gvfLdxp36Pdz98Q3zfgc%CZ4Mjh8OAP4zPhR%Rb4W3lZOGD5knhiucJ4YLopeBs6R7gROp43wfrtd6169fdSezh3MTs1dsl7bbacO2H2aTtS9jF7QfX1O2:1dPtd9TB7TPTn%330WrtxdAj7aDPx%yLzlfsh83S65XMO%u3y5Tq78rj6T7KLumkyX3oI8nU57vIO%duyLXmPshH5izI8uU9yLjlc8iY5dHIk%VbyanlEsra5ffKKeYNzJjmU80o58vO2Od00KfoTdKP6VXUi%qI1pjr5div7Gvbzu0Z3u7u7%AM8O:jIPEY5yTybOoU8%nt7fOO8a:0WfVc9Uf59vVR:YH2cQED96IFgPfaCf33Ew5%%EMSCPlhFp:5YxpG%j8e::rpIcv7ViWq:Hsom:1RK5v%zy2q::AvwQCwMd0BDDP4Av8zCwSJNBMFqTQLBl809AauM84HnjKZCDUxUwl%L:oJhC2OClMrCwv1KHMLdybGC%MjAwxDIS0MoB5CDAIcQwxyGS4M9RYDDJAUwQtHEmYLGxDxCgoOYQoRDLUJKwrqCFEI:wd7BvMGoATFBbYCdwS0AAwDkf6GAUb86v:O%Tr%J:d6:E70q:pE8c74De7h9qvq4:Qj59PyfOO08L:fie7021bsJ9gh6mTU7ee20L7lJ82V48LJdOGPxmDflcNc3drAb9tmvp:ZPbzw12S6ZtbhuAPVtbfI0%K2tNJotsjRQ7YB0W62X9DktuDPnbeBz5G4Qc%6uR:PEbsZz5G8MM8xvmLP7b%xz7vBG9CUw6LQcMVJ0UfHE9IVyQLT1Mob1IPMXtUfzsnWqc9W2B7R:9l%0r7byNOL3fvUYd8W1jzhF9cX4::X7uTO2Lvmg9l86B:aKuql2sTrFdtG7XHbru652:nv79sn8RHcN:Ih3CvzHdwG9AXcy:TX24D1ktsp9jTbzPa92m33LdoR%IXZufjI2Gj59tcd%hXX2Pon1pf7MdVb:DbUIv0%0%z9TdK6:mzRjP%h0GIA8885AWjPEQIGz%kC0s7BA9HOmAQKz3IFg89OBkHQKwdM0QQIqNLUCFrUlglk1kgKydjoCobbeAuZ3v4L:eF%DKzl:wyf6YcNyu0cDibyww6m9oMPPvtfEOD:XBF:BHwSDQm:E3wNJBXBEagW0xVIGKgZ:xk8HccbiSCaHYojcB8%JkMhoygOI7kqzCSDLHkmBS4VKEUvmylNMAkrKDFZLOAxhi2CMowuHDNnL7gzFjBhNJgwIDXtMPw1FjH2NhMxETjmMEs5jjChOg0wDjxkL409ky4VP5stn0B8LCNCNiuaQ8sp%UQ6KDdGhyZMR7UkMEjIItlIxiBESbcebEmhHFFJihr0SHYYWUhnFoNHXhR5RlwSQEVhEOJDbQ5nQoUM2UCqCkM:3givPSQHKDx8Bbc65wNjOWgCMzgBASo3uP9MNpT%mzWa:Rc1zfy%NC:8kDS%%4c0d:ugNFf71TRb%yA1gft4NcX71DUm:C42ofx%Ni:9vTbO:eU2dv7wNiT:2jbS:502egAxNhgBkjWrAbs0MgKnM60CVDIgA8EwjgPwLvcD4SxcBJgquwQXKA8FYiVXBX0ikAVsH7cFNRzMBd0YzQVrFbcF5RGGBVIONQW5CsEEIQcnBJEDZgMOAH4CnPxyAT:5QgD69fH%zfKA:brv8fvC7Ef65%mH%CnntPaM5NT0EuLt8r:fBPGY3Rzvods67d:ZYOtU2JLpBdfS5:PVJuYf1ZHkitQY4zbUwOEk1IvgVNR638bUjd561cPdbtYY3aLXjNwU2R:cxNrR27HcoNva3o3bPuGS29njrNur5tXbrukK3N7sSNw28JHcsPPj3EP3Qt3n%rDdkv4t3joCvt7SBWTfTAkj4JoM:uCvD:nhexIW4:IUV%QJF7vlthhD5:QZ7Oi9GrLqDRuP7OMae%4%GnDwHhll8ogXU:R:FTb2DhMM%D4Q1PkeDYv7ugkw:SQGwP5rAjcAoP6QAdH6yQIM994DXfPQBM7vnAVl7EMGKOnFBhfmIwc041sHfeBuB%:dXQeH2ykHP9nRBhTXVAb:1LIF:NLqBAfR:AMbz%cCNM2tAU:LVABpyeD%gcdX:ZjFwPuwwyD6zMF6%O%:0:Yeviz1XbyH87O65vEkuUzwure%7ny2P%1ztdbrqbSE6iW0TenvszboC7RB5360d%ZLtd7lcrZ95fW3XOXRuX:lBbzn5Y2%kuZlwX7niMSk6PDHAOqWy4zrdM9C7YPTHO%71xXxF9wk847gQ:Ub5W33tumc%Vfuzvv18gD%h:cyAAT8YwJmAJMEpATEBrwI9wipDC0LaRBkDfoTmw9bF84Rihr6E4YdHRZOIDMY4SI9Gj8lORxpJyQeYCn8HyYruyG%LFojKi7SJG4vHiaMMDgniDEhKGIy1ygdM1wpujOyKTk03SmcNOAp5DTAKRU1gykwNTEpOTXRKDI1aSggNf8nBjWVJ%c0LSfFNMgmojRnJoA0DSZgNL0lRDR%JS00UyUfNEElGzRKJSM0bCU5NKQlXTTvJZA0SCbUNK0mKTUcJ5M1lCcVNhQosDaaKGc3Iyk6OK8pKjk6KjQ6xCpXO04rjzzbK9k9bSwvPwYti0CnLedBUS46QwQvfES:L6BFgzCdRlAxZkcmMu9HBTMvSO0zHUjdNLRH0TXwRsc20UW4N1dEnDiGQm05YkAiOvM9sjpBOxg7WDhRO0c1WTscMjA75S7VOrMrRzqTKIQ5kCWMOLQiXjcHIP41jh1xNEsbvDI9GecwYxf6LrgV%Sw4FOkq3RLLKKARoiZ8EG0kaQ8uImIO6B9fDZwdWwxOG1ILARk:CrYWIAlvFPEHLhKxBvUPYAXFDQAEoAuRAocJFwF7B5b:egUR:oUDi:ycAQj7wP%N%fT9Hfg8:L72nvp09R35RfS%9zTzgvZD8m31c:F%9MPwufMy8B:zvO%08l:ve:IX73Xy4u6h8rnu:fKa7oXzf%4x9GXu:PRH7t:1Iu7T9vHt0ve07dX4aO3W%Qvtzvqe7Lb7IOyI:JDrQv3r6uD9Mepl:l:p0:506C7:b%d7:1Hmv:8c5f3:0uM2AHfiaQAN4ZQAl9%1ABXeywCM3NYA:NrXAGjZ0ADT18MAP9ayAK7UmwAl03wApdFPADTQEQDWzr::j81W:2LM1:5Uy0T%Z8qi:Z7J9vz9yET8hsiT%zvI5vohyEL6OMit%YTIKvkHyb:4w8ls%LnKNPjqyxf4Vs0U%P3OKfjf0Ff4%tKa%E3V9PjZ12H5m9rg%ZTdbfrB4AX7HuSj%6rnRvxi6%v8Qu%S:UvzOv569%H%z:uD:0gAGwDhBKUAlgkbAWEOewE8E8QBHRj5AfscHwLOITwCiCZVAiArcQKIL5MCtjPBApw3:AIvO0cDYz6kAy9BEwSLQ5UEc0UoBeVGzAXjR3wGckg0B5hI7gddSKIIykdKCelG3wnERV0KaETDCt9CDgs3QUALfD9XC7g9Uwv0OzELNTruCoE4igrYNgUKOTViCaEzpggLMtYHcDD4BsouDwYRLRsFPyscBE8pDQM7J%oB:iSvAJYiWv8AIOn9OR1c:EIas:oaF%:4whMR9z0QGvWODA3zugjt8McEu%67AHrsn:ws6nn40OdT9GTlM:Dp4iDsXuAk6MTdROQh24jgedj53NLVnNky03jWndCR0xXO6tCdy4POOclfzO3Ge8rAxNrIt8J5x9nAWcYpv3jFqr3UxFu8asQ5uzbEQbo0xHC5YcTEuLjEPLg1xdi31cWWt5PGeLdux323Ysijt2zJ6beHyk24rsvNuNvMaLkJziC6Ms:3ulLQ77tn0Qy9btJPvmTTur9H1EjBFdX3wsvVvsRm1pnG49aAyELXb8qC12HMotdQzqTXONCI1xTSUtfd0wPXjtWe1iDXJtaS2J3V4tkE1RHbW9Qi3KTTGt3f0v:dC9LV3irRo98%0GzgSc814U:OAeJSzdbiV8y042PLoOR6ypnlo8mf5uPIsec:yM:ovcf26WbHJes:x1vsUMeX7Z:H1e4zyBPwDslO8TTKgvKmy7DzZ83Y9HjP:PXZ0SD3jNRF%I7Xavne2oz6eN6p%1fivPxx5sT9vurA:jLvtP:B86MAX:iVAf38jwKOAZUDBAatBFIK1wVsDhcHSBJsCN0V1wkkGVkLGRzyDLwenw4RIWAQHCMwEuUkCRR2JuYV2Ce%FxMpjRkyKkwbPCv3HDwsjR44LQwgOi5xIUgvuiJmMOQjlzHqJNwyyCUzNHkmmjX7Jgs3TSd:OG4n7zlhJ1I7KSefPMgmzz1CJtw%miW:P9Ekd0DqIwJB5iJdQcUhikGIIIhBLx9YQbod%kAqHHJAghrBP8UY7D73FvY9HxXlPEMTvTtoEYQ6kw8:OcYN8TcDDJ82SwpNNZwI:zP6BrkyZgWCMeQDXDB0Ak4vGgFbLtT:hS2k:s4sh:00LH:8tyuN%1QrsvoKK:T51CpU%bAq1fiYKnb4iCo1%HwqDvhtKvz3Vyr89zQqCfj:KSH4sylC%Espa:jCKJ34FijV%EMnEvlGJlL5HCWR%cEjzvk0Igf6ciA%%nkedvpMHLL67Bn2%l0XRPuiFJz7vxH8%7oOX:yVC8H8Vgge:QMFcv2iAbv9OP72:cz6Iv5k9zn%B:Q4:rrwGP6D7dT9Z%pp:Wzn0:yW5BX85%Ew%2LfKvoG3Qj51NrT98zYjvbu1kH1O9Xw87TTn:Jd0lPxN9EQ8ETQ1%6Iz6vtAs%M7LXOeuugznnqxs6J6SjPr%jIz%7nqNBK58rRxOYx01:m29QW5srW6OX72NPlbNvT5Rne6OX%4BHmF%RP5l:noObO6gPnXe505wTy8ue49XnobfkF6Rn9l%mtAC7qHATJ6lkHautVChLsBA3C7FkPfe1KEUTuzxIZ7%AT:%95FPrwmBQM8j8UN:NxE330NRLc9ZQQUfeYDtj4TQxq%r0JAvzzBpn9%wMs:%AAuQCs:T8Cafq8Ax:3LgXX85MGlvDkB1:tHQk06jYKF%cqCwfk9gsC4ZgMBd4QDQ7bYA0Z2IkNItWPDSjScg0pzzMNJszSDCDJUAwZxqwLFcPoChbABAogvQMJNrrmB1m3rwaPtGIF2bEABD2vjgK%rBEBYaqN:yqoB:4fpoP8RKQE%56ii:kyoRz4BaC59hufafV7njD0Kp4U8y2eGvKKnkbxRZ%Z8GGgFfDgobrvw6OK7wemiO%rqLjvqqsd8P%uuvCkso:xk7ad8sW63vMyv07108Pn9qHIoviVzXb6ptJf:M3XVP4C3VIAPeJSAnbnUgSm7E4GwvFECMP2NQqg%yIMUwANDtUE%Q8iCesROA3jExQR4RW1FOMXGxjlGUYb4Bs0Hs8d6CCuH2IjeSGkJTAjsifRJIwpXiY3K9QntSwyKQgucyo0L5IrOzCKLCAxVC3oMe8tlDJZLiYzlS6fM6cuADSWLko0Zy5%NCAuoDTELbM0Vy25NNwstzRULK80wiuiNCgrkzSJKoM05yl1NEYpaTSqKGQ0FyhnNJMndTQiJ5M0xybCNIQmBjVXJmA1PibUNTcmYTZAJgo3VybMN30mpjixJpc58iabOj4nrDuTJ8c87CfmPUcoAD%fKA9A8igKQUAp6UGIKaNCyCkvQwMqh0M3KqJDZCp8Q4kqEEOnKltCuypeQccqGEDKKo8%xyrKPMAq0Tq1Kq04pippNpEqDzRvKqgxOyo8L%4p0iyDKXIq9ighKEco5CV0J8Ajfya2IWglxx8sJPEdyiIwHEEhgRqQH%AYuB1KF8AbuxWsGTAUhRepElIVIxEZE58P3hAdDqIOngxlDCULIwq2CdsHUwiMBf0GOAO3BeAAgASJ:lgDN:w%Au75NAGy9zcAhvVI:2vzZf5i8Y39a%%::IXt9:uv6zT76elz%jHotPmJ5vT49%Q1%H:jdvcn4rn29%D%9fDfR:UX35b0a97r8%3dSPOd3a7yfN0f8ovdmfHL3RzxPN6p8N7ePvCs39nvo%B577zhHe:y4sLuPORm7pPlCO7v5qTtSug67Z3pxuzj6kfsFuy46zXtF%s67mDqI%%R6fDvpeih8JznOvF05r:xL%U28s3jpfJS4g3zwOBx8xjfz:Nf3Sb0l9t09MPZuPTp1:L0D9Ym9TvUVPV00oD1w9Cr9S7P1PW8zfv1dcwc9l:LNfZ%ykP218lH9m3JQvZCyTf2WMkq9rDJIfZJyiD2JMsu9kDMS:aezXv2PM%:9hjRGPcw04T3gtUD%AvYlfjL2jf5v93r%ebgsfo%5In7xed0:Hnrcv1X73:%XPOY:4P3twDK%9gBKgD3AqAEFAQlCTAFtQ1NBkcSbQfWFo4IWhuvCckfygodJNwLSyjgDEos1A0SMLgOmjOND9o2VRDNORQRbDzOEbM%hhKgQD0TMEL3E2ZDsxRCRHIVy0Q0FgdF%Bb:RL0XvESDGEpEShmwQw4a90LKGiZCeRtCQRQcTkCWHEs:%hw8Pj0dHj1fHfA7YB2uOkEdUzkBHdk3oBw6Nh0ccTR3G3oyrhpQMMUZ8i29GGArnRebKGoWpSUrFYMi5BM5H5gSzxtIEUwY8g%2FJIOExEkDWgNpQu5CRQKCQZxCFsCvgay:vwEEPswA3v3WQHz83v:ffCU:RrtpfvN6a35l%ao93vjlPV74G:znN068eHa9u5M2Kns4dVa6qPTEuiV0djluc%z4xHOqeGgzL3fZ8v13WjKVNyjyd:aGMma2cjIhtiwyKbXz8j61iTJgNaryTPWYMoS1kHLFtZIzDzWcs2A1rvO39Yg0FfXnNHo1yzTktjN1FTZeNYs2ijYGdvW2Rbcfdsh3RbdON6d3lzfDuCN4Gfhz%Gl4iLjxeOG5MXk%OWh5XPnVubz6OXmcupL5%zriudd7aPnxO6X5x7waedp8RznovKw5sjzKubY9Ivl0PXY5LD2EuR59z3jLvhb4tP4cOFw%X7gDfqL37D6nN5g%7bdIfzi3PX8JNzd:YTb1f4J29z:udruAJnaCQKw2igDBNtKBJrbbQV13JMGmd27Bwbf5wi84BUKueJEC:nkcQx555gNM%q3DiHtzg898N4Qf:PoEd728BJR%vcTzv39FE0BAxbFBAUXLQgDGH4L%xiyDu0ZwhHaGqsUwhtqF6oc:BmUHWEchB6aHn0fqiCBIJUilCFgJLQiEibhI7InGyVIKWEm3SqzJ3YsDikaLnAqzi:VK5QxNS1sM4guVDXGL0k36DBIOesxSzvKMks9hjNEPxw0L0GLNARD0DS9ROc0VUbMNMVHfTQJSfgzHko%MwFLUjK0SzgxNkz1L4pMjy61TA0tvExxK6NMwClwTPsnKEwiJs5LNiRnSzci80omIHNKBR7qSdcbV0mfGbtIYxcWSCgVakfxErZGwxD7RZ8OOUWIDHFEfAqkQ3sI1EKCBgNCkwQyQbACY0DbAJc:Gv:RPm79ET7a%1c9XvqlPPr4%zus91g7dPa6OlT1ITpL9Io5XPPvOIfyTTjK8Z83JPHfNpTwBzYY8BQ1re8ANFHvyTIC720xv%7qL4XuPy5W7mwsMO5xKhbuTCgF7v4l:e2II:zt6yD97Ske:%1GG::tRhj97S0V%u3%EfXtvw7t7XEL4O0bCMntvgSl7WABcO0F:ibtsvrG7Gr3Uewy9MbrDfEm6::tcuoJ66fpL%jF6HPlyefV4rPmV%CC5fndNuS729Tin9lh4aXX5N:Q1WfeI9Tx3KTSiNtY0THaQtDt2GnPvdfPzp7Wec6R1WnOkdSizp:TJM%40vHP39EI0RfRaNJi0A3Ux8:01UrPGdjuznbas84F3ZnOv9%czpvius6R5e7Oleg3z53rk8%d7v7PifF40Fb0%9D59oTRavkR0qD7ndKS:SjTOv%w05EANdSVAbfUQgI41ZcCu9WWAkPWQALV1psBdNerACPYef:i2A3%s9lw:JbarPqN28n4mNzP9rndw:Tv3qfyN%B:8I3hS%7q4gzsSeTB6aXlbOf95gzlTeih4pTpKuDO6qjd%OsZ2wztfNgD7tPV1%4d04LvXNAA8JHNT:C%ynDw5cdl8AvFM:A0wtzvZL9o76G82O7wuTHuVbdy7dS0nOxusq7rJ7Cp6v6tjen2q13oEKod502o0uWxpoDkPqUv4:ej4%HeoqLg96Fu30ahS97PoDndmKA63KWgTtv8oHnaoqHA2ZuiJ9nqo7LYkaVn2JKnRtjtqVDYoqyG2LCv59gSs3LZxLYr2r66Edv3vibcZsNq3QHI3N68zHrgj9FB4m7WLeRS2znmM%Be6AjllerJ6dnscO4j7:fyb:FV97nzh:sA9of:QvhTA3r66Aap:EYKy:5tDeIAXxDvAhwT9ASmFfUG:RfxCCIa6AoVHNYM1x21DmgfgBDJIDMS%yHOEwEjTxXcI7oWkCQOGCAlTxmNJXwa3CWTGw4mlBwmJnsdJiZGHhAm8R7lJXwfpyXnH1klMyD:JGUgnCSBIDYkiyDRI4ggciN7IB4jZiDYIkogoiImIH8i%x9vIskfdCKPH5AiUx:CIhYfDSPhHnAjuh7rI6cefSSuHiMl0B7bJQ4foiZmH3Mn1h9JKFsgHinzIO0pnCGtKlUiWSsbI%or6CNaLLokpSyMJcYsWia8LCAnhSzbJyAsiiiPKyop0iq5KeopNSrZKJ4qoSfzKkUmNSvLJGYrOCOEK5EhkivdH48rIR5:K2AcYyueGj8r2hgVKxUX5CpOFasqhBNlKrYRDirjD6EpDQ4cKTEMfyhSCsgnbwj6JokGEyajBBMlvwL1I%AAtSIJ:1IhP:3KH4b7HR7h%U8cVfhlGuT2ZBiS9VUWYfQ9FFLzIRJl8gQQl:HlDebwxQtK8KEJwO94B0DvSgXG7hoDTO7pAM7tvf5J7Zn8uuyC%iDsffh564z2xOqx9ATq7PI46TzxY%ig74nnGe6t5qbs0uVN6:zkEeow5Pnob%ML6L7iS%ce4rvmkeFd5hfhMeaw4DrmWuB35hLg6ebV347nnt9l6Gjfaekx35Xq8t7i66reSu1V3sbu791P8HXd3fHm3GbzPtzj9HrbTfaX2p33k9nS%GrY5:ke19z6rdWx%xvUZfxr0vv8odB2:cPO2:3WzC:%4Mp4:uTIuf7pxvL%9cQl:wzDUP82wXL:eL%N:9u9pP9kvL3:Grvd:wK6CQAiuUYAf7iWAB24%gAAuHABK7j1AaC4hQJguR0Darq5A7%7VwRfvfcES7%YBYTBPQYJxOUG3MaRB:nJQghfzfQICdGmCfPUVQoX2f8Kb92iC:bhPgyn5tMMfOtlDW3w%A1z9ZMOiPo6D6L:7Q%6BK8Qygl8EcgOURKwEy0TeRgOFB0d9BSVId8V2yXRFugpxxe4Lb0YSTGwGZk0mxqoN3kbeDpFHAo9:hxgP6IdfUEvHmJDpx4TRQsfkUZeH99HpB::SOEf80kVIL1KRCBeS2wg1kuNICNMpiBETLcgNUy%IPNLuyB6S6wgyEqLINpJVCCvSAIgR0eSH6BFAh%8Q1Eem0GBHT4:kxypPIcb3jlcGuE2Exm4M6sXaDAkFvksghRwKcgS1iX7EDAiHw%EHjoN2BpPCzEXYgmSE3QH:Q%EBXIMkAPwCJQBdQWM:wACc:2O:kf7HvsF%bH3r:ZG9ET04vDI8YXtPe816qfs8%YE6sTjV%er4J3krd3V4c:a:94V2BzchdUx2STTR9b10GnT:M6i0DvN:c22y4PLbso6yWTJKMebyFHFEsi5w8nHZMK%x1TB7seKwFTIBsDsyMW:r8nCv5jK%L%iy2DAyczywAjOqcFaz3vCu9BiwyXSVsSR01PF%tRYxlnWYceo127I4th%yQXajMoM25bL9duYzL7ckc1j3X:O4d1mzzbeSNBh3ibRX94E0jTe4dLg3b7TaN2b1M:ce9Ub3F7WT9tK13LaQdiK2UXZm9hY2qzXeNvB1qbc4tXg3RLVJd9X1HPgttPJ4TbTJ%Pb0o7krNL95a:Sdufp0vnoX9OH6hXUH%wN1cDtR9Zn78TXD:GC2bbyfttX9LXd8PUg4ID3uuIH%Xzlifpd6Af8VuuG:V7uBv9u8YgAf:QKAo33iwOS%gkFiv2FBnMA:gdIA3cJCAbwCrIIawxFC%UNww1bDywQyhCEEjASzhSLExAX3BRMGSQWiBtmF8YdoxgKIN4ZVSIaG6okWhwJJ6EdcinyHuUrTSBfLrMh3TAhI1ozlSTQNQwmODiEJ4s6%CjBPGQq1j7EK8RADy2JQkAuI0ROL5FFNTDSRvMw6EeFMdJI7TGSSSsyK0o%MqBKJjL1SuMxLUt0MU5L2zBbSxowWEs2L0hLMy4xSxYtFUvjK:lKnirfSkkpyErqJ7RKgyahShUli0qjI3BKLCJKSq8gF0orH9RJnh1:SQocGUluGqBIzxgUSC8Xd0eRFclG9xMNRmISRUXSEHRERQ%dQ7sNwkI2DOZBuAoIQUUJKEDhB0c:kgZhPlwFeD1DBIs8RwOZO2wCozqyAak5HAGnOKsAnTdfAIc2NwBgNTAAJjRGANQydQBnMbgA3S8LATYuagFyLNIBjypBApAosgJ0JiQDPCSTA%oh:gOAH2AEAB25BG0aBQXIFz8FFhVkBVcScwWPD2sFvQxNBeIJHAUBB9sEGgSLBDEBLgRJ:sIDZ:tHA4:4vgLH9SoCE:ONAXjw7AD77UoAoOup:2zpDP9h53H%hOXX:djjPf1e4qP8G%EI:A:gbvs:39X6rt4:%mDerflX3iH5l96f%CDfKfjz38H3D%Fn93DiGvcT5NX28%WW9groWfZS6hv2w%zd9VTvofX%8Wz1tvRD9XP3LPUr%in11vw%9Wv:a:XlAaz1PQQB9m0GZPZwCNL2QQpH990Lvfc%DS74Yw6X%EsP8:j3Dz:5aRB7%aQQqfmtEMv5hxDl%TUQ%:m7DxH6Gg8o%lYOQ:pwDWX6awyR%kkLyfoMChH7swhq%z0H1vuqBVb89QPq:BwCkf0cAEf%8:0J:6H70:8n%ZwAiPZgAcbzGgLl8MUC6u1fA9nq6AO2510EhuS8BE7hAgUQ3igF0tooBZfX:wRh1KgENNEkBBPOdQMBy54CAcikARfFjQBHwl7:k78b:v28yvyIum37NbgG%gW2lfj7sxr3GLKT9WCw:vPUrlzyeK2y8FCsBO9hq1vtsKq:60KqN%oeqsnoSqp458uqROamqy7l3aw25HGuX%NisKnirbIY4k61seFCuHbhg7tr4Qy:k%HXwu7h3sZ94hrLQeOCzzjkDtRi5bXYu%Zv3UDoM%Ls6fjmueu566Ptb:Cj7xX1tPGl%dHzGv709W4CGPicBjf6nwpL:HMOTv4VEj0AghUUArwY0APBG3EFkx74BjAhZwiYI8AJyyUGC8gnPQyNKWcNHSuEDncslQ%gLZcQmC6LEWUvbhIJMEMTiDALFOYwyxQnMYgVTjFEFl8xABdfMbwXUDF0GDQxIhkQMcIZ5DBPGrUwxRqHMCAbXTBfGz0wgRstMIkbLzB4G0gwVRt4MCIbvzDkGh0xnhqNMVAaDzL7GZ0ynBk0MzUZ0DPHGGs0VxgBNe8XjTWWFwk2VhdyNjUXwzY3F:o2XBcWN6AXFDf:F:Q2cRi0NvEYVjZ2Gdc1%xk5NXoafDTsGqQzTRuyMpcbqjHIG5Ew3BtpL9UbNS6yG:gsdRuyKx8bYyqzGgspMhqpJ54ZPib6GMgkRxhGI4gXtyHBFhog9RVqHigVpxxfFM4amhPfGNwS2hYjEsIUbhGdErkQcBABEEEORA8YDH4O%gmvDewH1Qz1BfALGAT8ClcC9Qm2ANUINv%WB9j9MQab:KIEfvvpAoH6BwGg%QL:2Pjg:Cb4qfqF92T48PYU9mD2vPPR9V3xPPX57pz0juzu8xzqMPOk51:yJ%V78ajihfAs4H3vud1m7lfbQe0N2RHs5dbc6uLUpOkI03HoWNFF59DPKOZyzhzlPM0m5DDMRuNTy37ip8rO4THKM%H0yazg8ck24CnKzN%aymzfRcsQ3yfMst4:zU7eic7g3QDQYd2f0dDcXNMq3DHVbNsT15ba%dim2dvamtiw3HHXcN4p1hTgwtSW4TrT8eKW0SPk188o5QTOBOYjzLbmPcpF51fIt%d5xhHoqcRa6OzCmehHwdPovr8L6Va%Q%kTvXzp%7u56RK7%%leukbq4rmf6qO5C%ukuZLr6bk37HS6:%xFu%ntXbzy7ry9FvBfv03xR8GP8nHD1PPexRj1i8hU9nbLhfedzqj4:dG8%ZDVwPpS2bX7PN2c:Erhd:1z5Un%tOkS:wbu0:9h8o4AwPZCARr79AFn:6kCoANoA78HOAS%Cx8FmQ8hBlATPgfgFnMIShq8CY8dFQuwIHkMriPnDYomWQ9FKc0Q3is%ElgupBOxMPgU6TIyFgA1TBf1NkEYxjgPGW86txnvOzsaQz2fGmc%5xpZPxkbFkA3G51ARhvpQEgb9kBBG8FAMhtEQB4bfD8FG2c%6RoFPckaWTukGmc5dho4Nz0a0TT1GTsynBl8Ly8ZmiyuGJopGhiAJnIXUCO2Fg4g5hW8HP4UYBn6E:wV1xKTEpIRKQ8pEL8Lng5ZCPMM%AQvC5wBVQlF:moH9PpvBaX3ZQNY9EoBCfEc:7nt2fxm6n:6EecM%L7jgPVu4NzyJt0f8OvZTe3A1mnqrdN657bQh%TizZjhN8u13rzI5Nt3xifZbcSC1qLC99MbwYvR2b9Dz92%J80nvj7Ltr2QyYa9IsiXvfjG5L0Vxmu%ecUnvyXFE8AZxSvBVMVpwtPFxsORxj7FhsfIxqjIYMjryQDKRsugy6zMPc0Tzs:Ocs9R0MHQvdH80Q3THtM91CTUStUR1THW49Xw1p:WhtdI1:PX4Nc22G3YT9jz2D:YdtkJ2P3ZrteM2jPXKNuf1tTb99WU3EPVa92M1Fze2NNo3y:TlOCY0uHhGdJQ47jR4uR40ZXmXtFm6G3RTuqm0UjsDdJL7qLSUPBo01LyYNRM9IfVOPbd1hb4Xtji%QTanPvM20P9rt3Z:qffYACx4dwByeNOA%vluQQT6B4GPOp8B2Hs1Ah%7igKjvB8C4zy1Qx39DoOTfatDw:4MhHB%cgSZftsFAD9GRaX:s0XMACFGc8BQBt6A:4cMwW8HgAHdyDkCCoi4QrQI:gMYiUrD94mdxFDKNsTkilRFs8q1hj9K2MbHy3zHTougSBPLwYjYTB8JXIx3SeEMiQqlzNKLKw0Sy7FNSQw4DbUMfo3WzMRObw0IDr7NSA7HDcLPCU42zwaOYs9:zkXPtg6fz6nO8M%bjzkPjI94z7zPcI%sj5:PnI:GT4xQJA98EDhPK5BDjxpQhg7IEMCOtFDzzh4RIA3E0UXNp5FljQXRvwye0ZJMchGgC:8RqAtF0erKxdHoin8RoQnxkZRJXNGCSMDRqwgd0U%Hs9ExRsNREoZNEPWFkhCcBRMQSASRUDqDzY:0Q0hPtgLCT0CCvA7UwjUOtAGuDl8BZs4XAR8N28DXDa1Ajo1LAIVNNAB6zKeAbsxlAGBMK8BOi:qAeUtQAJ9LKkCASscA24pkAPEJ:0DASZbBCQkpQQrItgEFiDwBOUd6wSXG8cELRmCBKoWGwQQFJMDYBHpAp4OHgLMCzUB7QgwAAQGFf8XA%n9KACx:D79c:tf%jP6kPf2%Nf0v:c68o:2v%9s9WvtV:RC61bzSOlt8oHnnvHw5evwleRS8HHj0O%G4l3v0%H17ljhkO4W4SruDOG%7TrhTO2f4dHsOOJN7ALjwev44y3rFuWW6lXm:emy52fpJenY6KnqUug57NXnzu1g52Lv8%bu8IvmbfIp5tnzz%Uv9YLlavZG5Yv3IeWP%BPld:ke5UX6QOX4%nbllPu75Rj8DeaG:Gjm4PzH5ij9Jude:YDnhP3P55r9Duii:T7om:1d6IL9cehW:X:oE:2N6LX8n%g4:Lnomvvc6Nf6Cens%T7p1vh96ZT3xukk9h3qhPSD6rXy%uq58IHrke4Y7EPsvOzS6WntQ%cb7p3ky%7k4XbvHd8X8E3crvB42Tvxo9a98dHTNfIG0aLyRs4C85TLT:PyyIbzYsai8%fDn:OEwXvzPL828xO90vIKu0:yJbmw8WW39vDOtSPwYbQ67yGzPe4Ssi:tN7ET7JGw6uolsLbp8q946PuvLudBsNvlw7CC5ISxKuOGstrhyLOd4E61et8Zt3neK7me3YK77dwfvmfcAcEN3CXE49uIx%vbJcsr3PnOpdz%0lzdLddQ3oLbf9:03%TgfOR94hPpRuSw7TvmS:JY6N32m%pg%:vsy:9x7xoE9fFGCH30SgwC9x8QfvnBE%v7KxdH:lsajwBNHb8CAyDUBH0iyga8JJ4IwiZNCpIo2QssKkQNkSuRDsMsyA:DLfAQki4SEjQvMxOsL1kU:y%GFS8wuRZDMPEXQDAsGSowaRoHMKkb3C:tHK8vOR6DL44fWy:sIDgvUSIcL7cjBy8XJf0ubSb9LrAnCy:dKCcv8ClTL%YqkC:AK9svfiwzMCItlTCvLf0wLC5mMZwuzTEELywyai%BMs0vxjIuMPkyjTAWM%cwHDM%MQgzlDHcMuwxmDJOMj4yvjLRMUAzUzHVM8gwfTQzMDM1ly:yNfQusjZOLm43pi0gOP4swzhYLFA5tSvCORgrEzqAKkA67ylHOmIpKjrYKO05TyiVOcMnJzkxJ6s4liYkOPAlkzc8Jfs2eSRdNqUjuzW%IhY1wiFxNLMg0jORHzozXx6rMiQdJzLkG60xpBo5MWwZyDA:GFYwIRffLxIWXi8VFdEuKRQ2Lk0Tii2BEsoswhH0KxARAStqEOwpzw%uKD0PQye1DqklNQ7hI7sN7SFDDdQfygycHUoMSxvBC%cYKgt1FoMK%RPLCXcRAwnyDioIaQxDB98JTgZUB00FyQRABEICKwPC:w4CUv3rAPv6xv:G%KL%u:aA:eL0Y:w88037zPE%%o7wNvmB7zX4pe469:ftQ:Z77U71Mu1Z9B7tYfM:7WXyk%1h8RXuUvDA7jXvkO8I7n:wyeyI8XfrqfIR6tvzmega9Q7nXvZy5Z:3xOPV%AXi%fk04Ab7Ut75%2Dcz:xh2oj9Wdgi:k7WnP5H1PX%S9Is:1:QRP%Lzj::08wj:zzL%f7Kycn%gcid:mbHfv57xnH%xcV8:kjFn:4Hxdv%B8Uu:0nFl::QxRUAn8arALjHWQEaySMCxMoJA7XMCgTrziMFYtFQBhjUiQcL18kIOtoJCqHdQgs%4XEMDOWQDQTpnQ4i7ZUPXfF5ELD1ShEU%gsShf7AEvwCbRN1BxYU6wu%FFgQZRW4FA0WAxm3FjYdYhdMIRMYQiXNGBcpkxnLLGkaXjBQG9IzRxwpN0kdZDpRHoU9Vh%KQFEgdUM8IUJGECLxSMkif0tiI%hN1SMqUB8kP1I6JCJUJCTOVdwjPldjI2xYvyJWWfYh91kPIU5aEiBZWgUfFlruHYVZ0xykWLcbdVegGvhVkRkvVI0YH1KWF85PrRZDTdAVhEr8FJtHLRSNRF4TYEGJEhg%qxG4OsAQQjfED7Yztg4VMJENXyxUDJQo%Qq1JHwJxCDWB8QcAwa4GP4DoxTFAYoQWf9uDLz8Ugj0%TYEBfcbAPXzAPzH8On3gO3X8yLq0O%w5tjrLOP055jfKeT223vgSdju3JPUhtnb0EbWJs0z03:JUNDxxaHNiMIry0%:8MhQvPPGj7k2xRG3ucPUtHrC1rJ5wRexs8CTrybASq7Ovz2tqb9trLO:2avqv4GrSMBiq8rAeqtpwcSrIcI%rOvC5KzCw7OtosSlroXFtK9nxtewQccEshDIMbPPyFS0eMlltQrKXraByju33Mr7txzLnrhCyya5T8uUuUXL7LkmyzK69MpuurLKprpjyuK6Csosu63JjLtPyQi89sinvKbIbb1myFq%OchwvyTIrMAryA3CUsiQw5rINcUHyfnGl8nayErK18oey%nMEMwLzyDNNtFLzmLTkM%G1fDQnddo0qLZ9tOS25fVbt1H1zTfANno4L:ai%KA3CHkQt6w5QLgPefA4c7ofONp6jPlEuzm5srtk%iT7zvqavHd61Dzeu1E9RTvR:ev8Fn5TfJ9%:Tzsf2q9fP:dPc%Alb5jgRU%9sGcP0eCaz:UgsHAnINfwR5DxIHZRG7CS8TdAzVFDcPURb8EaEXuxTCGG8XtxkRGoManhwrGxEftRtpISgcoyOKHL8l4hy7JzYdlimKHVEr5R3sLEweai7EHs4vUB8aMfAfUzKkIHozZyGVNDQiozUDI6g2zyOjN48kljhAJX453CVdOmMmLzvQJvM7IyemPFknSD1uJ9Y9XSdPPiEntT62JgY:GSZEP0klbT9FJII:ECN:P60hYj8gICs:ah7YPo8caD6SGt09dhg4PT4WdzzwE507jxGoOiEPmTmqDHE4LwoyN7YH3jVHBXc06wIAM6wAfTGV:u8vr:xbLgL7xCyR%SsrXviUKWn3ASiw9nImMfbpJOr1ZiPY9ekh%fVvIEn2%R7C9oQdX:cNHBj4kRrm%A8ZwvmEF6b67hWL%0wUa:ybEj792RD8:QMPnv4ZDRv:Fwtr::8IjP:RBnn:jgQ0:zsCvv7b:xv%cP1P:f:6XvyL%E77FvYk%qXz5fg68Zj32e5G9ojs9vRL6rDzKOh88iPmYPFB5F:wiOJ87:ngt%6a3w7ubN6C7XPdEO2v3LnsINx%7MXbXOya21PsnNte7Mbbd%wW3Jbsh9y07BjdyOzI3czslN697Hjfmuxw4GLseeEZ7Iziv%um41nrwuTq6tvleOrv5gfq%eed6fboQOnj6fPov%q36IfrjOg97G7o3uxe6GztWOjn7WDoUe526KruoOj17t:oNe806WvvoOmb7yHqxu%y6u3vUesR8PjrMvCl7E7wUu1i8PrtavCY7mDwJu9A8J7vAfD975:vQfAV72vwYO5%8H7tfvBu7G:wLutX8MDpOPAj6BXwV%by717k0u864rfv7d%m73vdou:q2q:vP9jN73:V:e%v0j7w1s%M8PbM4:ATyj7xMceY8VPE7vF8wT7yrb6J8uq7z:I1uQ:zkrZH8wO0dvOMsZXzMa%f8:esjvPiql7z9qgM8zanlfKlpfvxQ6Q:8RKjYvAUomfvSqFP7ragIO1aoNvrN6CG6k6gKOmfoMXnKqFl5vGhDOXzor7jMqSB4rClWeFsp0zgZ6lj36Crp94XriHezLDX3b6z0N3stgzeVLqN3vW9Ut:KwVrgz8Wj4f7JLONRzvPkv9Lz5kPXJ%nU24brbOAL7gXlrfCZ6WbzJe4w9qLyBvkN9%P7YPvA:pb:lgGnA1sEjgcGB0QLkQnGDvMLEBIrDiEVNRD5FxMSmBrGEwEdTxU1H68WNSHnFwIj%RifJOoZDia:GlEnfhttKDEcZyngHEIqlR0GK1UetislH1gsBiDwLPYggC3zIQ0u%iKZLgckJC8ZJa4vMCY3MEwnvjBuKEExlSm%Mb0qNzLkK6syBC0bMxcuiDMbL:AzCjBSNOMwrTSkMfw0TzI9NeMybjViM4s1zzOSNSw0gDV8NFM1wzQINQM1njQ%NRQ0dTVtM6U1qzLNNdAx6DXhMPY14C:2NdMu7DW%Ldw1pSzLNY0ruzV8Kq41dimlNYAonTWdJ5Q10CaGNRkmcDV5JUw17SQXNXIkyjQFJGE0nyPXMzsjKjPVIloyaCJrMfEhYzBuIUkv3SAjLjwg%SyKH84rxR6lKuwdfSn:HFko:xs5J%8aHibTGQ4lrhgJJIcXEyNiFi0iQhVUISoUhiAcE7sfFhLvHhgRGh4hEDcdMA9DHEIOPBtYDSEabwzvGIgLpxejCkIWvwm%FN8IFBMDCEIRKgdED1QGHA1:BcsKqQRYCM4DyAXtAiADAwJnAA8Bof0RANT6Cv8E%Pf9NPXY:GjyrPuk73L67Owr%UTq1:ew53j2NeUP9drinvOl4CXyoN6n8NPcJu9G26Lt:tkf7P3YoOpC2Cbpydez543XSeaL1%fkv9eM4yfYOuLA2O7ghtmo33faZt6M2yndwNzu2w3et9pv34PZ4uBT2GPiJtfw4:7Vg%XZ1BfntdOo6JPSL%py0abrUtAK7TfPWO4kzpHvHs218CnMxfFMy8Pyisqs8%fJgfRmyUD1C8no9dfIfvbNyAX38MiF90PJB:jKyZH4hsos%XvL2:mozKD6D853%7DPXfyL0U39ndND:uXVO:9i2DYAD9s1AendPALv4EwDHuRnBHPnjAXu6rkGiu7tB0byJQkd9mAKCfqdCwX%2gwKAhgOEwZWDxsKlhAdDtYREhIZE:YVXhTBGaYVbh3zFvggRBhcJJgZmSftGq0qPhyaLYgdYTDIHgQz:R%INSkh7jdOIjw6byN1PI0knT6mJbZAtibBQronvkStKKtGiimFSE4qR0r4KupLhCtpTfErvE47LNtPYCzBUF4saFE0LMxR5ivtUXYrylHtKmNRUyq5ULApzU8NKZ9ObygyTdsniEtVJ6VJ3iaNR3gmREUmJtFC6CU4QLwlfD2gJaA6jCWmN3kljjReJVoxLyUKLuYkoCp5JBwn5iOCIycj1R88IhgcIyFQGNofgBReHq8QqxzjDL0aIQmQGG4FIxbNAXcTQv6SEM76ew1x9zwKLfTeBgPxagP17er:Betl:DXo4PiG5WL1%OLu8Y7giO5H3jPrJdz15yza0uRc2M:hudb03kLVR9z609LZ39Kd1:HRr9Ux0QzUntC10jbQp9H5z93Q5s9O0PrP9M810MfPk9DCzxTR4M%00R7QcdJ40EbT6NAw1GvRK9X%0TPWn9JG103TX9gI1H3Z0NSc2qbVuNuH1s:ccdfb3V3Y2t5I2czfLNqu4AbbhOHS203iktwL40ndweP43W7kpN4S5U7fsOX530bmqODX5lzhZeca4vPn6OKF6MvjH%nJ5MPp4%V06h3nNet06Abs5enq7Grr4O3:7Onunu4G8EPwNfHr8XXylfPG8z:1JfXm9pH2iPgJ%B76i:mn%xf7Hf2q:H:%Qv7N:9r:CgFvATgC:wJcA4YEewQCBpkFcAe7Bs0I5wcWCiEJSAttCmAM0AtfDUkNRQ7bDhYPgxDXDz4SjRAHFEAR2hX0EbMXshKQGYATbxtlFE8dZhUrH4gWACHNF8YiNhl3JMQaCiZzHHwnQR7IKCkg7ikkIuwqLCTBKzomayxIKOssTyo:LU0saS0%LmwtIjBMLfkxEy3DM8csgTV1LDI3JizWOOQrbjq2K:g7oit1Pa4r5j7dK0xAMSynQa0s90JRLTtEGi5yRQUvmEYIMK1HGDGuSCgymkktM29KGTQuS%M010uENWlM9DXlTDE2S002Np1NADbbTYo1CU7RNCdO0DM4ToUyOk7xMC9OFi8UTvss502kKqZNGyhPTWUl4EyKIllMkB%1S34c80pbGRFKLRYNSf0S6EfQD6BGsAw6RaEJuEOrBhxC0wNpQCEBoz6c:ss8SvzlOjX68zhi%Po21vb9NJT1:jKY9AEx3vMGL2DzDy0W8x0r%vIvKQPzRCcr81klZ:NtI7DzeyH884MfQ:SCHX:0dxus9GQZyPRGF9H0HRXF9OgSofSmEGD0Vg7%8:cLdfOLCcHyFAfh8ZUE0:ARApvvjv897g39wuyS%jLrIPiV6bn18%dg81PmGfG85ObuMuPO7L7h1Opj4PvoKN9I5xDeu%Ua3VbkRtwZ45DbBOLz2hbhaNpP4OvZrN922SvfCdnM3qDYit482GPe3NdX3n7XY94g14Xevta93lTWCN:e1WLfWdXI38TUN%Ai1Kvgc9Me4bzSj%EB0vfhSdFS4pjQneL2z9LiZ8:w4vDO9uKUzubiVc7C4jPOkeItzlbiQM4V4mjO1OGhzpbh6M5f4TvPMeGbzw3hCND14ILQ5uAH0eHgk9Hg4CLS4OCw0t3gOtPQ4L3Ts%A01IDgm9Qw4O3Uvd8j1SXfOtVl3i7Vft0B1XHcttRB21TU8Nnj04HYa9P01vfSTdWN0ovTNNKx0fDRwc:E0bzNstGoy7zRhcnl0VnHL9IlxZvS7MIp07HA1tN2vpzUPbxy1Qm6TtbftynXwrX517azutjCsWnZ6a8F2jCujNqdrP3aNatX2:2pltv5qLXbLKix25inhds9pzHbHKez2jSnD9qDp0fZCKhf2MGoWdesqTrWxaoH1QmsxNN1rXfSB68m0b6w2c%ZspbOmbRkzb%2TMwMuVTLfruEyhS%4MnPwHDJrMM7ya3GRsnPyZjJEs0zynbQGcv500fMl9e5zU7bas8Y31TR8eJw09PmudW56ibYnO6v2njySd1H9urfBvqL4rD9JOVAAbHnswQw6gIIn%woC:vuHw5B8eMQbPNyE3n1yxVk9%4XLPndGc76mhtL:Ckdp:2LHub%wh8MANEgIAG4ISUCeiIhAxojFwSbIwkFAST9BU8k9waMJP8HuSQbCdskUAr1JKILCiUQDRolmA4nJTUQMyXeET4ljhNHJT0VUCXpFlgljxhgJTIaayXRG3clbh2FJQcfkyWZIKAlICKmJZYjoyX4JJElQSZsJW4nLyWAKNckdilgJFMqxyMaKwcjzishInQsFiENLecfni2bHiYuOh2oLssbIi9ZGpQv6xj5L4kXUDA6FpUwBBXIMO0T6jD3EvwwJRICMXkR:TDxEO4wjRDUMEkQrTAjEHgwFBAzMBYQ3i8jEHYvNBD2LkMQWi5LEJ0tSRC8LDsQtisgEI4q%A9LKcIP9id8D5kmJw88JcEO6CNKDqQiww10ISwNWiCIDFUf2QtmHiILjB1jCsUcoAkRHNgIbxsLCNsaOQdRGmEGyxmCBUIZngSuGLYDCRjNAk4X5QF7FgIBjRUmAIUUVv9lE5P%LBLc:dkQMf1rD5D83w31%zEMW:teCr:6Zggd%koGcvkOBLr4uQHy91H:Fffe:CD2ZvoO9e:33fN99YvyFfMZ8bnwi%9t7uLtNOwk7BLqVeoN6HnoK%aV5nTkq%Tt4sHineHd4IvgAd%73zPdMN932%reztnm3jrYHt%71ovfUNUl4PnT6eCy0tDhetHY4lDQ:OM0zzflJM6D5iHN2ucpzDbpPcuW6lnK9ut8yVbto8i17s3HEvD5xmnxKMa48lvF%vOXxC3138NP9jjDYfelwmL4K8JW%c3BP:qNwSD7bsH6%3LBz:ydwZ3978Fm:m3CKv8aw%z:%cOvAA3FegFaxlQC4cdBA6XJRwSly2YF482dBl3Q6AcU00IJBNamCi7ZDwyP3HwNJeDtDvDjZhDq5%kRD%x5E1fwGBW39MYWJ:mBGJ39RhoPAhAcdQbbHckKpR8FD2ohIhMpIxsX4STrGpMmjh49KAMi3ylJJXgrZCgFLVorhi4xLvcv8TBXMaEzojJHNtYz6TjwNIk77TUqPs42ykCUN2ZDQTj8RdY4hkhVOf1KuzlbTQc6lk81OqZRQjqCUy46IlX5OYBWozmXVyw5YliTOOFY1zcUWfg2%1j3NZdY1jTqV5wz8lZOMrNV9TAuVJgvZFI%LlhQ8CwNTrEriEuEKsxIayneRWYowUJyJ3k:jSYIPLElcTjaJLY0ACTaMBoj4SwfIs4oBCGpJMEfdyBPHkIcqBwQGMsa6hO6GNYPeBbcCwcU:wdsEUAEqQ6hAL0LIP2qCLv5bQVv9gcCPfN8:iPwz:of7Qj3Muox81rnU%%T5Hnr3eGr5zff8%Og3FTgG9rU3K3XdNlY1TjWIdMh0wzRM9Acz3TNU83nyrLLlMg6yn:G78itxNHHJcPhxufBI8b0wJbFScA6xd6:EcWsvxfFp79MxcW:q8X:vzPGTcDgxqrArscRwZrIfsGgyezBvcpawuvLxsIlzTLDZs6jw6jPHMTm0KHEHNI0xUbT1sVj1ITGb9U%x2jWAchN18rIHNiZydXYbcp42UbLB9olzIPaCc3v2vXNT9vnzqfb38:%29:QWdzm0b3c9tIx3RLUut091Vvee9YZ387X99832fXgtdoV4kbcVePk3bbki9815jfh0ufj4onpj%RY6zrmOu3m5yrvk%kg8UPrEfP07Pf0p%7H9lrwfPgM8hL6vfOG%2712Pwh9wf%2fgT:5r6:v9n:MgAQ:52ATEADQIwApQCPwQVA10GmwOHCDAEuAreBO0MrQUgD6YGTBHNB2sTJQl4Fa8KcRdrDFUZVg4hG20Q1RyrEm8eCRXpH4IXPiENGmsioRxrIzgfPiTKIeckUyRoJc4mxiU5KQMmkisjJtctKSYJMBsmJTL8JSw01SUcNq4l9TeOJbY5fSVhO4El9DyfJW8%2iXSPzQmHEGsJk1CQidjQ:YnX0TGKD5FrykCRqsqqka1KzZHwyypR8gtA0i5LkhIhy96SCcwnEiPMLJIuzC%SKgwxEhYMMRIzS:ASAkvtEgPLp9I3yx%SHgrTEjbKQZICSirRwcmNUfaI6RGjCHxRSQfGkWtHBpELxrvQrMXl0E:FRVA2RJrPogQnjxQDrQ6NgyzOEAKoDZyCH800wZVMmYFJzAvBPctMgPMK3ECqSnvAZUnrQGSJaoBpCPkAc4hVgISIPgCbh6:A%EcoQRqG5UFBhqSBrMYkQdtF4kIMRZ0Cf0USgrLEwULmRKfC2MRFgwmEGkM4A6bDJANrgw0DKMMzQp9DFsJOwzdB90LVQZiC8IEywomAxoKgQFTCdX:ewgl:pgHdfywBsn6xwUm%eAEkfcABBD2JwOp9FoCYPOYATvy5wA98UcAavC6:8TvQv9M793%Ae%H:uLuO:7t7vH9IO%k:XfvUP3x7:H8ivCK:D7xHvwG8rH72:JH%7Xz4vqM9IL6WPUm%hH2zPmz9nD5OvcT%aL3tfjq91f4D:j%9xL4rvfx92v3sfc891b3Jffn9in3a:ZK9%z1ifdx9eP3AvVU%KT02fhZ9Gn5I:QA%gD0mPrv8yz77vO5%:nzPvwO9Lr8J:Qr:UH0kP1V9Ob9XfQo:lT0Vf409Gn%%fNl:qHzSv4q8xf%k:LN:d7xbf0J8fT8FfBk:APvvPvT7QD7hOw2%hjrZvmQ6Zj47OfU9y7mH:dX5H:2aOL09WHgfvVD3h71D9zS9MjZmvRv13X0CtVj9JzSYPQs0Gr0wM149F3LhfQJyYb0y8Zz9KrERPStwvTz2cCB8za:7fLGvTryjbxt8Yu7ifC9uo:vI7qA7rm5W%1%uR:scLnM6ou5YunOuefnNbpf5ry60ORfu0DjGry14e28MuDWvbze2L5X3fS:CNwvwdXajcLG2RHE4ti%xTLYl8e7157JhNfUy5LXO87p19XQitih03jZoday2tPZNdw23fzdxuAB4H3kOeJW6JzkS%wf51Xwuelu9GLsj:gR77P8vvHTAF:05wTs9ugIWvnODKT7kxDF:TEUvP%kF4sB5xo0A:gdvQTXICcGgiN0B:klpwg8KL4JTCq9CigspAvRLXcMSC87DZAw9Q2rMagOnjJYD20zBhAcNLQQsDRgETA1DBKhNbYSCTZhE2w2DhTPNsEUNDd7FZ03PhYHOAgXczjVF9s4oRhAOWYZnTkgGvE5yxo4Omgbazr6G4Y6gxyAOggdUjqMHfU5EB5kOZQenjgVH583jx9pNgEg:DRoIFszwSCLMQ8hkS9SIXUtiyFCK74hAinsIcEmFSKMJDsibSJdIm8geiKZHo8i8ByZInUbkyIqGnoiCxlJIhYY:CFGF5QhlxYQIQUWcyCMFb4fJRX1HssUGR54FCwdKRQvHNkTJBuHEwwaMRPpGNkSuxd%EoEWIRI6FcAR4hNaEXgS7hD7EHoQbg:9D9YNdg88DOQOqQpJDiUJpA22B:YMYgY:DCoFfgsLBLMKBAPcCQ8C%AgpAQYITAAGB3X:%QWh:uAEzP27A:L8jQIP:FcBH:scABz63v4C%aP9zvds:IH2PPsb9RH6nvPp%A3yvvdp8Iv2su5L9efs%:MD65fyBOke8efmju%t5OXtWOIj7OvfRupt3Uzo5do55lvYDuTX1c7hXtOA3:jQKN2qzs3aecx02GvKJNaFyOLTz8az0UzFnM8DxKDN%sLCyzbCBcq8wWvIj8H3xrHBqsUgwoPE2MKEw9DDqcIAxfHBW8ZawdXH5MBlyYzAAstTwKXMNsBFzjPA389HwGzRbsDp0qPAVNTjwKzVLMHz1nzBLdjRwV7ZLcKL2pDCt9v5wuPca8MR3uXDQd9pxHPg%MSp4ZXF4%JCxiLkBcdl5eLHrebeyPfnAcpD6U:LjerOzNHrg84O7XPQQe6h0mnvENWJ8MLXo:G12r7y5t3e807hBvXm5Db2p%hu94jsqviC8OX5i:Qc%5v4UPyn:ID9oQCw:n4E5P80CCIBugttAgoPxAMiEikFAhWZBqoXEAgdGowJYBwLC3keiwxtIA0OQyKODwQkDxG1JYwSXycEFAYpdBWwKtsWYiw2GB8uhRnnL8UauTHyG5IzCx1rNQkePjftHgQ5sx%0Ol4gRzzxILg9biH9PtghE0AwIvFAdiKWQaki:UHJIihC1SIXQs8izEG4IkdBkCKMQFgimD8NIm0%riEJPTohbTuvIJk5DiCPN1sfUTWZHuIyzh1FMP0cfi0sHJAqXxt%J5gaTCTYGfsgIBmPHW0YDBq8F3UWChfQElEWIQ%NFW4LthS8B8cTDwS3Em4AgBHd:BsQYvmFDgH2vQy98sUKle%hCIfsVgaP6ekDqeZaAdLjrP4F4dz7Q97r%Inb1vXX2J:yLNZL74fT3uvn0GPoTs7j5L7LaeE8yQHezca02nXEidc6wofUIsCx0TG%C89tvJnM27peyn65XchauJjGcLcRxcK2y8NStsbCILYGwi%2icF%tk:BDbdVwdm3k8HfuADCGbqPwoO7NMMWveHDy76PxJzAN8WBwtXFccRlxmPG6MZNyFzHKMrFx%7LJciazYTIKc:ryJvQYcnu0e:JItOcyjbUa8st1V3MBtZyzcXWps5t1:XPBNha0ZHY0dIc2VXUrtnh1U:ac9cJ2wjZ49ud2uLcMNwL3sHdYN9N3%Tg1uCW4lzidOTi43jmbOWc6Pzm1%qU6B3tNOpl79nrpfGB7dPzJu:m9cjw1vdl8pn5APQn%5r1d:w394X92PhR:nz62:4j:Cn:yv1B:23:K:8LAfD%owKa:jUENP7DBcv9UAdo:d8IF:1yCuH8CwzN:KoN4fxPDyP9%BCW:aQSPP5QFBj:%xUnAKAXaAE8GdUCyxprBEocJAa2HfsHEB:rCVgg7guRIf8NuyIaENcjORLjJFgU3CV2FsEmkRiPJ6oaSSjAHPEo1R6KKeggGSr2Ip8q:SQgK:omnCvsKBYs0SqQLKgsDC1wLo0tKDAXLs8xrS5jM1Iv5TQJMFI21DCqN7Qx7TipMho6sDM0O8Y0PDzpNTQ9EzchPj84Az9mOd0:gTqwQIQ7fEFnPEJCHj0CQ6A9u0PlPW1E6j0TRa49qEUzPSdGejyKRoc7zEZZOudG8TjYRk83mkZ0NSlGZDODRSMxpES6LotDMSw5QpUpsUDtJvU%RSQMPaQh:DoQH8s4jxyBNigaJTTgF78xvhVWL8cT8iwBEpsqbRBWKA8PJybmDRMk8QwbIjEMQyCiC4weRAv2HBMLgRsKCykaHwvrGEoLwxd:C60WtgukFecLoxQLDKQTHgygEhwMjxEADGsQxQsvD2gL1g3oCl8MRwrKCooJFwm5CEkH3AdjBfsGZgMaBlYBPAU2:2IECv2JA9j6sAKm%NQBffb0AGb0DQBr8h7:lfAn:uzuKf147SX8Puwb%0PrDfqI6vz4Derr987p2vbG6cz18OnE9EPqxfO26s:yQOvh8dfr%fBz7BTwCu0t75TtRe4L7lztZ%5z7KTukOu77rbqq%7p6XLuLekR7oHojO3m5%fsWOco7NTmU%tX5m7q3%WA6WzljugA5aDnnuS%5knk7uUE5DPl0OOQ5K7jBOSh45Djp%Mw477j4%Ln46biH%R24mLkTuKr5Cvi9%QI4j7l5OF%5bvhtuWM4eblVeEP5hbhMebM4EvmeOBa5hvgXea031HmRt835tLeEuZY3uHl2N2n5U7dY%W33BTlD9y45FPbTeSA2tTjlNlR45HYx%J01z7iQNa94fTUSuGT0%rgH9Kh4JrQceAKz1rgdM1a4N7LcOBRypng1MjP4G7HEeElxlvhAMWr4QTE%%E2w0XimMKB4izCpuLwwa3i4sGW4v:BX%JBwgzipMKg4SLDHuG4w4ngYMTi3xfFKt:axWLeo8aM3XHHqNxCyLnbFMnG2ujJ0tnAyuTYnssC2IjMMteBzXnWj87b1bbPXNX70AHVYtLO1O3Ty9Sh1f3Ugddr1ZHZF9bS2wLXQd4q2N7gi9mj4yHbj%bq3Jvp4N7F7PvgBPAy41XzeeWw9sjnD:oU6m79V%zGAI7uEAS28EQHzvJYCtP0RA3F9gAQoPiHEmP62BQP:PEWqf3UGDb:gRq:APobSgJCHd0DXR55BU8fIAceINAIzyCKCmghTAzxIREOcSLWD:EimBF4I1MTDiQIFbckuBZ1JWIYSSYGGjAnnxspKC4dLCmxHjYqKyA9K6EhOiwYIyQtlST0LRomoy6pJysvPymGL9gqsi9vLKsv:i1vL4Av:y73MFwuZDKJLcoziywsNWorizYsKuU32Cg4OXYngToOJsA7pSTwPEIjDz7sIRs:qCARQHwf8kBrHr5Bdx13QqAcG0PlG6xDQxspRLcakkQ%GulE1xktRYAZWkU4GW1F:BhjRcwYOEWlGOxEiRh:RHkY80N3GExDgxiMQp4Yt0HIGM9A:xjUP0MZxz6VGao99Bl:PGEaSjvXGg46UxvJOM0bfDdAHCI2pRy6NPkcRDM6HcExZR01MHodpi53HRotXR2aKyodLSrhHNkogRygJwocgiZ7G3sl1BqIJBYapSNFGc8iZBgCIngXOCGFFm4gjhWcH5YUwB6eE9YdpRLbHKoRyRuqEJwaoQ9RGYsO6RdjDWUWJwzLFNYKHhNvCV4R8AeJD1cGmw2lBJIL2AJrCfMAKQf3:s8E6fxkAs768f%q%H79gfYW%1f0vvgx8n32FPBZ9AjuV:IR7HrwM%rH7nPoQO3T5unrV%XD6gHk0unS4hjpzeGX6O:gTug44Droo99Y6C:foujY3g:pm96W6XfeKupo3sHqa95Q63ve0%uS3kbsrd6s7MTeBe3T3lPt2N6Z7dDe1%273hTund5U7nrenO5X3vPuOt5e7yje4e8o3oLwQd5C8XneIfLX3hnzZN8n9CTgRPUf4W72WeKj99bj4Pib5SH6p%dj%:vpo:yQ7N79X%8W:2DySACH9XYByvidAiH8vgOE:90E6QIDBkkGNQedCXoI4AzTCQwQPgseE7YMFhY4DvEYvw%tG0oRTB7XEs8gaBQ7I:wVliWUF%YnMBkvKtAacyxvHLYuDB73MKUfOTM6IX01yiLCN1MkBzrUJUg8SieDPrMos0AMKtNCVCvfRIks00amLapIpy5dSocv6ktDME1N2DCGTkQxk0%HMXJQoTEgUZIxnFFeMeJRBzH1UZAw1VH8L4ZRTC8IUX4uXlCTLYhPiSyGTmMrWE0gKv5Lwih4Sksnwki9JdlGFiS8RFYiakJ7IOM:gx4qPXAcQzpGGjA3Chj1M8MVkzB2Ew0tKhFmKeUOoyWtDMchhgrXHXEI1BlsBsYVcwSxEYQCnQ2aAJMJs:6aBcv8uAHb%vD93PhD%sX2rvaN9C7zMPK%763vXOwF7QXpOuq35VHncOJP5C:fOeHx2w:etdjU2nvVh9dE0ifUEs%20OrLO83SyLvJ0MU:xuvC0sIswH2:m71LvEG7SLkmuXq2T7fls8K1jLGBtG2vjLOLreSy5KuKsniqfbJHqbuyS6hBs4KnC7TqphG1g6ZKtkumr7dDpje5Y6bYuqWmjLz%pku%ZKcLwNCnwsE8qGjDpKjxxAWpWsZfqZ3HtKm6yAaqsclaqobKs6o6yxer0cuNq1PMHqzGzNGsM82uraLNua4czvGvps5UsUjP3rIJ0Im08dBOtgfSJbhR0wa60tTou4jWxL1x2Ji:h9pjwcHcJsMY3%LEf%GVxuvjQMhO5uPJneiAy87qG83b7LvOvO5m0G7wHtLq8eXTL:O61Tv0mtcQ9YDZsvVr2yj2Wd159kzfrvZE4dH2ROPs9knlB:dT5y33Xelm92Xrtfdm7SD4XO%p%ETxUvkd8xr66PQD%6j2DPxg%DP9Ffp2:sr70:9::UgBNf:RAuwAbAShAhYGVQTOBwMGkwmpB2cLRAlLDdMKPQ9SDD0RwA1IEx4PXBVsEHkXrRGdGeESyBsJFPgdIhUrICgWXSIXF4wk7he1JqwY0yhUGeMq5xngLGgaxi7ZGpEwORs9MokbyjPKGzc1:BuFNiMcszdEHMI4YhyzOYUciDqwHEI75xzmOywddDx:He884h1aPVMeuz3RHhU%Wx9uPu0fyD6CICM:FiF9P6Qh0j8oIh9AmSJfQO0ijkAaI6RAFCOcQNUib0BbIhlAqSGZP8Ug6z6yHw0%dR79PA4dtzt8Gzw6wBmOOOAXsTbhFa00zROIMq8RSjCRD:otfA2gK3kLRymQCfYmxwe2JCMGjSKpBH4gXQONHkACwBxSARwbkgCjGf3:VxiS:zUXT:85FjD:XhU0:54UVv:yE5L:VhPj:8ESQgAsEqgAjhEPAeEQcAEiEMYBTQ8OAlsORAJIDWkCDAx7AqMKewIPCWoCUwdJAnUFGQJ8A9oBbwGRAVT:PwEx:ekAD:uUAPf4QgD09vb:DfWw:0fzbP%n8Sb:MvDW:u3udv7d7QP%Bu17:Wjs3vz:6zD8wuty%6rrpfqs6835wOvq%N:rAPj:6xP3G%wn9izsPvUv7F70HuyH8:nrvPK86:3xZutI8fjql:B06urv3ek97zfple6H6PXt0udl7Rzn6Oxo5oLsuuUy7BTl9etz5Mjr1eOn6zbjjuuU4nvr7uFu60bhaOug4Gvr:N9861zfnOu93s7rH94R7ITdZOzv3MXsZdw17erbsO2B2zTuK9u%7unaSO%72s3vo9pH8KDatfCw2hXx0tpm8f:aqPE029rxa9v88aDbC:LP2wTy8tvn8QTcs:H922nx1tsM8Yjbm:AN2xbwY9p674fZx%572PztQdcc7d3VKuxR1Czro9Iq6tfQKun2zjboB81U5xXLieYnydnlRsdC5XfFw%S%w1jkIcL%46bAsuNTv3LjK7474zO9DONpvODiyru04lS7f%IBuzzizLrk4bO6dOGwuuzgwbpQ4OG6pt8Mu:beQLtC3nm7jt22u9zc9bsp3Dq8d9uHvMfa37we2ku9gtnOvfzYcr6U2Du:T9gwwDPYVsFD2LHCgthDxPPYDcaY2RLIcNpUynvb1sy03JrPHN6f0rLf4tV34V7Za%MJ3Yrl3ODR583kN%rU6Ljs6OxL7wHx6PEY9Yf0Jfkf9yL9qfkGASH8yQSH:mQI3ADRCyIDDA9bBRQSiAfqFKkJkhe:Cw8ayQ1mHMoPnB7DEbcguRO%IrEVtCSuF5wmsxl4KL0bSCrGHQosyR%:Lb8haS%lIwcxeCWZMjUnGTTZKIQ1YCrTNsorADgYLQY5Ty7fOXEvgzqAMO46fzEbO20yCjtRM8A6LjRCOgs1mDntNck41TbbN8E30jaqOLM1jDmDNGI6STMmOwky1zvHMHU8iS8CPU8ugz0aLfk96CtmPrYqxj6BKRg:RihaPwMnjD%5Ja0:ZyS%PxAjvz%yIbA:TSCSP%Ieaj91HTw:CBwNP6Ia3z5GGbA%%hd9PsUWPz6sFfQ9thSXPeoTJz1LE6I82xIIPJoSVzuEEo06mRKrOdYSsTg5E543vhN0NmAUMTUWFdUz2hVgMqEW0TBhFysvEBhxLaQYpysVGc8pXBnoJ3gZ8SVpGecjLRnLIcQYnx8qGGgdXhcwG2MW:xg8Fd8W8BPZFIMS8RL2ECsRTA%HD4YNBA6qC6IMwwlfC9kHOgrzBSsJFAQsCDwCNQdqAD4Gnf5EBdX8QgQQ%zMDSfkNAn33ygCm9Wf:wvPk:dLxSfzX75z60u3j%MPrHfep6Un1hudm81:ldfE443fvFeFs7fbeVevb3DXpxdoT57rY:uTG1gjj9dQ84VLTn9:c0S7ek9Dm3HTPx9uCztnaxM0j2j:Npdn1zFrZ28w22ebMNNkKzVbZQs2l2ZTNJtoEztraks612zjPpdzqz53dotCV3lzRj98f0ovg79KM4dHTkeLA1JbjutWe5LzWq%XL18Pm8Njm5zDaEemQ20PqDt1666neu%xf4A3uNuJ27zDk%PBP5pPykehF9PXqDfZ67e33H:Di%eTy5fvA9eb9o:jW:3v7qgE3:mUD1AAQBVUDtwbCBV8IHQgGCmUKoAuPDCoNmg6oDowQJxByErYRXBRbE1AWDhVIGMAWOhplGB4c%hn5HYMb1h8JHcMhjR7IIwcg3SVuIfUnvCICKvIj%ysaJeEtOia1L1UndzFqKCAzdSmqNHkqDDZ6K0g3fSxfOIMtVDmGLig6fi:WOmgwYDtGMck7HDIbPO4yYDy4M6A8dDTePB01HT21NWE9PTauPbY2BD4bN14%YDetPng34z5iN:I%ITfbPsQ2pz5XNmA%3TUIPlE1mD2pNPw84TMmPPoyDzv5Mbs56DAxOMcveDaULow0Ri1oMtcrBjBHKm0tnSipKuQmyycmJd8kaSPnIa0h4R7zH8cbOx6cGIgcYxXhGiYSTBnsDswXugthFpEIChV1BcITZgKGEmf:TRF1:A0Qifm5Dp:2Rg2v86wLufDoCcDt%gfI6uYF0%ewA%LkYAH54f3%Hd%Q:FfcG:qv2Zn3KNcC9cLUTPJ50nTvUtCF7FbOkemWzK3mJMvs4wjKVOFEyeje0cio3KfIltrDyLfYJMkR18rJoNWuymDUxctE0::MR9JOzmTRr8%i0CHRB9Co0pjPQ9RXz%vVQc%V10:PN9l7z8nav89M3BfQv9190CXf8dB%4HDRzOH50RPjkNJY5DfTpOXy0:7mwdRr6KPV7emV1obrltc27aXY:u7H2d7wAtvW8l:c5vTj3Q33kd9K%WThmvtT4:X9UeVOAE7nkwI66bcEDeuvBsbseQho7hkK%%%PC4bx2QwI8:INf:TTDuj1eg9G9%oPnfgsEPL5ShBG%0kQmPwoEOT96Q8n:40PYwAeD50Bqw7ZAj8OFwTnDVEFow2CBnENpAdODbgINQ3ACScNvQogDa0LIQ2ODCMNXQ0kDRwOIA3MDhYNcQ8IDQ8Q%QymEOoMPRHgDNcR3Qx8EucMMBMDDfYTOA3OFI8NuxURDsAWyg7gF8IPHRkBEXEahhLNG0gUIh02FmIeQRiJH10anSCHHKkhwR63IhAhyiN0I%Ak5iXuJV0o7CbNKtQnLC2lKHYvYCmmMQUqtzOTKqM1CCtkN2Ir9zijK2E60iurO:Ur3jwWLAQ%OyweP2YsLkCXLDBB0CwiQhEtBUNdLdlDty2iRCMuX0WkLhFGOC%5RuAvVUeYMORHWzFiSCMyy0jqMhlJqzNHSVs0T0nwNCtJWzXWSI41SkiANYdHLzWPRp80ZUXZMxFE3jKTQqwx6UA%MA0:iy78PJUstzpiKkg4AyjANYclMDP8IqgwayAwLtwdzStVG4Ip3hhTJ4AWRCU:FFgjHRKQIRcQ5x8nDlUeSQzTHHoKXhu%CPUZGAedGI0FVxcfBCIWzgL5FJYB1BNxAKoSWv9zEUz%KRBD:ckOPPxQDTX7vgsr%hQKHvlTCA:4gQYE96QEAvbEAg716QAo9Br:TPNd:XPysvuV8Rn6rvCR%L7vG:fM7rr14u139AjtVPND7FXyketz8erqpvBC6ubvkeku78:oe%7%59DtIOcu7Tjml%xG5QbsSuR260Tj4%o14krqIeGo6Qzg:ej63kfo592D59Lcrua528blnNrP5ILZz%Nx2M7ib9fV4X3W6uCY1Q7gutQ939zTcN770p7dGNK%3DXRzNtZ0MPah8%l2cXOcNgUzijXdc3O1ejMaNRuzP3SCMyW0bfLO9B6y:LOUsvAzTvLpcw4y6XLS8vEynnLC8rLy4TJRcw5yejMLcmszV3Jhc7DyWTPU8o50AHL%dDFy6HRmMww0nTNqtJTzhHTMc9n0wjQrNPT0N3Ti9H50yzS:NOu0uLTCNOl0zLTQ9Mi07rS09IO0kfSRdGG0WnQndCBz53PlM6UzqPNjM2zzInMx8uNy%LKlcoMyqTJS8m8yKPI48cbyCHHtsd7xnfH9cVex5PFbcdXxaLHRcX4x13Facidxe:I:sV%yXbGDcr5xpDKesf:yvTHVctjyJLLzMi1yzDJwcuTybbL8smUy0vKXMuXyg3L18qqygrLNso4y7nJacs4yaXLvMj3y0:IZcz8x:jMzMe2zcrHps78x83PZMgq0f:Iu9LFyXnUrspe1rTLY9jUzIfaDM7K3F3PMd:I0LrhT9Jl5PDTLees1Qnqgdfy7G3Z5O9u29jyf93L9Zjftviz4ZX7x%Nk:szlIAHB58kDpOlkBnzr9AhR7XwLKu:9DQvxcxDy8twS3PQ0FcP2dhek%KEZfvq0G1b8sB0w:pQfEABfIfkBDyPqA6Ak3gUPJtIHVyfFCXkoswt1KZwNTCp:D:8qXRGQKzYT:isKFUss2xZ1LKYYfyxrGmgsJRwyLNAd2itoH2Mr6iDQKlgiJSq0I2wpBiWsKFUm7iejJzQn8yiAJj8q0CWCKx4lsixmJMgtoCO7LsMiii:GITMwoCC4MEwfHDHIHWMxFRyRMTgarjE6GL8xIRbKMfkT0jHJEdkxmg:fMXcN5TFqC%0xfgn6MbwHEjIwBjcy4wRsMtwDsDIdA:syqQJHM3wCiTOTArYz6wLGM30DszNGBHgzPAUWM1cGjzKMB%Yx0AgbMRgKKzBXCxEvgQzHLYYNRCxZDoYq7Q6OKDkPYyY6DxAk8w6kIWwOKx%sDa8cvww3GqoLxBd1ClgVIwn0ErgHnhA3BlwOowQ3DP8CNQpOAV0Ilf%0Btn9PAUg:PoDcvryAtX4IwJP940B5fUoAZT06QBb88UAMfKrAA7xjwDr72YAv%4lAIjtxv8:7EL:4uqT:mvptP3Y56P8JeZh%1Lk9Pli4mL4WeCx9j3e6PQU3Anz5tkb8bjXIu%T1Sbte9Mx63bRSOmKz3Pnts205f7LDORgyoDi38gT4X3Hyd8%xqneJ8W13T3E79yDw1Lc%sLb26LCg9t6wkbbfsIj263CG9sEwzLbgsNr2yPExtvkxD:cw8XR3LvGc93LxyDe8cjU3jHKj9%My1PgBc0k4Z:OAeJX0O3iK9Ll4xfU5uQV1vDlIdgC5znaHOhY3EHpfd506qTguuvL4hjt8eSS7hfnLPA%6ejxaOvG85btx:XI7%f3APIm%j30fvx%9u7%xPhuAQv7%ANU:YUGnf8NCeYBigsxBPgNgwZXEOAIpxJQC%wU1w0qF3gQYxk0E5wbCBbWHe8YDSDiG0Ai2R5oJMshfyauJH8oeCdmKh4qLyyXLNgt2S5hL94wzjCjMiMyKTRlM3Q1mzSKNsg1cTfvNjE4EDjQOC05VzlHOs05YDs7Onc8qjqNPSE7oD6lO68:Nzy5QNk8ukGHPa5CPj6NQ:w%UES9P%1EfEBdRTZBm0XjQadFfkKBRf9CK0VfQ6ZElEPyQ5VDCUNVQ%dBy0KCQO9B2D68QOY8Mj%yOlU9RjgrO601vDj0MhE2IzAxM0EtIzBQKu4sVCeXKVMkIyZQIZgiTx76HlQbShthGIwXehXCE6IS8Q:gDx0MPA1OCL0KiwRrCNsARwZF:VEEzPmIAnD25AAy81::D:Du:QbthfwU6hb7N%eT%Wrk7:es4SH2%d4i9E7c8vGs2ZLvFNcI7YnUXOoQ0pXnr8%%5GzN3%FOy::eWskj3JbHTtkExoPWpcTF03bDF9F0wnzOm8H5y%jAkslXwE7H6L81xZu:TsNxv5zBab8fwIK:1r67v7i9FMDCvIvA77shwT271cGtuqnCQbqcw:q5rMTYudnF3LkfxwS6f8hNuvfJsrqKyy67Oc2%uwfPYLz20BO9BdPbvTPVuL59162:3dm2wE7cz8HF3vTCOuEgxKHjUsXy5YrGJOjNxzTqIckf7InK5e0LzIfvqs0H8WfPaPJD0avzO9PU9EvV4vVt19n2mtm498nbgPjx3TH5C%DN%Q:iVfr748:6zOVC%4jnt:s06Tf81urH:Hbsbf0Y7ij%ve:5:mXx2:8O880AtvTJAVj2ywLw980Dd:nHBOr6sQVG:IYGjP0:B8D%2wfq:1kIDQG%CC0CDwlMA1IJawSPCYkF0AmnBhwKxgd9CugI:QoNCqMLOwt4DHMMgQ28DcIOGg9AEJEQ%xEhEvQTyxMqFowVmBhdFzgbOBkCHhQb7iDoHPIjrx4GJ2MgISoEIjktkiNDMAwlMjNtJvo1ryePOMgo6TqxKQU9ZCrjPt8qhUApK%9BRysnQ0IrM0QkKxZF9irZRb8qf0aGKg1HUCqIRyAq8Ef5KUhI3imRSNIpzUjZKf5I9ykkSS8qQ0mGKl1J:CpySZIrg0lJLI9JHi2USQ8ujkkVL3dJKTBKST4xAklJMplIOzMLSAk0VkemNHZGBzVrRSY1NkT%NNhCjzRSQd4zpz:yMto90zHuO4gw6zkZL9c3jS28NekrojM0Ko4xdSiDL7Amgy3tJI4rMiOoKYYh0yfyHxImex5oJCYd2CLyG2Ah3BoAIOEZtx77GIIdKBhiHGQXUxuuFlQaBRZkGWcVgBjTFKcXSRTVFskTCBZREz4V4RJ0FHQSqBMEEtoSixEKEgYROhF1EGwQ3A%hD0EP2w6tDhsOJA5gDacNqww1DfgLygxDC2AMiArzC8QJgwv1CBILGwilCjkHRApRBvMJZQW1CXkEiQmPA20JrAJfCdEBWgkAAVkJOABYCXj:TQm7:jAJ::34CET9oQiI:CcI0PuMBx370wZy%gIG0PkeBTj5KgSn%C4DG:gwApL3NQEI90EAe:ZW:%j1c:5M9ZX9pPS5:Ovz3Psd8::6NfIm%jLxVfkW8JL45O7j96XtTPdi7M:2Jutt9vvpJ:bq6Pz1:Ofp9Tnn7vWn5gj2SeY49iLmf:Yy5tz2d%ZR9%:m4feU54r4Y%hN%VPpJfpd6gz7duv0%5Ts0vyu7Zj9ue48:q7vtf6D8P:%MfEY:6:x:v738bH%AvIt:s3xcf1V8Xr8mvBI%6Dv3Plt7jv4Ce1t9n3rfvTU6XvyF%hv8FLmZe6M5GLszeJo6hzhd%h835Hm8t255H3c9%If21Hh2dnS363Yf96d11:drNZ13NvVwdsr1UHbmdTx2iPUzNrD08nadNPg2jDTBtvw0jLbsdJa227Sc9sl0nXb1dFa23:RHdsj0b3aw9A92mLQotkE0PLYq8822F7Pd9cjz73WAc8P1v7OddUiz:TUcc%P1O3PTNSY0DDUddE:1IXSgdTK0:rURdWs1ffWlNbg2LHX:tr82E:dctrP3wzce%LG3U:lm99I6IbhY%uB45zuiuXv8Z3nWfW96df46%tl:CfuAABw8KMDxPJJBxr17gps94oOsfkZEuL7lxX9:f4YAgBMHPMBfB:UA4wiqwV2JXkHNyhACckq:goqLbUMVi9lDk8xERASM7wRoTRsE:41IhUpN%AWJjimGPc4cRqgOT8cJjoNHok61h:NOpch8jpLI:g67iTfOnwmqjrxJ1w6SSn5OYEqhTmTKwE5fCxuODwtzDfTLRc3Ri5MNpcuaDXMLmU06S5BM%4u9jHcLoAwsS7dLmwuCS0MLgIrji3JKPIsYCY7LMojaisOIYMqNR6KKU0bhChiGHYnhBVkJsASVCUmEEskwA1OI5sLYSK%CYghMQjHIPkGICAZBpUfkQUoH2EF1x6DBaIe7wWDHpwGdB57B2kegQhWHp0JLh7DCuId5QtoHfYMtxzqDcwbtA6kGkoPQxmiD6gXtA:XFXsPzRPzDosRHA4QD:cMYQyKC4IJ3Al:BvgHZAPnBT0AtwMV:XIB9fkh:%P2zfzm8336BPE4%EbuAfaz69vzUunI8Szny%9F5eTtoOMV7D:iYOoe4cXoO%BF55Df2%UY34TkzN4646Xe9uGa3rDgot5f37He:t253oTcq97u2nzeN9kg3l7Xkd1j1czcR9PS2w3Rqdq6zlfZU8zl19:JWdZox7rU9cQO04:CWdE%wKLPC77uzfy7Q8wauqrKbbgqyfy2ysfMtZHG5LSDxUa0psT1s:zD8bOGwzq0QcPNtCjDp7U2w8a2YcMkuKXDv7n7w5W7YsShvdrE379mxUrCCsbcxMrGjceox1fKpMgyzbjJGdDeygXTDszy1UPN2th3zrrbqc%Q3tzQV%ES0g7kUNOv5pfUOOns1abrT9f57cLYMfBK2lDy6dtY9KXdTfaB3zD4guEG%qrj1Pv45Z39aehm::rqMgGl7QEDZfDXBDXzswYP9pkI8PiJCs:7hQym:o4ObAGkEBkExxKnBvQUEQkoF1YLXRl2DYwbdg%rHVkRsB8hE5Mh0xRJI24WzSTyFxsmXxkuJ7MaByjuG6UoER0LKR0ePykTH0kp9x8vKcsg:SiRIb0oSiJ4KPkiOyifIw4oOyT8J9AkCyhdJUIo5SWlKGomNynxJvwpfyfzKhcoGSy7KGYtbCnSLicqTzDoKtAxpitGM1YsozTrLNo1Vy3gNo0tqDeELSs4Ni1hOKIsRzjMK9k3uioUN3Ap9zX0J4E0Rya0MmwkkzBiIiYuKyB2K8odjChEG3QloRg4IukV4h4iE3obVhAJGIoNlhTGCiYREwi8DXcFXQr4AgkHnADDA2X%jwBW:G39a:pg%qX4avcB94r0ffXC8Rj0EO:O8nHsnvHj6YXwX%d%7%Hkgu5m4ojt7d%G7HLdcOv22jrqeNjd6PbVVOdx057l6tC942LOt%Hey5HfYslP3fLG99qTxI3YTMIX1iLAmtMbvhzRPrylzo%6PcwUuezJzre4x8K2q8XztcrDYrUawhK1oMAEtVu:NbVLvqW1ar1UtrS8QbcgvG24qrvYuUu7gbsAu2i9ybqJv6m64MGjumjEvLoZx:m668lbu9TM4rvOz4q80NJLvdTVHr7V2Py%z9vgv73eysCZ4bvBXeS6wgLnysOD6e3E2Oskxv:tb8fx783IrvE:yjPzxsuE9GXNovUfz5T29tBd9%jSBPj01JD4FNcG%UXZbvmB2835wt0o%gLgg:o54t:6YuQ:%3Xmpftr6BH8P%qE:Ozr:fxy7Xf90e7s:Q3wV:4u8a7%PPLr:j7zB:859P3%MfXL:iP2bv4O9%n97fc::b74dfx:%ZP7NPqf%uH6pfmO%6v4Qfy:9wD96vbP:Tn2rv629Z7:a:WdAGD1rAGd9coCKPb5Awb3OQU8%I4Gyvn7B7H7ggnt:SYLeADrDEoD0g5XBtkQlAn9EvEMOBVhEH8X1RPJGUIXChycGjYe2h1GIPYgMiLoI:gjqyaYJTopEyeUK2sotC2iKZ0vuCpRMawr0TJ8LCY0KS1UNbctYzYsLlo3jy5AOOkuGDlDL%Y5pC%sOhQwazuZMCY8NzHdPPIxkT3OMkA%yzPrPus0kD8sNi5AjDfFQAU5U0GSOtRBLDxFQs09nkJxP9lCEUHxQqpC4EIzRKRCo0U8QvBGpkENSORA7kj0P4pJ1z7bSYw93UkTPJNJbTr:SJo4KEieNhNHfTTHRT4ySkTnL6FCfy3TQA4r5T6dKOE8MSbPOtEjujiEIas2UB%rNDkdwDJDG:Awcxk8L8wXoy1QFiAsABWvKtoTRyndEuInBhJ5JlIRByXAEIkjSxD%IfEPaCCtD8kedw8nHUkPhhscD%oZ5w5WGKYOxxZVDjsV8g2rE3oNFRLuDHYQTgzRDpwLLQ3XCpMLAAoKChcJmwgaCEoHCgcbBucFDwWwBCcEaQNhAxICvwKvAEACRP:iAdT9ogFl:HsB%vpnAZn5YAFD%GAB:PZgAcP1WwGY9EwBefMvAWTy:gBW8bUATPBNAEPvw:837hT:Je1A:gjsSP3a6jP8l%kG%zvoyvnD5of4L%VC94Hj:vW94br06N938wjeM:Ii3O7wO9qt71zYdO6M1kzt09Q87DvTS%vN0X7qktDV6ZLPUunUzvHoXM6x6CzOkOhFzoropM6e6ETPzOgf0BPpLtFy6WbS6um:03nqLtUd66bW0usc2JPshNlZ7dTaG%4C3M:uCd1p7%Td3u%P3iPwCt8x8FbfBfB1353vZ9:87jHfJe7V3hvtV97i673dfeoO3e7oUtw855DbbeXQ2orjGNqg4WzZuN:R2N3dStgW3NnXatp9193YN9dx1wXXKdbl1grV1dYW1NPWU9Pd1sDS8dZh0g7XNNIw1zfSV9do0oDXwdKo1z:Tytfb0%PXj9Tv11LV7Ncd1tfX5tay16LXfNdI2DjXzdjl1ivZg9Zd2RPWZNmY1UbZE9UL2YnUv9gA1G3YfdMg2AnT3ter0q7XatKS107SkNdc0qzXnNLt1xLTWdjE0:bYtdTJ2ezV09pq1xTcMdmJ3UHbLd%X3fngL%Dl4gPj6uQM5gDnQukh6Z:sSOsa8G:trfOW71L3u:EC%97zt:4A9mkCIfgSBkD6qAla:CgNav6KEG0AzRNdAu8WOATuGf4FyhywB4IfUQkWIugKhCR6DMwmDw7tKKoP6CpSEb4sCRNuLtMU:S%xFmsxpxi%MrUa%TPcHB81GR81NmshPTfNIzg4OiYnOa8oCDonK9k6nS2VOw0wNjxxMrc8xDQSPQA3Qz0fOUU9GjsSPew8pDyRPvY7BUAFO0lBzjlfQlI4S0OSNhBEljS0RGMyOEUEMJ1Fgi3iRecqCEY%KA5GkyX2RfEiw0VlIHtF%x0kRcAbwkTAGVpEBhjvQ5oWgkOBFRRDvxSoQlMUP0I7FNtBcxSAQfQUMUG2FfFArxbBQNMXokAWGZRAahqUQMEbnUAOHahAQx6tQFQfoEA4IHVA5iAhQFwhmD%WIdQ%lCHOPVchhTzfIPs6LiAxOUgfLTcwHvI07RyEMoUb6C8BGiQtahg%KsoWQCcpFTQkjxMmIQQSHx6OECobMA9PGO4NlBXIDP4SvwuVEM8KXg72CV4MMAmbCnYIGQnGB9cHGwfXBnEGFgbGBZAFEgU:BVMEHQWAAyEFkwJCBYYBeAVSALgF9f74BWr9LAaw%0cGxvk%Bq33BQZm9ZAF9fLbBF7w5AOm7a0C1%pAAfrnpv8a5en9RuIR:InfJPrw3CT4h9oX9lfYAPRr1uXxydTN73nTwu2A0szr4dHw6Z7RNui30aDmKdIx5fDS6%MD1M7iXdXZ4fPWB%G72FfgrtrD38LcR9:w3uHeMOGP3nvjUN7K5STeF%gN3lrqDN6O7CHer%5M3rnwi96r8t3ehPQ:30f2r9:09yrgj:mw4Bj7Q%GT:ObhAv6d4mf:auPGAFLkJQJY5YcDf%bxBMznaQZB6fQH4%qUCbPsTguy7iUN3:AYDzbzKhGz9VYTUviZFQ777Bfh:UcaxgChHLYD8R6oBi8hkwlSI24MUyUwDykn0RHPKEwUPiqbFnErvRhlLLQaGi2BHJAtLB7OLbof2i0yIb0tlyKBLewjMC0vJdUsXSZ6LHUnKix4KO4rZynQK0gq1yseKwos7StvLLUsBy12LdQtLi7TLtsuADB7L1UxDzDLMpcwWTQUMfU1hzGVN:ExKzlRMq06pzIOPPQyQj00Mzs%ZjPxPoQzWj%FM3A:YTMwPw4zmD6EMqk9ujFoPK4w1jpeL:o4zC3YNvkrdTTsKdkxpycKLzAlECyKIvUouR:BJcAcfiKkGTMfaBbpGxETpRijD20VJAxFEpkILg8IBSoMeQE6CfP9WwZ9%owDIffJAOTzEf7N8F:73u2z%BnrC:Z76GbzBObC8LDjHO584XHrZ9%%6G:dAOaR2zLjytlR4BfYXd1w1lPaztQ11ynTAdR10bnQqs9fzcDN98myy4XGgskSwzTHpb:PxEm8XMIIueG:7rVjvQWz57pWsG246a34tcarjLPzqSyxdajhrk%nsayFpqWqGKbCqAemDadQpoml8KY3pOOnFaMjqSOiq6pcoXasvKB8rj6gt7DcnyGzlJ%xtWKfX7hGnyK7Q5:vvVufvsCQn4XD5Z89xlqg38juoGfLnKHTzWKiINA8o03SJqRZ1CClQtYnpgjYPqer2WaoLdueqY:c6arX3UqsCt:BrS3gVa9G4QaxXeLZsnjjz7Sb5OW2zeUZuQ:nZrtj6MW9yOkxwDvrpMK27BjFMe6Lx6Pv9ckF8VDMTvKXznbzwdB39MnSTPWq1O:1YdZe9u7Xl:ZT2Zr2mNpr9sTbDfbj3Ir1:93q9CDfOvRM4IbzhOHb8sbiRfIO5NDxV%WH8aPmdfHz56LxTekX8rbq2fI17Ozzy%1S9XfvDPc38Rb5BPNs%9r0CP609uIAjvjxA2b6LQc9:IkKEf76DeX:dhG7Ae4UlQNYGHYFqBtfB9MeTQnRIT8LmyQuDS4nFQ%IKesQqiusEpMtUhRIL9sVyzBFFx4yjxhGM7kZRzTEGiY1sRvqNX8clzYvHTQ3wh3INzseVjidHuQ47B5yOS4fAzpoH5c6oB8tO9wfwzshIFY8dSDkPOAgaT1nIeM9DyJPPtsiqD7JI%4%1iQcP:wlLz8zJyI:cyjxPrQplj7uKg0%HixSPT0tYjxILjw7Oi:gOQ4wTzi%MIs2QjGUNJIxbjKnMRwwezGiLQ0xBStcME0obi%BJU0uriIBLdwflCsWHQ8qZhp4KNYX0SZrFR0lLhNeIyIRmSFMD9Ufrg0bHkgMdBwbC%UaJAp2GV4JJhjECPQWUQjaFf0H0xTCB9YTmgfbEn8H2hFrB8wQWQesD0QHeA4lBzEN%AbZC7YGcwpbBgMJ4wWMB0wFDQaVBIYEvwP2As0CXAHCAbn:oAAT:mr:cPwj:tf6zfxR%Wv75ff:%Zn2j:hz9R33ePSv9a3zS:QV8:TytvKv8ZDygPCj8mrv7PJt7mXziO0D9LfsvPT264X1POtT9oPqGvfC6dT38eh2%Ajo:PgD52D53eWd%ZPkrvkk45D5keFB%dvfwfgG3hT4GNw%9xnaSfYT2EH1EdYx9B3UI:NE0h:yj9Aq8QfPRfC0zXLvmsyw7r3LAe4gy2ntxMru7KvKl%zSymvsOMtu7NrLoOyxzP7suM2A7eTOHu4u0M7uitGF7%:SPfBR1PLwqdWg8evWR:IP2OfyDtl:8%DZDvSA2pH06toF9R7bZPUc26b16NrD9YXas:X72W31Ttnu9IbYMPSn1zbzuNb:8bzVkPC41OvustMT7a7SDeux0d3ovdCJ5tfPG%QCz5:hPs4i343Nr9zuzFPaYcwU2OTL%tV1ywjUFMtE0r7KstByylfPMco4zvnJWc3MybzMqMlkzI3JTsx3yXfMY8nZzEzJbc0tySrOAckGz8PI%c9wyPnQCMj:0YrHA9P2xv3TT8bn1JfFt9XSxGnWA8T41jPDYtdnwqnXqcHW1wPB8deBwAfYLcAi2BLAT9g7wJTYrsD32HLBfdmNwifaAMT62s3F%dv0xyrdc8qR3kbNNOBp0Bfi1NM45H:XluZi2ynpc9:o66jjye7358HxWezF9MTwzvcx9dL6mPnM:fL9uQA1ApYDWwZjBl4KHgk4DsgL5BFdDmAV2RCqGDcTwxtzFaweixdmIYEZ8yNZG1UmGh2RKMweqip3IKMsISKBLs8jSTCGJf8xSyenMyMpRDUVK9g2JS1kOFcv5jmsMVo7IjS8PLQ2AT5aOSE:CzwQQLs%xEBjQTJB90NTQXBGIEHISJZA%UqzPwBNdz7YTuU8fFAAO%hR0DgWU1s2BFStM7FU0jAcVdktSlXQKj5VxScAVcYkklThIftTIB89U40cW1IvGllRDRg5UCwW:06QFLBNOxNTTC4S7kpoEYlJ5RApSKEQ0EaVEIFFuRA7RAQR%0JsEcBB5xGJQGsSWD:uEjA%ZBMUPcYTBzwKFA07KRQkOhwUTDngE4E4chO8N9MS9zYGEiU2DBE8NeoPLzSlDvQyQA2EMcAL2S8pCvItfwjQK8gGdCkKBd0mTAMPJJUBDSHp:90dTv6KGsj8IhdZ%7UTA:pREMb4BQ2h99kJkfbVBpT1:gOl9FcBwPPm:uHyr:wF8rj6JvEH%UTwnfdZ73:2ZO6q9WDtHPVI7ND0F%u89Mnp1:RZ6Bb1xOZs9QnlzvUn4zD2H%GI9vTeyvaq3O32R9rm9s:XrPZN1Tr2ytKN9VDQpvTtzYjzrcs68p3JxPDLxy7vQcZ:7QrFvustxPDpsMMZ6JbDPObfw17ki8SD4pXFsuD3xvLeq8hO3afKzdvizHraUM9Z2efRbdic1LjXZtc21zva5dYV3b7W7N%81rzi2dZ:5Q:XMuhX19Lqr9da7RPYyu%D2B:yANlZ9IrZePYf2oH4vtp0%mXbVfwR3Cj%wtzy:3vdtQFB3ngDF989BQTgCwcJ4eYIKOLSCmPj0wy95OoOOuYZEeLnXRO66bUVyusaGBTuhRqY8O8cUPNLHzf2jyFE%a8jbfyhJar:XCfzAtooQQYYKosJFCvKDNAr%Q9PLBETlSwJFqgs3RiQLIYbVSz:HQMsRSClK1giRSs5JO8q7SWsKnYnhSrbKH4qHyqeKkYr5ipRLFgrQy30Kx8uuyzlLqstmC:CLjsw%i:SMFAxXjG9MuIxOjRfMsA10zJGNzwzxjiYMzc65DOTOx400TxINOw9ZDTcPnY0nD%CNCZAizR1QJI0hkCWNFpAljTvP440Sj93NG4%SzRgPQE0JzyQM8Y68TJCOR4yoDcXMeM13C8NNHAuJDLULCowCisjLhMpFSzvJgMqoiTwJy8i3iWgH9Aj:RzFIU8avx%dF70d7BS%Gz0SwBmTD8EX7wy9FVYKsxPNB58RXAV%DwsDUA3fABML2:7ECAL9YgZQ%%gDxPlTAVn4n:4L98n71PXQ%LH0svWc83HykfIP74vxkeuE8Pvnde9T5FjuouAk7fLc1etN2WfqwtXZ6F:SLucyz2vlSsyW47PJteF3x87fnsXl3S:E:dsrwxfalsI02G3CVtauwoDUVcO20lvEANG7xWjPasf1zWDJscyUy6HL%83IyozQJso%07bJCdZ2yefYX8nQ22rJv96Qyazhy8mR5BXKZ%dpyifqxMrL7CjLUO%Uy7LxCszy84nMEvYRzRb4oM0B%jbO2PvUzp:9fM9a:zPQCwH90LUC3dFbBNLSAAbb06QH9NRJCRzW7QpT15AMndgtDv:ZwA9:20MRIN2tEuDe9hO94BQVruL8FarkpBan5gYXm%gbF37q4RZI7FoW8e2KFXfvdxTU8CsTBvKuEQ3zChDp80sOnfR7DC31qAqe9d4I%fUrB0b2mwWQ9jwE3vYVAzf3MAKe95MBFfhBAZr4PQEr%YcByfkgAnH6BgMn%zME7fujBcf8Twe5:TAJxf48C%r:bA0kAbgPbwIXEsIDgxQZBfcWbwZrGcEH3BsSCUMeZQqdIL0L5CIgDRMlkQ4nJxEQGymhEfAqPxOlLOcUPS6TFrovOxgiMdcZeTJhG8Ez1Bz:NC4eMzZwH2E3myCKOLAhsDmwItY6liP%O2EkKT0OJVg%nyWKPxkmvECCJutB5CYSQ0cnLESvJzNFICghRpwo8kYlKaBHviknSGoqhUgvK7dIEiy8SBUtkEg5LjJIey%fR9Qw0UY9MsZFqjN5RBM16UJsNhdBrTcHP884vDzLOUA6nTqZN0I70DS1O%0x9Dv5Lvs7:SvHOwUpVjscJqg6TyPBOaogpTg3Hlk3:xvlNQgaTzRUGJ0y5BbUMLYV9y7IFAotFBQSK5MTEyk9ExInCRMVJe4SJCPjEkMh3RJ1H9YSux3EEhQcpBJ5Gm8S4xglEkwXwhGqFUUR9hOuECsS%w9DECkPPQ44DhkMJg3ZCfMLggefChYFMAmbAqwHEQAZBnr9gATY%ugCLfhZAYL12P:g8mj%VfAM:e:txPu565D6vOlv%fnnX:hx5lz3IuVi9grkavUp4230geJm8xPiS:Lf4RXx4%G77xfiNu5x4n7s5eKN6mbjYujl4:zlWORg47TkleDx5KXdCeWd2vnkide%5HXUWuRt0czje84Z46rLROIFyVXhmMZT4GvER9%Iwjre9MA03bG:OdzAvk7bHL5y2r%9ptmjvenYwr072BS%n9eSvhjXNr%q1vm:WtbWwCzWxMEg1r7CNta%w2zWvcS91rbFIteixpTXf8cL2EfIgtj5yPTYksle2RHKvdl0yhLau8pa2ufKldr5ysDa9srZ2uHK2trCyrzansp22nvK:9leylLZS8pp2EXKQ9dOyuXVZspS1I:KkNLKyqTQGcuTznvLYMzxyxDKecysxxHNP8W2zdjCYs6GwBHPWL69z1i8YdCPuvnQALmA0ay389GUtk7SuLWQ0hu1ttK9tL:SobSp0sa0cNIrtRHSy7WH0aK2z9Clt%bPzLjMzgq6g81UuxLMoLyByuS93MgZvyzHN8CAxTzB4cMiwl3C6ML:wI:D1b8ZxOy%jcRPvvLECb5RxSK%s8Wfvh:Gg7%dxs7AMsd8wuHHisSwyPHGosmrybvKsMwBzPbPdc1y0xvPHNf20OfaBdPJ3kbVt%K316nmUdqT6gzdcO7e3znyvOLq9Znlf:ls6Pb8KutNAM:tgQNV8JIGuvJ:Cf:0SAwn9:AOMfl7ESH77hP1:E8WrP6jGEMA8Rq6AT0dFAOKH1cE2iGOBS4kxQaEJgcI3CheCTAr0gp9LWQMui8ZDt8x8Q:iM%8RuDUWFFc3ZxayOOIYwDmFG3c6Rx7NOiEhvjoFJEU66SZhOcIpFTiELGc2KC9iNKcxEjL8M4UvJTbILB447CnmOfwmezsGJN08GSELPkEeBz%LG9M:AxlyQLIW5kCeFDFByBJVQTERUUHWDyRBsw7NQMMNT0AADa4:ZgzvPu4LGT6UCzQ9UgtEPCILTTv:ClI64wpWOcgKWTiqCl83gwpqNk8KezUJCpQ0rgm3MzsJ4jKvCBcyBwhUMUIHmDBhBuAvZQUnL1IEai4sA58t%QHALMIAwiuN:54qYf5KKUL9wSc0:P4lOPsBJE:6zSF6%WcfufjTHAz4Fxpy9zcX6:Y4FHb2HhET9vQNvvXFCnP1ogcw9ZkE7vS8Aaf0Fv9X9LD89vOO%n7zsvjp8hr3M:LF9VbxsvRR8ODzIe9N88bt9:I:7Nryi%rw8qvoMvOe5pfzZuQU9Abin:SD3yz15tyw9TfaIPaB13P20NSd9i:Slfapz1P2Sc3R9RvLC:UsyQP0hce98jDGRPE0xaPvk8Tj7VDEDuxoxCnq18Q56JfFQOaixkHk78dA4nXJQuAqy0:eBs1v3P:Op9oL0f:YJNN%1z:VJ9ZW1:3UY9kD1GHbOdNM3ZvSI98o0ufg2tGa4qzRPuSZ0dblndFl57XR7ujf0XTqHNL962zSje3R0izvS9Pf8NzTrfKC1Jv0PdWr9g3W3:jy1jf78tev:RDZQgBT2uoCwduhBVzdXwgo3xwLI%HODU3jbBCn5e0SNOhIFfXqcxfv7WgZIvEfG470lRwu%MYd%vuyHuj:XB:tA8of:QcDIA4MFCAYEAkgERTxH:MX2B%6G8wfXx:VH98i%h80JkIgWimwIE0sRyEMLwgilzHyIu8zAyQVNjQlDDiAJtQ53SdrO0Up0TyxKgU%GSwLP3kt5z:JLqFABjBCQSgx1EEtMlxCEDPeQs0zW0NkNNND0zRFRBs1rkQ:NQ5FPjVkRR41sEXfNPJFhDQqRg80V0Z%M3lG0TKNRggyk0YkMYRGJzBcRhMvEkbvLZxFwCzzRIorDERSKuBCFyltQdwnsT%fJrE9YCVyOx0k:TjVIlo2iiGOMzkgnzDkHpAtih1lKiocJCfBGtIjTRl6IMoXIx00FtcZhhSbFrsScRPPEF0QvA5dDX0McgoPCp4HbQfjBJgERAKOAcT:UP5l:eH6JvtC9wf5dfMF93:vG:Vk60bzLOeB8eDix%%M3hXuO9pp7PvVv%rZ0RPp3s1f5xjKneWQxsfjUsPZ4WjA1N:bvbnds7uR2:W5Y9miuDfXu7cS1Tu3%NIft%jQYLfjzvW36MzUuPrK8rkdyUa7WcfEvLPFY74yxBnA3MLgwbXBsMPAwIXF:79Yx3G:KckWv:bK677BzOy%is4Uv1XQWr8k0rq:%dMswNTVrcC41znBptnQwaLbb8Kx3RfD2d:Fwx:ieMSH5CzFE%ffxcLpj8aO7D3Hcu:vx2PyqshW9XbJPvhXyg:7U8u::WnMQQCazY0C5M6aBEXQYAa90doHT9MDCfvU2QnC1lsKpNiKCp3aaQqp3AAKwN5UCdvgcwjy4mgH%%RDBvDmFQXK6O4DhOraAhns5wGJ7RwB0%6BAPjvGgD68O3:4fH7:7LyRgB3884AOfSRAQH1iQLV9bEDtfYEBaD3ewaS%BMIh:nGCX76kQt5%20NfvxVD5T9RBHF:jQTFQAhFYgBBxcdA%MY0ASyGpwGcxx7CCYeZgrMH1oMZCFSDvEiSxBzJEIS6yU2FFonJhbAKBIYHyr8GXgr4hvQLMMdKy6cH4wvaCH5MCIjcjLCJPczRCaINaUnIjfnKME4DCpkOhorCDwXLKo9CS1JP:It4UDVLm9Csy:tQ4swVUVgMaFGNTLJRw4zxEjuM4xJ2jQaStQ1aUrcNnRK8jc4ShU5tUlGOulIgjvXR8s8gkYgPu1EfT8bQ%FAEUFIQtI%rENiPAdFyDlVRgs3j0c3NK9IWDGvSX0ui0q0KzxLCCm:S4UmDUwxJCFMEiL5Sy4gkUuJHupKJh0KSgcc9kgqG7pHjRpfRika7UT5GWdD9BnQQREaJkBGGmc%ixqWPNUatjocG804VhvmNnsbCTWGGz0zcBuHMTcb5y:XGlsuUBreLKQZaivXGPop7ReEKO8WAyfhFW8lzBTFI7UTASKfEiMgjhEuHokQJRySDw4asg7uF%4NyRVLDaATzgx2EXcMSw9FDCENMwz9CjgM5ghLDOYGYgwIBXAMVwNrDNsBSQyaAP8LlP%FC8r%1Ao3:ucJ2f26CK39TQew:aMF3P3BAy3%rwGe:nX:Jv8f:b::tvpiAEj4BQHg9aMBjPM0AlnxrwJT7w8Dge1NA%rrZAOQ6lQDc%kbA5HovwLp50UCeOe4ATznIQEx540AVOcEAJznjf8C6Cv:fujc:gbpm:6T6WP%Huov:qLqAP4Y69j9f%vA:dTrwP0U7N39QOwd:ljsff5d7Pn%UeyJ:zPsJAAF7MEAx%tZAXrr4wEf61sCtuq7AkHq:ALA6RoDNekQA6To2AIO6HACeufRAe3m%wBt5uj::%WX:qflBv1k5TT7N%Uj%R3l2PYU5Vn0GeWu8Svl3%5H5fXrbOX16Jjl5uXI5czi%OWu3yHmk9w95oXZReaO1jLmudP95RHRoOWdzhjlY8xi5GXKfOOlyGfiI8cj4eDFtd:bxB:eEsRl3IbDjtozw5zYFsOU1i7De9R2w1bS7cMu0IzEDc5QxQDMMsYXyinHXsguyOTGN8mzxTrK1MQxy0zEFMwixOPMW8SdzfvESs4ExvLOdseiz07JZtCFy0jRFM5R0u7QgtML1NvUXtda1t7a%deA3rjZOeKX2wHml93M6b3fk%0L4kzxgOTx9Brne:jT6eX7ouwt:3zvVAJZ8lsFLPVHCO33HguW%uUNH:2iEIf:WhPNAREW8QPLGPYFjhveB14eqwk%IV8LMCT5DDQndw5HKtoPYS0iEXowURKFM24TdzaCFEE5lxXZO7cWMT7rF0FAORn%QaUaYkMxHGRE3h0CRawfOUWdIQpFryN3ROElh0MuKEFCjyqvQPws2z5sL9A81TGcOjA0SzhzNuo1lziIM5M6MTFhPPAu%T3LLFU:xipyQOQoTUElJ%hBhiVEQgkkZkKtIlNCcCERQlIgpUFOHxNBYB5dQH8dgz%mHIU%yxtiPesaGjwAGrA6BhkqOfoXkTfaFu01ohVFNFIUoDLpEgAxZxFlL84PzS0gDjUsXwycKo4KACmxCGEnygbAJd4EHiTuAnoi:gDRIBD:Ih8n:WYdRvuXG3P5sRm096sXDvaCFYf0LxMi87AQ4PEFDsDwMAu%7zUI1u4eBQPu8wFB7b:%i%yI%9zrVvgw6y71guoT8srpC%8D6RzsJ%hP6S:nsOYW5kjk2OQg4nTjP%Do4ajeNeBa3V3eVdxk3JXbS9oX2xfY19rO1c3ac9P02g3RQ9ugzrHbM8w23MvJzNxvx2rdJsUL3vrCqN70wDzfIL%%34i9KOA0vG:gLLuM4HG6deAGuiTg7LmU3yO6xd6purndf7t23KK8CdsPvnzZwr:d17DBNtbTw5DUIMbx0o3IXNERy9TPo81ZzjnQ8MzK0pvLT9VgysDXQskX2kbITtxtx2TeucZX4CbGKuKzxd:jXMV95SDFDOf8xJbo78Ql6vvEwesdxXTtVsVF76bFN:EPxlHzj8aU9SrHAvjfx536rshh:ZjJSQCbyk8Dt8tmBu3MgQlAzpIMtM%LD07RXhIR0wAV:tRoFxfXjxlZ2XEbxtsNHV3eZB4h4XsfFeRUIDvn9yCU6mkhHO6yIc7x2iGk9eohk:npIZP94SGcAdshpgXhIacJ:CGXDTQibBGPIhwVESOeGLsj6huLJPoeeyXLIYUmWySiJ6wmyijAKPcpnSohK0YsQizCLVItEi9KLjkwJi84MeEvETJ5MMQy7zBWM0IxyjNzMSk0gjF4NG8xvzQ5MQE14DBCNWUwgjXLL7w1Fi:tNUouEDZtLSE2gywcNpIrAjaeKtE1qimKNbkoKzXMJ7M04yYcNAAmYTMjJX0yTyRoMYYjHjDLIpguHSLVLH0h0CrmIIwoVCANJr8fWyMgH34gch6CHbAdchrTHFUX2BszFLsaDxF4Ge4NCBjUCmgWyAeSFMwEghLmATUQFv%pDVz83Aq1%dEHIPeJBJ30CQEs8lb90%92%ZTtcPVx60nxbOkL7YHnvOit5WXk6%MO4DXiwNuI4IPX4t5h00TdZc%t25rLINoLyJ3YxMQj18zBsNUrv0DU5bzN0v66UdF1ucjPTrgvzoi3iMwkt9jKH7ckyXS3dcccuNHFDrk%xD%6vsKku1TBMb0AwNu%w76XwJ69W8KVvB7EqrvXxeO6gsdEuhrJ0bmdyoq5DMxtuWnNd7m5zqC5A9DluVDRQLqq0q66G9Quu6rVvLtg11q8QNkGvUzbwL2D3Yi%499fv2niQ8AS5TLB1%cnwrDqHMOR7Q7EbfD6xDXz3cXX9bzGRPiZx276echM:F:J1P1MygX:Qcvf:0DMYwBLzZgAZs6EAJXPMADd0KT:PtLn:rrTBP5K1QT96dbx%5HY1vo82rz55Nuv%Ibdt:cd39:2p%At9iDiqvWC41n1yeQ99e7lVfXv5p31yOcR9nvoqvYL6WT3gek5%OfpJPlJ6iD6s%oo%y7rOfzB6039bexi:jPtd:8R7owABu%hARLwuQI58dIDf:LuBOnzDAZ79SsHOvdLCCL5bAkx%5AKXf25C53:6QznASUOMQRvD3UGyxCvCDwS3wrFEwQNZxUgDyIXMxH1GD0T4Ro7FeYcKhcEHwkZPSHTGo0jhhzxJR8eZSihH94qDSFTLWkivC%%Iw4yEiVDNGomVTbMJz04Nin4OakqgjsjLNU8pS3tPTAvxj7GMFk:ZzKjPxU0oD:KNU8:hTexPj85yz32OqE8qDw7O1Y%ozkBQOA3q0H7NVRD:jP6RO4xmkbTLyxIsi2rSZErEUt1KVdMZCd7TWUle06AI1VPvSELUCMgnFC7HgZRhh1GUYccWFG9GzZRKBvfUMUaT1CUGoxPkRqYTrkafU0FG0BMbhvpSuobe0lsHPlH6xxjRlsdtkSzHfFC6h0VQfkdJD:dHSE9kR0UOxYdBDltHPY2lxvvNJsa7zJ:GfQwSxj3LggX8izCFd4qgxS3KFUTeiZAEikkRxHIIWsQXh%sD:IcBg%OGnUOOBj1DfMVgQ3BExQNnxGoDIoPMgx%DakLegsDC34JMwqPBzEJsgX1B:ADewZMAsIEygDMAm7:nwA5:kL%Lf3A%078Ivme%3P2Ifu989X6B:G3%lvuwvq:6%z6Oekq%8:mc:uG5L37YOIC:GHgPvyL3mz84dyL:GHbmfwN2pT84dh7:NrXS:z11gT8LNap%3vVPvve1Mv6VNRZ%tnT8:ls06H5CtNr%a:SUvlY0lf5A9J3%a7Rrvlb0fn5CtFW%r7Qxfp60EX7QdDY%xTQffz1zzD95s:t:ebPq:72z2L:FtAFAEbQigCI0OYA29ASAULRCQG90cgATdJQAPDSof%n07z%b9Sj:UfVVvww1tP6Kdca%THYKPdG2f:0Y9qg8oTbD:Cg3FXtr9186qrekOeJ357kRuCt4dvgx95F4fHbgeEt2Yvhf9Zh4ezTAeF60WngLs%X3w7Ni94ey0XdYMnI29LHGdpzxj:YPsVC1jTELdRSwwrSnMLjzxLCw823wbLLjcG3yZTB2sfNwR:GNMKMxMjCJcOHw:DBbcTzwHnFNcCoxr6:%MeSv2XJtr:pyi:Af8z%wB7OI8LBz5:DY9FwxQTTlcen1AvKUNbMzAbY0c:R2Q:Ttdt81rbdC9rU36:dDuJc4WLkCOXM5qvoSuk%7NvrvO977iPzKvF09ufzr:mx9tj8hfny:2D8AQM9:w0GFQIaCeIELwybB1IPOwqIEr0M0hUhDy8ZaRGbHJcTESCzFYcjwhf2JsgZVSrIG5gtwB23MK8fpjORIVw2ZCPOOCUl9DrXJsY8fihAPh4qYD%9KyZAYC2VQAsvs0DAMIlAgTIeQFE0fT8zNrA%KjjAPTo6tjxkPJg7pD5vOvVAQTlPQxI4pkXoNvBHxzUhSrQ0MkyxMxlOwTLTT%UxXFEeMbBSZzDPU78vuFQhL2tVhi7nVewtMVZMLU1WpSxBVvMrF1YzK9VVYyqCVX8pJFWDKLtUbydHVD8mx1P1JDpTkyOfUhki9lGOIEFR8x5:UFAdsk%oG9ZOAhrqTWIY6UzPFtFLTRWdSuETSkmPEtRHWhE5RkcQd0RYD49Cjg6BQOoNUz5qDQg8DQ2jOdAMKTeyDJo0sQz1McsMOy:6DGcsOw16KYYNdCbRDVojEw4xID8OAx1NDtwZMw7EFukNxhNsDecQtwwtDskLnAukCjgJSgkFB70HCAUBBkgDGwTIARACiADj:4j:nf3B:kL7Lf7c%MP9cvZ9:Q30VP218Uf9cu9Q:Uvtb:1G65:9aOnd:bPnI:4q5mz%zeSy:p:j7f6f4hn:0OEz:zLhNv:H4B::j%Dr:ozglf684Bf%H%Fr:bPhi:x54nb7beMs%o3ksvjU5RH3PedR9cHoffNW6pvx9Oux75LtxO0n79XrrfDn6R3y%%dz8xbmrvQ65M71aeLV9qbgyffz3rD4Ud2R%cPbdPpK2mL759hj:JrXgf1j1sP%QtUxADjUzgFG05wDcdKaBb:RwQc10QsK2tBvDLTQ4w7H0FwRFtHPE6DRMxZl0nwYYdOjGpPUnxz51Wkektf:H17ZXSFd24Uijd15I%vfPiRy4t0kHOVdJebnyCXN6igm0e2FJvTw5SY39FAnm:fIJx77Tyi6:ugoaAKRKR8GTCrUCRYrfg3xKxUR2iyTFNIt8hfWLi4b4y9DHvYwLCEKMuUjGDNrJho0uigLNdIq5TWzLKM2Yi5BN%UvvDdFMQ44iDI1OLUzMDjONP431DWhN8g2HTeoN3U2dziuNTY5zjTmOdoziTrXMh87yzGjO7wwEjyuL2c8qC6bPK4tqjzELI887ytFPDMrzDuSKiE7DipGOqcpPDlbKQU4KCmlNgkpGzX6KGgz9yiKMfsofi8CKUEtAynQKvkoKSjZKE0lmyhBIjMoDB%ZJ7YbxCZJGK4l0BRRJFMRqiLXDbYgYwp1HvgG5xubAw8ZUADtFRv9hxIA%t8OAvf8Ch704gZR8ZkClu4o:uXrl:k66fD0lOY78PPjgutb4c:m0N4r4lXcnt3t2S7Zl9fj1FTVwNAf08vM%NAJydrOgsXFzDzCuco%v7fIj7zCxjS628QyuALDi7Y1wUC1cr9PtLO9t7P2u3SzOrp%s4K4zbPRtli0LbUTtZmz87UYsuq2q7Dvt1Gv9rgJrve50azruqqrzbuVqp28lalcvayoEb7bp8G%Jqd3v42mO8AUphrBuqUewn%lUcNjpb3EY6Vnxn2lVMiupYLK9aXrzFKmh8:GpkzSUKcr1fOnGtiwqAzbhqn13XWqzeB5q4rjjqwk5q6tkejUrs3q:q:P7Cuxle5bshzwkLNj8cm0bPIEtj3zQLfa83m4TvStuaD03rrb9BC8CPVLvTD1lL5Y9fK:h:VmwcD18MIF9orEWPYuxrf208ck93LJn:cEyyj4gszA%OvNaPk8zx76ddDi%pfRsPui0ob8mNNg:XvUPP5P1Rb:Gtbs:%TWvAC514MBothAAqrZ8gLX2poDKtw4BKLdzwQ932MF9eD3Bcjijga05C4HuObaB9PolwgE62cJSe1QCp3vUwv88XUMYfS3DcX2Gw8i%aUQcvtUErD9KhTZ:yYW6gFEGOUDghrKBdocnAdJH18JySETC1UkugzmJlUOdiniD:wrYBFtLs0SvzAsFOgyfBXcNMQWlDYJGAo4Uxk8OagaJzoLHMw6fB0sO:seSTuEICU7FCLCOqojITpFJUY55yYxOI0o5zY2Kmo12yvAM3Yt7TEAL:cvdDDlLc8xvSsRM4kpPDRMJ1Q1DyVaNtQiTzefIDU4cx4IOVIcxjk:Gmo6PxjvOlgWUzuRFJU77xK0O3kRtTszEJg7IA9gO0AODDuUDZo6Gg0GOs4MTDmqDGo4pgxgN7oMMDbcDN00AA1pMxwN1jEmDSUwFQ1VLuEMaCyGDGAqAgw%KFQLCCaBCsEjjQlxIYAIGh9hB8QcOwZwGhUFIxj5A9wV8AKcEwACYhExASwPgwD4DPb:xgqG:5kIK:9xBtv%VQSN:koCOP5WANP9f:5a:cr8yPw2%xn8wflN%2b4Yvof91n55vUw%Lb06:aQ84r1dfIT9GrxiPJw8PDwie9R77Tuse3w7RXsPO2E6pnsAekI7I:nj%sw5jDr5eTt6qrjxep%4rXqXOG26kDgwOon387qDt7Y6vLc2erS28:qr9q66ofZm%pY2HbqJNdP6unVKuqp1AvqZtP16SPS6%ni0PTpqM8U6nbOVOpNzbjqMMxE6x7L9usaysrsI8m47TzIt%5ox77vqMbG8AHGyPF4xcDyEMWq883EgvSzxEH1wsTj9fzEX:ZgxbH27cXQ9p7GtvZyx2D2Y8jJ9WzJ8PSFytTzqMt38s:M3fDyzQnvDs8A7SDQyeoj0WnoFtLk5fPSP%O103vgVtSc3c3UpNoU1ZjXJtV%1P3UYdGa1ErO:dNByyrTT8gn0nbF%NC6wqbPG8A0zp69qMxFuwbLFblSyRS3kcdFtcXFqLP0wz2yIcIBsVLA7q%NvgSv17xCrje7qK2zuTytUbgCrRS3AK0AtjutFrW4rVu0e67Rs4Svf7PSsGuzYrKbszC0FrQ2tuG0b7gAtta6dbdlvUG5FcBku93C2b23xZ7AnMisw4fL:MZ2zoLKatE2zmTUC9Jn1:fVctrv2YTd6t2a4N7hsePF5cXmm%nV6WDt4OwT8ebvt:Tp8lH46vXl%%j4eP:i%w0D1f6nBr8BSQqZBPINYAehEQ8KUxWiDAAZGQ%fHHMRJyCyE40j2RXGJu8XySn6GZAsAhwULxEeUTErIEYzUyLyNIkkVzbHJnY3BylUOEQr9Dh6LV05qC%XOc8xqTnwM545DTZ%OSY4Uzk7OiM5STz0OFE%yDhSQKI4TkKBOEdEYjg%RkI4MUgbOB5K6Df%S6Q3zE1KN39P2DYQUUs2eVKjNbRT3jS:VPozmlX2MkhW0DHLVoYwKlcXL2hXhi2LV9UrllcGKo5XHSh3Vx0mVlcGJC9X3CEGV58f2VZSHadW9xpqVpEYHFYkFrhVtBM7VUkRoFTnDudTmQwOU2UKEVJUCO5QawadT7AEGU4lA11MzQFlSqgAL0i1:71F8P4TQ1P%OEDZ:TE9eP0HOij9wjbg:Ggzmfz:L0v8kCzx%x4phPuxJf76SiJa%uwekPmZG5z4UBh49xQVIvbmEZj0zQ7d8s8L8vDzCN:uPQaq7LADW%pNAfznE:%U5QP9LOMd%8vgZ:l33uL3N9yU9hLaffUL2Jz0Jtbr82fUZPPP0v3yX9Gw8hjQdPL8zkTyCs4e8kPN::GlzOfxMczY8efL0:HHy9nx0svo8QzM:vF2zBbyEM0t8tvNPPLUzj7y988v8kLRCfKy0sbxQ9Rh8fHV1vC51yPwltlJ74PbS%563S7tdt:563Lhs%pr417pXuX950jnkeYn6Rnl:eqV48vsCOKW7nXgYvDh3jXyUt0U9M7bBfZY2gr49tgn%qnXXPxz1qr%VtUNAVPUgwNv0wQGrNKJCA:SCguc0X8NVtHfD0DRJhJe0U8UttFYFkzSPxgj0wYaQNStG6LVOB1I16ceLdkAIE3bRCGj3XgiLeChI%bixCTL5ecl1%gRJwTsRyhI74wpnPLkKvj1UCxW%c0ts:xYLw8A7zBsA4wyygYoNCgKvDWFDUQ33hC5OC0UFzpuF107nBqJPLIdmj2tII0%jCNiP1EmFUD%KKVAlisRQR0uWUGVMH9B:zKCQVo1ZUGnNyZB5jnFQBY8QUA4Pp0:SkDaPklC:D0yRAg9AkYEPLJH9TpCSeI5sErTOPtL0DckTeA2Kk4KNglPUzW8T8A0O1BUNIBQEjSBUPkzOlALNKhPRTTLTqI0qE0bNURMpjWlSjs200jNNtNGUzerRMA3YEINOPY:LzhxPR040zrPNx04PTdNNWA2YjI1NV0vtzM9LOgxBynJL8IlXS12IqwqLB%8J%kbmCS0GEchjxXRHXsSPxp8D5cWlAzgEsUJIA8UB10LgAScBwkC4wOs:zYAZP2a:Cz7EvkD%aX15vZU8tb0Ju:W8h7s6PBA6RHvj%ZS7RDkr%vJ4Sjqv9%76PjdZud73CfmS9v65Gra3ePU2cvih9nF4X3Zx%Cx2c:fHNrZ3rja5N1:2%vcaNzt223d6tqG3uXZqt:h2NTg4tf:4evWKOP81UvkFdVp5TLUguZT05nnddKy6JnR0OnC0Prq9M8z7DbPf%2LzuLu%M1d8H:N8fEgzZ:z3cxn9bfMR:etzDr5wsw5%:bMPv1JzT::uM0yAULOEQPjztQEmc93BmPQ%AdC0VYJNdKRCjzTqwtW1KYMgNWEDbXWRw7y1:MOM9mID3faCRC723sQ:dzfEDreOhFu348RkuDhEaHhMhKX4oMScePVEjPkJhPd5HYTdeXAEwDmAxSC5jwU:%ZpFHjniRTv55wUYuimFNDopxQ46Z8UmemRFPDpexRA6l0UiOo4FM7qDhQV6%ATYuuwE7vrgBMm7FATq%wgE1Ht7xId7r4SFe%NEjnwXxKH8TkS%:IfEo30GBI19igS7PdVEq75pBJ5%xsTTf29Eyr:jhQQAY4V%wK:FugEIRjRBrMZrwhzG3wKXx02DHEf2g2kIWgP7yPkEEkmThKmKKwT:SoAFUYtTxZ2L5wXiDHsGHQzQRo0NZ0bwjYAHRc4aR4yOdQfDjpBIa06rSIPOxokNzuKJSw7:ybxOnwojzr:KQs6hitqOQ4trziTLt03EDDzNoMx8TXpMtc0QTSiM4g1UzK5Nuow0jdpL9A40y2wOS4sczp9Khw7xyitOxEnKzxgJZk8tSP6PBciUT2JIJ09ER:fPbYdFz5%HEM%bhtgPosaaj7UGV8%SRk6PuYY%D2nGJY9hRgSPXsYZzyDGJQ7kxiXOqYYcDmwGCA4rBiqNpIYDjVcGE8zCRhrMZYXYS8EFy0tVRbLKowVOyisFH8luhOdIrkSnR%uEYscmhBzGX8PXRZfDlMTOg1ZEBAMcA3iCpkKrwnVB3cIJAU2B4YC6wX9:5AEi:0lAzL7pwH1%BcA2fZ4:uL0zvwT8x37cPFr%fnvvveq7hj2fu199G3s8PJu62:xeur874rplO6b6Dbtruff68DmjerT5T3p5eTt5:Tjmeb%4j:lAuLa4wPhZ%IC4OHgA99D3wneit0Z3bPbNty92WPbq9ei2n:V9tlB02DZ99Di2KfOfdhYzDDYD8r819HH4Nejxd3XjMPz15HBJNi5v3PYCL7h2IO8c9kruyvaAboL2wa5FNw4uETdl7eS3iO39d:dtl:hw7bE4te2FuQYt0vlhrde5iK4TOfruBPo4Lmz6AG7KelKvHLptr2I6UK:ZOnkwAHpl8JZ6E:EbOcCxjzmp8fM5DLJIeOaykDh2Msw3%TM9Ny8zZPaXM4R2MXOddX1zsTS7c4E0KzOOc01zmfKi82Rx7HMu8Svy%nBisogv0zJZrz8x765oMYrt0DFr7Tgw0mygsL5rynBwa3Vv6OrhL6lqTe9zKfrux%moLqhpFe5V6MTuEKi17Zhoau1tqCVtECgnrP%n8yy858msh2gsrGAoHWxHqF0sfuhtrEZoz%yf6QUsy6mO7QnqLS1aaqAt%2snLmtrwS8nbKzvrS1osHmuM3EKLwryHC:t8u5wmjP:sU40z3JHtd4zBPbsc8T3%jSFuMf1hvnUdkc63jcGO%N3wrzieLv9mflxPom6Ib%yOowAlPtvgXQ7y4JR:J6DL:0ng8695YSt:lfFTT89Bes:lEaGwF0HHwDWx7PBQMgFQhvIVEKnyKHDJojuw5nJPUQDSU4E5UliRUHJuoXaSZaGsEm1hwSJ1gfYCfWIawnSST5J6omSCj0KJkoISvtKDAtQSkeL5Mp6DDgKY0yJCoJNFgqXDV4Kok2fiqSN2MqfDggKko5sCkAOgwpoTo0KC87JieqO%MlEzxwJGo80iKwPAsh5jwjHww9HB0hPfwaKD3IGCE9hhYPPTwU9jzxEdk8qw%9PG4NpjxAC5c8IwmTPBoHlzwoBaI8UQOtPJYBsTz9:6Q8iP59PDr9NTwW:Mc7HfsyO1H6dTqz%ZM5Q:mLOP:4XDfl%AA28PhwNBr5pTJa%Zgwp:lILvX5tSs5%ucoZvrnJXP6xCJX%okfCvpFHIf5ABnM%MMV2PeUEqv2dg9H9W8MrvOACeTxrAbt7:UDz%1eAZPr6P5A6ZX84uZp%oLkZfgr4or25N:Z9LTdT:Of2%jxqdmf8NTXce8g1lzujtRh7R7TguzO0cLrnNAk64fPpuqMzknqrc0J6ujM4ek:zM7ps8vL6UbL1On4yufpysoA6rzKHurQykHqBstp6mLLmerjy9HqicwU61TNYutBzrnrS88V7G:Qceyp0cTs99II7VbUMO3G1TftRtcT7dbYwux12kLsJdyV6%Tdv%qz38bpkeGt6IDjeOd:5SbmjOe35KjpJ%PQ63jh:%2p3zPwwd1k8sjbj:TJ2a720Ne9%ObVuPoW1Jr8Y9Jj:tTQEABrz6ABLM4TAx7NaQRIzKUFs8vIBmbL2Qdny90IvMvcCWfM3QpmzegLuc4DDV3QNA5N0nwPhtTdEAHXVxK52ekTpdySFcDfTxcB4yAZYeYCG9np8hxf7eke6fDiIHD02CLr98IkVfuaJqv%WyjtAf0pIAV6K0gIzixqC:MtiQ7oLqkRrC:NFEMw9BevMB8b9zBPHh4xgyEpMbkkGzHwJ:owJivKMFkujzCHMU4wrjQKMMw3yC:hOogv6T1LL%VAEi:RQ9wuqkarLmxJgC4QTF4ujU5ILtpQQS7uUk4uw1RzLlRWsS6hVwovrFiAL3lZEDAMWrswaFp9MYpaUjJxWjYzFVoiNHBZDTV9WO41OFe6NqRVZDfEU%A3olEkOElPJTjCTNw3GkpEN1dHWDaARBY1m0GAM6o%lDGvO1YvrDjKLKA18ymKMtkmai%DI0As%h8MKUkc0SV4GJIikRRSH5wQFByfDN4YnwixFaIEkhKqAIQPvfyNDN74rwkR9e0GWfFGBLjtugEy6kT:zObg:IrjjPpy4Ej4id0U9tTa9PNV2OzxENYA8AXUMu410oLsotDx6kvPfekyziboU83q5qzMyOU3zMDk7svR48vL%eLHyzTi3st:4Q7M0%BUzCjgscx43yPNvt6rzffdSc4h3f3OQNzIz1bbq9Bn2qXRc9m10nrY3NN61xnVbtZp1lPVytco1DjZ79Ku2q3RKNxr0KHdMc8V3wrOguD9zOfhEsxE40vLmeSryublM8ou5%XJb%jByazpy8nk6gPKGuxrylHtAsuM7sfLzu%3zBzxzc158gbP5:Na0Gj1w9H59jrTl:i41ED6Ndbt%6rXmv0S2UL:aNrgAKjbcALQ3OsD291PBcXelwaK38EHKeDKCKLgsgn34HcKLeEZC0vhmAtX4fQLWeEuDFfhSgxW4U4MW%E:DGzhJQyN4QQMwuHgCxDivQt24psL9uJ%C4:jZws85FgL:eRUC83lXAus5nILnOeUC5:oxQu96QMM%%pRDF:ssQzs7SUNpO%zDX:xYA548y8PgvUlEJX3RhGp%ZUSuvsTFMj9vxXT:5cX3gGZGesDwhv6BQ0eCQh1IBIK8yISDH8lAg4RKN8PnCqpERYtYhN2LwsVsjGsFsIzShiiNeoZTjeUG8E4SR37OQ4f:DrkIME7ySJOPLskozy3JsM8uiiyPMAqdDzGLA48yy6EO80w3DrKMhk6wTQ8Oa02RziMODo3WToTNhI81TS2PX0zRD8PMrxAjDAdQvcuZkNULZNEqyujRQEqk0ZfKGVHyyYaSEwluUjlI0dJlyLLSWIhSUpHIMZKRR9CS10ev0uQHTxM3hy3TEccMU3JG6VNYhsRTg4bck7LGsBOmBr1TnMaCU9dGvROVRqsTloaK05tGmxNixpvTLMaNkvjGsRJGBsdSE8bRkaEGz1EsxsCQtkbkT:vG%c88xsDOt8b6javG6IzYBs5MO0avSxYGj8poRnOJcwYeiLfF00f4BZQHNUVhhnFFPIWthORFK4SYRKwEWAQwxCLDuwP4AwvD2ALkA4LChEO4Qi0DeIHdQ0KB1MNVgZGDb0FRw00BU0NsgRMDSoEOg2VAw0N7QK8DC8CPgxaAY0LbwCjCm::fAlc:hcIOP10Bgn8lATS%nsCnfkrAHD4rP1U9wL7T:Y4%GX1VfWb9Gfy8fN672vzmuwK89Hp0PIq57:yq%TY8lniGPM34H7zS94D9JbcpfQc21z139km9t7Y:fYX2OH3iNfT%C3X0vkB1%H6Adf:%ynXKv1211r%5teE:3bYnQAk2ZYB8dlmAtnaBAPa224D89yhAx7engNX32UDmOD1AtvhTAIY42cBR%RDAF:l3:5Y5jn9JudT%8TnMPkp6NX2VOhH9ELojvH257LucOe867TmsujF5ZzlpeR94lfjWd:f4TDcQOAE2YDe1dWk3KbSsdp6z6:YVsyk1j:JlNQ8xoXSUMN70H3Aec7CvYDMHruRypC4rsgZttjGvLMRxX%xXsNpr8LBga1BwM6r5L5TqrC9FamsvBeo37tdp0%77Kb:usam8LrvpiK7aKeWuzGoS7xKqUK9s6p8vmus%b90rrvBz7C:w3qzBcZztonIs7lLyzK9Rs7kwHrRusTl1KPIhNiPzFLcb9BM4DbUauTc16PoX9vw7L7eR:H:4Z31IuXn%SjoG:4Q6zAC1u0cBnTw1wno8loNMfWgEFL3pRNT%WcWPvvmGBv9JRv2:ikd2AD5HsgCmiDNBBci6QZ1IxwJvCRkC:Iluw0fJxwQSSiCEnkp6BS0KksX:yuqGVwtBxzLLmAeSDC2IM8xBiNWM0wl1jSAJ0U2mSmaN44ryzhYLdI58i6nOlowRDuRMaU7ljLGO2szozsRNDw7ijSNOtk0ljkBNVg4CzXUNv40DTXkNAczwjTIMJ40Vi57NLwrWTQCKTo0MiYdNFUjAjRxIOkzjR3SM60auzPVF6EzCxWDM1ESYDOuDzczJQ0JM7oK1zJuCKQyQQZ0MjIESDJBAiMyawAEMrH%5zES:cUxjvuQMSb6PTHa%L4wqvcMMJX2Iy%a9QMut:SwLOnzLyst84MpfPKtJ9HxqyUm8XkjcvAVIa7vex7R7q4b0%2wGK7shxVd6z0S3undDjPocQtf5gcIZuSrBE7iZgEd4EL%191C%4LbaPgk2bP1wdYg82DUq:AK0lLuw88U7JPN8%l:y%:ni8kM5rvHSeQRxqXijcQc4S:DqN:4wUTe5sDr3Pi:ndssv1vahL4n2f69BdibvfnWWr0F1jy9K9VBvWvUab3J07G9R9MZvunSn76v0kG:nNL:v6:S2MDl0s7BPdPiwrbTFsRN1GrFA9XextfVccjG1iPKztfzy%fY4c0K2vDPK9sh0j3cdtQv3fHW892Q2XveUNy%3izft94d4mbeHOXQ3R:o%Nwe6%TbD%6X2uvwE9mr81rXR:Zv1bv4WtMD%ybRHP3gzgj:mczGAGHKWwJIyM4DXMYmBajEawY2w6YHDcLdCDLBGgqpwGELdMC7DJTALg4IwcAP0MF2EerCVBNWxFsVEcaKFxXI2xldykcc4MzGHpHPTCFj0s8jTNVGJkDYpig42%cqMN4BLSnh7i4k5KkwIOcuMh7qejMb7Yo0E:BdNQXz8jXt9Uk2z:hjNq:7QzaQ:u01egFoNXEEvDR3B:AzjQoPM7MNIjLpEDExLRRDMHwXXi:VGocuNR7CLZUhEi3xJHssQygALIUroiuwLmArwTE6K7Q0LCuJNzQrPjpOK9Y8eCtPP7ErqEH5K9tDUSzfRbksp0cyLSlJuy1cSlAuOkvvLsJLki:6SzIw5kvJMIxLTzHxSr4xFkoNMvhINTKVRy8y60X0MfdDfzG6QcowNz:RL3M8lC52ORItSTZPK:YyTCmILw0nCyyWJIYo6CECJQkfgSH7GwYewxiOGmgVGRfwEaUTYw4yEMgKwwwoB1wJiAP:Be::sAJl:G::7vg9:JD1FflR8vf1M%:i8jvs2u9r6eHsxub%6U3kNecC4ojk5t:54frdhd883Crdq9rp2kXZwdgG2LbW69bO1PLVD9MX1YHRWdQn0LnTBs830x7O09JvzY7S9cxn0q3MYNKTzHfSocyu0tPMBtMgzYHTgc0h1OzN6dRVztnVrs7w1uzOKtgDz4TZ78712q3Odtw%zv:dps2F3%rMAuEMzGziD8u:4:LJ8%S2yAfmX8f35vDFxed1xHLo98IE6YTBgekrwPHp975f6vK90uokvVPrkrzo6z%8l%wqvGTtUrxS7rO8ZO9JvZvwD7748QC:e:MXwCD1UcHj9qnCv:gYxKz6lsWh:BjHlv6SyIAA98lXAj7LEgRfzKkFV80UBynOTgjYzlIJac8dCt:Prgo80AcLgdAoC63QFQvA0NAKvtBeCqvQwgmM0AQJatApCEvQOQc00DwGK9A6BTHQPARJ0EUDddBcArfQhAEQ0cAAhNESABbSe::G0v7%ltOd:oTUV:6O1S7%s9Yh:u:XL:5C2Vf%rtqZ:jbc9f7f3W3:rd8EAKPhuwC:45cB:uWYAlfowQPA6hIFMu2IBqTvIAgR8tcJefSoC9v2jQ06%YAPl:t8EfT9eBNPAG4VqAJXF:0ELBlNB%galgmFHNcLAB4RDlcfRhCIIHYSkCGmFG8i2hYiIxYZqSNeGwEksx0sJBQgKSR%Iv0j6SSrI1InOiOxKa8iBiwQIk8uZCGLMLEgujL8H9o0SR:lNpwe1Dj4HaI6Xx1JPNIcxj1PHBk:2BtHQGwbUkELGz5CthoPQ2waxEMuGmBE%BnjRMkZT0WbGalFahn5RTQZRkb1GJlGrRj7RlwYckcGGP9HrRelSFQXXkn:FihKshb7SnAW0ks8FqZMGhZuTQ4WI04YFrpOOxYmT3MWXE%9Fk5PExfxTm0XPU7CFy9NCBjHSzQYCUo:GPxHIBimRdEXEENOFz5AlRY3PacV:jmFFJs2NBMWM70RfC8nENsrfw5EKNAMxiQlC3AhiQlRHgUIchueBtoYWgWOFjoEjBQ%A9ASZwJTEbMBChAeAeoOpQDrDUEABQ3s:zQMnP93C0f:yQrk:igKaP6MCcr97ggC:UMICPyDB9b6qAZn%a8FufebBMv1bgOf8y8COfHlAJ7ulv:U60f%4%gA:dPlxPus4pz6d9%O%T:cofgQ2dn39tU79:zSyfYu0ID2lc1h9jfLZvYXyY32OcfS9pzFNfdCxLT3K8NM%FXC:PjAwb75a8GO%lHBZPtuwTr8v8EK:TvC0f3fwo3%pcM%:4rE5v%IxYYAn8YdAczHqAEMySECXMp%ArrLtgIizb8Ckc6SAgLQLAJw0YwB1tKzAC7Upf9y1WP%mtbv:J:XS:t62HX5Jdlu95rZOPXW2dPy2dlC8KPZie002a3qkNiy57fXoOSt1n7hctVW3gnUL9t20g3YvtD01OfO49H6zNnOAMvVywLJ2MgKx%XFIMUBw0zDNMCWwYG9BcDuupy%erhhvSS2Vrzss3y70LHVutCvYLrwrR66NawRuqaqO7pKqZy6KKg0u0anAryspgS9X6Y1vmSmk7:CphvBfqfKwp2oosQiqqTGDqzSyGGuL8sXsb7NLbSA0Jy3ddNeu5:Wbb:92cDDjt1NyFDhBs1A5dzRVum81oztkdvV8UjgJfbO5G76Femg:hTtrwLH8I0GMPQvClf3jQ1E%qEQAP1pE5T:5RUDAhcYVAQGGooGuhuqCDwduwqYHsUM2h:UDg4h8xA%IiwTcyOGFbQkChgFJrkaayeUHeUomCB1Kr8jGywAJ9QtTiqgL50tejHhMFwzDjQ%NSA3FjcSOtk44Tx8Oo4:9TsTQjs9bkRFPpZGDz%ESJM:MkrPP55Lwj:GTGw:rk3QPltO8z3RTtk8GE%HOzNPBDomT1Q4%E59Nq1OhTRMTnQy3E1QMGZNJS7uTPorekzZKQxMyCekS80lQEvqI%BKICKDSnIgKErfHs9JaR14SREcJUnYGtNIvhmBSMIYLkjiF9VHGxd3R2kWEkfJFahGOBU6RrIUy0U2FFxFwhPqRFQTcUTsEupDhxJIQyQSgkLDEY9BYhFqQAEREj%cEIo9MRDZO70PBTo7DxM4pg4GNvgN3TMrDZcxOww0LyMLsyzjCRcqeQhmJ%cGpSQwBd0hVwMYH2ABXhxN:7kZI:0vF%X6xxSY%IUSQ:ZmEO7zag6h8YgMZu%8CkPt:ghB60wHZumlBbfnCQQ45nsC6%T6ANTjh::x4hz%Q%K1:MfhTft64eD5V%Fs%Fvh9PaC4Xv1yOEJ9CriovKl4k:xNeMU8Nbj%e6D5ATuO%U67f3lo%zL5kPsqecf7JzoOeyt6ZHs3%oj7Tns6u2%7eHub%::70zxPfFU85DyhvXv8%D3UPVc%qX29fzi96L:9vhZAtD5DwVh%rYHm:pECnT6rgzn%eoO9:jwEKv3vRIO9k0ULfSgFRTyuhbN758XYu1XGNzq6xhG6GUZq%XQGRrjOBqi4KcaVd4nG0Lcvxt22nYc%thNHdbXRx4N12Mfn9ahIIvWASLN1n8jYNcaJT3YziZf2ZQowNpkKlzcNCwu3vktNeCpL2riODHK5J8yS%fYM%Pp3TSJ7Kw1NO9ENt:xpTaH9NI2L:fONtr5nTaM:EQ2R::KNQsCMzXWBIQ0pQfBM3QK8DJDDRcyExA9MekSazDGFaovsBgCL6cbeC6rHhMuuiHULdAkuy3rJ8ktBiv8LRsuUy4oMcwuJzRkLxQ3GDDqOeIwpTy8MT4:oDKxQYcz90NtNA9GTTX1Ryc2qUn3NitLvzd7TH04l00xOXhO2jkXT3Q6a0::Om1PdjsXT9c7aE4ePGVNRDwSTEc8d0ofPJtIxjuERjc7M0RrOqlBXDnoPgY48DtmNsI4fDRiNUcy1jHKLyMuCC1TKgQqbSbBJnwiRCOJHpIfnRqyG70WrRfwEo4TNQ9hD4sLMgvvBw4HXQQBA9MAFP9Q:U771:m292r2UfQO8yLxwu8s7ofsb%tY6enoMuaW5hHjdOT133zi4typ4NzZ%N7q1mPdEtTn21rRf9rDzifZUczb1wXKmdbkx2HV88U31DjEINO6wiLSgcFH0ZHAk9Duvw7QmL%7z4q:m8%%v6:PKMD3z7vAcdBpwRrRJcLu0ePC5dKXw:nTN8Qf1bfETNYMxXXXK8WS2AzFmtmqxIbaBcRR2yPD%9sMwoHcy8Dn3Gu:MN30vWPdb7yG3eK6o91WucXd07f13WS2QN4Uta7e7rNH3:uyEeBEshHhzbFG4puxruOusUblBLIK55my9Ohns:3qZ7Qi7Y%1W%:YtqDxObjp86i5LPYhu2H4n7x8%hy%dfyWv0b%BsHp:2XCWgGqw5YCzcSbA8bFaQSTxv8EM8dgBavHjgUDyJAFP8hpBWXIIQV4yLsEecg:BGvIsgNQyBkDLsh8AgvI4gHwx1QB48fXAOvHcwAMyCsASMgAAJ:I8:8RyQMAnckxAEPKewAAy%EA1MtiAcLM:AHKza4C7s5zAy:QSgSM0TEFA9MmBpDULAcy1kMI6NdwCbTZtgqZ2xYMl92VDbHfMQ:i4ewQJeTCEnPmshTG6LkWGOvQGGft8Rqx7xYd9vE2Hzj0SCF39kMjsvgeJej6zyYZ:VAoQ:%aKWcBpyqFA3YrnAUELK0HUiy3CWAsvAswLLwNxSu4DyErtBFKKrITRym0FSMouhfmJsMZnSXKG1Mkyh0RI7of3iGWIcEgXCO8Hwkl0R6eJv8dGShFHXkpnhy4KgYc0Ct2G7ws6Bp7LVcaDi68GXouFRnILmEY:S6dFyMvyhY9L%gVUS:4FGIv%xN2L:cSki:wEb4v7RAAMPkPYDAcD%IwYA6LMcoNWzJhDU4zJw1dNBwNfjU:DaA2jA22N:8NrziRDn45Og8WOu0PbDqgEHY6RhEpOtERfDk3EmU4cBLhNnUS7jREEpIy3BHYL0ARzCxyEH0peA:3JVoORyIfDXce0QuSGnoKohYkCbQS2QfTDqEGDAuFBWwHiAT:A60DywDzAtr9VwIx%9MB0fhgAbv29wDu9JEAZfMlABjyrv:%8CL:CvB8:jTvsv1x7r38ve2X%xXtOvp57KP46uvQ9mjrwfTt6nryc%r97:TpTu1n6XPqyuhy5x3oVORj5x:hpebe3ejlmto05VrXjuQp1PvjD9F%4xTOHeNAy97insjF4jPG1%IIxBbjIMKC437AFuQhv9DkCL6p5S29m%aOvJ:nJ7yu6PO7xOnwu9vqGbzw62q8AO3evArucL0H7xu%8%:bvsjwrb9:8Y:AFfKBwYfyg8LW8pXDBPO2xBLz5cUB8x7HzfJfyHPypMns8ejKM:EmzEbwV80k73POze1zz0bsTdCR6vfQsehp0afmmdF05ILRHOIf0Z:fb9AD3XTPTNozzoHXscyn1PXKwtEHydjO7sbty7LEBclewibG%79Ww5W9mMA5u:C99bhfu9a24rjntHW2MLMVtLixwLGCsHevj689rd%uFqttrgapN64OpzauLqVkrmajvK61oTivHaDTr6OeirBPnVuxLJxFskObSbOemme0SJqgtUea97akmm%4ZpsMupac1Ls6ns69V6D:v%%ibsICph3FjakOyIatQMvksa7Ol7ZU0o%7Kta6wCjaBcZE3l:LcuK40KbmAdbU6irb7e4l4OXy4%Sy9lnpSvp87aj9SPHKALv0sAPc910GtvrXCFX9JQvG:1ANGAJfD1QEXRGFBlQTsQhMFeMKTxcgDWIZcw%LG%QRyh15FB8gOReHIiQa%yQ7HXUnfCDtKeIjXCxmJ7ouACsDMacuLzNNMjk15jUZN2U5yDi%PD466D9zO9xCYzyaRQg9IEhhPW9KbT2FTDA9Xk6sPPVP5TtEUeA6SVKiOQJTLzhzU402plO:NKRTzDJ2U7cwJVOGLrdSPSw0UuIpn1F8JwFRESVhUKYiyU9DIEFP7B3OTqQbdU5tGTNOSRcHTjYV6k00E9hNQxHJTWMPu02UDapN1wuUTSsKeU2RCFlNCQcxTZAFAU0mBMZMywJ6TH8BHExCAKlLFf8iS:v9hkrz:NZJ::sTSR77OkhP%kVHkPktRt3460Qx%HpDiffWQdz2A0Al9gQ%WvXhO3L0oDll80Y3LPLVNMDwTjId77MvRe0FLTnrRyr%6H8nm%ayJBfk6iF74S0f0N6DHB3c8hlt2YEXydYzFT7UDRPV0Q4Rmc81D5XNeg3Oy9QLS8o6Cg3JoggSyAQHWsddBd3GqwOYxvEBgsYwAJXGav7Kxpz8GcfH%n3H6fjxxwP3ccga9fzIN:OPyWPxLcqs79bKHe6Oy8LsW8yj60PNyOpOzjfqhM:16e7QBeqU0mvqe9Ql66bWM%wT2Y3twNsp76Xe%:C74fLy9%T89E:oCPe46wP5KO:e%pPyjPzv9QD%Mvkv:1L8EABJ:5oAEALCAKQEhQAEB9::MwnT:jQLbP0NDbX7xg6:%WUQm:f0EVr1eRMK8:4Ut:CJFm3uIBg17MgZGuqDGyfoVB1m5jYf4%QnIaTjICOx4hslDuITJ7zhASm64eEqCOKxLKHibS6A4xMwoOSeMfjlCjOE51I0O%lwNRrrXzYd7R43RO%qN43xAzj18y04evYrOBP5Aji5%7c3Zf5QNxAB0ja4A0E2YAalNQsJADXAC1c0hA6vM1gRDTM%FHUyMxfrMTYadTFGHRcxZCDVMJMjsTDVJqwwLCrFMJgt%zAXMUwxozS0MTY4MTLKO78yVj9cM9VCBDQ:RrQ0j0loNcBMHDbMT802rlJ5N2FVHzjeV744IVpaOSVc8znmXY06Y18oO5tgwzuPYVw8QGLwPKtidz3MYuw9oGJIPiBigj5KYZM%HGByPpxeGT7OXH89vVqdPHFYbjvwVfA5QFMiOGJQCDZZTagzJkoKMc5GOC5VQzwrwT8hKBs88CRoOLMhsTR1Hv0wQBtTLR4YuCkbFS8mQBK8IpYPXB8hDQsc5grFGOUIgBUcBzkShgXqDh0EkwvZAjUItAHVBKYAdgGm:x3%sP7L%r39gffK:EP01PsT8dj6%O3W%f3q0Pgr6Mb3juW%9jDju:UY4cX0St:l88vdI:Ob3InyvNse8i:b5:H02unxC9si8nHbkfIe3C:zCt328yfe3vRm3931tuDr9gTi:vdA4w35WeQR%kXlAvv55dv7b%aW:KLmMv2R5q:9O%YO:qLlU:7J5IX%uOOp:nfiyP4T4ej%mN8R:xPeSf%O3Jj:EtsGAKbZlwBQ2FMBFdc8AvzVVQML1ZwER9QLBrbTnAdb00YJN9MAC0nTwAyM038O:NM2EJHU4BFE1XYTD9bzFOnWURbK14sXq9iaGITZeRlQ2iYaCtueGrLb4RpE3PAav9zMGiHdehpk3fwZhd1XGX:djxhR3aoXAN2sFpHcmRUQ3HYUhttHE:zaERJ62tkQBNqiD53Zcw5J2U8NDNk8DO3YOwv02FAKJtl8CYjZvgga2hcI2dqGB8HbDAfL3KkG8d1fBi:fLQZ%4BUG3OEWBkPjMgaz5GkGKOa8BqLnLAcf6b4HoOpzCCPsUAmp7VYKM%%HC8Lw4wxZ8mUO%:MJEKv1xxFq95cTN:ltFQ77QRfu:AcZ0v62GrgAQxygAqUdiQTWHnUGzR9lCIogVwoKIUsMUSE%DmMhLxBIIR4SBiEJFKgg8RUzINYXrh%3GSAflBuPHmsd:x04H3cd%yD%HLIimRxcJE4c9yUgHIAnEBzyKB4cSCpFHHsrgByELMccYC0PHQ0uUB2MLoAd3y6XHQovjx0RL2Qd9i4XHb0uqBxqLhocAC5xG4ottBoQLekZoCwXGUQsRRgHLH4X7yvKFgAsMRY7LL0VoCxzFS4tWBXkLW4VwS60FcIvJhbjML0WHTJxF2QzOBirNAUZ4jXPGfc2ihrbNy0bfDitG884BBzIOCscYDgdHJM32RteNl0bwTStGr4yyxlYML8Yly2PF4QqRBYtJ%YUniN7E%cfCxIVHJoQNhgvD1MUzA11EHYMpQwuC%kI9AlMBcYI1QGeB43%dQZ8%0MFpvj:Aw:2ogK38ycBnPGI:7zvw:0T7tj7nuzE%VjriPc76iP1P%mX8lzo5O%J5w:twOYb6vzlDec75evjfeS94MHjid0I41baT%Is15LhENTO4AfRAeAVzi3fPstV3oLIgd3kxbrcZcMH3ArBcNvUvvnaybyo2uy6gNo:uYbaw7e%2ne2KttYtczbZLSj3Jmzqd30stnedrIp4B2yj%Hrsf:i4LFv5Pyx0uVBsiDnrrJR6ESzXukCtEPq6LT96vK1iOsgt%PrbrgJ7Nm5%etbu7Hr8Lwy65G%geo2wKDp1sGT6GbDX%fbxAPmLMZ%5EzH0uI0yP7g28gF3znJ7dxMybraEMlw2IXIFNaux6jTlMYv0UDFqs6%wx3MHsKNyW3A:Ma6vnDEEL3qwXu7bL8Duvi8sbiPuoy3M7ibtua15bWqs221f7E1tWSvPrVVrYS1TqsBtkqprLZGp323P6VnuDajX7ktoVy6KJ9Vuy6dQrxGmyK9d5nzvcuXt75JlnS:9ZQuwNiT7sD2krnBV5KYwgOSk8MFkrLEaZL:xTqTgseAlEHJQ5ZBy4WYhM1DmwrQeZ7N0h%iyNUtpvHYl6pB3FGvrN9LtCnjdbmt5rq%LeoIxKDtTsn%8HzOP:SG01z3Y9hR%gvdG:114bn:m%UrAnfpdAQE7ZgGQ:CcCDfzhwrp9V8MZPgsDrP69A:k:LsRAv%FExcBVRUqAy0XRAUNGWoH8xqkCdoc9Qu:HmEOmiDqEGUikxMZJFsWsCVBGScnQRx8KFgfrCl8IrcqpiWaK8soUyziK94s3y44LbgxXy1lNFAt3TYLLRc5kCwNO%MrvTwFKyU%%ylFP8ooHkB2J7BABSb8QHkkAEHVIr5AHCE3QE4fcT9rHXY%dBtQPW0ZDTxYF7c6OhVYORkT%Df4EJ823A5VNcYMIzS2ChAzrQghMq0GWTG1BLYwygIzMO8AyS8n:3Avd:0fL%D7zy5n%nwuDvkfLtj3ti3G9j8t2vW2LBX1Gyx09G4r9vOvKpXz3SlN8:koF:MEKO3y:ybH8uslnfLKJGfyniMb8mcisfElISLx1B9n8HEee%:5HFvuaxsE7cUZd%sLGLXpQRbA52sUoOWPElvjrxD94M0Okd7rDCTcCQvB2SkJcddNBz3VdwUs06wDQ9HvAYfPQwD9zav%qcwp:Y7Lvfuvymb6CMoi%ZjJ6vdZybX2RMl89VHJM:R5ydXytclc8fzJye9Iyh3ulspd7OPKj%ovy7nofcve5tHLBeUwzDXjoMx14SjN0t:MzVfeks4R3YLPCdyi0Evb%dHa2o:Tu9po1e:ahdd02%TZSNyA3GTdUd:A3kziUuBl5Qzikujk48nryuX%7rDnKvKJ6UT1RutD%NrsI:s57t79We9xADPw3ALD8B4FCfE5BwPxLQmz8P8KGfCwDDfvRQ4S7sIPsewqERvrhBJf6dITiOcXFaXlVhbB45AX5%HEGCDg9Bl13hwb7dw6HJDbTB1j2kwebtk4H7XYDCA72MUgBNhkIRHY6SFi2FYi9diuIsjZ8iLY2iMjH9xAI5ndSyM:30EjDuElIwHj%CIV5b0iSud6IqHpNSIZ7PMhsu67IWnxkSE49HshGPd7IQL6kCHy:Lkh5P:1Id0CPyLhBZUi9wj3IiIMYiNmD9kjwBJaJC4W5iSsGXslNx0YJtAguiZ2JGAnKSgJKOgrtiiuL2gpdTMkKjY37CrnOsIrgD6oLPtBnS1QRaEueki0L3NL1DA2TgAyvlA1MwlTcDQSVa011lblNlNYETiHWSk5cFoiOg1b9DpiW5M7b1v3OzdbFTy8WuY7:lljO:1Yijq7V1k5OVbQN3tU8TWGUsQzYVBNMRROli6nS6srIUmYKIdGayXcQzIiJEH6Hl8%zhuOO7gYszjBFc017RLgMkEQ7S:ADfYsbgv:KUsJCSdYBxUkkwUkIfkDNB6CAkIbJwFJGN7:QxWe:iwSXf0ADxD8vQux%mYIOvkBBaf3mQH59Tf%M:Tn%lvysvd38KH0j%668ansBe:O6ovsBelX6lXncujI5ePmZuSu5Tnj1ORH4lDkl%Eb5CvhLOQA4XrkEeH95Fbhq%XI4XvmXOJk5wvjXejN41rpmeRR6mrlOOs55gXsAeet7L7nJ%1t6GztDel37Z:pSO0k6t7sn%o%7BTrbOuG62:q%OtO6XHsD%jz7Lvmhe1b5Sru%%Pm7qLivO9c4a3wLuC78R3f5vIs3i30XN2P9a3cB:cg3JH4tdsm%m7bwftK21r9Stvs:m3bcACx2%QBEdxGA4nckgQR3cgFod3mBjLe6Qe%3s4IPd%UCa3fOQoJ4L0KT%AiC4DgaQuc4JULpeCrC57grQuI4KELYuCHCy3gYgvo3zILkd:3Ci3fsgrB3mMKVt4KCvndrAmx3UsJid3sCIPdkgii3UEI5t38B1Dewwfh3pkHnd%AB4fgfAeg4ZAH5uLEB1TkHAjk5Z0Ii%dLCUTpJgoG6y4LzuxjDJbuww1c8EoPHPL3ENbzxhKI9bIUMfe0FtP4xBhv%toaBvzqHJ396x40:9Qg0ACbInUCOSQlBKgl4wXgJrAH3yeMCaIodgsoKW0NcylvD4UpfBFkKZMTFym0FaQo3hcVKBEacidJHMImhR4NJsAgWSX6IqokLiUGJFonbyN7KeYikCtrIpct:yGML6IhbzFSITwzDiHwNNMghzafIPw3biBLOTogcDr%H2Y7sh8rPFEfvDzVHhc9OR5BPX0dPD2hHBQ9rBvRPKUagTyXGS88jRjkO5EXqjutFok76hWIO08VsTvgFAs8oxSePJ0UbD3OFHU%ORWzP9wVHEG0FqRCuhc:ROcY4kUyGoNHkRsZSfscmkpoHvxLzx82TSshPE5zIgVPoyOHT7Qkuk%jJZhPbSYaTw8nP06JJwVN3CdtSwoofUkTKDpH%iepRMAn0kFmJ7w%7yZuO1wm8jevJVM06ySdMBAk3CwiIxspHyJjJQohuSHhHyMepB6mGlAdRxfiGwoUWRr4ELIYFQ7rFmgLBBX1CP0SvQbYEMIElw4AAz8MdAHTCRgAWAfm:tME2P1IAub8uv8K:C39Pvul%n76JfjH%bH1FflL82j4%PDB97ruH:eU7IX2h%ry9ZLoafWz5uj06ORx9C:jBvSF4arz699k82HeOvPs3DLzjttQ80zal:Mp2Qn0Jtik9ETXavWF1lr26tV093TVtPgo1Rb6CdWR%xnVGP1a1Z3%zdUUAHHWcAFC16YCPNitA1nZfQSV2hEF5ttiBUXdbAWp3i0FB%CjBFThzwOF4rICkeNSAW:ksv8Z5dr9iuXQ%77lnfmz5Un3Z%Xb9NjkV:IG5MTv8uIj7aDheOoV4MbnWd4S5XbcYeJ32rnfadgf3VnWldpR1B:YXtK91YfQcdPWzjrRT80Zz:bLDM3OyhPL2MksyRPJVcd9yIvFE8jKw9DHDsKxx1LAr8eQvsPHxLzmx%u6D8gAuTTIA7dPyPW0WcjZskzItbAqyJGu9cd5rLPHeqpwx6SoNccGpxHHrKUPx6OkN8f0o5THqqMsyMqjA8lcpB3KZqV%y%mmJs3kqBfPUqtN0SquxNNhsXfW67Rd2by4btzKvKLfCsHx4nTFVeb9ycfpmc5B7T7Tu:Dd1zD0btyY9%Xg7vo65Sz%Z%lQAWftVwQ08UMHzfQUCi:4ywxW%2kPQv7uEfEAXhRjA7gWmwUAGZ0HOhtxCWkdIwuPH8AMsCFVDsoj6w:cJYsR4ic8E9Yp:xSyK9gWcy3JGBIv0xqNMPkc4jE9HxAznSEVNBck7zSlJp01QCkbNt4rZzZzLn428zBeNlUzBjaLNXY1jTeuNFE5sjPTOoQyDTwpMf08pi%jPf8tAz46LCA%WSoAPmAoqT1QJiA9KSRqPOohizuTH4g6JR1lOaMaKzgRGOI2dRWQNdcSPzQ9EPUyrg24MS8LizDGCHIvdgZxLkMEjS0xAscsRQAiLIH%nCvp:C8rffvTKj:6gCoq%SwqPfjPKXL3YSnD9t0oKvZAKKD1hicd9a4mmPS1JQj0nSRl82Yjp:ITIsfxpyDD8CUfme%SHUju8xvS7EoaOOudGHzp7hag5z0VpOWJE4vjzxFY4Q0QDt9ADrTcaQxR2ooK7tenCJPVxwZK0%0EGNEcAwTPVwETzZ3:SMvr:abJQfwvyJ:65MYF%cXFdffSxPH1CcR89GjDFvPqwr:xi8J38EbCOu8VwgPu8sHO7NrBlevIwVLqusH:6LDBmuerwSDmssGV5MrB:OL8wV:hVMLH39rCP96Yw9LclMSI29XFatpcx3:ZLcnO2EfLXtiszTTYW9BU2FLTv9iN1nTZBtpu2rPdotuL4QndgOWX3ojpQ%CW7QHiovHJ46P1kOWU%U3nbf306CwBfOrJBNzrQggO7ZQLC%67DtHuthFd74UUr%8qF8fvoxmk7:EbR%8UHrDuDCDh7dgh2ex7I5rr9SQp6komi%h9J8nmkijw5IkpC%NkKibhIStM370rht01LNzbiSxS2rYs79jALLfXqSyw1ncs4dUvLE7V2Sv51Hcr5tQPKxPVoip91TMqItbDKf3WUykK2OYoRNl9KKjaGigy3MAn4N1yJ7HfMiej4QInuePkJvPl2CZS6N4m2OrzJoPtEidR8DcnPvNcJ0X2eidi%ZAnkvyZJ9X:mCcrA48nlQaDJxQKeCenDXMnSxF7J:oUlCevGMInZRwLKBcgcijCI:0oYyetKfcqgyp5Ln0r4zGWLC41xy1QOAcvQztNMPw9jjF3QMMyrULiM5lE5TQ5RsQ1i0d3No1I%DY:SUA3oklIN7hJDjeCSYw2A0nCNUFIsTRBR1gzCEa8MZxE4C8BQ8ktOkF9K0g:BSkuPWom7Tq4I4g4%SAENjseaTOHG7ww5hgELmAWRiv4E4QoshG%JY4P8yKPDR8gsws%HfsJUBplCFMX7QZGFJEFKhFKBP8NEAPFCtoBfQegACQEV:%5APr9O:1::Kn55PoB9iX5RPJB93HuPfWN6h3znObq8Kniru7A3nPs8dpF6k3XL%jj0zfmwdBl5PPNv%KCy0nhcskG4MrH%d6Kxifes8WR3UPFNt0zxRbdesUr3QnGcN3Txt7dxsdv3tbIHN:zyd:fE8uz4CvMleE1zX:iKs5u4wXPX%TDz03lYNA05tvQFOcy0ernZNG26HDReulY0TTqHdHo6sPQlutO0D7sws:i7CTPg%14ziTuxM3H7g3Nb%9ZzB:wrcvZ8BHLnvGKym7yGspH88bJJ:SMyQz1a8n09WDJ3PZpycX3g8ms%KvJkfnfyXH6HspK%2fKGPy1ytn8BsuJ:VbLJv6gy67%3ssg:w7MfP8szMH:Nszv:yvMBAANzP::3cvg:53Lp:9Sy1L:Asvi:rHKWP5lyrT9H8r2:OLJH:yuyTL7hMkz%mTJJ:lTyRX4WMkG93nJAvbAyRP1McpB9NDKk:Oeyw:znMy%8sbNpPIbz8bymtAo80LSyvMR1Kr0AtbF9Q:YE:cz2or4Ztwh%p7ezvvX4Ij9CONG:yzlAQFA57UCQOlbBCvr7gUC7WwHxO7QCHPwFgoR8j0LoPNEDCT1KQ2h9u4NHPiTDpz5Gg8m%4UPv:zVD2z%DRAsADEQAQJFEOoDTxDjBVUQ7gdeEAgKbRAxDIcQag6rELAQ2hACExARXBVLEbkXiBEWGsQRaxz%EbQeNxLrIGsSDSOcEhUlxRL9JuQSwij2El8q%RLOK%kSCy3FEhQujRLoLkASiS:hEfcvcRE2MPMQSjBtEDow5A8PMGEP1S:rDpovjg5wL1AOZy84Do0vSg7tL4kOjjD2DnExjQ%WMk0Q%zMvEZ01MBJ1N0kTfDl0FKg7qhXrPeUWN0AhGH1CWRmvRIsav0azG6RI0BxUSuAdykvgHgBNyx:1TZ0gpU5TIQ9P6CEyT1giDE%hIp1OwCLiTbMi3Ex5IotLEiLwSXwhEEi4IO5FxB%OQ58e9UBLHSc%yBspOxYaAjg5GLw0MBZfMf8T9y2nEY4qKA8sJ4QM2iO%CZwg1wZ3HdQDbhq6AIIXkP23FFv6DxIg944P5fM4Da:wDgt:7RMJW%pGB0XnpAVC5CkEVuHTAoPenAHN24IANdmA:7zWlf5g1L39IdL5:PvPRvzszaX78ssY%wnKo:otyEj6XMYI%pLE4:nPwtj5EsHk%WC:A:q9vTX6L7x7%r261fpuuUj7SbjV%1S3ffyVtj:9EbYa:sq1Dv:EtRkA:rU7AXe2cQIrt7YDFbgEBSy5UgZqupQHxbu:CDS9xQmwvp0KL8A7C6zBlQsfw6QLgsRhC87FyAr%xtcJDMiOCPXI7wa4yf4EU8rBAsfKQQAXy4b9Rcue%lTLlPdGy3X0HstM8d7KI%6IygHrIcrr56zJ5uQyyfThusga30vIWtztx7jZpMc413TH29Rex6PSYceP0HzHnM6sx8XM78cHy0PIXMmkyMDHDskvxnzJpcTqyR:DUcqYwavKD8D0yn6%KMvlvEbLQbtMy5S5PcvgtxvLKLbtynG0uMrCsobKIbFhypmvU8o4rmbKDa2jyiqsEsueq7rLd6uezL%rwc18rCLPrq3D0FWvoNJtsbbU87MA1%G2etkwuhzc1r3j3sfByuH2xczkVcrm59fOFuty01nuHdis8dHcC:WJ4XH4P%bY%%7qO:%R75QCIvTdBZ74Egn%:C8MPwExD1wFGBJUCeEUJA2OF8sQHRpJFJEcnBfpHsMaJyG9HU4jhyBgJSQjYCeUJU8p3SctKwYq%SwZLLEuHS5OMBkwzjESMiwzCzRlNAI2eDX4N2c26zkzN9o73TfGPWc4rj:QOJNBFjl0Qzg5TUUxORlHADnSSKU4b0oeOOpLbzc6TZg2W06dNUhPgDT%T0YzfVDwMcVQgjDZUP4uvFBnLXZQvysLUAgqhE9EKOROeCYvTqckZU3XIoZMDiGSS1MfikqtHXJJIhxNSLgaI0dzGfpFVhjWRGUXvEOfFq5CAxaxQZEVxkBCFfE:EhU0P:kUkD7xFAQ%8BSLPe8UHz3oFLY80xRHPK0UyDtwFDM7GhR:OqgTqTkZE644bRKNN6MRRza9EN80uw9YM6EOuDFwDQQwLQxALtsKdCx9CacqFwjfKKsGIyc7BXglyAPgI1UCWyLlAOggef%CHxb%Jx6%:NIcdfuDGzz6OxoT%fsY%PfEF%n2lRbk9W8V5fRNFO3zKxP68gQSDPLSECXxlA9D8EYOZ%:qDJDufwu%7QcK8eyGCCns:QZq620Ft%raAxXqRAKL6a0AIekW:%DogP3Q6Oz7%ehe%mLp2vgP6mj3BOsS9kHs4fTD7eHziO8Y84vxi:LI8z3yOvYr8tz4VPKn%7Pylf5G86ABCfTABPj07gcO9iELQvdWDor4hBHb%akUK:u%F3D8wRqi:a4duv6AILT:NCONAMYlPwExKMoBciopAoYsXQJoLmUCFzBAApAx8QHUMngB4TPYALg0EwBaNSr:xzUh:gI29:wONq:77TVL%qY1zPg9NTb3tTSN9RI02fNYMyLyhzJy8KIxz%6rMELtpS:P65UueuqCLUTpcSww6GgrQudvKnvmhynh5bMod%XzJ0DlRSc95agmcOUaJtblmiVs5iYlMee:JCDoYiQ36Q8kdOrEI9XrfyNZ7T4jAe::Is3wwSLB8oIi3vRCIif3AiKb%cYhOfyPIf7%YyHjAUch4gRAIfUHVSEXC4khRg7hIYIRYCLJFAojGxjeI3gb3yTaHgsmPCJeJ5gl1SjmKGcqISwKLEMvtC1HMlovKTXwMOM3azJuOsIzxDzuNN0%5zWyQKo2QEI0N4FDgjdzRJU3FEVtN2RFCjdjRW02E0WaNXlEkTSZQ1gzekLxMSJBYTCYP68u4j3eLAc89ioMOvwo%Df2Js817SSUM%YiSzHrIPMuAB%OLCwdHSpvG6MnyxkkJTwYoSK:Fh8gTRWdHeATGRtzEo4YABH3FYMPSxP5DYUQXQyfDasKlQrfCGUH9QYPBOoElAC8Avb8awA5%fj9YvVp%3Xxxfh47RL2celc82flq:Bf4QjuY91%63rZEemx1cnmE9Kp5K7Os%KQy%rgxchO31fG4N1NxKPcqcKV22rBuNqNwAvaCcCL2dm:NtnyvwrZTcAF2d:AJtmcwWzZd8LW2WPDYtpSxA7bOsXV2xHGtNzPxqLdcceb3vTHmN9XyJLgm8iE4cHIbOLMyEbjwcgQ5KTIyuR5yHTlRcgP5gnIm%bGxxvnfseO5zHH%ufhxmDokMbF6EDGLun0xZ3pscUX6nnFnOpPxSzrOcXG6zfFa%xMxRjtdsXN7bHFjO74xVPvRsYk8JTG:vDfxt7xI8fC8mDHpPOUx3:0v8dO9d7HC:bwx7P288dD9%XHuPfFxxL4k8dQ%FDHcPj8xnP4m8ZX%C:GHfi%xcb3TMVT9%DEyvZ%xC72LcSG9e:D2vTIwzL0uMOX87:DEfPbw6jyDMRf8lPEPfKyxELyLcVx8srFzPKOxlPzfscG9JvI5vTmye:1Xssc9:7MZ:jDzsf5q9A0%7PSpvzX1BX%Etd8:13Z2ACx2yUCBt5kA1PgkwSR4rQFu%TFBsnmxge56LgIhuqZCS:saQq07SgLGO:WC1:wcgyQ8f0MtPJ3DdLz3w319DUOIvZ4DmH3qA63%MUOKfrTDrj70w5k:coOLP%5Dg0BpQ4GA40OFAVxDjYHTw5sCSMOsQvqDQIOog1VEEsNohLkDN8UbwwBF:ELABlsC9Ya4wqAHFoK%h3TCUMfUQlaINUIPSFhCO4h%AduIp0HvyJSB%YiGwfnIvsGyCL1BpAiCQdHIjcH9CF:B6Ih3QdbIU4IKiHOCBshWQk3Ie0JiCGJChMiLAvaItYL2yOHDBAlPQ1yJvgN9ye3Dpcpeg9JK0IQBC0SEb0u7hFpMNcS:jHQE24z2BSvNO0VuDUJF4M2JhgLNzkZUDc6Gk83HhsJN90bfzZtHLI1yBylNOgcWTPGHNIxYRwRMLMbGS68GukrexmDKfEX5yYiFhckERQXIcQR6x1DD5galAwmF70JnhPGBggQswNvDIoA3QhR:VsFD:rwAcv2of6N82:7XPBe%D:tbvU96qTyWecD8Jbkku3z4Vbrb99R6Qjdhee72vLlhtiT5GbWZ%Na1GjiYNKT4XnQ4%Chzlbg2szo3yDLld9yyVvfzsc43zPGKd%gxC3fFsNF35jBcN8qwK7f0b7%35W9XuB7vM7giLtK4b%60%EgumjirLkK42G5vOM:uYLkRrld5XW5TubLuVbnRLpw6N66m%mTu9LqXLwR7DK9VO0Qvpbu8r7Q79O:%vCzwAnyj8Hy8mfCqvM6wyb0BsRe9MvESfSFxePzNcYn89fGEvJsx6Xw88fh7mvIzOzVyG7qMcnR54DJAeW:yQvi7sn83g3K4dsbysTYG8qx1Q3KsdL1ycjP1sn8zLLJT8qMycTHYslcxTLJGsP7yAHBucgQv2rIRr0LyKC7nMcXuh7HpbiUxkG3AcbotWnFlrTPxEezOcT%sanDubAkw3uvrcJCrknCEa36weirxcHJqq:Btam7wa%o7sG6p0rC2qbSwhamhsNypWTE96Rpxa6kkMafpNTH1qQzyV6lqso:pjnMgKfgzSWpoc8uq33Rma1102CwidV9s7rX57YI2pa6ddyCvgPfosKy4erGhuRQy33nyM%X6krUz%3M2B:xS92B9MHh6:ct5lb7juq5:uHuCwIl80YFWPdjCHn7XwuG:zYOgQPnEGcHcRM6C9UV9w4WGJ0SNBooFjQclhkYHuMc4x8MIJQhECMsI%slqSSeKAYmKStAJ5EtUijZLzwpBjL6KRw0jSodNvgqCzg6K%c5VyuwO04raD0gKxE:zCqvQFAqRkKrKdhD2ihnRd4n8Ua4JnRIayXsSfsjU0tvIqVMziDbTR8f8k5pHedPsRu4UP4ZY1FRGOpRrxZOUhgVk1KPE7pSFhLHUq4QvVJcD5xSIQ5mUv4MGlLzC7dR:Ao8URUKq1A7CQRQaQhNT5wHiU7SBrxNCwbrTEQFGUx%BElLtgN7SugCskkRAvFILgE4SDwAikc8:%ZGK:5IRg39rUXh%wxFrPpgRG75oEMr%MdC5vbRQaD1uUBe9H8:IPMgPunxnDy68Pc6k%8zOXXuVDdd7WI1SuxkMzjrYTEj6mAvCuloLernfivD5qcpleXkJ2DkNSYm45ck5eEFI53geyFM3:Yf8N1zHojc9BwS23gbktkCGgnYkRh91iQX89S5FXXTTBQK0tsSvNBjEZPP5Q%XzmEOz83bDETNWAv6zNsJ9sxpCD3NCAfSzbkFt86ABO3PXgN00VMCSdNeAWjVfgDK17H:Z9r5:jTdVf4m4Mn9NONY:VfmB:2K6dz8y%zY:Brw::x380795PbC:V:6Vf7n:QD:egG%:xQFiQC0CFwBVwwxAvoPAgOaE8oDNRd:BMQaHQVCHpwFpiH6BegkNAb:J0kG4io8BoktDgbsL78FBTJTBdEzywRNNSsEdzZ2A1I3rgLfN9gBIzj2ACQ4CgDpNxf:eTcd:t42H:0gNhz8RjUV%1Y0CvpUM:z4RDLt9ysx4fYKMN316S7m9MotAvS1LDfzriuH8rkq9vHbKYPxEiky8WAoBvHCJwPxNScv8bcmkPFDJiry2CUC83UlF:QaJWn1xyTz9n8ksvhEJKH6FyS7:Psj%:7xI2AB%iPmAxUkjwZCJFoJgiRJDNYkXQ8%JZYSviXzFVomcBkTJwkd7Ce2IOYobiT:KScoNSvaK4Qsgy:pLR4zYS%qNuswJzqEMpY9KDTyQNQ1OUSBN2RHKDluSr86T009PARQmz2HUtE%1VTZP%pWsUDCWFZBVlrJQaNbCkKjXBtCU13:QbBduUG5XU1Bb129QNNcDUDpW0E:t1pcPkNZYj2VV1c8t1U%O7JTGzqOUfM4VE:KNwtNoza5SoQ1ZEhvNA1GaDO2Q28yXkGCMQM:njCjPLwvOjrWLsg35C1NNeEsyTLGKz4wkCqqLT0pCyvMJ10oPiaaJZgkuyLcIrwfECGYHDkfThlcHd0VgBtIEqcZlQ7XF8cKFBbnBmAU%gK%Egj:MBEX%7YPL:dRDlTz:wyM774L3uuLCk7oYQnl5D0IquEgB6neCgbs2wAFgNkIBG3XKwO71XECbdTgAYDTfQHw0k0BttJPAcfShQEc0%wBqtOEAmjUSwNK1T4EQtZYBUXXkwZD2OYHMNlICQLargqw2gwMN9tYDZbbiA7P25MP5tt1EOPbKBHL26oRp9v9EX7bIxJV2x4SMNv2ERPbrxH72lIR6trmENzacxDS2gAQydqSD8HaLg%82tYOu9qLDsDaTw7N2iEO5NoDDgjb9A062:UNd9sEDr3bHw4I3EUOU9xyDpncog7V3NEOBt36DivdGQ9E3SoPUd0qD1PdGA9K3fEONd21DhPdYQ7j3PgNo9x6DVXc6Az520QMktuPCyPbywqz2vsJR9ofCeXZPgiU2VoHXNl8BkLZqwVJ2ewEctlHBLzZwQMm2lsDrNoZA0vb%QID3P4C1twmA8fdcgPa3uMDEeB4BG:hMAXz4gYGm%T2BmLm%AdD6AYJPOoZCkbsLAtf7joMgPBBDaLyPg6:9DEPzfYZEMf49hCj%scRXPyMEuz9QhNO:%gTggB8FIUB:RRaAmoVBAPBFYoDAxbzAy4WSQRCFpQEPxbfBCcWMAX7FY4FvRX%BXEVgwYXFR8HshTTB0MUnQjJE38JRBN2CrQSggsaEqEMdhHSDcsQEw8eEGIQcg%4EdAOEhM9DmkUwQ23FWMN9RYnDR8YFA0zGS0NLhpzDQ8b5g3XG4IOhhxDDxsdIhCYHRgR:B0bEkgeJRN9HisUnB4nFageDhaiHtsWkB6GF3ceDBheHmwYUB6nGFYewhh7HsYYyx68GEwfrxgEIKkY8yC0GBUi1xhlIxkZ3SR%GXQmCRoiKL0a3imYG5wrmRxQLbod6i7yHlwwNyCZMX0hlDK1IkQzzyOkM7sksTNrJWoz0SXQMuIl6DGUJbcw4CRBL8IjjS05IqErRiCDKesdNicxG70kHhgaIr0UTR8aEVccPg06GTYJ%hULBZoSyAAjD3b8nQsf%BIIyvOMBILvFAFN67T9M%dz%jrjVfdq3170xtuN8VPY5O4S1WHsBdIH6izP1ueJzM:lGcr149rHSOLKxcng5cN43ybCUt6JwFfdCr%C3KS90ttTvELbErvR2t25fNquuD7ag7cX2li2BdottQXaA7QY2tyyP9rAsXras7DJ2ruvLNverqDbIa4j3IatstwQrUvdwazu3Z2snN6mrFbf3awe4ESt8uDZrdPhna694ouvruOfsKLk1rGX5SmzjOaVtH:nFbZt6KO3Uek8uSPq3brb6oG8bOslvsvrx7:v62LBzev0wl7re8Sc6vLFhelXxxXoqMhO5t:JM%T7ysvh9ssc383MM9x%zRrZB87e1WrOjdKnzjPPws7cy77OkMiczlfFX843wgbONL%UzVC8Cs2RuWjM%bazy4u07spMsiHKPLBRyV2uicitrNDHKqsvx8%prsaXqFTGf6cmxoKmKMafpVvG1aS%xiOkTseJowTIB6PZyJyiyMlGosfKBaLTy9ih5MzBofjNwKEIz9ahEdAGohDRU6IE0sKi7tJbo9HTKKS01DSlndWOppjWP6it11Gq59jHrE7aoq:q29yywt1wttnfUroy4nq%zuTdwqvncMfE6iXME%7v0I:xwNUw9Yra6PhD36385ONxAGXoKATG7MUHBvE9CyX1iA4j%ZwRAv12FMMAEhdlBG0Z6QeJG1ALaB2ZDg0fxRF%INMUwCHDF9cikBrFIzYdiySwHygl%SGaJQwk3SXoJfEljSfWJQApjCVGKhUlZCt1JGEssCNDLckiDS7EIcIupSBjL28f8C8kHmowxxzUMF4bMDHrGYQxdBjVMf4WJzKPFXwyKhTWMtUSMjOSEY8zYxDnM0kPODRBDn00SQ2yNFsM1DR0C980jgrSNKcJqzS%CG000wcZNOkGszMBBj0zHQW5Mj8EJjJnA4IxkgLKMMAB%y:xABUvIwAbLlf:EC2O:vwrx:3hKgL9xSlA:KkogPuNJ8L6cyYE%l0lRvlPJIf4TSPF91oi::Z6ITT2qyBl9esfkvQ1H73zgh7m8skdEPICHT3xJhxx8C0bq%8TGu3u1Bg17m4XgO3hFcbsLRQE7FYSM%thEE3qWQ5O6UYMNOg0Cv7mLQir5TkGPOReBLPimwIP4fEAU99Z:4Dd0P2a21D8p9nY%q:XZ:m71QH42NOt9hHSb:V10Ez0EM9G8%zNW:IUzYjxjszJ8F:MGvCKzHfvDs3f7ujNUe4Tz8vtiNBQ7UDS4Oww1H3sUtYo7JvY4%sE263rhN2G6xTga%uq4lrrQOVP69DnSutY6krr2%xT613va%vn8ZnrfvTl6yz3VOzz%ejs2Pyh7dv:ee77AmrvNAZr8IEJdvHaDIXyORCR85MTlPTfFof1FRpi9ikdHfcTILD3yCIS%EAlP:hyJzX4Vyn09%oqgPcnLN72Cy0U9pctJ:XOLR30tS378lItxfGvLIPw1is579Eq7u2rKafsbSho6x8nMurEJQbpYSTi5:cix%aHIbLlFSCl5KMeo%M3Ha7i1RvM4YMaAuFFGVTgIBjG3xcXVt8qFgXfWhXR3qYUud4OFL7ejxPl3ioTMt:dEqvfqhJV4I8SNOGOEkripRKZ49QSHuUYE9TmcBO36NgTwepNFO7szBQ771AVp:HZFTP0Zhbj9voWufmbF7n8Thjn:xoZQwMEGs0GDht%CjkcTg6FHTMS8B4hFnggDRoZIvIdzyPKIZcllSVrJ1EpQin%LBYrmDDcLBo0jC59Nx4wuzqLMc09yzKvQNwzXkO6NNpFZTUhSN01MkolNghMQDagTTM29E4CNgFQsTXEUEU1PFHANGxRJjRVUXgz%lC4Ml1Q5zGFTwMxdk4OMDlNCS:WS:UtV0rTLMNIpisjR2wqfUUlKdVDzictQmYmg0DpJNI%VyMUPa4hRDvuH1w5GR5cNzQcRzVDGiAzThjtMFkWsC5rFGwshhIgKq0QyifgDmYlIA3tImoLWSC9CaYdFgjQGm8G1RfGBLcUFwN4EV4BHA6b:6kKzf0mB:T7mgMT%g0AKviH:Dv2EPlI9K71V:Jo8m7wRe%W7kzs3eyK6VHrCef:6dbk8%j84jbogeHN52jguuev3:vnT9%N6EDfael334fq6N:b64rgWe1S4fHuNuKY8CfjP:IZ5Nrz%eRf9bvlxPZQ5v:3s%YK%d:m3:nX5nv6oObd%kDmBfvC5fT6L%Wv%pLkPPr046L5YOPq%NviH:hs4kv3FeJ29tbhqfWu4ev0mOE:9JHhqvOS4S:zl%HR8p3hlPKn4XnytuGC8tDhsfL64QXzN%J884biE:Tl4sf0TOOS9bLjcPYN5F73VeRW%ILkVPmS5FX6h%RS%2TkRfws5Cj95ePz:Y:jof4s4yv:vOKO:z7ixf%04c::H%Gt:4LgX::i3%r%Rd9U:rLeqP0z3vH80908:Jrdl:uS3Qv7wN2h%iXeX:rA3kr6i99l%n3gsfqP4TD7u%Lh%:7jw:xa5c:90uYB:2roTwAl6rEBAuwgA::tkQQZ8P8FTPJiB5T0tAju9vAJVvkTC8r7GwxD:gcNvQDWDS8DiQ6RBSEP3AedDwYK:g8JDEUQ4A1yEIkPhRABEX4QSxJbEGkTGhBcFLwPKRVDD9YVsw5qFhIO7hZlDW0XtAzvFwQMfRhYCxsZsgrOGRgKmRqLCXobDwlyHKkIgR1dCKYeMQjkHy0IPiFXCLgiuAhUJFIJDyYnCuQnNAvKKXYMtSvjDZgtdQ9rLx8RJDHYErwykBQuNDsWdzXMF5U2ORmJN3kaUjiHG:A4YBxjOQMdrDlyHcs5sh3DOcgdmjm:HVQ5ox35OIAdkzhkHS44YB3aN4EdqTfVHao3ZB7sNzUfdjhKIEk5oyFhOj8jtzsaJUE9Lyf0PnUpxUDdK6hCWC6ORNEwaUY2MylIdTW7SX03DUs%OQ5MqTqxTLA760xIPLlMajwdTBQ8HEtEO7xJ%zkHSD44BEYONr1DdTM9QXwwjT4xLbo7pCnMOOIlxzX4Ia8y8R2HL9kZTyy7FQkpohG2JZkNWSKqCfMe3QWMGzoCLBjJ:t8UkvuyEZr4rg7l9dkLcfMyCTzxtQZB71wEfO0iAunrAgCE6v39SOkR:CzoQfop54:4NeYA90nll:Vc5FT0Z%M582HiQvJB4WzxAeCy8J7eEvAZ3Yfvd9sP78DZpu78103uNtYD7nrUz%3U0rXtU9G87QDQ5u3kzjXuA86m7l3NM%:1zNrvzcyW8OXMZfE8zUbyzc0384:OOPR4z0j1gtBn9qbRkPfj0r74NNTp%ZbVDPsB1yH8b9go:dzZIf5F2wz:qNzn:wLeqwBO30sBheC7AaPh8QGj4uIBheOJAUvk3QDy5Nj:d%V3:tPltvz:5Zj6%OUj%LzlYPVL5VnyqOQZ79PjruvS4iboquGQ5GLg%%AB33LdkN3%2RXcpdaW2mvTG9lU0K7XZs1a1qjKK9UiyCzU3cVj097D1tIpworSvsCA0pi:t9KsvijT7r3H00%9hdTEvFPVRLwm1sy79NZau7jX7Lps2IK6CNkZuofZs7nk2VC5Itr2uEfaqLhb2mi4ado2uHjaFLiR2gW4vdoPuArbQLiI26e4RtxTuVDdVbqs3rm7W%CIvVvixr%q5HLCSOeHxTbq%chv7brM8PC70Kz079SY%EbZpPyx3cMAIuLjBIXm8wjL6uMM5O6kEMfyKxRw9nAX3vlqGhX9FR0ZAG0f8wJvIasFHCNHCHckzwqEJUYNRyatD8MmBBL7Jk4U9CaMFrQmwhhHJvMatCUaHQIlMh8zJC4hRyMFI0AiriQjIScm%h9vJ9EeiSivHXopmxxHKpcb9CqlGogrxxkHLP8YdCxQGM8suBcZLTMXUS25FnktQxaYLcsVsy1NFdMtxxT:LTYUOy6WE4su5BLtLhoSYC81Ed0vMhBeMBAP2jDNDUoxagyoMe0K8TFdCSMywwdAMioGSTKbBEEyHQMqMrQBBzJjANkxK:%cMQ3%SzEG:eAwEfxWMCn7ri9J%u8ubPkgLpL4Si2693Qs4fadKwX2wioj9d8pN:TzKEHz:idD8gUnPPENJi3wGSUU7y0k7e1JI7jsbSJ165chKurAINno4R%G5:AeMObgHdXkqRxy40IbBeKlGYvg0BcB38QVY92BE6:bDxHk2XcOA9jGCxDWCQkS1FAGDdKnAwjQGwEJzrL%F8xw:DvKVfqAyF748saH9p:Fz:SSxDXz2MPA8XbDdvByw13vy8N57n7EzO2BxVLtzMYG7VPI4ewOytzs9Mvr7P3NBO0f0BrtUtIl7Y:UHO3P1v3sEtnJ7Fjbg%yk3S:s9d:R607ibuuw5AjrH%ej6qLpQ%pB7OvpBu%e6ffxYekZ9Trpbfgx6fD7Tumg:5npeAMV6nAHwOqAC5Trnw%D7MATf%3XF3ru2Bto77MfPfBbI:PwwiaC8dop4:GaLA7y%C758fAwnvF8MvfwnTME8FQ0y%6jNFXtkDSt6x804OlUM:bnNDL55cUw8uMPL%vhHi3u3wIrCN7LKEXciSar2kckPtkLIv:X2x:t1rodA9auGz7VvBmZ1OsXEtRCFqPTxhRO030TEtNqEvPSkRH20vMQHtOOEGvTXxDc014QatSCEA:VwhDE1RMRitZsEWPXyBFV2B8SaNlvEqXatxIR3PcSrd0vE3nfYRNx4ZATkOO9E9Ll7hMw6CgUpepxFCvt0RS:704VYfLuFRT1txbf964XyPrXGNj9MhoPAbsbbARsHeYHOx9wCx8h:Q4OI4ASAiXxFfMmTBnZKJEcqSrCH1ks4CLeLeolLy:cKEkwrysoMVsuzDHWMDcyGjNpMh81ZjLlNjEyaTjRMa05SzGyOqcwejvtLwQ8IS9NPEkuUjxnLRA8eyyEO4QrrDqAKog5bCkbOEQoZzYIJ3A0tiU7Mk4k0S:UIjstSCGFKrAfvCcRHu0kbxwiIswaYh8rGbEcihcQGuoVfBdNFPIUuRJvEjIR7w:AD3QNZg7%CiINkAjxCy0GywrWA6kJiwGFCEn:VgcL:RcGyPrABHb4SgMK9rEBefPx:7vwDv7K7Qz8pOrz%U3nzPfJ4571IOBz813cVPGL2EnvuNRf7fLQoetJzRvqysna6IDG6Od3w0znt8AL50y%JedDvJfnprpd6Hy5cOnIuMjqgrhc7J64Ie4LuQnwurkG8py6B:Sju:71x7zc9:u9kfk2vxH7asBP:IjBQv2DwuP9T8My:uPDLv49xN39XcRD:UbEZfwBxEj7lcPw%RDDZvh%wrb27sHs9HDBF:MSwUfx38CK797A6%0SwXfsecE26w3CLurEwmXplsPb6HXEk%hXxY3oNMbH6AnHP%nWx:Tpo8je6nTJ9%tQyjTtNsuJ7iHM6u8KzUnx582Y8rDOzfNcz9z06s%%9VbQbPaj0OT21NAk9:LQLfcC0QL3DdGl9hfRG:Yh0Wz1LNGf9DXRvfM60dHyO9Hn8TjRDPE30U7wPNG670:RWu950TfvxdFS7zzSrO:j0kDwu9ML8cDUB:Lr1TDzMdeA9InY7fXu2XD3X9v9%ODcivp33g78KuB::f3h1:7w4xAA:eUkASHoEAJS6tECj%xpA9Pu2gMg8ScEdfNXBND1bwQq%HEEfPpiBL38QwTi:hQE5ADWA7kChgNaBCQDwwWtAu8GIALcB30BjQjGAAQJAABKCTH:Zwli:mcJnv1UCe:8Pglc:DAJ7vs5Car7YgmT%7IJrfsrCv370AqH:KALTP2bDE:%xA2K:x0P%gCpEJQCahJNBGAUGAaIFugH2hivCUwbXgvOHecMTyA9Dr4iVg8KJSsQKCe4EA4p:xC4KgQRJSzOEFYtaRBNLuEPEC9FD6YvpQ4VMBIOZzCfDaMwXA3SMFcN:TCdDSwxNA5sMR8PyDFdEFAy6BERM7kTGDTEFW01:xcRN18a:jjYHCk7Wh%APdgh8j9BJGxChCbgRI0oQEdMKoBJryuTS6UsaU0hLfNOGS0gUIcs5FBpKzVRvykOUYwnb1DWJFxPpCHdTQEe:Uv5GcpJnRVUR:0QrUQuDOVBQwcNP1ECMDxp:Vk5m:iNNvXzzTOC7xgxS%toLljnuCuw4wEpWeBAJlnddSOx2qMgYdjTHWTWDRu01FoYRNPFFQfSTxPx0PsQ8s:FDv:OpwwLzpsKDc2dCP7LqQbXyr8ElcnkAjbIGwG%xmz:LcXe:YnDdfzWwTT7GsAe%lq%L:mevGX47rq891O5MPfYt8H2iLZt9m61NvaStB72%bMp9qWzWfaWs7H2y7My90C02vfztKX44LWN%f%2iPpMuJL7vrml:E27wf3vvOb%nL4VAE3ATQH%wYoCq8PDA1HF7gTwxgEGhsj2BhPKygeWy4IID80hCXvOrAnWzyQKHdGFCkrSyQpZ0%MKRdTHCgvVbAqp1cUJGdbMCFrWeQdn1scFPta0A%DVQAFO1XH%j9RN%6vT3:es0jP0oNFZ8I:QYOyGz1roj85X5LTNZ%D%zJfcdszx2CHMfdUHzEHSKMxBz4TMhswXzRXK2c32x8HOL8bCz8LE0NCtw93R68Ld0nDCw9MswofUDsIh1QXCjdUCwsvV%cHf1eXBz9XGwabVnsFx1XTBPNVSwRjVQcET1UzBPNV8waLV2sFR1mvCV9czw7vYNcSE2nXFttz2xlDfv8hM4tjKpOVNzU3pKNA97W:TafEj18j1PdtO%rDf8P5p5KEDUulTCFru%Axx84ARiPjcFZX9:hmJAtwdVwdoIe0LmSQ:EGgnQRTPKe0XyytDG1stSB6CLgUhQy%EI6Uv0SWyL:gndC8DKvku:itOLu8thC3bL6csxTHEK60z5CqQNRAqbTdMKUA5nSgCOwgorzyOJz4%NSepP:0m6UDnJvxB8ybgQhonmENYJydEoyeSRPQn3URBKAtFgigbRa4oD0W%KOdErCijRHMoSUQTKN5DjSdsQ%Ym:UIjJppCSyVMQmUkFkJ2I:xBgyL8QZAhEkKhIDxCux9yQuEesEIXHvBCYB0uQ7wcZkMqHJdDqhu:Qzcb30PPGvlDcBoPRBgaIETGGShEeBkjRC0ZCkTiGNdDkxiIQzwYIEPYF6FCYhcQQtkWcUE7FsNAhxUCQMEUKz:oEzk%ABMsPQsSCDwKEdI6ABCSOewOTzjNDQ43ogzQNWgLlDQeClUzwggMMlIHsTDMBTsvLwSgLXkC1iuqANgpw:6iJ8f8NCW8%o8iqvi9H5n2xhyV9LkZpvKkFtjwmhMy76wQve3rDX3sZAt46yEJs%omBzHqcgXy6QIE9enSAjnq3QG26iIBZ%ueAEPsUgA:7T4AU%5fAHTvsACb8CYBwPG3Ad7yUwLx8%kC%vRtA:v10AP79gwEBPgdBB:5BARZ%sYDvPtsA1H9AgMh:5QCLgEvAn0D4AEPBq8B5AijAfsLvQFPD:4B2hJkApEW7gJpGp0DUx5yBEIibgUpJo0G%SnJB6UtFgkjMWMKZDSeC1w3tQz:OZoNQzxDDh4%pw6KP8QOgkCVDgNBFg4LQUMNnUAYDLs:lQpsPr8IujydBq86PARYOKwBxDX::gAzRPwbMI75Ji3r9jEqZvRNJwryiCTd7%8h5e2LHyXsYh2d6ncbT%nLGTjoXhhX5zAXpuZAFiDmjBW:5REVfuXJFFjlrBRN5bEUWuXOFILl%RTD5SgVHuZSFY7mcRUP54AVned8FTLoZxXM6EIVbOkTFRjq4RTX6rYUtOuZFLfslBTn7a4UR%:vFNfwWxWT8vgVd:TIFnz2zxee%A0Z1fqCGh79KRx0::8d2AH6H0kEEyLMBkAkZgl2JhwMrCjyDtsq5xH8LPcUBi8WGPQwNxu9Mk0eWzRLIcc1KyT7Nuwm8zeNKa84ESwvOXcudjm9MIg53jJrOdM0JjmXNr44JTg7OHk5oDeTOvQ2bzs5Ng08cTVrPJw0hzy4M148xDLuO74xNTujMDE6cC:fOCMuPze9LFM1PiseM6gppTACKPAtUSYIK54k%CftIswkRSGSIaofWB4cHikbnBwSGCgbHBW:GUsSXBigD:0WFw2dFaoKNxRRCMYSBgZCEcQDpQ%IAecNU:8EDCH9%Anz%sEHwvhfBYf21QI59CgAzPFf:TXvhfpr7Kf3aOnT9CzmG:K54o7vFt877U:bLutx13LpjNMP6LHPCufyy2jmYcgt5hDFWOYKwujmW7:W5wm9G%kXu6jqiLlw7GC4ZO6ft3PwSLeO8lW3p:TAt672ebiW%G%5UfqNutD7v7sH:fi86:0pvnb%TL%f:lrAZv5Nwcn9HsLL:MfCcftBw8P5h8PM95jDmvV0wzzzIsPC8KjCPO4Rwr3racFW6b3AGecbwBXlj79a4ya:8%HovuXg2b414Pu%499Kv%zfv79N4FPAAOH5wP3hqME741XCsOT3wkzmisMB6AzEvemBxHDr78QJ7VzFee7OxbXvRsa08MTGc:FBx:Dxtsct8hrIL:JnyPzxmsid8bHIGvGwyH3wncjS737IIu9ZyHfuM8jc7Q7IWe3tx:bs0Me47LfHp%yjx8XslscV7ZHHl%2Zx0jussck7%THJfA4yEPxuch48nHJvfNnyg71nctk9hDNuPe3zgT5hdA9%m7SXftq1Fv8c9Yy:YnY3v2v2l7%6dyz:jff3v6Y4eL%CuTC:onmgv4S6Sf%oeu1:TXuMv3N8KH8ZPMF:Pb1X:t8%LL66:r%%Tr9Rflg:4r4UgHQ9wkDGfeABG32tAXQ9aMGS:VQB%b0wAep9PsHnvQLCMz0%wc49dkH4vWzB8n2lwfp95UHPPm5B7j6DQhV:JkICv5fCcv:XgqOAZMLRwP4DOgEiw5mBkYQtAcnEsgIKRSbCUcWKAp2GHAKqxp0CtUcPAriHtAJwSA9CWEikgi3I90HviQxB3clngboJTIGGyb%BRwmCwb6JWYGwiUWB4ElIQhCJYsJDyVUC:AkeA3oJPAP:CSsEislnhV5JbIY6CXUG34m8R4:J:ghMCjWJE8pfCeXKtop:SvgK28tgC3eLqouNjBUL2wxci91MgAvSzP3LeYzWSxDNCkqWTRrJyI0KSSXM3AgszJNHHUx0hfcLxAT7S0dDrArDQkrKfgDaibx:nojD:ppIGL1RR368Bsa4uz4FiTp5BPD5eYQweL:DR7gMAvV3XUI4dvJBTraJQPV2IUAp9fi:aPWOvu81ZD44dTn9QXUSPMc07vwG9JJ7vvQ%eu6z8vpVs7A59PM0%U0y:7jf8k%4rnHjeDqxezeF8Rd3UrC49uJwIba3L5L2Uq9NtjZu0zXjrqL1nG59NWGuIPV0rc01Vu3BtUht:XUJLcB1WG3KtXTt3TVd7ji1Ue5dtZCujXXZbsc2Ky8K9kVvlramL%h2y:B%dzRwl3ed8TL3xrGROG0x8viQsli5MDKCeYszLnngs1q6cDOEevjz6Ts6NAb7srRc%%I0qvwHdPD8YfTu:LD05Dz0dM%9LLTvfRn0wT19dIJ9WDSwvSt0Sj05dAx8w:Q2vE1zyDwYM4D7p3Nh%vzzLPoa8yR5QvMMOLVy5:eycvu2uXLMtckzH3Tgczgz:XMbcx6zS:JCc4vxpvOccMqz:rArc:Ivh7Q3bx30Dq7stDfucrQzbi%0AC4jtBztz:QHbfWz:C2XM:fttzO2LZiztC2%82%trXNnraczXK2vM1CtiLOG7bVzgy23s8jtkPRcLYJ0:22M9XTt8LX9ri02ma6A94hvKfhJb6U5W3AvOn6wg7uy8V%8uTI%:ZGzHr79c:t:%zTRwQl2HsIktx8DCPhOhDG5agTauq7FgHvaBmA86kb3vd4HRT80x4ZALwf5QM2IHAHSCCyCvsfqQ1bH1cQdB7AElUd7xQQHO4WsxrLGE8ZkBrzF0gcqxb8HYQVsh%FFG4hsxMyIxMT:CSjEskmYxKYKFASYiplEiUsnRLZLfMSei9fEwAx2hNmMlsUpjPaFL40TBWsNakVdTbpFR03BhapN:0VIDjNFYU4eRXbOAQVIjlzFFo5yhOFORETpzlLEsY5fRHpOa0QGjrcD2M6DA:KOkAOVDt5DQM8uAzTPP4Lvz1OC8A%pwrNPwgK3kBuCe5B1Qj5QjkI%0OUB:RE5gbjRS0GyEZrBZ9HnwRkSMwDE0nwAqNJCgIPShkBVEoaAHBKD:9mSvX9PUrQ:PtJn:umSWT6P0kg%cVI1fc1SIH2ikcm9cFGwfPaRVPy10Tb8L9DV%%YQsrtaUEz7DVAlur8PvXouz1T5208tOULOxzkjTmQ4u03F%EjNrbfKTR23v0xW92eL23cDS2s21IqG9t1J7jagySA2owhb9qfHoHa0Bux2jAZ%trOFljbthTJ2:ESSdx:EdncXhB23YcPIN7yDtfelA6Z32UOZeBdDj3hdg4j4qsOGuP2DifkTw9R5a8Pn%YMEBroXBDI6ZUQseuxENvtqxBJ8IQQ:vJAEPn15A83%X0PtfwVD24AuQ5dBHUOeghSDr4MVQ4eEYAOjxXSDgEaRw9kHtoPpyKHELsmSRGSKh4SHi7:ElQx5xMpNMoUkzadFYo4UBYFOtMWADsZF3Y7FxdpO8cW2zonFtM5NxVZOPgTeTZtEkA0lxC%MXkOBC8YDCQsewkxKawGOya7A1YjuQCRILf9%x3I%p8b%veHGVv1txf18jAWzvDwFOru8xNM7TMT9%upEurqUBIl6iISp%kXEmvpKhJv6VUSremQEh3q1xK66iITfetrE2LsrhNk7eYTgu4UFLrvOBQJ8VUUbfJyFOHzlhRh9ckU5:YVFXH4gBX%%RMWj:vSFiv9whfX:uQYnAA4GoICvxuNBHUdwAZZHxoJZyGWC5ojMA7tJd8QVyidE9AqYRZLLScZvi:tGx8ysx5mNHwhjDZMJI04JydnOg8qGDwCLZ09%S:0PuwyHkDSNRhBoDjkQVE7g0LfPfhCSUBHQ5BCc0OyRIBDr0ZyQ4RIS0MwSg9DrkvBQvxMYUIXTvFB:05zQbJP6UAuUFJAcVCwP3hQBD89UE4%vU%OPfFOxzzWTfw7akwxO61KazqiSLA5S0YEOa9DaDjUQNw3wj1cN4M64TYiN2I2rTPVNTIwMjXBLG00Zyl:MzAmYTIlIw8xSCCHL5odxy0WG9IrsxirKWkWVycrFNok7xE7Iq0Pgh9eDbkc:ArsGYcIJxf6BXgUVAPtEZIAlA%y:XoNsfqqC473LwpJ9A4J5fBLCGft5wfZ6eAHROYzCLfi2ghA39IJ7tsUC8:YmAzw1VQOWtM7EBLRPhIbz0oUdc1PFiHMOxghy:8Zc8qNGxnK2RwOytcdS8p8HsXKwR5uy54eN8wOHhDNER3uzagbxs7YGZHPqhdL0CkV8dBjEn7RaQ:w0UwMQ9IgCXXS%AWF0ugCc9ICAEHSWP300fn6lNHz%CjRT:e80BH2WNA69QjQxvTVz6v0x8:h9ObPW:U30A32u9Dt9nPR8PdZ0gr5ZNMy%onUW:u81Xv88taH:SLYdf5G2T3:XNrZ:2PbRABe3H8AT92JADneaQAc3yUA99:F:8fgU:%H4dr%MuJi:sPi8v0445P9j%NI:crjFf3t4:z8:eMA:QDkIf3742H98eO%:eXjOf7a49H%zuOB:8LjRgC14xcBqePvAaDjxgKe45cDreNeBNbjGgUj5MkFm%RrBkTl:QYe5nwHJOfjB1HoLwic6VoIAOtkCHnsSQgE7gsIoO%qB0vxJwcE84UGx:THBZL28ARi%AQEN:oIAw78AwLm:foAv::z:5YB9:5nAwv%KwU2:doGfvxuCOj73Al5%x0LN:soDCf7%gxN%44NrfvkDUr8:w0h:eUNLv6bDWj:Lg3DAKgMMQIXDKMDigsKBRILWAa6CoIHkAp%CJoKRgndCtYJWQstCgoMTQrtDDcK%w3zCS8PhQmCEPUI8BFLCHATkgf%FNQGkRYeBiIYfAWoGfsEGxuoBHAcjwShHboEpx4xBX8f%QUqIBUHqyCECAkhQQpOIUkMhSGVDrchHhHxId4TOiLJFpci0xkMI%wclyMAIDUk%yLiJMYlnCVOKGEmgSoyJ08sDyisLfooji7wKe0u7CrBLuUrBS7RLLcspS3XKlguaSjjLnUlQC8FImsvJh5hL%kZHC9fFZgumxDSLbALxCyxBm0rsAHLKb:84Sft97AlSvM9I%LujyC:6q0d6OahGl:jeBck4D0UM93%EIbaxQ0W2J4K3NWRB9LTowTx0dgBM9Av:5LOpPwEzTL6hcvT9wvKgvWPyDzzDMcB8XzF0e7cw7DsLcKi6m7Aqeikvsnm1bwB5Qm7UeNHubnhl7c24AC2yN6HtGrdMbMd3ACy4Nr4sLPZGbCX2GSvkNfdrp:WhK7I1V2uDdVqrnDUra7y0yavlNPSr1fTrrA507OxO9Pbsl7TIbSj04G1DtT7tqDUi7hd1S%6Q9bku07Xor162GK:wNkbwRvbxMKH3FfEAd7PxYrfKcch4WDIxOJ0yWzkYcoT5ibLrufAyzXpMMyf6nbM5euVzAXtkMz87W:Mx%43zGPv8cvO76PLA:BWy:7vDsu679HKMO%jylzuiMo47YTKv%uYyvDpx8rJ5w:LTuVty4Pi3Mtx31HMI9zDzKjYJ80O1XPNaNGhzcjNqc0%yorN2MZDzaLD1syjwEjM4L2fy1q748oUuRzKDbdTyUa1j8jBs9rHfLI8x3exvsawsGfGIrBBxsivU8acr6fGl69Dx7OvLsjrr2zJO7D:yqKw6swhsSrPvLG%0XmyodRes9LXdbRK28W1Bt9VtwDjLLku50u7heuyvfPvXcBp9EbD0:hmxiD9uslAATzNKAXs0M0IxdQnDMXYLg:l3NsRHOEoFGDlDham6YoX5e2dGBPySBkq9pEZIvqAGfX9HxmbAXoYCgWdFzgIlhYfC3AVug06FAYQAhMFEtMRuxO6EC4Vww9lFvcOaRddDkUY9w0CGcUNqRnFDUIa8Q3UGkMOZBu4DvUbSA%JHPEPIh2tEL8dehFeHlES:R4tE5gfCBQrINkUsyCZFS4hQhadIc0WACI2F1kieReoIpUX7CKMFyUjYhdPIxoXaiO8FnQjSxZtI84VVCNJFS4jvxT:IjIUyyKjE5kiExNvIoISUCLvEUAiXBFDIskQWSI2EIMiog%%IgoPCiNqDmEjvw3BIwMNJSQ1DIokVAvvJGAKUCVcCa4lSQgFJigHUCb3BYsmswSuJlsDtSbrAZ4mZABoJsf%GCYV:bIlUfs5JX:5riSf9w8ktfVbI8DzjSLE8aQhwe%gIL3tgx%8608exukHHeLnqxsY5jwacOS4GO7iHheV4WwVaOCfE2XftBGO3qsP392ADVbdMwvz3MMIsNw0BojcigN03MoAbNz%:WbcMPta3G74RNzF9SDcR:Pu2wHxsdsC72:bUe0v2:Xr%9ru6tzaOOrb2s7pAtup6VfbwOnh2w3qpdyH6qbdKOvm3unraODE7C3ise025Knuhean7xfpo:Dt65nxBO%G8lbyZvPd9Tr0kvkB9W39vvVjAXP2bgUj94QJ0:efDYb4txFD%cMVDPq3GeP6hh3H%yEhs:x6JKX9gyeY:jAqif94LHUAUy5bAb0vNQKyMP0CLzGoAzUxKQTEMHYE4C%EBJIuTgTkLNED4ioMA5woAQIhJrAAfyMY:8YgO:0CHhj7QBu0%IsYFPbuFUPzcxNM8CURPu0LDyXqLg0Q55ALDOQzCiXhEglm3ioI2ttxB4fZ4QZ213IGrNUfBizU5QX60sIFFtK0BX:RvAUx0dcFJtEDBlrRPwbF0YkGY9LgBjDTQgcp1LIHTdUvCJjWvAgG2FwJk9kUCjfb6Art3N0Lrt71DHXgNA5C4poPFOQlEe7l0xLV554Uy%mBFtbrdhj27XcaLvB:HHvyiR7c9I8gTveNItD5fSRe:Fkm9P4bKJIBvyk0BEIr2galLIYJ5y07DAwv:A4XMMwRBzGqFN4xkhebMoEaPTNvHcAzVyAmNDUjbTQJJpc00yinNJErnjRCLn404TBKNGYzBDTJNa4zBDhMMxI63zLwO20ymz36MRI:iDFQQBsxT0GyMAhCTTB0QucvjUJ7L05CBS%2QYEuw0DpLXo:PC3cPXgs8DuaK705nipJN34pnjQ0KMcxuibNLgklvysdI6go9SCWJZUeliICHLEfRRnvHGkWUhp6E9kXhBCAFZUNQRO1ChMR8AfyDk0F1wzSAr4KhQCmCGv%iwaH:GsE3vpEAnP5EwBN%Nb9bveK%9r2L:mS9sf2lPZU9Nz23fFm92bvKPj37Bz5luo5%kvodvse5s38FuQ1:jripP%P4A8BGt9oAtzdowPU3LAEA9yEBWfbFgYA210G0NpWBtfa:gUU21UFgdtdBBbcGAPG3IwBhd2::0Xeu:3:3oj7rt82%U3g0Pbd4GX0WeEC8r7htO8E4obtJeKA6x7irOns4RDokuG05hXhnOV94M3k099L5B7fFeRm3ibkst155ArdA%V13Lrl:duT5qjbhOd%24fog9uW6bjbrOoc3Mfrq9zh7Fzd9u0o3gLvB98A8PDf6vDe4L3x0OF48sXiG:O946fzuOQg9LXli:Sw5u30pOdL9YjoqvVX6Q72Dep59qbq7PYk62X3iuvi99zrYvgd7OD4U%xc%X:s1vmk7E76w%zE%t3sO:v07K:7Ce0f:B:th:w27eP8U%0w:XrtbP2x7Zf9:%2y:W3uv:0D7779x%%w:bzwk:3h8WX9M:Mi:a30xvxJ9lD8Bfi:%%D5FPvb%1P6%P2B%TUApPiOAsT3%wTr9nQHIfbwCW:1aQzf9N0Oe:RKEUn0sBNR9A0WlvRcGBn1lhrY9bEczPamHu33bCAx%f8hkPpfI::7jSR3:Ysl8P5dJmEABifBAYwnCAP0JywERigkBYko6gXHKHoGCynUBl0p:gbIKf4GUireBv4qrQbNK3UGvSxFBsYtKQbkLisGEDBVBkcxsQaHMkQH0DMTCCE1Iwl6NnQK1zcKDDE55g2BOgYQvjttEuI8FhXoPf4Xzz4fG5g:bh5IQOEh5kBsJXhBAykFQpssk0IoMCdDoDPEQ:c2a0QeOhxFBz3URaA:j0bbQUlHqEP:R:xEr0jORVhJG0b%SeNFokoqRUNL9UPfS01Cb0w5QOdMxD0%Tfc6Z03cN11NfjQeTeYwqUwiLQJMPCkpS0IlHko%Id5IOh1iRz4ZpkVUFahDgRFrQcwN8z48Ckg81gZzOaADfDaaAGozxf1DMB77EC2h%NcpSvahJhH0diP18V8g8O9hHQLugBoo7L0XYeoWFaroiRIB5xEQZOWqDc7jUQs%4gYJs%DKBi7foQSv3Y8CO9yXANbauf6E2fX8SthF%y:Xpfk11g74YtV%9rbU9PQy1HTz1dMB8pzTovCC01zvhtMx7qXTJO3e0zbsMtRn66HUteor1SHqztWr6YfWUulP1xjpItj:6PvYCenW2TnpsdqV6YrbIOpf3N7qLt3N6:Pd7eyn3jfuRd%k78jfLfEq4M7yaeCC9ITgS:Z94Cn4WuAb%iDgHfzY3yb%id8pADvfFQL23twDvt5zBZre0gaO3vkHnd7nCMnenQkT3xsKeN9bCvTfVgp:4AYKDuFiCZjhZwgT4hQHdOJrBbXibgPP4iUBveKU:nziw:sI4rz4YeGH9YfgL:J937:uSt5F6:TczOeJ21:kFNoH4aTYy91G16:aBta11:LU29QS1CHSbtOJzw7TFc310svKJtO0yKLT18Zp1DjFetXZw9LWuMJy2M:BWdoYwYfcjsD63i:AsOH5v6fk8b:X5xzAO%uBwMjuJcF58g7CRPZBwyL6wMQL:orG9QGdyNQF88qbCYbNPA1M0KgQPdPSE1LWsRaH2TwZ2NxvG0fgSR3V48kegefyH0jrxiAh70ghAvN9Id72aCGm%g0hUv5zINoBoB88BZ0edQhyHYELKxxdDtIaABFyGWATExh3FcEWQBeFFbsYaBTwGXQT6BqwErAbJBJTHNIR3By6EVUd2hHCHSsSKh6mEpIeQxP7HvkTah:BFOMflBVnIGwW%CBBF5chDxhDIs8Y%iJ8GbkjEhp8JIsaQiXlGgYmHhvKJjUbjCcoG0wo%hoIKasauik:GlwquRnnKh0ZVStzGKQrvRfUKwIX6StDFuorgBXfK7sU0CvxE8ErIhO0K1ASrCt5EaYroBChK8UPmyvlDpIr:Q2FKwkNdCsFDGAr6wpJK7kJMyttCCArBgcTK4MFDCvjAwwrJQIPK0gAECtJ:gkrKPz1Kuf50CqH95sqD:VYKobyCyr177kpaO1jKenqBCmE6JYoQ%YNKC:kYCdP4oomqOCHJT7fWyQT3gsjJt2cIXTcEiD4220eqtusHH7byxpp28cYYdudFlrbTBRM29gRMttDDwjblQzM2tMJfdoFBxzaMwSt2WcBNNmq:rfYBfw%2IP51Ncu94LXDfVT1yjzUdeB8YbXF:D41%burNjl7aXZDO3l2lTsaty36zLeMus74MfqfuJ56vjkSeqj5zfqeupC6nvtZuqj8Jzq8fPf6mL3Kevz%nfrnv7H61sCGewgBm7s4gnH7JcNJu01EY3tshT%7QcYee4rG::uFR6P77wgJvAXI7:wHCVV8cUm5PENKGby7yjb8m0pQvOGKZvzPynn85woI:SiJ0n0WSZP9MckKfT0ItDz6SA7868eaPJQHFrx1hkT8EsXl%66FOjsLBII66sP9eg%Da:m7wo65MUInuHIBufe:wQk3HEDZ9khAsHWEwFB1EMA8tGx:9zPVf8Gziv:c8wt:yXLVf8fyqD:Y8kKAPLIkADLyDAB7cjmAVTJsAL8yYsD3Mp2BO:LcAUwzXcGms6NByrQsQje0eMJs9MlC6TVdgyq19cNvNlID9DbyRDg3VwS5d::E%DhrxXS42sXw%UsGbrn7xq%6a8c0utoHvjtFyAt8L0hbfJYI7H05yTz9mkmLPncJ1n7Oyl4:YUqiv%3K5AB0CyPA9AtjgW5LpMHii%jCUUwwwvqMPQNdzExEO0xdRJKMrYUkDLtFsAyFRneMiwb7TIyHfUyKB:6Mg8hAzPlIhQzoyQyM0ImXjO5J5gzACneMxAqKzTlKnc0fSu5NNQr5TTmK%80ryvKNCgrazRMKsgzFyncMognozGiJR8waiNULuggSSwnHgUqMBuQJw8Y8iTMFDUicRFhHwYOgRyVCp8ZJwfHFsUDAxR5AF0RR:3dDjP6iQw692YKWfR0CIfxtga97ioF9evPAyvpowJg5qQBmePNANrgHgAq3pP:jtsr:wrZ5:6d1sf%RNTN:v3R%P7Ez0b:ls21:3PLPQBcydkAV8d:AWbFKAKPw80C18FnA0HA8gPOvmcEgr3CBFu8:gRZuxUFeboCBbq5wgQZuVIElrixAzC44QLst%QByre%AMu3cf:ttwL%LLhz:H24yPrYuAb5M7kx94m5TfXWuWLzG7p18Ve6ju%NurTtu7rv69%6Rur1usDo%bpk5%u6OebMukPlnrqI5Gq6C%Q5usvjErrI4:%5:eMIumbkM7r75IS6teX:uo:mpbuC53i8ieh3vaDpn77B6uq:6OtOwQ7tw8Iv7jzERO%xxUrwGsdA8XfIJfLIyfzyFcvG82HMhvSxzT71Bs:y9VvQovar0U736tL39xHUmvgX1Tb5%dXG%bbWSfpS17r61tcX%0nYYPuz2Jb7F9m5%3rZzPvZ2c:7M9rD%4TapvvK2nj7Bds0%zjb2vpm22j6mNvd%dbbPPks3Ib4oty%90Pd6PYU3gb2Ft8c9UjgLfSk4T3zI%NR8r7kcPFy5qDwPejs7x:qW%8Y7PTuKO6:7kzwwO5:8vvuu:Rv7:v2G:A5%fnwcPsA8p79J:O::2D0zgGd9cgD0PamBer3Ygfg%PgIqfljCj36oQub%rQMxPqdDbz6ZQ6L%hMPNvqwD8j5QxBH%dMQvfhnETL4AhKx96oSRPdkE:f2MxTS9hoV3vYaFiH3Lxef91MYWfh9GVH5pBqD%sIb7vvRHI:90x1g:80eXwHGH4UDxyDOBdchNQj6IrUKMiRLDXol8Q:OJqASJihTFXwpAhjNKqMaGSwuHWQtmh%1LuAhEzD3I4Mx2yUJM4UnpDTvKE82FCoDOO0qtTl0K1s7oyvpPHcrWT7vKqQ:CirKQM0ozkE%J7VCYiWDQ0EjO0ThINxERR5jRXIbyEVrGAZGNBUURtIR8UVJDppFoQoPReAGUkQNA2RDMf9FQlP79UB793M:svPBPf:v4Dto7NM58%igN6XlTDWB4t4yh99gMLnc3C0S2lorkdfkKDHVfybw0jMkzNACIsbO8B:bzPwdDssmHF3JaRrHx8AYScYjF%HEihWNw:ATT8JTEinBsxAewBcPMr%DDWy%AAzQvZMKYb08CSK9%wcVvckGN72hBYe9ewQCvlMDob4mAmC:9QA4wMb:I8Gf:h3Ci:0hw4:8LMSx%zvF9fpNxln6Xsfb%WrIevltyTH5YcoB%ULL6vgMzO:4u8wV%U:NYvnHzdn5Jc6A%mvOVvuazln8t86B:cTOx:7FziEAws6IAcHO9wLMzm0E7M7pBSnPageLz%oIFNBkCsbQywud0RQNlNIzDqPTHg%%1M0P2dU%EOjWbhDf114Qs9gREFnZiA:I2cgO%tnQDevZpAyY2UILBNmrCTTY4Acw1%EFA9a0A7fUXQFZ0%X%9dFW:JfQtvlJzxH3Fs5s9AnNz:EtzEDvi8vF7CrLX%oQyw:oQMvU5bvLquOAzI7hi81839jOdd1l0H:bLNKh2SjU59dX1mHWtdga1T:bH9Tz3XfTz%Ak09DjJNPy5nPTM%oJ1Izt4dT38PbVbfRH1%f31thg%6ba0P663DICE9%CBbDhuQiO5NELoufBDuHqghE97gsUqvFVFhn1WhiC%Bga3:uNGzL:vBx9AqgdxgVTHhIJwh5iDPcetA:4HgUTyB5MFm0ehBnsHaUcTh2sH5sckyLdG1UlHRvvJ2caWCrDGYwsPRmGLtwYQjCpGMExqxgFM%YYEzReGfE0ExqoNQQbQzYqHMs2fR1LN:QezDeDIFI4HyLgOLwjdzlSJRM62SayOk0oUTuoKfA75iqMPAUsJT0DLbw93i1PPpYu4D4tL28:pS:%PwEwkUBFMCZBdDC%QZIwVkKhMOdCpTBrQ58w20ORMC9EfTBlRGIwe0Q%MHVEEDBXRNMvKESFL:FDIi%4Q6cugkMSLlFDXi0kQ4os%UKPK81CaiqdQhUpaEKLJy5CyiXwQdEjsUGjIXdBRB9GQbocI0EOGhFBRxcOQW4UF0GNESZBrg40QdsLOkEiCTNBjQYgQSgEAEH8AdRAEgCbQG3%UkAP:fI:9PtyPxj7yj5x%vQ99vnrPJr5rTtU%Tw6F:mZONv4yDaW%Ms0QvipMtr3ZTBc9wcuyPaRKyD2CClq9W8mrvTII:LzFSFC81seo:KgGx7y7Ri58UgWePG8E2HxURF48QwPwvH1DETyEAsB814J%vPfBzH1kAah9moFSPhmBCD6egMi:KICR:7YAYkAHAHiAnAATgXb:8gHYf9PCgv:4gzd:n8P2:4nEgf:1xRg:44X5P9IGo0AAB1UAa8fMgJMIh8D0CQUBDInCAVtKfcFeivcBlYtsgf7LnYIZzAlCZQxuwl:MjIKJDOICoAztwqSM74KWDOdCtQyVgoFMu4J8DBmCZUvwAj4LfoHHywSBw4qAwbMJ8kEYyVkA9oi1QE8IB0AlB0::uwaPPxQGBX6zBXI92wTVvU4EcDyOg8O8HoNRe38C3DqxQqa59YJz%QuCRriyQiH36IIIN2zCPDa8Qj92FcJS9fcCdrVfAqp1DILs9P6C:TS1Qxr0r4NFNK3Du7RvA:30c4QL9LqEZXSERMq00EU7tN7FePUvxYM1g0YZddlGe7Yxhqf2jEccdyiHVneGB9Q4JAgTeIHIkzkeyNO5ugkUuhMJl:qpSd47PAooO4tKtzwXCsp83ssh:WKLfH3hS5g%movzvw0MDP:4DCKAWwx0APYMQQGJTIoCFkyQwp3MloMhzJ2DowynRCOMtESkjISFZsyWRevMqAZ0DLfGwAzDR5AMyMgkDMdIuwz9SNQNKQltzQnJxo1eChyNZUptDV8Ktc1MCvRNbMrmDUELCM1IyxrNAwsajO5Kx0yIyuEMEYqoi4dKX4sqiciKu0lmyfrI:ckqSFEIi0fkB%BHOYcrBlPGrgW0hetE3IVkhAxE20NEBFCChEPFgczDe0DdwvIANoJqv1bCJL69wZ:96kFbPRsBFTxPAM07hUCCevyANbn0:%j5Ln%eeGk:WXel:xx25f7qdio%hXWzfm70wv5nNFj%LrP1:cTzmX3o8wJ92TLwPZPyob2W8lX9oDILva2xwn29sbl9TzGv:WDxZP1ysRd9Q:EGfVPw8H0isJT9L3ByvPpwCTzD8Bf8ja:ePFjvm7wnr1C7%q89O1LvIbswbv76kq7WOnjuqLnirrh5UC6HeQFul7i17mv4Le5G9%fua3dirlu3HW5aNtbuaDaPbkd2hy54Nn5uOnZ2rg32r64w9qpuIfbm7h63Je4kt2guMXeurgM4Oy4XuE6ubfiqLkT5Da6b%XjusrmrLsh6Im8cOlyvbPqXb7n60K:Bu0YwA3u3cD87pLB0%87wpTw4cJE8YzD5PFDxHryCsUG8%DFifPBxgL0p8du9IrIyvRmyRD1NMo%9fTKTvWkyz:1RswQ9d3MwPRtzVH0%83F84zOG:Mkz1Tyxs9w8XPQb:Aq0VPv6tEe7rLS1uyB04DrWdQm6j:V0Og81onnWNdb5pvYTeUL2mrkqNu342:dO%Nb3:niYuHy4n7jJuOn5ZDj2Ocr5Arq7uQ57NDlYO7I5nrwy%eE8s7ofvTG6Wv2qOpO%GzrK:oJ7AX8euzZ:bzspP:P7GABtOwGA3HskQQQ7P4FmutMBx:rfAir6o8JTOqIChHqawsC6jwMKOoADYjqvA0l63UO:ustDxXt6A9m7qcQ8O9pEbDxLRKj8:ASwvWvEwf4YRRr%gEV5fyHFW3:8BX7AToWiARrFg8HjhaNCbAW:gviFmMOMRe6EKoXAxNUGD4VMBloFzsagRlvG4MbxRxrHTIeNB%uH9sgLyFbIrAisyMpJOEkliXmJfMmwCY%KGsncynjJ4wqIyiFKyUoVCziJ:IsVidXLX0mfS1VJWMt3SMMLRgigCwHIMcrrR3qKg4b8CkwGOAoFxW7J8kRgyZMDjclpgrYI98GZyL:AuUgDv9QHxb7px0g9%YbNfMJGl7vDhij6:UVC%jBE5rkeBFV4R8PPN68DE:bUwqM2OcH8NV7BXnTEgMj0bEA7M5b:tbMFvziyuj5FMnU92:H2:X4xfrzsMQr8pfDZvCtwqLu78HV7FrB9errwADpocD25nzA3OR7wLvinsCf4OfAkd5TwZrc4sG92o7C:thUw1zXKsTX1QnFcNToxSnTv8YD0oTHA9ExyCnQwsh4zzTJ8c6HyZbOuslozs7Jas7EyZzOn8kBz2LJls8QyVrQsMhL0UrIZNLmx6PTjscG1UnHjNYexzPYFcf42THH2Nt2x8rd5MfF33vIwOE7ybPjHcqX5R7Lauc1zCnpWc3U6n:OZ%ydz9vtptAq747RS:BK0jbx0NLm8RrTXfIg05vy49Kn8mPSg:Kk0TTyrtC88YrPHfFFzlfw7cxu75DLZO4%yj3tBMn86%7HouoIxy:pVsai593F9%WexSzkmcVD4srFO%Axxhrey8bm25XHptmOyGDXsskb1f:K2NJxzJjQBM5czrPPI8x80e:JWtPIx03VusVS19PDatkmwpbbxsDX3cK:LuAkv53i8r4k5S6:wufSv3Xq2cA57TrCCPDrw9zy4MWs9RHIc:hwyiv79szO:ZvPVQBZ0rwCKtX5BA3YBgf82tsI891wCuzgwgvh48wMy%aPDaXpDA5u7EgOJ%9HDtPxEA559KwNH:ciDcn5fAx7:MMLNP8AC:QBPQq6BIIJgwfZCE0KSAgUDdcH0g%LB38SaQcOFXUHcxexB6UZHwibG70IVR2LCdUehgolIKgLTiHqDFwiRA5cI6sPVSQYEVIlgBJXJt8TaScuFYsobRa%KZ0XASu%GFAs0hmnLd0a:y7fG1Aw2RySMcwdvzK4HtMznh:MNHwgqzVTIXU2IiIvN%Yi3zeeI4Y4RiQlOdkkuTlSJTw6qyWrOt8lATvoJT07vSVjO1sldzu6JH872COAO7IigTtHIYY7mB%RO6cdpzt3G8k7DBn4O2sWNzybE4Q8pBDfPJENRj1tCrg9RAcyPiMEtT4VAT8:JP7PP1r7Y0C%%PZAVPaDQSH0BEIn8nJCZfDIQtruA0OA7SJDU%wmQ0nrDkNc6tlCg%mDQrboB0Lv511BKOeBQF7mcj%P5TI%uuTHPOLjOzsJ45U5NOLeN2nhGTau4Es0DOB3MozfnjA138QuEd:uLCbfHyt531opC%ChJ9rg8iXi4UgkHOOgIoDk8yAG5j8fqeeDHWPpwhsu6wEaCO1GGO7umBbe8PwU1fJ0E9D0:hHQ9poQ0PhGD9L6Aw7U:NYM1v7GC9kA3ArfAiMK6gSfCfwGWAkZCUwJQgt6CXgN3wm6D3YKBhI3C1UUHQygFh8N3xgxDgkbRw8THVUQ9B5NEaQgJBIaItESTSNPEzckmhPSJLITGiWYEw8lTROyJNcSBCQ4EgsjeRHKIaAQSCC1D4oewA6XHMUNeRrIDDcYxwveFcIKdxO1CQ4RoAivDoMHYwxhBjIKOwUmCBIERAbjApIEqgEVA2EA0QEC:8oAi:0CAP37fP9g%jf:vvgx:yb3ZP%k9cr:Q:RaAA7zDQEJ8t0BNvHEApjwwAMt8NAE9u:3BfHvNQcc8IwIcvD8CfDwhQuM8SUNP:LcDgLzpxDO84QSo:RyFIP1bRZz9nUYe:eHGqH4nhzq%bkeVPvTIN386SJ9:vUkLwD1JuwB4iiyA7kqgQV2LFsHFi5FCZcvQQv5MFMNPjJ6D2gzthF6NAYUdzVlFmI20xg%N0kbDzjDHdk4OyCjOa0iczoSJU07aCc3PKwpND3eK0Q%:y1oPxAwnEAQMtxBADQkQ901a0SkN6hFUznURuc64kddPMlItD1:SeU%:knsP0BKwkBDSmBBCUrBQZVJ5UHrSM1BEUiBQQ9HCUHoRXBAokS6P0ND7T7OQQY%SUACPbw%3DsvPZA6qzsaOTo6ezfjOLM1qzfEM5M2sjGZNXsvtzQgLeUznioZM:UnTDIjJXYxLCKRMBQfmi:kG40upRhqLV8VMCwbEuAq3A55KaYL:id6CHEmWwXWJE4CNCNZ:5Ihh:z3H%T5bh549wAdTvW3G2jzmhrH8bEZZ:D9GEHvgBhO7jYYhu0aGN7sIhhN7EUYyut4GEjrsRi86uUYGOoIGVLpEBli6PMYQOeqGOvlLhhj5H0XrOKVFs7geRXT3iwUx9yxErfaDRGz2EQPy9ZdDQrVXwt701IJJdI%BwnRLQUo0CoDf88%AQ7Pcv:Qzs79xc5X:OrOEvs4zwP6qM8t%TDQkPjE0C74WtEJ%OrRH:hw0m:47NL0%GDTp:nR0376RdRw%77Ucvw91Xz9wdWG:krWjf:V1pEAY9eRAfTXkAKJ2JEDJdmSBMXZlAVl2pMG:dqKB4TbdQjv21AJN9wXCljcyQpV3GcLNtzvCwbcYgzR278ModsEDXvbLQ1j2zcNV9sbDVTb0wxb21sMatusC4Tbwwqs26IJ5ttLCDTcxAaU3BUFB91IA4fdZwET3nv:p96O:UPfqvvm39r5kOAo%EThnvYB4kf1yuIn9KDjRPOF5J7ye%Uz8oXm:fGl5:fx2ugX8iPqVfJ666fy3OwA80TuWPOv76LzF:HW83zy7PPZ8%DzKfWx82n2X:OU9%:yqvhp8q751PGo%jrxo:uj8K78FvDT:ZnvHf8z75AA5%4pAr3u4wO77rUF6e6UB07vdgnw71IL0fAfDfHx1w5M83MQ2vTsEZD2PRNk%F8UR:pNFTD8BRYU:okW7P:dFrIBCxdhAxwX9gQZF24GChfIB:EWAwnTFiEKshYmC5IWGAx8Fv8MfBbjDaMWzg4AF8oPohfgEJIYFxLVGXITZxv0FEAdmRZRH1kYjCEpGuAj:xs:JswdmiiEH%UqGyEVLYciHi%8I:UwrySRMlYl6DOlJfI0lCWpNR0lCjY6JBI27CLFNTQhJTUZHzo0nxwOM88ZrjGzFicwUxOHLroP2CzyCyIrBQhsKfwDuiff:w0muPtrJIz31iJi81IhP%:gHyjrfx4g5ykdK%PWG07ffBqQ2xIZ9deSF4TU%BU:0UMUKc52EkHLlhCIyKUO%sWoDJbDowpcwZUITL%BBmq9ZgS5u0cCQLomAAK5Bf4GuOn7S7fT%dG2wfeUtq71kLaT87y2afEStynvjrfT7Ci4a%rduPvnprmO5X%6MuNgu%:gQbzN3hy9z9zmvffamL5H2Si:wteQv23WzL9P1dm:btS6v9HTdL960xK:atOdvpzTIL4L1Ke9rdQ8vXrV6bxr1re8eNewvJ7Y3Lza2UC9K9vevYzctr793cC:eN:zwPjgQsJ54qDD8OP%xFXlTcae5oHHweePyLfob8l76RrKDeqNynHqx8qr6srKwOqZyrHqOsp:6rPJJ%oMyanpT8gJ6YbHTOi6xnvn88Wk5jnFz%WTxAnlCMRX5J7Du%NcwzXjR8PB4mXDV%K5w%:hQsSA4QDFAeHuxWzgBMe43zjI396Bydzd08qp3CXMQdtxzaTZs87T1%jP2NUR0b3TL9KR0UXTY89U1EDNYNUxy2zWQMl813THltjXxcLZdsQH21:DbNykwvjdUcKx33LCneEMw73jHMQQ5pjFkOhzxzXrmcny7fjLuvB8znzzFtEs9rnTv:hb1in789hj:XzbZP:v3SYBRuCiAnzi1gON5L8Ed%ZgBTnovwXV6eUFTuvcBarsrwXy7WoFL%8YBW:wxAS78XcEH:M3BKH0DARA9vsD:fcHBNL5MwS7%4AEtf3uBL7:eQXUAR8G9APcBhgGqwc3CIsIRQp5CTUMdAr9DX8LlA%YDPcQvw0mEvMOJhMyEAAUeRG:FMUSbxUUFBoWZRXEFrgWchcRGCIYchnQGN0adxlVHBUa2R2kGmgfIxv%IIsblCLYGyYkAhysJQUcICfcG3sojBu3KRgbzSqNGrYr8hloLFMZ3SyyGAotExjrLHYXdyzZFqorPhaAKqcV%igcFRonpBTkJEkUZCISFKQfBRSzHCQUnxluFHcW3xRGE24VGRAWFvsM0Bb4CZgXGAdqGGQERRnhAScak:8OG3b99xuG%98cvPnAHQ74lB509lIf5:TwH2DzYiDa8Z8gU:CgIMruYyA:7ekftOs6HyvqWx6o6FIdL%ckHMjl0hp55F0ZSuPHF0HiFRZm4U8UveCDEkrgvBAN4AYPCOBtDTrg9guj4KUKQ%F4CRfiawge43QHVOSIBrXlnQU456kE1eimA3:qjgIt7F8B0%0YAGnvuP7o8D79TvKs%5vzCfrR9F348:W29gf3IfUR%KzzFvlh8hr6SPEk%2TwOfy771:9T%%c:ibv9f9H73EBtu8TA3jw3gSK8dIG5vLtCIH0KQtK9nwNMPjcDyH6OBIJ:IIU2:2qFon:oRgMAVwaXQLPG3QD8BxNBLkd4gQiHiwFKR4qBc0d2gQTHT0EAhxaA6UaOAIIGeEAORdi:0QVyP00EyD8ExF6%uoO4PjBDFv3nwrw9YsInfSMBmDzqAQ08uICF:E%AQfwv:8E72b%EO4y:SntJfxM7ED7cuuD%pbq8vmw6Y75vOhZ%bfnVPmi5oD5guXZ%V7kXfpB4wj7NuLX%0fhxfx94NP929:::mHfSgAN37gB2d5IA8De:ATB3tIG2d7ICAbf2gpI3wENmt84D:ffeBFe4LsTzeD6FUfhLxjV4VYaf%JmHE3jXB5E5DAgZeXdIa7mYCMa6LMkpOnUJUrrwiYL7X8n6u4RKOzwfSgV89AoaPUTKeX3VCmI%p0pS:32KSQAZyoJA:Mq8AWeK9MIaCyrC1Etdg5ZLjEReS:dE6wweBboMQAZITNzG0s00B1bNREgRzYzIgc3LSSVN:sl8DeXJxc4:igKODAqzDcwK2I3AizRNqosIDYqLVg1gi2CNLMtpzO8LdEyoS0HMmktTTEbLacwwSwVMGMslS8ELCMvqCu6LksrVi7pKvQtdyqPLeopJS03KbAsUigrLDEnjyvOJdQqJiTxKTsi3igNIJMnnx0MJvYaRyQVGEYiBBUMIM8Roh2FDhEbOgtiGAAIoRXpBNoSAQIZEFL:aA3f:NUKq:pqCLf4MgYI9zgEofWCAoT0GQGy8wAAKPM4:9zyvf7C8oj%yvKN:uLyvP748gP::PJR:%HylP%g8r3:MPLA:4:xlf%78Db:sO%e:m:uzP327L:8Rut9%2PpCvpS53H4HeW99s7i%vR24DTzJN508evbxO:d2SruDNiq7ITWSOtP1Qfqb9Tr6OTT9Oep0yXnuNN:5g3UAOai1KjlctV25XXWaOWi137l7Ni25UXaD%ae24fm6Nwf5xne1ecn36boDeCP6cngjepc4ZnryuGy7Bbi0u1G4vruXuIp8F7iY:FI4qjyHOL789jhXPV:4cv2FeFC%J3gu:kb4C77j9%R:Pne2f1X3v7%qd33::LcvgA53E4BitukAfLavAF%2pYBONouASbahQBJ2pn:ndps:h:bAP3L21r7oNyE%ZzdivfD3nz1FeBr85PhaPE844bvDeXR7f:mVOwK6RbrI%sZ6kLtXuld7%LobvGh6HLzleho9bboU:f46Df5TekZ%6rp:Pz:6eT%ROrQAG:quwJ86p4Eaep0BjjqNgjs6eEJi%l1Cx3p9Qyr6GYOQejLD%znKRG554IStOfaE%fnNBVa6JYWFOkJGBbqlBlg6z8b7uwNHbnuAB%88BYh7:JHI0n1hyXE98snWPoCKv:8HCyu:wkuXgK%LwIFMDGRB1kyAAo4M0YMzTNcDhw0PRAoNOoR%jNkE5wzsBQbM9UViTLdFvcx0hd5MbwYHDGnGewwnRryMKYbMjHKHK8xEx5tMoYfcjMpIcE0:CJdNgElRTgyJ3I6iCnaPPcraj9vLgxC3zCrRDMzL0dZNYJJPzeVS9c4WU0XOsdO%TrZT3g7kFCRO%1QQzvxUI06nlByOfZP8zf7Thc2rU3lMw9MZzEpSqguA0iyK61Fjig6Q0UlvkDcIU0%Wx75O8cazDkmF883exMDNswPZDQaDPEyaQikMboEezAPAXEvbv2ELtn5ri1W9uks6:IqLKDvayt77KAqhenAKcLmwyg35KEn6eFUJtjf2SQG3i8jdNxXISbbVB8c2isdW9nfGuXYdBi52O8V1thUEzXZphDQ2ekNmtohC4bbUgiH3H0FjN2iAonexP9y3%X8PuAL%uPgPvde4Yz0q%H:8cfho%%y4X:tbeGW6:jg6%lX4Hzoj99J56feVOap3aHlodwz5ZvbEeWp2jzl19m55TbZhObO2Jrnp9j06MLYh%od2Ubsstkl7nnaFfBp2wvydtz985Xd5fW33r73z9%G%c7gO:un4dj8T%JX:r:isP:14tUA8%K%Ab7iYAJd4rgC2eHIAj:hlQKZ4CwC89%ZAVjf5gDS3h4Aat5I:ybeaf4K3of9Gd6l:FLeyvu03vr6Ot88%uDfkvmj4P:4fOGC%GniGPhk47r3auRh93flAPeD5or2iefx9YHoJfVj6R30K%rS8tHqQfFW62zvt%tc7frrGesk7LHoPuwy5k:srONk7DDhhuzO3r7slNwV7Y3ake3C2DbuOtcK7:3VDvAU1UPxiNSp8mPUPfSt1Pz1a9Xe95rW3Pky2On7JNr5:Vzc:v:D3uoBQOGvA77jQwUo5qAGcejCB43qqgh57FoJNO7WCcDvIwok8UQKYvI:Cn:zFwp%9NMJX:V6CST2FQnP9q0IaPdICPj37QeM%KEHNvllBwf6OwcM%yQHUPwgB9f9Lweh:1AHpgGBB%ADwAdGBgwIzwhkCHMLxQgqDjIJ6hCsCagTNQpYFtEK7RiEC1obUwyVHUANmB9PDl4hgA:mItMQMSRHEkMl3BMiJpAV0yZiF14nUBnKJ1cbGihzHVEonx9vKNIhcygFJFwoKyYqKDgo3CcgKnMn1SvyJkotWyZ0LrIlSS::JMAvSSTTL5gjfy:yIsIuXSKcLdkhECxlISMq:SDbJ58gRCVLIGciAiBTH8wfFxyxH8QYuh9qFfAfGRJXIN0O8iDAC78hygi4IvsF0yNUAwcl0ABHJm3%hycl:L4o8:njKdP38irA9ecrs:PCLKbxgS2V7yAufO2cLlvr6y416QIvD%fXLvTkXS7u4pEtB%FzLEvfCCvD3V8pd9yFJ23biyWr2n8jMtprIQTaVx8e2ksdf9pOGyDbZRn725kXCd3uFUDeaxSZ3w8TC%HaEY:ixxAg5M8PteXpDkrnDA7X6CoNVOo5DLvrLAsE7fkJKu6bCCrvEAcD8FoFt:CAA0zxiwHJ8Yj:OPKF:aPykPsX87n5nfMO%D70m:YC9Wj17fV89AL31:ND%Hrzr:lk80T7k:MA:Qb03P649NMAo:XeAr328gT59wcHRfkQCY76AQvC%88MzvxuDqT90w81:vcQef7UEWn%ZxIE:q0SSf2nEj38VhLo%rsRUfnaEIP3ug%I9WEOafPZDDHxLQvq7mcJn%ySB13qtQUx6NYDKub7AVbkJgDA4lv%ceGc:Gng7vqn31T5I9:S99bebPa23iP1vt758%fe8fIv3wvyjd9J8fvfrvBt4Dzw2OD47y:h5e9p4QXwgOFc8HHh6vA%4a:x6%Cq8n:g2:ME4EL1gt:e9gPfrviR3rH6M97j:OzdQf%:3cUBq91oBK:dJAfJ3e4J9d2:DDHeiw973kkS0d7uFDTfcxel388ZKeD8G8Pg9x154bsfTeJKIUHjoiJQ5Mgjd%XBJLDmlCX250omSentJqnqiSca7Cooo%3ZKEjvoSkO8YYq%PKLKwf1riw59%wtifk9L:D7mTBk:vgx2wBRM0kDnjSiBdY13QfyNvIJ6zfeC7s4oA1cOTkPzjmqEA868hEkOhETFDoBFOU5vxShOUYVUDmSFfs4phWnOIYVWTg6FRc4yxTkNz8UwjedE7Q36xK8NysS1jdjEQA4mhAzONQPZzgXD5E4Yw6oOLUNpDgGDXw4SwwrOHgLrzd:CgM3WAklNvgHEzVaBsszewRKMloCkTD3:6IuVv1%LH76Kyp297EnSfQZJQPxbSKy7bofZ%oNHTHnchoh5PYXReGhFajefRNS3I0RRtrXD4bYWw4S1xoN59URDATVPQtm1JoKBtQiCtvT0AnZ05sJ79N6CQzUYwkf1E0JGNQsCefT%QiA06oI3NI6CPPRpAfD0OUGS8:7BZDN5ASXy6MDask7AhLHsACbxA3:EMJa:X2:ovvrvO:5ZrpJ%Pq3tva1tTv1prPZ896xkfJwsGLxaq9N8NWuUe%2rm:uCa%o7civ:uznsHDsW7IA7Be0rOsOtnTrMrhX63W6WOvFvHbrEb%160jBGOxaw5:sPsVN7erGH%5ayBPvjMko8H3KWvEuy6jyn8sP9NPLjfXNyyD3lcvC%DPLb:qxyh38GcrC:XXJU::MyMMAJcgDAoHHBgPhxr8DQsYlBKXFMAQJxdwDc8QrA%zDIAJ8w8IAMMMb:w:DNP0fwxr7Y8PX%NnDefZ:xAz0UcWd8U:GOe92x%7syMjH6kTKz%jrywvnvM1%5bbPKeTX0QbjGtQP4nnWPOHt2ITga9vf3%fdRd9X4K7ereIS3uHka93u5rTc0ejr243qEdso7Craqe0%2RbvVNh08HjXw:Gz1gPzD9Yy9JXVUfVM1WL2OtVr92XVc:jR1YH5gdab%nrXx:u72Aj9Rdpj:hPc2:8f3nQBW%AyA7ziFgUx5RsHrec7CSLqaguH7JkN0u68D:zwwxEA86QT1:RUFYD2yhb29wEYPPn1GFL6pRk9%xEaBPw%Gqz8NhpB:QUayv26GVP%ahnn:iYZj:8EGVUAFBk:AWAZVQLxGZgDxxoIBeIbpgZAHW0I3h5ZCrsgZAzXIogOLyW8EL4n9xJ8KiwVXC1OF0swUBk1MyIbAza4HJ04Bx7tOgUf3zyuH2I%:B9tP%8f%z%EHw1AuR6sP48d5D4GHMM9IRpYPOQXsjpYFd04gxLiNm4PyDQiDJgyqAhYMAcFFS5GAd0rbP3EKX:52yeF9TQmg:HaJH7t0yN86R0jguWyIpPhiCK13ZQi69nJIjjWHCOi0n0jL8:fI%jLMyTWyGkkBMZ2JHrDUiQ%wfYjVb9gI8C9kCKAvIUhkrs:IPW6vh6nugIdproOG%665xh4u5UWPbwjFDG9nRFJvhAPdr%IDKnADQrRwaMH4cJLBcnDAgOBxMQA:8SR:kLFa:xMxVj6IcVj%MvElvZUxPr0ycOY8zXDcvKkwofxIMLY8LLBYvBhwSXwM8Ek8C:BYPBYwdzwsMGc8TbCofLlwujzuMNv9abEL:ekxR:5rMY2%7PHZv20yKH:p8nZAYbK:gNMywUG9MvhB3vMiwnfzP4KI805DEzNPA1gzQcOac2ZDnDN7g5:zQMPoM3VDtnNYg4yzrANrc7HDEzPtwsQ0I8K9NBeCfjRLwgV0w0HSdT9BY7VAgXc1iAELdhZA3fZrgK12h4C4dunAfXcQwHy3e0A1N6dAJzfTQBK4Pj:3OCX:1LhJv%t4aD%7uH::RjiPP0z4lT8Q%JD%1HiC:pk4rD4heI%97rixPUJ41f0eOML8wrk8:HB5B3xnOWR8JrmUvC551zw8%it8EbqQfGv6xjyKu0z87bul:RR8ET2%PE8%KjzePpc9fD8D:eU:7n4UQJU%hMF3vvEB1P9Twq0:qMMAQC0DjoBeRBhAvERdAMgE3IEDhRbBcUUMAZRFfAGwRWfBx0WPQhxFswIxBZOCRsXwgl9FyoK8ReHCn4Y2QoyGSILGBpmCz4bpQusHOQLaR4oDHIgdAzCIs4MUCU7DQ8ovg3yKlwO6y0YD%gw%A:aMwIRrTY8ElA5rhO1O10Vzz1MF5g:ehkOQeYbM0KKHgpDXyGaQ18k50N:J:lDtSrUQ:MtgkMrMQhDTDRwQkY3w0EFOgdBezxCQJc%eT9NQKs%kkHWPV5C%TyuQhA8f0IdO9VBJTq0QDE5Jz9MODo9gjf7Oto2ezhaNss1:zX8MsQ1HTChNTwtkDVmKo41pSecNQIlvjWDIv01KiBgNvcd7zblG6837xmiOAwYxjk1FhQ7ZBSDPJQSBj7EEI8:8g4QQSENekJPC8FDgAnaRLcHwUX3BXFGRwTrRq4CMEc0AUJH4f8gR73%yUbQ:TdGIP1jRbP8SkSL:OtCqvxLQQ39dT%v:Xk9iv5mO5b:SznJADI3HAIkNYMDKDP1BEIxaQZ2L9QHxS0vCTIsdAq5KqALVymyDAYoqQ2%JoUOdyVIDy0k8g:aIoIQfSH7EBQgXRGeHqwRGh3uEYgbJxLlGV0SMhiXEnIW2xKtFC4T7xKVE0cRFBTKD64Uhw5lFY0NOxbkDC4XjAw%GIAMaBm3DKkaKA3%G8oNYx2YDtQeiw9PIJ4Q0CHKEVAjBRPKJD8UMyZoFYUnbha2KD0XvinFF5Yq9xc7K8kXpiszF9MrMxa:K8kUZSv5EsQqyxDeKUkOtSh:C1Inegi7JU0F%iMHAhciuv4ZIHj7Bx5R%OQbVfW3GZLygxcX8EoV8e0SEyvs3hDL6rQO0umZDDzplQr%6K4IDentBlvpVwXa6fEDfurCAjrrzwEA7B4BweyyAG7tkgD67cAAVu4%AXvuCgJl7iUDEu6KBIftNQbL7CQI5utPCuPqrwzM6TwPrujpEZTnqRSI5m0XlOUnGsHkyBwU5EUfkeOTITfjrCMC44ol6%ItJ%zilCj:4sMpJeO8KmDjhiu54yksOuStLO7kGi3Y5Xot%ubTLU3oKy7I6YkuYOvxLgvtZi:C7usvg:CBMFHyKTEx9OAxKPagMj34YzNy%iM0yPzbNDv:hjXFASQ2WwS1NvAGOjd5CbU36AsoOC8OlThFEP04IhJkOcETyzkhFTg6RhasOjQXKzvyF7c7hBhRPO4Y%TwwGa09SxlqPj8ZKz8MGeo:uRieQEgYQEHAF8lBJhcwQnwWcELGFYJCBxVgQkMUBUKBE2xBxBKSQBISdz9rER4%yRCMPCIQxTprD9A4lA61NpANeDRVDB8y3QqvLyQJLS0tB54q:AQHKJYCbCUCANIiRf07IGf6qR1z9x8bc:SeGHnxKBaV7r8T2utnEVXpIw8S5:cMFOXnClrj9wjf4SsHnuCFBZPfBwS63rUCEt6NAZndjgBK3bf:Ht0A:wfdZP7z3Nv90Nxe:Ync5vwO3G38Ttvv%0HaZvvg2Mz6Ktcc%iLVUPnM0mP4MNBT91jNIvZRytL0Kcdq8%:D8PG1wGrwjL3g7oa6Vu2zt9DrIrVR6uOy2ugFsW3nla8L5p%uteQsrm7jPq474tCuIOHZryXgSbFO3w6zot4UtSfeSbfj3Zq52930uxTeRL6S3nXAV992wmPgN8Sy4azFQOPNxgXll8f65grIFOkpyErr%seS7YHH4O:FxifyzcVX9KDEYfZIwzP40MG%%UbA9Pq4vsj7NL00:Ma7M:x2usf7R7n0%jm4wflItzn4cLZr9rO1ZvQVtTvynrT571u0sO1WtG7rmrQ96Su1JOcKtijlNLdM46G4kuFNuvrfMryF3ku%L92WwPXbEcPR2rrFv9mNyLfYh8u416DOwNbQ0c:VD9Xr1FLYFdSP21TTut6q0srhG9K05KvRbudc0fLpM9E87DTRS%5k0STwydHM8WbSTPNA06v0WtTu9bLVG:dJ1zf4GNlG%RrbT:pG3Vj7k99n:Pjhgf1u5Kj%6%bc:2npHwHe63MCRe7ZA5bwVgXN8u0G5:SeCOH2Zwq9%EAMfPobDh386w%i:aARC:8rE1kAgRSMAZoVqAJyFrADBxepBF0XmAV3F4IGWhdqBw8XUwidFj8JEhYwCnwVJwvuFCYMfBQwDTYURw4qFHAPXhStENIUARKCFWwTYxbvFG4XiBabGDUY5xnwGU0bshvNHHAdYh4fHwUgryCpIRIiPiM8I7EkISTtJbkk2ib9JGcn6SSEJ3gkJSenI0gmcyLuJNsgHiPgHucghBxaHs8ZixvHFo8YdxN8FegPYhIkDFIPNghWDCcEdgn%:7oGw:soBH73ygEz86j:6u7N:anqQPx55gT7YOIY%mbed:mV2hj58tbx%IbT9fhZ0Bj5cs1M%dnKgPmVyKX5rcar%STFhPn7wyX5MMOJ%MHCrvenwpX228JE9VXDv:MMxAvy9cQs8AHGJe4jx:nrSMiq6WDJPudbyrvkLMss4snLmt8szBPdVMyf2kLMRNj8ywPWiMvc0%7KzdE4ytPPcsnxzabIMMzfx5nKKMc4yYfGF8gDxj7HncWwxlfFacYuxWbGIsWixjDFGMdUxcfHisWuyM3FzskYxinLZca:zLLGjc79xpDQRse:0pHHEdXjx3zXQMjz2avIbNwpydveuMk14VrKcOMOy4Ll0ctk56TMEemGzYfqds7H63XP0eyD0KXtn9FE7sjSq%7709ruNdXT7m:Wm%6j1zruzNi97eLZMO3i2p3syNsM7JHchOs73Qfrx92Y6jbeOeqO3unp096o6Q7fdOlF30jpgN8d6cHf7%gL4LboXOBt6LDgEegB4aDnTeEX55DheObI4cLl9OH25BXiE%Qq4hvjNOIR4jLi%eAm4t7fEeLN3vbh2N3b4RDdyOGG3MThRtzW4VPcBuKs3FniSt3U4iLeeuMt303kZOBN5cTheOZN48rn:%Q86drmxerZ6F7s9er87SLtmO9R7yvxcPGt8m:zGvRA9Wr11vaZ9in4n:c4%Xr4BPon%ZT6p:ny%vv5Kvsp%k37NPpq%yT6j:v9%cn7xPkj:H:5o:wy%U394fgo:pH4Nv9I%H8ADPgGAuP30QPX9%AF7vcwCDP4uwqs%HgNYflZEFr6VBOd%1sWLv1hGRL:VRxLAScf2gPFIboGICTkCSkmTg3YJ%oQKCmpFBwqexi5Kk8cCCsUIBUruSPrKisnlipYKiIqKy2ZKZIvBSl%MXAo4zLgJ7szXScHNO0mzTOVJhYzVSbxMS4mazAaJpMuFyZ4LCImKCo9Jq8nbSYaJbsmciIxJ78f2CcIHbEoURq5KZwX5SrsFCgsQRJ2LZ4Pwi4DDQcwcApFMecHgDJmBcAz7gINNX8AbjYc:uY3zPt1OZT5Fzt898U8jfV3Ps3zIkBA8rxB6:A7Q9DvlUTv7sFFSe64Rt7teEet7f5Hte1MSPPtY0hk7kZIA%:0R8rva0ex8KpGsPGwRcDyfkTX8xxD7:SSQQD27D8H9zY%APh5POf4vzq7%Q05fPppNyr72TXK%2A0X:wDM:D8wzGC:ZwwHf6LL8H%iS5w:44tJgCULN4AlSuTAY8qPgKCKd0CbShtA1Un7wM7JmUEIyXRBA4kNgX:IpYF9yHyBfsgTgYQIKwGQh8TB5weiAcsHhAI:B2zCA8ecwljHlQK7h5XC6MfewxzILwNTyEXDy0ihRAHI:wR2CN0E5gk4BQ:JTYWwiVtFxAmehgaJlgZ0SUAGiclbBoUJJkalyKAGrAgHxpmHnQZxBt:GNUYRBenFckVSBIXFMoONxI%CzIQuAcRDkwE3AsLAZgJCf5LB1f7%gQB%aoCFvdhAJ71I:6i9Pn7JPTr%SH0APiR9ET2afXA9Jn2fvMO%InyuPnq8Yf7qfFp:dDxT:9j8ikBZfPlAtT0cQSq9sEF3vjIBmL7gAcq:ukHJgEGCEkE3geFB3wHzwrpBhsONAZaEWcFgRSRBIMXvgNUGvkC7RxOAkcfxwFiIWwBQiNDAe0kTwFsJo0Bxyf4AQYpiQIxKjkDTysCBGIs4wRuLeEFdC4DB3UvUQhvMM8JYDF9C0cyUQ0hM0EP8DM6EbU0MBNwNRYVJjbpFtk2qRiKN1saPDgHHPM4tB2yOWgffjolIV477CJYPLkkcT2HJq0%UCgLQAwqikGyKyVDOS3WRJgul0bGL2BIvzApSoEx60sMMp1NZTI4T5Eys1CVMgZSdTIpUzYyFFTZMcNUZDExVdkwW1U9MEJVlS:oVOMuUlQnLoVTYi2HUpAsX1GwKxVQxSqyTtIpP03cKMZL5idOSvIm3Uj9JXhH:yQcRu0jxUS6ImxDWSEIQsEfkUDrHQA:1BtQPX8ZgDvyFpE5NBSEN1ERXjVTDiIzRQvVMDMIfS4sBSAsPgLGKXv:eifz:Ecltfo2I8v4USE596If%:UuHgr1%hxY9Agc2vNVG4fz3xpW85waQ:ODGkfzhxpc85sadPOyGn:zwBpp870aHfOfGonyYhqe8QAaU:B0GaTuuhiV7NAXKuq2Fm3nbRVs5PoTM%FjEtTdsBBf2ugO5tYSDX3TNgsz0FkJG82BB0PKswW7x:MDkcVIAtTDuACQwkn:zsEF:pPB9fzbwSH8ncKS%8zDUftVxWT7JMfR%yXJnPxEy8X9cM1K:5TPJQGe0UsDd9OtBQ7VOAhS1tkKN9d6DbbXCBDQ13ASiNejFOnWlRb71TkYydSIGV7TeBrE0QMbBtAlGy3O3BpEzCwaWMobGXfIsxetxgEWCcUUFJbD%xFbwsMPW8F6DZXAKgsFwNkIqL%NBn6:SASKvwoC0r:S:1zAnP0uwWb7SsIt%avD8fZJxbL0Gsd08hTJOfAtywbuYM3g66rPzOkL0tDngtTy5QzXO%Sl2bPiR9xj4ereU%CF4YnfDuQH337mz97L6N3e7eos397st9%Y7nXgGfBe4WLxauJ18pLjWvPO5Bn0Gea69GvnRvXB6MT1Fuo89mbrt:av7D737u3c9yTvmPhS8Hn5efGB%pnyrPu28:X80PRW:uv1yf8K90wBL:jeAl75ggSZ%jgG4Pv%BzH9zwmI:qIL3f9oDScBFQ9fApsQfAPvEXoEChNYBegTFwaKFLwG9hRNBzMV0gdKFVIIRxXTCDYVXQklFfYJIBWjCjYVbQt3FVYM7RVlDaIWmw6ZF:gPzhh5ETgaGhPHG9MUah2YFhQfXhi3IBUaTSKsG9EjEx1AJTgelyYPH84nih:bKKEfsilQH0Qqkh6DKmgdZCrQG98pzRnxKGIXmCeRFNolYhG%I9wNUCEICqEe8QXEG6EBzhgj:dQVgvjpEsjzGxD%7nYNLeoCC17lwwiY4L8G5dv6BE:XeAPg0jsCo85DAaTKjADuxg8Ai8PC:4bAm::mvZL:s7ub:%%5r:%cuMP:tbfL:zS3u:8Nt4P:MrcX:5a3av4ouHf92rg5:KC5tPpvuuz4Prvp9gS8tPS6vFbyWb3Y79q9Qu03vprqbb7p53q%NOVgvoTiI77f38y9UN1hvd3a67yN2HG8Zdb5u2XUhruO0hq74NCzulnPULr9ze25z8yJudbLIbkXy7S4lspCuFXKz7dSyl63isr3tvfKoLaWy2G2ZsxAtmbNRbaYzne2:c:btpPRdrdX00u4QdVeuUnXrbpj2TW8htvxvaXd1r%139zBrOH0w33jEcYd5SfIheYqyq:nEMya6NHNSelnz7:pz9AD6gjSF%oS0::p8NO86aTUTuky1bnon9UB6PLVMOcw1k7mYtZk5Y3We%S61pjj79a94jTX7OGO1yXhAthr4JTYvd9E2RzfD9qK3u7aBN7Y24jdvtwR3ZPdnNxI3iTc0t6l2yffH9tE34:aKd:52dreXtlf3sPYwd0t2AzdoNdL3CHXi9u11tfaZdY92jbWydkx1obZX9aB2cfWw9lv11PaWdg024LZaNzj2undc9yv3yjesOH5393j4eEn5tzjf%jp5dTqCega7TbqQ%9t7EbxpO4a887wufTf8hz2yvRB94P2I:gC%MP4Qfkg%T36Pvn1%iH5bPvR%Kv7Vvi7%7n3q:sF9437RfZw%4L1ZPvH9HP7H:Sn%5PzA:ws84388:JH:fPyNP4081j:v:OyAJ70QALY9f0DcvfgBXD53wfT%%0Jmf4BDL0BEA42BQ8Q9wj1Ee4MtRMGEUEVKhWLFkEZhxc0HSkY8CBrGGIkThh7J9MXMCoGF3gs8xVMLqoUqi87E5AwuREAMTUQ:jC8DpMwXg3ILyIMqy4TC0stMwq3K4QJ:SkECSkosQhFJoMIVSR2CFoihAhUIKkIQR7nCB0cPwnnGbcJnxdUCkcVGgvkEggMehAbDREOSQ6xC4YPYAnGECgH:xEOBS0THANMFFkBYRXL:3AWev5%F2z9jBij:JwZIvyqGuX7sxvo%7McJfykHZL8gB4k:UIf0f3jH47%XCBQ:6ggEQDHIMgAuCBxAX8gBwIhIIoCox:6AgYfVQNLHp4DcR3XA3kcAgRkGyMENRo9BPAYVQSdF28EQBaPBN4UugR4E:QEDxJABaUQogU8DxkG2Q2nBoAMRgc2C:AH:wmdCN0IQwnOB9UJ0QZMCuMFoAr:BM0KJATTClEDuAqGAoEKxQE7ChAB7wlrAKoJ2P92CVr:XQn0:mYJqv6XCX7%9Ql3:oMKmf5EC%j%Ogxn:2QNFwDBDvEASxDvAfkRAwPBEyEElBU5BWQXPwYjGSsHwxr1BzgcmQh4HREJeR5XCTYfYQmoHyUJyR%XCJcfsAcNH2oGLB7GBPQcyAJpG3sAkhnp:XYXIPsfFTD4mRIo9ewPGvIjDRjvRwo07GIHful7BAXnmgHU5Mf%9uIK:HTha:lU4PT2nd%u9FbfpfJ:3%TwFeB17w7hZO5a4rjt5ON57Zjlqu1h50zuLelc7%zq0vCS7KTyE%7E9GPvIfd28Kr5QvFO:L7x:f7m8asBufFMBD3x1wZ78EUJg%%SC2Puug0v7bwP9uuYEcjqTxOz6eIUxOhWFgTorhd75%8YLeceGh3nPhtJ51McsOdcHUroWR4R6UYf%%kcIADr1yAa7HQhRu3xIYfuUCLf75giVvHRIu:yByOq9EUjhfaXI3b4CSR0%qMkc:xtJWv%bSZYAKonOgInKRME5iroBecsuwcnL5EJnjFoC0M0QA0JNxQP3zngELQ8nxJ4P0sUGkLdFYlETRe5RpUYn0iyGTBKoxpnS2kbQkwJHMBMhhzlTOYctkwrHTxMWB1:S3Adi0p4HWtJdB0pSGsd0UZhHWtFWR0ARFEdlkJDHTJBJh3WP:MchD6iHDw9Lxz5O5obtzrmGm05FxoSODEZmzY1GP80IRczM:IVMzGhFPouKBOILH8R4imkDw0nlg0UJFkLBCH1COodcwbUGuID0RdPAesUyf4vEl:8pw8h%lwNHPhVC172mgnz9DEI4vMbBzDzWgbb8uoF2fLCBR3z2AWY8x0GN:SDBuv0%Aan9W4HXfbXBwb3JwiW91IIA:hPCED4FQg:%J4H8:fjBlD34QVQ9pkE7vQOAyzzRwEP8U7:o%4s:fPr7voS6Z:4EuZJ9gjj9:MH4LLxIt2F72raee3t15frt9Xo6dLTdehJ0kbnJ9Fj5nXQ0uU70JvledDC5SzRTOZJ0jjnvtOE6HTVK%pX1yPsUdlf7k3bzvA83VvzD9:w9bbgdvgj4tj6SuMA:R7k4P6W5GsAreSYAWbkZgLF49QC1uLmAqjhoQJJ4A4Cy943ATvdIwCm29z%Gdps:ZzY2fs61yz6%9Vr%OfUnfYF1Mb0XdPp8vLSCPHG0iLv29I17S3TPuu50znpfdQk53bVAuWl1tTiC9ik4KvZed6J22DcpN1k2vvfkNiJ4vDWR%WL1S3obNQz65nTUe4b04Dx99K79DHT%:fJ0zr7vdRx:gXWmQGX16oEZ9meB2jbbAqL3Q4NxN9:DwXiuxFD5METcuaTFYvoNxeE6rcYWuwdGgvucxuX78QcA:EUHlTyaR%R88MgwvQkIu31jyMY9wYlSfiQJoH5LyjD%uYpEPywK2f9iC3H:mMvLwA2MZwB9zILA6A0dwQxNt0FqTc1Bw05eQhgOqUJoTuzCtA8oQvmPW8M2z4gDac:tg1DQDkOqkCwDttAJQ:aQKEPq0AuEFdA1RDpP5wRbD%IEu0%nBN5PtgUGz47Ft89wxfRPW0Z9j0zG1Q%EB3pPvkerz:kIJtAwSKbQYEkn0ISJpRDZCdrRGkoGkUVKZtFYCnrRUQpC0a%KPhFzCeyRW0mMkWiJHREbCJvQ9AfHkLVHHxAhBmHPucVQTwLEq85%g3cNsEJ1DNoBaYw:ABmLYj8JCoX%PImtvPfI3Lv9yBX60MecefJG8rjjxls4JkXXt3pFabagBRM2F4TU9Z8Er:U0BGR00wRx9LhEF3SghBM0iQQiNLADwXTUA%x09IOfdRCDlrVmQ051s8MENfcC9fXuAqN2F4JMNnNB8LZBwZF2hMEvdr4AS7bwf%Z23b9Adwf%2TcwvjE3Gf2HN0S9GvdyPGs3Y3v3t1l7f3dVOsH3l7p%t2H59Pd0%WR3UPkMt3a4rfcmuEg3Ibgctuh37Xa8N7y2XjeOdlD3pbYVN4a2LHe0tdY38rXROAJ2G7hl9jM4njZVOSt2v:lNtzG5xDepOkz4JPrleKM7SXlh%:S53vxiOpf8zTtKPXD7832JfJJ%FD0lvk59rL62vef%y:5X:w5%vr8%vp3:Xf73f25%zP%zft7:r37tv6X%97%Zvvv:jX74v4K%7P%6:pj:tr69f3Y%m795PrU:Pv6KPwc%237Q:ug%mv7wPmR%8z4rvvG97n7svaq%5X1dvtz9BX7T:N:%ivyrvkF8aH43O9b967u4PV77Tv0ROx28gvroPDV6cbup%j47IbnROt55rjphuVg6LbkR%cP5HTml%Ps5VXjs%VN48zlhOM15vzj7ea25O7nsOUv6eXmo%pO6Dvs3unk7YnrjO9C7SHx:%6X8rfw4fNo8vn0D:TZ9ar1fPY29%D2rfgC9wj64:Y%%4X2SPzs9R39IvW6:S:0Hf4f80b%API8:t3wBP7C76z9uu5B:dHt0fwT7Wz8jOwh:Ens%ftV7P37uewz:H7tnfyo7kD9OvAd:jLyNv%Q9I4ATfciAmT66wPM:d4FewHrB2IFAgpzCRYMmg0aDsIRCBDVFd0RvBmVE2MdKxW3IJoWqSPWFzIm1BhMKIsZ9yn0GTYrDRoOLNkZhSxfGaEsrBhrLMwX5yvQFh8ryRUZKsYU2yjWE2onBhPLJWASACTqEQwipxHwH5oRrx2%EUkbERLCGI0SGhYsE1QT6RN0EMAUgA2vFYEKthaEB9gXlwQZGcoBfxor:wocx:y5Haj6gR:W%FYhVPcoIyT25SRH9YAmvPTuJ4P0KimU9DIq6:QGK3v1qSs39h8sEfdrLPn3kizi%Jcsv:l%LIn6SSw6%:srzvuZK0T8Jyue:Kkq3:wlKgn9oSkh:SEpL:2pKDb9Nig%:cQnS:1LJ1:9wSZ7:R4mn:1dJcn9fCT1:X0jIf5mIkv%OiFw:v0fkP6vHqz%TB3F:tUb2:5JGu7%qxj7:gEXAP9UFff%rBPf:g0StP57EHf%9w4q:n8N0:0PDHf9pgog:UMJ1fzmB538kQaC:EgFifwRBLf87wIQ:ekBlf0DAUX%QQAd:6b:GgAz:zYB6f5tAsb%ugPJ:hcF7:58BjH:3weH:zQJ5v9wCkIAhguLAGsMtgAZDbcAiQ2KALkNKwCoDZj:VQ3P:r8M0P3jC5X8wQoZ%1kJV:mvB033yAX79KwDZvJmAZjvAf%f7Ib8iukB%m7mefdc4:b0aeCC8qXdJPAc2%jt2tjX6%XW:elC1WTo9dMV5::SGOZk0nXlKNIv5UzSS%XU0svlvNOw5vzU9%eG1pzpSNiZ6yra4%0a3G7wBd4s8%DfC:ah4fz4QuPx%77k3v4M5roBJed:BP:nKgeS6LsJ2%gxDNzoig6Z6McQHujnEnfn6RSy5s0W3%WRGArlNBpA5LUbjOMQHfbiQx6F4kofP%IkICfi0SA94lMhg%KsIfTi3yGN4:MhTOTtISzl2CEr5sAhR%ezIYLowiHe6f8hYet5Ig3tPSPi7lMk3:C:Jfryficn9Y0pVvfkK3j5ei5%%0UxXv05NBL:SDeWAGM66gF3PQ8Dc0AKBEVD3wTcRZEFLEgkBixKnAbYS:oGME0:BzZObwftTooHXE%TB4lPjQd8T3kHPE9bB9NOMwdJTgEHpU3BBvBMbgYvTAQGZkt:BZdK3gTASSQE4UhWA:dHegL:RpIB9kWeANtEl:%uQ3P%bUIm:RdBqPupP:T5ID4N%HY8%fWoOsLztDhy8Zo2Eu9cNKbs:jEy6ocvs%f9LCvlaSqX4tMn%d9FJVPdyiKs2msgCtgxHnfVIxz%0kcaqdChGITOMheYzPoV7sr5FJDJLBSCyJATyMcfE2PH0hJQx50Sh8d1EvvHTRKdyBcSWMnJERzKWRHWyr8QeMv1D:nL%A5RzMENecxPDGrMnQofzKsIkMt7BrbKEwSOyX0BFcjG:k:G:ftBxDH598Fy9n6:y:PnvEjxRrrz7qu31uwptfnqz7Jk6amwHui:ri3nGa2W5rqrW%aoqn7m5Kn85nWp0uddqfnooalp6kGqGOw4q:rtfawC8AGuIPKwr0T0erFa9k2zUPgctRX63raa%4u41fwbusH9hrtd:sC8rf7Bvbb%f76A:va%Ef4mv3D9FL%j:Mu%r:tVvpn6wr1i%SC9Dfh8vJj24bsB9Vq7RfPsumPxnrpa73W6Ku10utfqn7pk6Pu61uWLuzLjU7yB4Fe9yN2ZvhPbGMBt2NLB4dXEw33T7MVQ0UbIZM:QysTNhc11zGHQe8tb09bKaNaEynvZgcqH3MzKgd9fy1:iNcwb5UfNsOeLzh:q9c9o7HrRj%4M05bwodSA8jHWUfS11wv2Ktmw947aQfng28D6H90y:Ezemf1l3:z%a%BhAF:hzgFA4kYDEePMBNbjXQaQ5PQHReWMCfjlHQur5qMMX%cdDhbokA:Q6P4QkOlsEljq2hMu60QVFuyjFhHt7hcg7h0ZQ%8tGnXwHhu08fQb%:K2HEj0aR2a9RIe7va0HkX4Tx%d%eEf9vpoIE784CCn:UkhAP%gIVoA5iG1AR0iFANIInUEayLZBY0iPwe1IqUI6iIKCjEjaguSI8IMECQKDq4kPQ9rJVIQRCY%ETQn9xEvKHESJymjEg0qhRLQKhESYCtGEbUrIhDHK6UOlivQDCQrowp3Kh0IkilCBXsoFAI2J5v%xSXe%iwk6fZtIsjyiyCG7ooeMepwHNTlRBp%4Q0YOd3XFRHZrBMT1ZkRStGoD8DN4g2Ayk0MkMfrCvnEvQm%wsEI4cD2B2C:Wgc4vu0GY72tBt28lwadvKMGm7zFBs%88AYtvRYHp70qBzO%KAfDvg4HUb:dBti:lwZWwD8GzMDSBT7BTQWvwasEI8LmA5rC:AIXw%oBl8O0ABfEXf%UxOv9B8Vn:GrF1vq1xUL55MWv9:HFJ:bZxa70m8VK8znFAvK4xNrwHMTX72:D:O64wk7uBMLQ7V3BhO3OwGvtZMCF7SrA0e0swFDucsAB7wPB5O:iwfjwDMM78n:Ep:MyxjL1HcjR9jnKePh7zBn63M6u%1HRMP3O057%Rdb5:6rYQwHw2n0CDN2qA:beywSq4N4FJuLjBmzj2Ad%5LsIYuWICR7mQAq75uAKPedrC63n4wsN6E4MYuivDLHoCQ376F4NRemqDY7p5Q3Z6QcOI%oHDmzq4Q2y6pYN8uooDS7rngxl6:8Ll%tOC8XrjArs67gJBuzPCA:s0wf:68YG0OusBX7rjgQH63EDbepcArHpVAHc6FwA9Od3:wPnqP4U5vP9MeVd:Wbk7Py646b8OOOQ:Obir:zL4gf96uKZ:UfjaP7h43T:tuS9AMLlQgL%5v8DY%jwBeXpDQh5600KD%2lDJruCg8I8G0RT:HAE2Py9hU:8wQY4PPgGUT0iRts9P0cWvRAHhH0VR%T80Eg5:IFIRTyoSEm8RMiKPBbIijveCIz7msiWO02IqHs3iEc7Goh0uviIMzrUSAS7MEfqOw%H5Pt0R7V7oMeb:BcHl:yXx6i9I0eMvfnHgb6bh8T:SEgTQADIagDFCIVB1QjiQq7JPkNQCZWEdMnlhRkKawX5SqPGkssNR2RLZwfty6:Ib0voCOkMEElajGnJgwy1ieDMtAoxzKYKdQyLiqoMpAqQzK8KqoxsCroMGgqBjDjKREvISkYLiMoJy3rJk4sfiWYK%AjEisYIsUqLCC2Kige6CoWHForABoFLPUX5CwAFu8tMBQcL5ASYzAuEbwxFRAiM00PkTTZDgY2uw6AN%wO:ThnD3Y6IBDjOw4RNj0nEmE%YBNXP7EUDUAQFn1AcxepQNAYl0AcGk5AThvbP14cST9GHaI%Ah7yPZAePz3yHpE8KR:tOzsfWDssH9Q6Ah9lOsMeCjp1HsU5HB6UOb4ddjleHWc5AR1jOascYDldHFU5Gxw3OeQb:Di7G504nhsZOJAbcDeTG6k2phvFNc0byjQHHLYzVByIMq8cPjEUHdYvfh1TLuUduSxDHhArkh5fKdEesCf:HgomHB9yJC4f6iI5H3UhQx8SIFIfwR5rH4MdlR9aHNIfSBsoIFAamSB0GSchtRjRIRcYliKZF3UjORdpJPYWbSXLFnwmtBaOJ6oWmiipFpUprBZzKqwWKyujFrMriRYDLFQWGSz7FfErehWKK8wU4yr0E:sp9BLQKNERYCeNEKwlKA%3I6ANhiHxCyEfGAqTHBII6BniBSsXjQNpFB4BrBGi:v0OKfxmDMH58Al696EHXvWBBXjzlwPN8eoBYvCAADjvXP9M7oP%nu32:SvttP3z7Lv99uwK:jXtnP6v7W3:X%54ADvvtwE28CQDP:G2BEfyZgY:8ywIHfQACtv03At09bsN5:WZDy:2dBFG9kYTKPYMFc:1wBY29VkYX:TQGUzzHRsH8jgcnPAbHRrvxR2R7TUeE%xuHq3qdR5u6VIeYegMHpHnrx0F50cdw%bfHM:mhBwr50Mc1%cnHM:oPBwR6owckusgHUvtAR4v7zQfNPG8IFLzmyKC9cwkwfdHJwz6:yle:OYssP7sL:gABDMqAx02NwUtORUHJzy9CAE:KgqvQV8LJkRgDFxGNA1KSOEN6ElvDjNL4g4qTD4P0EyIDyZNvw8zTeUP:Uz5D4pM%w:gS%oPBkvEDwFKiQ:XSDoPjkfXDitGYg60RNkNLUM7DZpBhAwBQLILYT7GCrw8wgkSO64IYjmOB6s3agbuNUIFKTQVBF0y2gKKMIkBrC4ZAMEshf7HKsz8uijz%pkmAfllJAD3HyL79M0f%vJ0HQTxHBsa78sYPe2JFm7rWxSr6UcS9OdSEErmfw6v5NEMJ%NJC7bh6Alh4KwILN%TBx3emQY13bwFdtz1BOLbQAR525cDPNvxAinbRwI%25EBctvHALvb5P8L3Ob%UdzK:X3ck:yE3ED7X9zS%QrcSfiE26b20Nro9OzZEvPX2Cjxj9cx7xHWOO1a1EXrbNJj6UvQmuf9zfLljstv5AzJFuOGxunhCsTo4KfBFOBsv2vfYr3t3pC7mN78uWvepbhi3oi3e96ltrPe%LUF34K1bd9DterfPbV44G61FuHUtcPhZrZ84hy3PuPptwbkwrjO5J%5keV3ukzmRbv75gS8mueuvCjoPL2i6Ka9BunlvU7p87126dC9d%l9vUrpBL3o6G68S%jLu3DnKbtV5pi6:OQlumjj3bmi4ce5sd:ruaLdS7qA2%q6WtnGuz3X4bw31Tq%VtPRv6XRpMEt0K:D987sxQnOUchpzdPKG81nzSLNBtB9zarSKs5S1STP%9di0KXa29FL3YbT599c1XPiVNfr5GjZSeeS247pyd296wTg2e064unvX%Tv8Wrm8fNT6O71Eurl96Xr1fkI7bj7O%6L:T7vSv8T8PAAvvB8AkHx7wOh8UsF5PGVBg7y0gcm8gcJNvI3CkTyYwta8ogMf:KjDbfyrw4H86wPbvOZEO7zeRGG9E8SOPUdEwX24hPr9poU7Pc:FQX5yhUx%jYWavuAFqn8qRbo:bUWIf%sFk4AlRZvAXgWgwJaFooDPRaGBCIWeQUJFmQG7xVHB9MVIwi0FfkIjhXHCWMVjgoyFU0L:BQDDMMUrwyIFFANTBTjDRAUZQ7WE9UOoBMtD3MTag9SE4UPPxN5DzoTPQ88E8sOOhMfDiQTNQ3sEg0MhBKnCucRBgkSESsHCRAYBdMOzQJ2DU8A%Auf:V4KxfqpCMb32gat9PQEg:H2AlLu5QAi68T%:eeY:OrkZ:rw4Tj4Ft8R9mLc%:Pa2f3xg9cf8GHVZO5209HsxdFm603QHuoLz:bo:83o5yXN7eZ8zP:lAcwb5bXLO%SYy1njqstv4uvLeeFWzHDg6MxT35rNId5iztzcOc%K2xbQLtry0M7Yx9Fs14:SBtZD053U3tMt01nUttGr1DrQ0NS:zsLUTc191O3LAdSsylLTlMl10q:IctEFyFbQnMcrz3bHAs6Ux%jM9sfty5rIHMt8yYPKmcoqyu7LF8p1zVDKJ8:XyvrQrMvj0tDM2tRAztbW9s:W2OvR2doW1N:ca9bp3tzY8%Bf2:ji593w5Gzg0ubn4pfoUeU66qXnu%vd6Rzt8%tg7uDtjO%f76TwKfGr8X3yoPKY84Lze:RO9Cn1APWl9ZT19vUI9iD2WvYp9or2F:ab9vH1kva69XX2ePVM9jD1Hvbl9PD1mvTH9VH0ovUH9H:1vPNZ9WnzLPUL8:T0nfKt9B3yV:SJ8fLz4:B98yvw%fJk72TyjO6%8aXtBfGp7Dzwmetm73Dqi%4w6bHt3Ofh7HrmIewS5XbrruPj6lriauoi4Q:qDeDV6Sbfw%ly3tzp9d0n6rHdqOqm3WDr0t1P7C:ece263sDua9818Dzgx:Em4W:zI%Io9Svj7vY25L74POWU%jLmZ:wR5y7%0efb:2zoXwHj6KwCNum7A2rpiASC6RQFhelmBXjphgVe6X0FPulTBR3pDwUF6bYE:OhPBA3p3wNA6W0DnOn9AiXqmALg6kMCzesGAurs5wE37usBr%8XAlDxbwIW8:UC:fSqAwL3jAQi%ZoFWfvOBqH9Igj2:40JVQIHC7kEiAwgBwoOiwmID:gL%xBoDl8S2RCuE0UT5BSmFfwV8hfyFiAayBckHH8Y9h0ZGYwfmhnfIAMa6SFSGqMiiBoHI6EaECOfGrgigxr9IVUa3yAcGmAf5BmHHbcZXRuiGfAYsRlPFuwZjhNcGr0QBhvxDe4bOwsXHakIfh5KBiEgKQT4IUsC%CO4ABUmcf88KHj%XyrO:W0sc:1eLmT9LTCe:dwxGv5vM8:%7DSw:1c2sACwN8IB9TjcAhw68gMfO:0E9Tv2BZo82AYMPZwHTT09CGM9tAhWPfsIMD0QCfs87wjAPJkIhzwRCFg8XAc0PIAGHzyGBRY8eQQZPGIDJjxNAjo8RQFVPFMAdjyA:5080:7LPFT%:zwF:jY96v1tPQD%mz1E:rY9sf6zPUH:hT3q:yc9qACRPHMBwjtJAro6IwN7Of4DBTjVBF02ogWHNF4GizIDB3UwjAdQLvUHKCw:CAoqbAj%J4AICiaBCDIkdwh4ImoI3iBiCGUfZwgOHn0I2xyrCM8b9AjrGloJLxrbCZgZdwoiGSsLyBjxC4IYyAxNGKkNJBiQDgkYeA:6F1kQ%RcrEQMY5BETGHsSIRjoEiMYJxMNGDMT2RcOE4AXtxIEFy8SZxZ3EbAVjhDnFHMPERQnDjQTqwxQEgQLZxE7CXgQWAeFD2cFjQ50A5QNiQGdDLD:rQvx:c0KVPwECt76WAmT%c8IefhtCJL3Mwjl9h8IdfYqCEb2Twhd9ocIvfbICGj3DQlf%FEJo:mSCTT70QkQ:REKNP9TCpkBlwo2BNcK:QYNC98JMAvJDDoLqQ8lC2wS8AoDFZoKXxclCnQZkQk6G98IqRwPCL0dJQd1HiQGzx4VBdAeAAR%HvEC4x3yAQwdEQEKHFcA8BrP:9EZg::AGHr:0xe9:xkXUgCjFkEBfBaLAq8WMgQ:FzAGLRh5CHYZ:woRG68N%Bx2ECEfRBOFIQ4WGSTKGNYmeBuyKRQeoSyeIJcvFCOHMnAlZTWrJyU4uSnAOpArMD0lLXE:ci59QXMvUUMoMOdElzA8RsYwS0e%MBNIizCUSDUwz0jHL8pIRy%KSLsuGUgnLn9HjC3GRuos%EVDLB9FlStBROQqZkMuKpJCdynJQb8oDkEJKGNAUyfIP5smOz:aJbk%CSU8Ph0kwD0PIzw92iGtPHwgDjz3Hls7Th2TOn8bszmMGbk4cxejNzIVbzbMEh01RxCtM6sNIDIDC3wwXAjHLsEFBi0%A0Qr2gCHKZz%1yeI:Domofq0JOf4SCNa9:kh%vXIIMP0sx%087kexvLYHffxDB1B8VEcofCjGxbw:hqi718aR%:DGQTvJxnY7ocYve7fF6juKxeO7mcWYe6RFRXuqBSg7a4T:%ynEi7slBEy63gQEupTD9XoJQ6C5%0MH%aqC6:kXgox4wsJp%G2BxDgYwZt3hgFw9zZAxjbqwJ02ZEB4deOAGvWpv8a1dr%%NMs:gjTnv1L0jH9vtHp:FvRyfwa0dP88NAL:dTQc:280A3%otDc:oTQ3:9j0BUBQ9B8AifQDwQS0MUFAtCSB:PPZgngzzALw8:cDJjPVw5fz5EPF896EMHOCBFezjQR7836EHbNWBD1zFEPcczpDe:LKAx3yxYKE8u:B8vKLwWqynYCuMqh::3KwfyAy%b5Rswf91PNevSqzgXyStDK7zTS1O1k1Cjs0dbJ6nHZuek33PXoFt976AHiRejv5E7o2eeT6LjqDumL7brpTfCQ6vvyiOuR9ZvsCvi:7WD67O6N:Bvwjf5G8VsAZvL6AXfzbQNx9LsEUPXtBQv2DQed9iIIAvczCTn3RgpC91wLIvd3DN:2lw2A9rsOEPbfD5j1AhEk9SISvvQ9E3H0VBRG9GgVRPR5FnP0iBfW9JcYb:WjGT:2qRpE96IbefiEHNj5Rh1Y%%Ed8fxSHpj%mB5GALUe8wGtHpgDgB4uBS8erwa5HRQIHB1YCVkccgp1G2ELdhogDGUZsQxOGBYNOxdVDTcWdQ1MFX0NgRR1DdwTZA1hE08NEhM6DewSKA3tEhoNDhMPDUkTBg2UE:sM5xPrDDoU0QyIFKkM0BRwDBIVIgxPFb0LiRU9C74VngroFd0JARbzCAAW3AfcFZIGjBUUBQsVXwNVFHQBaxNV:1ISBf0REYX6sg:a9z4OB:W8DA:yMgv47qMJyesRCIfofgY85e0E7uFgA6fe2QFt21kASdjj:kLVeP1g0hn8qs:I%ijNhfnhylP428gv9x3HF:asxQf1i8T3873D4PJBw7nxGMN98D7DKe%vw7:tZcRC7FnFt%qCxiXp0seL5zrJ6uWqykDkD8yO4lXN1eBszhrfRM9j3dPPudsT0CHaAtCg2KLPONf5zuvVD8651PDMpdOoy7HSQ8rh0dDIOdFdx73Q9sVy0KjEWNB%w3PQg8LD0L:BStE5wQfS98D90vrAKtRGwYzV2cEb17DC0djHw6PaGMWI3JzGd95MyGngIcpW4hTMO%QhzhLmQdDV523Sgemg1A7r0tZ17PrYr%0T27PuFd167:7e:u:I4D7wc%I98PvjBPBf5Z3vnOYX767nfu6U6N:tTOlD7dbpsuwz6i:saOq863nqWutt6gjrS%rF6hvqjurk6WTqsOlG6oTpNepn6TTqXulG6mnpbeqL6ajqwuny6gjqQutY6o3rq%rD6:bq1%sy68HrV%t%62DrDutL63jqGOvC6crq8Ohk6gjo6ekO51vpBua76PfkC%jp407n6eKI5gHivuU84fnko%BA5D3gnOMN4BfjGOC34l:gguLm4H3iq%Go4q7iBOPq447jVuVC5OfmGOWQ6AvmQ%oU5:frKuij7UfpQe9l6szwgOtB8pPsm:Ob7dX0l%7o9YHv0PZY8Ib3GPEH%L:xUPhL8mP4vPJD%BPz%PdS85D3fPMZ95Tzo:ad8zv2mPPt9YnzwPVy87b1WfPR9ULzEPYy83L2MfP09kTzlfdv81T4t:Mv%SH0Ivqv9Cz7ZvVK:En2d:1e97D%p:jw:yn6MgHn%28C4:2fAxwAvQSQAsYFOwW5BhQImwcSC3QIKQ5KCUsRIgpnFP0KbhfYC0waqwzvHG4NRh8dDkAhtQ7RIjUP8COhD5wk:A:VJEgQpCSFEA8kshAjI80Q7SHWEHggzRDRHrcQBx2aECcbfBA%GWQQWhdcEIgVahDSE5cQRBLsEOcQcBHCDygS2g4VEzAONhTFDYIVlA3wFpcNcRjJDfYZIA5xG5UO0xwhDxAevQ8fH2IQ%R8MEZ0gtREMIVYSSCHrElchbBM6IdQT9CAbFIIgOxTkHzAUGx:3EykejBMWHfIS7xsoEsMaMhGhGRMQlxjQDrIXbA33FvALaBZiCgMWzQjGFToHqRW3BakVTgS:FQoD5xX4ASAWHgFmFoUAuRYxABgXIgB:F1gA6RfNAEsYewGZGFcCwhhXA7YYbgRpGI4F0xesBvAWugfDFbEIUxSJCacSQArKENQKxQ5FC6EMlQtoCsYLJgjbC%gF1wu9A74LsQGVC9D:Ywsk:jALsvwDC4D75gqN%uAK2vn3CmH5MQse%ZELCPkXDBX5xAw6%ZMNbfl:DqX5gw:Z%ZUQBPqvESP6yBI0%tgTMvrXFB76vRX1%YMWt:khF2b5kRf:%MsXhPjMF:T3jxdO9xMXk:ZXFsf1XBXv9CMUFPSvEkDzBBF%8iMP1PEPDUfxzArX8GAIgvDQBUHwJAMP8GkA6O%r:cfv9:qs7174mO:t9Y3vsvOM77rxlu8P8Kvvu%7J78Tt6%8w7QrwBO0d8EHtGvDm7frv8u65713wV%8g8tnuL:RI7nz2rO33%BDtj:t57C:%6evFAF3rPQPT6oUFR%qNB7fpSAkj6a0Kjei4C:nnaQxt58YM6ubXDHXmqAwQ5kcMvOXCC3vlKQtP5YoKOuX1CULldQlq5RUJueXgCDfm3Ajs5hEJ4OeFCRzpOgql6jULfOx2DKDu:A0K8cQPrvPHEYH2:BNy%VkWcPzSGGn:XBtLAu0dBQV8IIsHAiPSCXkl1wvdJ5gNKCoZD1YsXBBjLmURRzA3Ev4x1BKAMzsTyzRvE9k1dROoNlITNzcQE4U3uRKUN1cSYzf0Efc2lxFSNkQRezX8EHg0vhBSM4cQEzJREMcwGRB5L9kPNC6ODwEtNw:nK9UO7CpqDhEq%Q1XKYENuygCDToodQzPJ9MLcycSCx4nKgrIJhUJaSbSB:klYgZvJcwExiQVA:sjRgEJI2X:8CF5:bEghftLH4:5wB2d9xQctPVJGt:zZhgn8nEWlfByFDTvdBIM7n0QIu2ZDnrszgwS7CUL5%uiCfPrSQgr7BwHhuwbBvfsQgV07Y4E8e36A2fugAPP7hsDJO:FAmHvegKE7zYCje:2AXzvtgFS73MBEO8oAbfu0QBH7moAwe3u:yPtWP9x7Kb%ruvX:d7q6:wK6uD7Oum5%nPodPm65xH4EeeQ9nfm8:Tn5TrzX%Vp8dnkie9R5KHtxuO96zjj6%mp4jboHOKu5pThYOUX4Vjkp%Ce40fgPOP43zbjt9%P437fR%RH31rlC9:D5sPeeOhu3m7qDd6W7KTd4u473T:x2tye84bc7PVF3Br4GNwW%v3b0:vy20P99Ntc:gLcFv8b3Gz:Qtxf:3rc8v7F3Cv%KN0U:aPduvs43in65d5w%KrfnvaK4ML0iOHo8qriHvH142zvc%Xc7Svncuwk6TXrYesn6uXtS%mt8KXosvM16Or2%%dK%vbnw:0l6EUBg%jABAzpJAi66WILiupuDnTrPBF27MgTi%0PFq3uEhjX79UZA:FeGyjyshw:89gdPvTXHh71tB:Z9Xcga:YnIdP2yyEQ92wiJfcRIxT3wSPh9oMkj:ZaJST2Ryam9UonG:VeKIz0fykE9KcqjPPPKy:z7yz38gIu7PIBLxLz6i9t87gw::NsMcT0BDK79YAy3fbbMib4EzOO%SEzCvsBM5P8rzIb:ioymf90MQIBkzBNAo4vcwNvLnAEPS1CBQEs6QXBKmUGgSm6Bkco6gYaJ:kGASbrBgglxgY5JJEGoCNTBkcjEwY2I9oFbSOtBe0jlAWuJJMFqCWsBcwm3wUOKCsGXSmMBqoq:AblK3MHAi3rB:UtWwizLr0INi8LCXovQgl:L10JRS9dCdIuPgkrLv8IVi2eCFgsFgg2K2QH8ymEBpUocQUeJyoElSWsAv8j%QBiIhH:wyD3:Ckfr:qUHT74Bhyn9X4a8vL7GCbweBdO7fMVdOpqFKfn2hL05EIRaeKgDxXg9Q0D3j8MP9yACtHatgjB2eEGEtkBBcfYFQPe2BoBU9kS:x3a%vwv29b6e9yq%PDde:Z831L0DOE38pLiM:D940ruQ%V:7Fjm1Oo050Xp0%fS5y:oeeZI6DrlIOga5LrnHeMf50niWuak4XflMuGE5PXgkOPs4KriFOHd4W3hNeH14bvgreJ04JjjZeC75I:gGObx4LTniuGP6VbipOtS4%7teuRi8M3l9fJF55j14Og:%Jvq2:pv7GH9Wu7E:1fw%wFg8v0DcfTDBYf2Sgee%I4ItPqRCcb8UwrR:tkK0QAlC78COwuWBB0LTwbOCuIHUQpKCawJggrlCIoLAwhfDA8HBQ0TBn4NGgXLDSoE7w1MA%0NgwLGDdEBfQ00ARcNqACYDCgABgyx:2gLP::ECs:%Hgpi:nwJ%f3dCJX9RQg5:bIH5PwkB5X8mwZJ:BMG%PuKBZz7%wQu%18EqfqwAwv65gJU%foBh:jpAKv3sP:G9lP%3fXW:Pb0QfsX9J75QvP293:yT:bT8bL0RvEk8%PwqfGy8EXwvvD97g3x1e2f8dTsc:IA7IDzXOu%9O7qH:a36pj3t%oe%evqpfpP6yX83OuS:Yvs4:5W7Q8ANu4OASbv3QEh8HoCJPHpAizyMQM481kDRPRrA031bQNN9mYDQPdXAx34QgPh%CkDhPkNAwL68QJa%twCifrTApD63gJy%gEDMvpBA9P5ngNd%RcE1viqBEn4UgXA9wkGSffMBvL2lgfJ9mQI3fY0CTj3BArj99MK5PieCz36Ywzt%x8N8v3PDUQAcg7cAggPrAWRD6cIDhC8C4IQ2A7xEOYRXxHTFM8RjBdDEgIavhIpHD0T9h2:E2QfPxRxILgUHCEmFWYhiBVTId4V6CAqFi0gbxYsH7QW8x38Fo4cTRcOG6cXgBkMGPIXfBhvFvcYABV:GakTGBpuEscaTxGQG04QdxxoD3wdnw6fHvEN3h9fDTMh6QybIo4MDyRMDIklIwwCJxAMcCgPDMkpHQwAKzQMCixPDN0sagxyLX4MxS2IDNkthAy1LW4MYS1EDOosAgxbLKQLvSsmCxYrhAprKroJwCnGCBUpqwdsKGsGxicLBSUnkwOKJgsC%CV7AHAl6:7yJGP9fCTp%w0khPqfIzv5LiMV%LQiGfcsIk72lCG39ekgWvUqIDf1Vx9L9XEelPV3HQz2aRyr9kUbafcHGj34qhgf%ScXBPp5FeD6nBOq%5ARVvxXD9v8%Awz:XwKWf3sB1D9UwUc:bwCxvwwAFf8uP3c%1:7X:sv%er6M:eF%nf1NfoF9P:54vLo%RHy8vmN8SL6TPF6%kDx%:pY8aX7hPF1:LfxZv3l8XP%BfKV:xHyxAAE8vkB2vErA5HxVQQo8XAFo:B0BgfwXQdb7yMIqu7CCP3tNQlf7XYJ1eyCCWPsVQkJ7OsIxetCCJXrWQd26zEGauvMBHDrMQOL62QBvOtu:wTsV:1d7Cn7wezt%CbtsPaD7X70y%1n8vftfPAA7s:u4%1x7aHtcew97dzru%y66yHsDexw69XsrOoL7tTppe:o6JXx5%fK89LmMvas5bn4eORL%zvj1v384UcAw%CPApjfoQSA3nUGgt0ECJ:cTgnY21QKLNsbC53aqQsq2gUM19k3DKXZRgyZ2TsMuNkeDAPa%Qt72tcLHtvAC%vbvgvc3NcL7d0RDB3fbgxp4OwM1OGKDWDjRA4N5RgP3uYCENDoAhHg6hgSC%1DE0zvhRSf8d8V::NQF2f22BjS%HYaNvspHIv97B3E:7wf2AGUIb0DbSNsBUAl5AYIJyUIvSg1CVwqGwrhK%AKRy2KC4ouHwyoL6AMmzAODV4xZg3wMacNTjLQDXky4A11MtcNRTK1DfAxfA17MSsN6zDDDEQwQQyML6QLyS7rCgAuEwo4LRoJeCwDCMkrzgYwK4AFtCocBFYqpgIXKiIB9CmQ:%kp8f3uKUD8:Sl7%gsqnPgQKp72AyqA9NwpQfKTKefvICl57X0oAOumJ4jomCYa5lUlv%PfI3vhPCJU33UgTd2THmrbnhyx2aAaJ9igGNLWoxa61bAU4dTMEkrU:RDw00gPzdOzDdXTQQz90:YKONTTCXnU1Qi21PsH59RABwHVoQb:1BcG29SfBZDUMwUf1M4Ei9NsBNvSBwQZ0pkDUNEfA4zQkgLWz%4BN88vAbHOUABFzkv:8M0c:rHNwfyEzTb7aM18%V7NmPdlzY31fc1l86XNKfHazePuFc6g7FDObOqFzlforc5t5sHOwOTAzmDjp85Z4nfOuuE0zorh4s3N4YXNhOIgzarjt8w15UrMGOfZy0PpYsuh6%TKHu5eyqTw0ckd8z7JdvWnyJ33EciF%YHHJPv8xnT8hsZ0:SPGJv7VxY3%ocWu:orFkP6WxTj%zMWq:THG7fzNxgP8ocfz%q7IwvnzyXb4acsY9wzNsPXWzkb0wtDg8s7SgvH81DHwTNfv7sPZve1j3J3sKd%S6xTinOoe5cDpQOj:6HLrW%is7tbn5vFw5xf1K%c3%AXnO:v:5hr%F%fLAErnSQOT548F7ueeB1Poewm86CwLIum8DIDpNA7R6Z0PEur8EEDqVRJa6qcTX%rxFE:qMRYs6mYX%emPGLrprBl36cAaOOnMGwTp0Bzk6M0d3ejCHvborh8y6Y0gk%lbIRzqFCLN6rMip%sxI6nsiyPT7b0jI%:FI5XwpCMm8lojzfPsIoT1WyJD96shAPnfILH69x9O:PMez:3WHSr:ohxbAF8bXAEWGisC0BjHApkXNAN5FnQDeRWPA50UjAPoE3MDXRNMA:8SHgPSEu8C2hLCAhkTmgKPE3oCOhRjAhMVWAIPFlkCIhdoAj0YhAJRGasCUBraAi8bDQPkGz0DZxxlA7IcfgO9HIMDiBxuAxAcOwNbG%YCcRpqAl0ZxQEsGPUA7xb5:7IV0P6DFHz9ZxP7%2MSTvp1EXP4lxBr9sQPNvTzDtXxHw5N70UNo%xkDODpewsO54kKN%SNCWjhhgir3nEHDtxNBpvZGAVf19IDZ9V6ArzTEwFo0p3:cNEa:tnQjvyg0Pr6wdBi%THRyPfk0TD2ytKb9NPTDvPw1InxEdYP8CfXou4n2EPtBtn467zZxupG2rTpotrG6NDaAOjV2mLntNrs5nbam%Yi2m7mvtln5lPZiubm2NvmfNhg5xjYG%i:1w3pc9cx6jjXg%sR1:zsAteU7gvXSPAu1xTya9f188DX6fUs2PD3rtgE%kTZIvzu2UT%rtpkAITbfgJy3I4EeN2SBpfehgjO32gKHOEyDH:i3g3042cPeeXGEAvn9hGk6PUSQOrDE9vrYhRv7dkU9%4vFXDwaxXW8ZQVJfOtFVn0tRVw9akVZvaEFTj3RBXl9%UUbfhsFNP43RMa%UATR:mdEmD5%RFp%VgRZvm%EFv5KxBI%Z8PMPkZDxT5mg73%CIO2:iuDcb4Pw25%NAMtvhhDL:48AvT%H0L8PgHCxX5kQo9%RsKZfmiCYn5JQmj%Z4Ir:kKCKf5aQeG%bsGR:kFBun4TQVo%JkExvftAwb3TgMu9r4CSPU:Al301gF284sBnfJjAdjxaAEu8Z8Bo:AKAjrwpgL1720D1%9VBOLvVAUX8F8Gd:BsBwHxcgiy8WoJhfJNCnXzFwt69MMLkPVPDK72uwzQ9wkN8fg9DQn6Xw0S%3cNBvyPDd38rw2S:d4NIP4gDoL%dg60:t0Os:5QD37%yQ8U:kMQd:27EKv8MRG3%6kRpfoqEoD5uhJV%F8TNPcaFCr26hRH9csVmPS4Fir0qxcK9KMYQvScGdv0lBra9YkbQfd4HAz5Xx0z%zweq:0OH2IA1R9IA5IgSAZGIU8J8CFLDJAiLA8kI%IRriNiFC4koxaoJKAYISVWGp8lxBsmJu0cuibXHVknhx4CKAcfryheH18pkh8QKqkfxSqnH4Irjx9KLGUfHy0pH:0t4h7gLpAewi86Hp0w5B1rMZAdLDJDHeAy:hyIM8EcJzSMHLw0WxxLNTAc0zUIHFQ25BvPNsYbRTetG7g3mhsqOI4bmziFGww5gBt4OXob2TlxGyg6YhtaOkcbaTodG1A63hoNOogaoTkVGhE5hBlnONUYqjcJGOQ2IxccNigWVTUaFY80:xPGM9oS9TKuERgyfxAvMVQPOTAzDjgvIw0uLisMHS1QCwgsmArxKgQK2SmWCcIoTQmuJykJnSYpCY8lTAmBJJIJcSP5CVwifwpCISILHyDdC:UerAzCHYcNhxxpDkEbSg:uGSQQihjxEA4XqxF5FU0SyRPVEgQSPxMyEIwTXA67E40M0hPOCtQTJQnLE5gHwBMqBrwT3wTIE70D7RPKAi8UCAKTFHkBGhUZAcIV4wCMFsoAcxfDAHUYvwCOGbIAtxqQAOkbUwAdHfX:SB51:2Mf1P5kIBH%RCEy:fshO:yDIjT71yIp%vIiJ:nRIjr4cSJv988hzfbpIFr2vx8X9lMeAPanHA32vxo39qAYcfZQFrL22BPy9j8RLveSDmX33QuV9zAJwPeYBuX3JQQC%OMBE:je:xL4Hf7496X8wfd8%2j3ovrr9hj6Svbf%Yj19fmr9FX6uvP5%r3y1:u78eP8uvAP:r:vTv:M7pIA4%3RAQTtAgMv7B4EZesiBarqCwYD6toGeOmSBxHpNQjV6MkIxuhUCeTo3Qks6WoKmOkBCybqpAvR6lYMlusWDXbs4A1t7bIOee6GD5LvWhCx8C0RzvH8EeHyyBLn85MT3:RcFMz1JRW19u0Vofe2FpP4fheS%UUYn:oOGbz72hnr:KwaMP6JG4z:cxwAAWwdjQJ1Hi0EjR:ZBbQghwflISoJHiO2ClkkHwyPJV0NuiZsDtAnSw:LKPwPpCmEEFYq6hDdKjAROCtaEWYrahFmK14RPCs0Eecq6hBrKn0QyinrDwopNg8vKF4OQidpDUsmWwxQJToLWCQJCmcjzwh:Io8HoiFLBtIgBQUPILwDWx9uArceGQEmHrr:px1S:jsd4PzeHGf7jhzq%UQcafj5G%T2pxtY9UUbwvPNGh3yORpq8IQZqe6qGOPsphcf63cWa%kdFc:nnRNW5vsRBOVAENzjdQ7d4qUMBeLZClPhGgnH4HAHX%DgBRvgbgT33xsD7d:oAfff1wAO4On:K%Af:0fgef5b4PX9YeCQ:VLgQv0o4AX93N:S:Gvfn:zW3mX8Ht4d:Evdvvtn3ED7fduf%pra0:nL2df4Ftmq94HYSfYL2LT0r9fu8mnX:PAy1%XuAtev7NTWY%qk1gzobda15S:WaePp1TjhmtUw30HVX93c1M:bZtSI2tzTkdk70%zYgdKa2KzRm9i90O3Ytc%L2ZjOcdppzZjbL8z13PHKgd66yS7gkcjx4XzHveN:xoblmcVA58rE5egQxGzqbMPQ6%HCD%11wiXuMcIR7x3C1e9CwnLwpcLs8EfDSfEmxIzxPcW58YXG0:H4x9zxksnV8VDLvvErzZXxH89Y8SLRB:Eu06LwO9Ut8EXXrO9J2SXvSdud7kfdGu5G357tSuEt7Vjjy%xz5XzsnudD7NvpJOwr7B:sje427P7wZux686zs%vUG7Xf4bu3n%t:tQf1X7nr:0O6NAUfvdwO67zUFJPDJBoLwOAjP8IQJCPG0CizxyQs58ccMNPGuDSDxfA4A8S0P2PDAD6zwMhCC8IQQXfC6EETw1xA88OAQSPDcEG3wzhCv8LsQDfGlEIrxkRAk8n4Q1vJtEJ7zWhB19EEQV:UcEEH25w8w96EPI:hIDxX53w4C%msO5:rxDb37dg2A:PkMLf18DMD9%ws3:nMLkP7mCsv%VQrp:sgJ6:5JCdf%4gix:poIfv53CEf%eQgT:qEI6:3sCNf9Vgnf:dwJBP56Ckr%Kwuu:uoLLP%wDMD:eA1lADkOFQHtDssBiw%BAgwQMgNpENgDnBBsBJ8Q6gRuEEgFBxCBBWsPjwWcDmwFow0UBYcMhwRWC8IDGwrEAuIIiwG1BxcAmgZr:pMFi:yfBH:6uANR%NgCC:byAbjz:gBg8fL:Du:I:svsgP2d6hj8j%iU%qfm9:jr5Eb3XuOD9QTisfPd4NLx59:m7x:f7u2C3urrCd7Z6bDdvudy3ZzlTd124z3dUuE:3TnfTN0x3WHdQ9t43XXZjN3N15zdTdak3ffUpd3N06Ddz9KW3QPSjN1u0YbdFdGG3fzQkN0k0aTdidHD3STS7d3t0iLe3NNj3ujUr94O1gTfSdde35rYud:%2RHgdNth4Pncp%CK3uLgIuAU4cDhPeFg42HhBOWG4a3mseFd6OnhFeo04tXrl%Ke7Rbjce%2403xeeQz82HlIfVw5hb3o%cM%fjo:Ppp6tv88Oug:oftQAAl77ABxvDrAmLy7QPz87QEc:VFBdv2pQUm%NsFTvnsBVD63gUp%7IF1:toBVz8:wS4:HUE7vzJAwD9%wLx:A4Cw:wIAXv88f8d:NX%sfu9:T:7s:zM%r:7YPrl%vv5J:qh%YX5T:n8%AX5hfjD%Bz4h:i491D4U:ce%Oj27:d39sL3AvaV9431aPcf9Tf3vPT:9mb0vfYd9Gz23:MJ9qnzkvV78wb1VPNl9DfzsPMp8%vyMPMY8lLzPPGT817w9vOG73n0u%4e9Qju4vV17cf2C%3K98:s6vjH7CT68uxw%1HtyPzh7SL%nO51:3:vugCF8OoBp:EAA%Dy9wMq9M0Ee:WABcz2EgYX%IUGUvnfBnj6KAeC%2gHaPypByb98we3:UwIGP63CEj%NAlJ:r8JH:5UCs:96gph:X0L3PwGDEv8ggy4%%8MLPtODbD6oA1M%uoNB:ovDuX5dA7s%bgOIfr9DoT6QA8W%34P1vu0D8H84A:W:QAQEP8TEG4AGxDuARcQjgMLEEoF%g8dB%sPAwnjD:IK6Q:lDAEQ0g4uELEQcBB8EsgQLhQzEcIVsxE2F0YShxjxErQZthO7GpcUnBuVFVUcqxbnHNUXUx0JGZgdQBq4HXEbsx2YHIkdsh09Hb4ezxy8H0EcriCVG5UhzBpxIusZRCP3GBEk9xfZJPIWoCXxFWgm:BQ0JxgUAyhLE9kolxK0KfsRmCp3EYQrCRF6LKwQei1eEIIuGBCOL9cPmTCWD5oxUg%HMgUPVzOuDv8zSA56NNINwzRHDdc0pwy5NO4LbjQeC:szNgpoMzkJvjIrCAIyEQc4MfMFYDDWBHovwgODLrwCfC3IAWUs7ABBKyoAEyqF:%IoAf%zJ57%iyZd:m4lPv5fJED%YiNf:nYil:6aIeP%yiA%:wIgpP88HxIAch6DAKId9wDMHGsB7xvdAQ4bSgIsGrACSRkNA2QYYAN6F6kDiBbpA4wVIQSFFFUEdxOGBGUSuARXEe4EUxAsBV4PdAV%DssFtg0zBgoNsAZ7DEYHCwz1B7kLwgiDC6sJaAuwCmILzwtuCwINhQtADqMLgQ:CC7wQ2wvlEeoL9BLpC%IT1gunFK8LPRV1C6EVKwvPFdYKxBV:Cn4VLQr:FOcJRhS0CVgTlwk4EpEJ6xCgCXkPwgnoDfAJQgwjCpAKUQrdCHEKMgd6CpgFZAoXBCwKsgLQCW0BVAlIAL0IQ:8RCF7%VQeX:YwG7vy3BWH82ATt%%sDkfvwAkn74wEW%8QA9fqV:%f6V:7t%hP9C:vR%0L7nfqW%4L5B:yM%Jf8wfdG:SX3Ef639vf%cfb0:072BwFI9ioCW:ZbA4T2lATE9tIFG:cOB4r3QwgQ%G0JqfiJClP5kQsK%oQMyvpfDZL7IA5g:MgOMP1WDwP%yw:X:iYQrP9pEIQAlRBjAa0QTAK0EEYDsBBUBKgQegWkELoGrhAUCM0QhwkJERELZhGyDOcRaA6LEjQQUBMSEjUUABQ1FfkVTRb0F3kX6Rm1GM4b%xmYHUcbPB%SHLAg2B3rIRMf5iI9IJ0jUSESJEkiSCQfI0Yk0CMTJFgkuSO3JDwj7iSgIgAl5SHyJAwhyiQTII0k%h5BJMMd6SNxHI0jCRsxI5EZ2iIRGI0ijxZNIhIVHiKeE:8hNRLwIdYQ8CF9D:whJA4SIsYMLCJdC0oi6AloImcIhCLeBpkiTwWlIr8DpSIvApMioABsIg3:LSJ1:dMh1PteISz6yyCA%Bwg1vZTHzn1ch6v838dQvJ9HPjwchvS72Ia0u5UGfbtTBg87VEXoexoFiHslhW26%AUXetGFBHrxxPP6mMTleoSE2Hq0BI06pYSDOpbEujpGRLF6coRoOloEXPp7xA96VoQ%uimD6zo0g5U6NoN%OfADJ3nhQtI5ysK:ea2CMDmKgeS5o4Fc%bpA2DmQQJT5qEAQ%YQ:ybml:315T78qeUJ%z3l:fmz5Bn5DuRe%FPjy:eI4l:3s%EY99jg9Pb33:P2EN8T9yDeU:cm3bL3Htws%Ajbwvjo2XL5w9g9%qPXIvuU1iT8otVA:djUeP5A1Mf:3NMqAa3TnQKs0xgE1NOVBRvUCwd71HQI89TFCYDV%Qom1gcM6NbqDMjXnA3F2BoO39liDhDbcw5W3E4Oqt34DQzfcw164MYM8%H1C3njBQsM5fsJrebbCFzoqgcZ6msG5eskBcHt2QOv75ACsfFQAcrzHAD69fv%Qvju:aL69:wb:Rj8qv9P%08CnfoGBf75ygdz%ZEK9:hSDYr4AhAm%JQSy:f:FHT3ORch9zwZ0PYFG4D2khwz9uYd6PUGH5:19h9Z9b0gFfVhIdP05SGV9EkiW:SMIir0qyID9KMi6vNyIuPzGyLv86AhEPQJIUf0YCCU9LAf%PQBH3L1Wx4D9sIdqfY3HWH3uBwn%EIc9fjOG8X5WBuR%tkaVPtPGgj8uBms:BYZPf1uGLz9xBcp:h0XhP59Fs:%5RUL:1EVOv%:FF::KxR7:5QTk::7Eqv:ZBLI:9UR7P9WERwA7RBaAJ0QqQBoEAoBTRB%AUcQBgJTEKICaxBSA4sQEwSuEOEE0BC1Be8QiAYIEU4HGhH9ByQRiQgnEekIIhEUCRURBAn8ELUI1BAlCJoQUgdLED8G5g:uBGoPYgPaDqEBOw6z:5ANnv3gDGz7Lgwl%X4L1PbPCoD0Hwox8moJ7%%pCMLt0wew6%IGvunMBfDnjwRJ5icDxuSXAWXj4:8g4hP%8eAt:NPfOfq:3j74sd0:9qbcPvSd2z3yl9o:8JXZRu6b2Fbsrdd16tLWq%gR1vzmcNVy5ffUEeSq1ODijtTh4aPUFOHn1HjgVtUG4OrVut%b1ozfYdd63zTYgN8N2Z7f5NnV37XaJeB5243gLNwI4cnckuFM3STis9254v3dT%Mq3ubjPN6C5DjeKOUh3tzl:N2j5szdfueW3XHoXt186Sndnur83Nfr39wk7dbchO7p3PHvHN1r8XLd7PLt3XT0j94A9lTfi:c74BP5QeGS%mHiAPyX41f93OSP:ivmoP9954MAy%gzAQzqrAE66%sBT%zyAUftxQEd7mkBz%7nAFvvRwDD75D:BvDK:ifw%P0o8Bz9DvA1:N7vQ:ud70L6Uu80%QXvGvi77vn2e%7V9UruuPQr7qnzIu6u8jHuy:FZ7gLxmu5R8PPusu9j7yDv4%%T7nDwBe4C8XHtkvHU7BvyL%yV8obr:vLf6lHzQuqM87bprPNA6bLz4uie85vocPNm6CvzQujT8i3obfIp6ALyOeiX8WHoNvGm6OXwCump8Izph:Ar6oLw5%qb8Lvr1PCm7C:xpu2p8bbuRPLR7:zy8vDO8xPys:Qx86b1RvSe9lD1kvdN9nr4PPdO%Rz4B:rs%KD6rvkU%2P6YvsO%4f7tPuF%1f8X:v7:Bn7o:25%k:%RfoC:8X5uv9A%XcAvfg4AUL4%QHU97UCefdmAzP3BgQF95AE8vYABfn2VQUb95EFVve3Baf3zQUN%NYFhPjaBQj53AWX%eIFMfruBdf6AQaM%x0GU:xBBjL9bgYt:qUGSf:pBosAPQf1AaYHigMmCEwFvwg5B3IJTgk9CoYLGwvYDQUMORD0DJwS3w3zFMMOMhebD0wZahA4GzIR7Bz5EWQewhKaH40TiiBZFDMhIRWXIeEVtiGVFpUhPhc7IdwXriB0GPYfChkbH6IZJR4:Ghsd4xoEHI8b5xpCHMgZ%xysGLgdmRd1HpMWMB%eFeQfvhSNIPUTKSFFE7chqxI3IicSqSK0EQ0jTRFiI%4QpCOQENEjLhDjI8IP1iNID6QjvA5IIx0OviJpDQMioQwWIcUL%R:XCrMe2QlMHc0I0Bu1B0cakga8GGgFNRc5BLcVCQNDFNwB2BK5AHURpP8ZEKX%ww6::XIN9vwpDE386grE%7oJW:ucCBL7lAfo%qIG2:rHBej6:wQN%0UERvuUA4:75ALi%zICOvx5AZP8uQDq:PT:PP0r:4n9Zf7R:aL9GP7l:F:%Lfyp:nj7%v7D%lb:D:q::1z5OQCs%McABfhrAWz3KALm9v4CdPbqAxf26gTQ9fgFnPUQB3z1Kwht9UQJcfVUCob1Vwus9UgM4PUjDSD24w1p9oEOuPb7Dgf3Sg9V92oPnPdaD9r3Fw8J%KEOKPj8DTb4Kg00%DIMJPgbCwn47Qnm964IvPdoB473IgZa9%MEIPevA972igKQ9nYBNPZyAMf1fv9G9Zf%r:S7:QD05fw88xL8ZvI%%4LxZPqZ8IH5s%%R%NjukvcQ7ob2YO1w9cvsVvRR7EHz8us98qnrVPFz65HwTesB8Dbrqu8t65XvNOvF70:rPfCA6::wyusI8i:sVvOr7OL0N%2l9sztlPhd7qX64%7K:Fbv9v607xwB:u8xAzvwKgVx8P8GqvCnCOzwHgo88WALnPFpDA7yOw2S8tYNKvNADtfzfw6b9JsOePWdDnD2jg6C93UOrfhaDvD5Qw5H%zUOsPw2Dib%Sw6n:3YOLQG9DrYCIw88BKgPvQVNEDQHEhGgCPMR:AnrEkYL9hN3DA4VjQ0rFoEORxdPD1wY8w9kGWkQWRqvEDcbxBD7G6gQpBxbEDEd4Q%hHT8P8x17DikenQ1AHq0MNx60Cw8etwrHHbgJYh25COMcuQdPHLYGrRuuBQMbowRYGpUDshmJAhcZgAGJGIAADBiM:6EXpf5IF8z9ARf%:MoWOvyhFnn7gRa3%mYW7vlJFh35JRZA%PUVWfe1FWr2YxV39f8UhfSJFJTzAxSo8nETvvHVEtfwMxLx740RD%:nEDPuRRBk7asPqOwcDwXsmg5:6yYOGevADdPqZA2q6hINm%rFDKTqewzA6jAM7OrhCyfrjQtw6y4Lx%vCCivsRAqc7LAJG%0ACabtMAg87j4H1%4oBnPv8AQK8JcDl:AjAhTxmgB%8QT:1PFq:RXy1ftD8k36XvLa%Gnygvdj8kr2TfI19STyRPTn8XXzk:HH8iTxNPKW8Lnx6e9S8Rzv%vAx7q:wL%1t8B:sMfAK6:jv%unC7:roju8R6F7vQuc075HmFu:85Qnvg%UV7yLlQO:Z5JDvpuQK8Inkr:CD5IHxl%R%8sfkpPMV5e70g%VZ9g3m3fey5nX5aecX%yvovfzv6F3%r%nt:2fqZgEW68ACwOv1A2vsAgUf7eEF4u2RBrvuEAet71wHuvB2B%HxXwcj8xoHfvStBvL1HQZ:93IFJPm0BOH66QOz:BcDm:5DApQAcAGcAqEArwTX:8oGFf:pCFv%Cwup:SwNAP1ND1:8bBHH%4sTNvumFaz6uxcn%sYZp:nAGy35oR24%GEfSPj1IN33ViJ3934jFfdpJLX2FyVY9okl:PXEJaH10SVI9bgl8vSBJZ70NiVM9Nok:PNxJK3z%yNg83cjFfPjIs3yPyKL8oohUfLLICHyBiD%8UQf6fGPHuHx7x3m8Wod9:EEHRLyvBw18pAcX:J3HI7yaxzB8mMc9fJXHCjzQhxY8yIchPP4G6vzxxvO85Mb7:NfGxL0Lxs79AIbcPTXGrX0rBoR9X0ah:VJGhr2ERrN9tgZovejGZn4eBmy%VwZ6:pUGT:8YRmq:YQZI:%5GaEA%xkdAkQaiwORGuME3hoeBigbMwdwGxwItxvTCP4bVAlGHJkJkByfCdkcZgkfHewIWx01CIkdSAegHSsGmx3pBHUdjAMrHR8CvByuACgcQv9zG%X9oRqd:LUZbvuwGFv6lhdj%WMWgfgUFbH3phPt9hQSLfZcEGz1fg6l9H0M1fNhCvryMggT8vsFIPHIAyPwpAEf75X:GO6i:RTtzvsY7Bn6LuuD%F3qC:eu6a71J%lt9M:oRvOp6Dvyt%hL8fvoefBz6cXvHuot7:fqse7660zuIu377Wfut%3B733tJvFM7YzyIu3o8wPtMPX07Fz2%uxm9xrtR:hZ7f74ue2J%Tru6fnY7iD6kO80%l:wKPpB8QX6NvLS%T7zl:lZ9F75ivUu%c:2Dvkn%AT5jfkU%f36P:lw:If54P3q%Uf:Z:qkAPz69AGm%zcDYvxvBC79mgUE:rsG4P7OB7::0gibAMQJbwGdCjgCWwvxAvcLlgNuDCQEuwyXBN4M7QTUDCYFoAxABUYMPgXKCx8FNQvoBIwKmgTWCToEFgnJA1AITQOBB8oCpwZFAr8FwwHFBEsBuAPhAJgCiwBqAUwAMgAmAPr%GADJ:SEAqPw9AJv7aACm%pwAyPnWAP74EAFE%EYBk:d0Aej2lgFA9qcBnPWkAf70iQFs9FUB7fMHAYfzowBA8yoAHPOj:xvzFf8984b%f:P9:d:zgf1b9Bn98PTL:KD1mvxp9oz8Tfeg:En42Pxb%TL9f:qq:bH7Ov7p:Nv%Jf6F:2H:MACcANIA1QFkAQ0D4AFEBEECewWEAq8GpQLeB6YCAwmGAhoKRwIhC%0BFAx9AfIM%wC8DXAAcQ7h:xIPVP%eD9L%FxBf:nwQ:v3NELX9CxGC:TYRZv1OEV:9UxFp:UQRf:0fEZ794xDB:Y8Q5P0kEAb%ow8m:hMPRf56DmX%4g2K:lQNuP7ZDPT%eQxB:zcMpf8WDCQAFQzEADAMhwFjDHMCqgyKAwENzQRlDTwG0g3TB0gOjgnDDmkLQw9cDcQPYQ9FEHERwxCCEzsRjBWrEYYXEhJlGXESIBvLEqocJBP8HYETDh:qE9kfZBRcIPUUlCCfFYQgYxYvID4Xmh8rGMseJxnKHS0aoRw4G1gbRxz4GVgdihhqHhgXfR%pFY4gQxSXIewSlCKlEXwjcRBLJE4P%SQ8DoUlNw3sJT0MLiZMC08mYgpRJn4JNSadCP8lvwevJeMGRiUGBsQkKAUqJEYEdyNeA6sibgLFIXUBxSBxAKkfYf9yHkf%IR0l:bgb:fs9GtP6this%SoXi:ihFXP3IhRm9rESZfVREXD0ARCJ878Or:KIDefxWAwx8SsLkvAACgvw1wif77MHTu%WBhnvggX%7noE%%5%Aw:vjAI376EBce%4ALvvz:8R8OH%cPDt:dXw9Pw%8fj7qfH%%hbyCfqF8iD5%PJF%HLze:f388L2ifQb9iz1gvXi9fj0r:Z79JP3DPSP%KzzoPld88X6IfP5%:ryN:3n8nf%5:Kz::by4QAR8:oBNfP0AmLzyAOV828E0fPlBBb0KQVj9DoFuPQdBRH11wRo9XAEt:XuA:X1WwMe9r4CLPYcAhv2fQHp9eUAlvVYACH12f%N9Gj:2vMG:wzzsf4l8mb%KvEg:h7w2f0E74394O0z:bPsyPyA60b8Ruqq%wrp8vrO5yD6l%Y2%W:lOvhe5DT3b%Mq9qriJvUY4jD0uuFR85DhkPKV4fXxweGF8QjiSPFf4kHxu%J38RXj6vFn45zyr%OL8%3js:Qj5A:2VOSa94DkSvmq5Bj7z%T8:PDk6v4K5dgAHeW8AivliwQ25T0GROXKB13lKwmK5VwK1OVdC0LmLAza5soMn%c5DY:ofA2n6ZgN5OqSDT:scA207TkNP%:1DN3wrAyJ8mcMQfQuDP:1CAy89:oLcvkIDBn7NQyp:IAMIP7oDHj:ag2xAAMOywGwDscCbA%mAzUQaQQKERAF5xGcBcsSCgayE1sGmBSOBnoVogZSFpcGGxdsBtMXIQZ1GLcFABkvBXMZigTOGc0DEhr8AkEaHAJcGjQBZRpHAGAaXP9LGnL%KhqM:f0Zp:zEGcD7gBnV%jQZ5PnjGO34jxjv9z0Y7fbxF%r1qxfn9G4X5vM4F%jyCRfr8d4W7fC1Furvihbf7lsWye0lFqjs5hV965sVS%pDFRbp3BTi52gUtObpE5DlYBN15NQSZONHElvivxFa4T8RXuDLEGrfZBCB3gwQqN3ED%bciA9A3FYPudsqD1Lb:A4K28UO3Np%DsTaHw6:2qENytr9DObaMQwS2zsLUNsbCqLb1ggI3G8Hf9zvBQTdXASQ3b8CHt4iAabejP8g3wT%ht%P:NLfMPv%3%z5B%DD%OvfuPep38r2Qd:59bXeQ:UK3qb0Rd0c9GzcovOE2zHzk9rF8p3ZWPKl2OfxrNdx8bfW9vDJ1Xfw6NT57x3UgO9w0xHv7dKx7prSZu570jPukNIe7tbSJ%5E01Lu0dOg7nPUEe8f1afv0dVg8ILWPvEx1zzy3tda84nYkfQ12d714tk695LanvhE2wP699tk%6rcuPxb3fn9C94h:7neKwBp3xEBIuDSAergagLH4dkCv%IeA9XjOwMK5S8DW%b8AsXnpAJG6SoC2%qRAYPs4AA97hsACvBJ:%nxcP7W85f9zvXE:Mv3%fvH%Tv7vfuL%qr96fmN:1X5ZAHN%DQDTfj8BNT3wAZg94AI7:Y7CoH28AsV9poNrfU1D0j1vBDn9CkSifR1Ey70nBTV85kVffNpFifzDRfS8oQXfvLSFy7y:hfh8QwYmPEFGFTx7xcW8c8X3vCoF6rwehd78EEXUfD8FivwqBYK8EQW7%:TFd3vWRXU790U2O9mFOjv%BMG8JkTL:BHE2HwAxOb8MkS2PCTEhjxXBJZ8SESnPHbEeDxihEo8isRdvLCEMryUBAo890PkvNrDwr0AQ%U9J4OMvVDDuf17Q219pgNnvdADaL45QzB%YgM9:ovDEL83wud:Z8LAP90C2IAYAu7AWALAANzCyUEkwsiBbwL7QXrC4AGIAzWBlsM7QadDMYG5wxjBjgNyAWODf0E5A0KBDQO9wJ4Ds4Bpw6VAL0OVP%zDg3%hQ7G:C8Of:uvDTn6Aw31%CsMsvcrC2:2BQos9b8I5vNgB5zy7gVL8XAE8u:rAo3uYwEd7dv:oOtT:hnqzPyJ6Er79ebQ%WPlZvjZ4xL3X%Lc9f3gyfS5393zm94V86fdb:Lh3OTxStxs8ebbAvG026HwtdtG8Onb8e9P3KPv5Nxe76TdJu%L3v:uk9:q7rTg6%7p4QHvKuMs73HkbO%45b:v%uYl8DHon:Ba6TDxb%rc8W3rqfJS7JrzGu2x9Mft7PVY7kX3ze61%CrvMfpx77L7pe8x:czvqv7p7x0AA:CMAR7w9wI:8F8EavDCBaPwHAfq8GoIQvGmCarxzgof8t8Ln:LbDCbzww2u85sOM:RlD7D0IxAi9dYQh:V9Ed71FxIo9qISZvYaE5f2fBO:9sUT3PbxE:H2:RP99uYTAfesE:72ThP49tAS7:Y0Eub2gxHg9sEQ3vb1D%P2Iw:v9kwOBPduDSH3hwxG95ILdPeKCqn3bgnm90AIK:gDB3b4wAXJ%HwEI:lCA4L5FgLm%fwATPr3:7D6BP8Q%yL%ZvtN:bL7hfzw%8f7IPwU%0X8bvpf:Nv5c:xe%YH8::iO:ML4nPys%K38vfjD:PX44PxQ%Qj9yvk6:Vz6ef0D%8T9vvsc:oz8ff5t:eT%Y:5N:27:sf%NAAsAugFUAPMCiAAwBKIAcAWeAK8GfADvBzsALwna:3MKXf%6C8b%Aw0Z:kkOX:2HD578tRDf%8wRKfvHEoT6oBPz%VcUefnrFBT5XRXD%K8Vg:jkFU:4:hUm%P8VA:jsFeb3yBXO95gVufdhFaj3JxWb9%8Uk:e7FJH3jBSZ92MUrfdAFNH3JRQJ%BMUWPgQFMP4HRRN%UEU%vl9FM360RTH%zwV6vy6FTb%Qxaq:9IWQwFfF:0C5xfVBGgYxAbfGMYIUBnWCr0Z7AwpGgUPmBoZEQ0bIhOIGxoVChz4FpEcuRgdHVYarR3MG0EeFx3dHjYegx8nHzkg6h8CIX8g4SHpINYiKCHfIz4h9yQwIRYm:yA0J7AgTChHIFcpyB9UKjkfQSudHh4s%B3rLE4dpS2hHEsu8xvYLkYbRS%aGpAv8hm0L0sZsC%mGIYvABg5L1YXzC6kFkMu6BWgLSEV6CxPFBksdRM1K5USPCq0ETAp1RATKPsP5iYoD6slXg5jJJsNECPhDLAhLgxEIIILzB7cCksdPArFG6IJPhoOCb4YgAhKF:sH5hV:B5QUDgdRE6kGGhJRBusQBwa:D8oFkg6YBWUNcQU5DFMFEQs9BfAJMgXZCDAFzgc7Bc8GUwXaBXkF6wSsBQEE6wUaAzYGNAKKBlIB6QZ0AFIHoP:GB9z%Rwgr:tUIlP1zCRn9IAq7:N0KevynC1T8fgxE:F0NSfxADmD8JA%I:AUQwPzdEAr9qhFl:WYS0f0QE0n%oxPL:hsUUP93FNT:tRRTANQUywDVFDsBuhSlAYQUCAI2FGMC0xO0Al4T9ALbEh0DThIlA7wRBwMoEb0ClhBEAgUQnQF2D8kA5Q7N:08OrP6wDWv9Ag0R:EMMo:pwCyn5igqr95EJMvaICMf0cwdz81cGO:I5BSPxHgQt8AwDWO8IAqLuFQEK7jkAke13:zjt0:4B7VD%7%zx:QPtuf0%7ar9m%3F:RPuC:6f7nv%NO8S:8rvy:9Z8KIA3PCRAVPxlAK:8aQDJPLBBIfy5gXt8hIHXPNBCNXzbwlc9JkK7:S4C4z1yQwz9sUN4faqDpX3dA9S%CEQGfmzEO75KhHU%okRy:vSEdX8CBLv:S8SFf9KEkMAWRJzAWASogJhEs4DXRL1BFgSFwZTEjIHURJFCFISTglXEkYKYhIqC3QS9QuNEqQMrhI1DdYSqA0FEwAOOBM:DmsTZw6eE3kOzRN4DvgTYw4hFDkOSBT8DXAUrQ2bFE0NyxTdDAEVXgw7Fc8LeRUxC7cVgArzFb0JKhbnCFkWAAh9FgwHlhYSBqIWFgWjFh0EmBYsA4MWQwJlFl8BPhZ:AA4Wnv:WFbn%lhXM:UwV2Pz3FN77lxTf%ikU3:mvE9:4KRPi95cS6Pb9Ee71WxHz9LIQ9PMDEO3yTg:d8ZIOxfDSDabvDg2H7kgMa%2EC1rsxQpZ6w0KbOpdCZXptwjT6BoIJOiFB4Xn9gbz5moGbebdBfTlTQWK5bgEMuUbBPHkdQPH5MUCt%QJAr3kQQHW5GsA:eSJ:y3lmv5k5aH9nuWf:Nzllvsd5or6YOZ8%aXmb:jn5mb3Iedl9k3nb:Vl54b0Yuet80Dn4:L65ifykOZ18QDmyvBN5SDweOR074Tjw%534gzuV%FP7S3gkuwA39fr290k68Pcf%q92%zpztpv6fbZC%k02cHoidiR6PXXfOh614HoGtef6NvW1ui%1ibpx9aM6fPWCeo:15zqptdD6x:Y:uui2MrsKNmm7anZju4j2oHvltp78ALbfPFs24Ly2duM803cmvTM3Kn1V9249u7dw:eP3sT4N9%3%ePflvqQ4F37PuEJ:O:hl:yn4gb9auNY:T7kjv0m5ar9J%ax:T7npP1q6If9qOlb:fTqJP1M7OP8ru2Z:BvvR:yS8O77E:KR%53zLvss9cj6u:Ze%kT48vnB%YT5L:sU%Yn8ovjS:S74Cf%29zEAN:dLAbD2WgIf9lsDhfVQBOL0NgU49A0Gi:PTBt7yiAcx8ioIifG2COTwKglF8IMJqu:BCRPv4wmB7u4J9O3mCWzt0gnr7LcJc%ybCQbsgQmk62YJT%tHCQjrIQnP6u4IouqrCILqWAhu6vUHZuqIB2jqFQd26qIGkOo0Brjq0AXu6nYFNOsmBYrr3wTx65wEaexbBPDsGASF7dEDKO6GA9ruOwOc7:ICb:CyAlfxfgJU8lsCZ:NKAo:0SgLJ9VgCEfdvAmP4jAK2%akCBvvHAk385QKF:QcDqv4wA7f:YwOrAKIDggHsAzoCPwTUApcETQPwBKYDSAXgA5sF%wPpBfgDMgbZA3UGngOwBkgD4QbZAgMHUQISB7EBBwf8AN8GMQCUBlP:JAZg:owFWv3MBD384wML%9MCwvmfAWT4SgDz9tv%cfVb:eLz0vtO8kj6ufDE%CnvTPel7eD1M%yA9NbqKfOU6dvxcOiU8GrnVO%D5h:uvOX67BTl6OuL5O3qHuQK6s:jP%md44joh%Pi55DjSOe147Xm%OMo5lbkoeXO5CLlX%Wt5AbmSeTC5vrjkOfE42:oquNd6a3jVerO41brCeRZ7FvkWe3C5FPuOuVA78LlH:Ba5u3wBOeq8cLnVvKX6PPygumC84PqBfSV63v0tOzl9NjtQ:X87pf1HPDf9TbxHfZJ8lH2V:N89mH0nPZo9bH2a:a69mj3uPZb%Kn2QfmO9hf6Z:bd%jb2kvv89Tr8ufXW:G71av0b9fb9wPR6:l709f7382b:jPPL:yDzIgC48mwAV:KlAAHyzQC58eAAgfHdAFzxvgBJ8YQASfEuAFrxvf968Tf:p:Gg:t:x::0f8lj9ZfKt:LDy:Pv98kL7TPN8%pzzpvnr8774OvTE94X0vPbL9K71CvWf9ED1mfNu9aHylPW78bT16vDR9S7w7vWF7w:27u449mfuafbx7ab2je3v9j3tRfcH7an37%wc%PnsoPgr7TT5he3a%Qnujvq07k:7ge8Y:Gzw5Pxw8av9h:Jp:rDzF::q9LL:M:Y2AI33ogD2%PUAbPowAev7UwFu:WIB7:5fAWoATAHbASwBQgMDAZ0E0wDtBZsAMgddAGgIFwCLCcf:lgpu:4ELC:9IDJ3%6Awm:mANqP2xDSb93w2h:O0NHvzhDZ77vQ0m%4YNtvpBDVT68QwB%p0MwvlMDJv5BQyQ%csLpPmjC9r5iws1%oILtPqEC1b7jgsZ:JwL%fyvC:L9yAsB:%oLIAAXDEsBUgyBApsMvQPxDAAFTw1HBrMNkwcYDuMIfQ41CuAOiQtDD9sMqQ8pDhMQcA%GEK4QBRHfEZERAxMqEhkU0hIgFYUTFhZDFPsWBxXLF88VhhiYFicZYhesGSsYFRr3GGAaxxmOGp0aoxp8G58aYRyIGkodXhozHiQaFR:bGe0fgBm2IBQZcCGVGBoiABi2IlMXRSOOFsgjrxU8JLcUniSkE%kkeRIZJTgRKyXkDx8lgA71JBENsSSZC1UkHArmI50IZSMeB9MiogUzIi4EgyHDAsYgZgH9HxsAKh:m:lAey:1wHc78jBzx%6UbNvu5Gp36yhkl%tcYy:nkF4358hZo%QUWWPkiFVr5SRRr%X0Tifm6ErH5:xHh%UYRG:qLEFv6zQ%j%gkP8PpADkL7dQ2W%6oM6:viCz:8IQuR:GgK4vy4CTP9EAmH:XEI3:3aBz7%TAem:scGGP9OBpT:4wUaAIkFqgBEBUQBGQXoAQwFmAIdBVMDTgUZBJwF6QQDBr8FfQaWBgQHageTBzMIJwjvCL0ImQlTCTEK6Am3CnwKLgsKC5YLjwvyCwUMQgxoDIgMtQzDDOgM8QwDDRENBg0fDfIMGQ3IDPwMhgzFDCoMcAyuC:oLEAtkC0wKqwpiCdEJVAjaCCYHyQfdBaQGgARyBRYDOQSlAf8CNADLAcn%ogBp:Yj:G:yD:uX6lv3L%cX8z:gV:PH3iPsv9yD7hvbe%vL1wPpx9cT6AvXm%qb0H:tg9Gr7M:TB%yL0IPww9IP8W:Tm:KH0Sv3%9K79bfUU:uj1ff5r9un%9PZa:4L3zv8V%EQAr:i6AFL5LgEA%qABuvoQAoL7fgJX:OwCNv1bAx7%zAMK:z0E%P%uBOMAHgXMAYsFsQL0BZYDWgZ7BMAGYwUmB1AGjwdCB:8HNgh1CCsJ8ggcCnQJCQv6CfALgQrQDAYLqg2GC38O:wtOD24MFBDQDNEQJA1%EWYNGBKVDZsSsA0GE7kNVhOxDY0Tmw2tE3wNthNWDawTLw2PEwoNYBPqDCET0QzUEsMMeBLADBESzAyhEegMKREWDagQWA0fEK4NjQ8YDvEOkw5KDh0Pmw2xD%QMTBArDOkQcguCEbsKFhIICqESVgkhE6IIlRPoB:sTIwdUFE8GnhRqBdsUdgQIFXMDJhVnAjQVVQEwFUEAHBUv::cUHv7DFA:9ghQB:DcU8PrlE975jhPL%DQTuPfaEqv2fxKn9SQSsfTMEdDzdREG8yMRVPLWELvxkRA48VUQyPAhEGbw9Q8P8NAPwO%uD3nvjA8472kPAe9CD9PuFw%v7ukOle66DoLuiw507l4OZ%41DljuDg5D7uoNKO7EDQTumg3Z7WcNpu0mDWrt0gwl7WcM1OziC3bsQAsJ7IIKi%uqCf7qughh6rgHtumpBgDplAVB6IAEfed0A7XmdQLu5YkBK%WyAHLk9P:G40::LePE:qriVP494v795uHB:aPhn:1x4Zb9TOGn:TThz:0r4Qv%M%FY:lLhsf6M4RH:5uFy:2Li0f:94iwAtOOCAIDk1gBZ5SoBN%aAARfn2wH15zwC0eiiAq3pCgOL6nQDbuvcA1jsQQRK7aIEQO4ABTrvWwUy8LQFJ:ELBhTyXgb68q4G2PP2BrD0NweF9XAHWvagBzL3ygcQ%O8H9vgSCOL5NAjV%lYIzvt2CMv8kwjM:akI0f6zCNr:rgjnAJYI%AFpCA0DJAgiBMYHNQVOB0MGvAZHBxAGQAhMBSwJcQQNCoID5QqEArULewGBDGoASA1W:wwORP7MDjX9hg8s:DsQLPvoEDb6jBFO%ScSdfi2Eqz3NhP19qUTUPYBFL31RxQ89XoUyvSaFGf0rRQQ9LcUw:O7FH:zuxRD87YUD:OpFOHyjxS98mIUovIfFJPyxBOQ8lMTmvLREq:yRRLP8rQR%fImESvznxBm8yEQqvOsD:nzPg9W9NYOwvRzDkH1FA7T9boNd:ZnDSv3Hw3t9%YMuPjADIr5sAxg%rYMOPvRDBP8:wzw:DoNzf18Dar%wQ2E:wQOWQBDDiQBfQ7iAbMOkQLlDi8DFQ%9A0IPOARqD6IEig:5BKAPOwWoD2YFoA91BYcPZgVbDzMFHg:aBM0OVwRpDqkD8A3OAmANxwG3DJUA9As6:xcLuv0jChr8Gglh%v8Hl:jUBsT2mgXx9FMEJPMAA2TxowG470AAIu7b:qXsev1E6yD8:enS%tLokPnD51v4zeYw9:HlDPYs5e70fOTV8%Djw:JU473x2OLH8Gni5%8G4iHvruF27mDh6O0c4XLt4%AR7bbgweyX4H7sieBI7JDgIOyt4AXs5OD86zThB%yd4SbsIOJc7Lnip%xn4wXtKOR07fvk8O3d5XfuzeYF78nnmO:M6C:w0%nJ8NnqafHZ6w:y0Oy78rrtbfOY7iP0ae:b9C3wkPXl8ED2kPHm9irygvey8hT4IfOc%HXzHfmo85f5ufMM%qbzevpw8%D6GfM6%6XyhvsY8sP7dvHw%8bwEfwO8Cb8U%80:J7uPPzz7UD8Wu0::NfsOPxt7Cv8IewU:PHr9fve68z75%uY%wnsVvtD7AX7k%yi%vjsKvpx7Z75%%39%JPuTfg175H33e:O9obwC:Yr8Uj1yPGG9FvyxPPh8vzyW:Ms8srzUfEu9GrwiPR479v0gO4m9YbtavWS7Kn1qOvi9c7qFvYF6kb2Uel09rLoo:Yo6NX2tecN91nnT:cU55336eb499nmYfjn5tX4GOdU%W3n2vnr52b6kuj3%mDpjPtS6ib8YuvE:IrsY:3E7QP%De%f:mHwNf%%8b::I:M9AI70qQD89QQBZ:dKAcv4egEg%pMBYvuUAYz8eQGf:UQBmv7xAH::ggBRAPj:EQFU:70Bmv5TAs790QL3:DQDG:x6A0D7pgNv%rkDr:m5Awb5qwN9%JMDGfh1A%D3VQPW9zMD:fcSA1j49QLl%N4CoPnQAob6zgKS%9gCu:zwAv79EwNT:0EDtAB3AxsCtAOEA:gD5wRHBEEGowSKBxEFvwiRBd4JJwbjCs8G0AuIB6UMTghmDRoJFw7qCb0OugpbD4kL%A9XDJYQJA05EfIN4RHDDo4Slw9AE24Q9RNFEasUGhJhFeoSGBawE88WaxSEFxgVOBi3FeYYSxaLGdYWIxpcF6ka4BccG2MYeBvmGLwbaBnoG%QZ%RtXGvAbvRrKGxYbhRteGx0blxuOGsEb1RncG:EY5xvfF%EboRbFGzgVkBupEz8b9hHQGigQQxpDDpoZUQzYGFkKARhjCBgXeQYfFqAEGhXiAgoURAHvEsn:zBF3:qMQTv12D1D8Rw59%xYN0vrmC1D6tAr0%YIJvPlPCKj5HAe0%eoF3Pm%BB76mgNz%oEC1vp1AUL7dgCx%4L:HfyY:oT8sv3i:M:8Nf3s%3z9C:u2:Sz64v1T%QD%g:gP:sD3Ef4M9wX%avbt:dv1y:1h9aH9%vR0:af0Rv1n9B79PPT%:CX06vwl9OX8PfTw:HH0Df3B9Dz9LvV::bb11:1W9kf%CffQ:sn3dP%Q%DAAWvkEASL66QHm%tgCpPvJA1r8swQG:Y4Fo:1SBi3%%Aaf:noH9v7UBy7:AQhH::4HQP:IBxz:YAff:sUGi:76BSP%BAWm:ekDFP2vAmv8XwGp%wEAzvqg:tn5Q:3N%PP7rfe5%nz2nfk:9ab49:Pb96ryQfdb8dv2DvCp9sfuqvaO7dr2Z%w091frsvdi6k34i%n%%NLowPk26I36uOdg%1jnNPwX5wX9%ObP:QDnjf4y5zz:kefZ:x3oYwDV6NcAsuk3Aa3qgwG9674B3OztAQLuFAIs7zgCWPBdAoTxhwKy8rgC4fP0AhH1PANC9pADcvfxA534XgTA%doE2fpjBeT7%gXf:J8Gyv1SB6X%EQhx:9oIMgCsCegAgwqXAV0LQAI3DOECDw17A%MNDgSvDpgEbw8cBSEQmQW:EBEGRhGGBrIR9wYAEmQHMBLKB0ASJAgzEm4IChKmCMgRyAhxEdUIBhHPCI0QtwgIEJIIfw9gCPUOIwhwDtoH9w2EB48NIwc6DbcG:QxDBtgMyQXMDE0F2QzPBP0MTwQ3Dc0DhQ1GA%UNugJVDicC0Q6RAVYP%gDhD2YAbhDY::YQT:91Ecn%5hFD:kQSuP2LEiL9uBJ%:MkSzPu8Eg37kRJF%kkSd:nkEaj4ZRHb98wQEvcdEE72Vw%Q9X4O1:SVDSX0nQx585sL1fKTCjryiwmr8YcIKfGLB7fwnQZY8MAFDvD3BNrvRQS976wDte8wA77v0wLW75cC9u96AhzwfQJE8JwCb:DRAp3wFwPP8GQDBfGyAz3x9wN38S4ErfFQBNzxVwQC8kEEHPILBCzytAM08joDNPKhAjDy7AEo8h4BHPI%AAvyUv:z8WL%0vFz:ajxi:xz8az7NPHc%uzwHPqa8HD5QPDa%N7vXvh17:73Be%%95Lunvch7p33te2691Xt8fcF7Tz4yOyV%J:s9:iJ7F75huzH%ZXsLvq47JP67uz2%j3tVfum7bP7Le4N:NPuZfyX77n8dvAI:WvxVP1x8pr9gPPc:ZT0Gv6m9VX%s:aP:rn3yf63%AT:q:lD:5f6hf97%83:WPwaAC39bgD7:cYAwP4lAXr:iQEqAPMBzQBiAmYB1gL1AU0DfwLHAwYDPwSPA7QEHQQhBbEEhAVKBdkF5wUdBoYGTAYnB2UGyQdiBm4IQgYYCQAGygmaBYMKDwVDC10EBgyHA8gMjQKEDXQBNg4:ANwO8:52D5X9CBAp:JMQtPobETv5ohHE9yoSU:awEu:0MxOb87ITXPIrFDXxnRQn8AcVNO9pFVvuwhWc7Q8W9%xPFmzsfRb765kWpuujFmzrnRZM64oWRutvFlbrTxZ66ywWrusFFu3r1hU17JsVguxOFdPs7RQm7XYUfO3tE9TtVhMv7roSjO4gEuzujxFO7w4Rs%%gEBrwRhCE8AAQ8:DLD2jxqA:l8ZUPbfKTDwHzog%k88YPWPT:DyD1TRD89bEQ7PYnEe:3qxEE%ToSKPrLElb7WxOM:OMTw:1fFPj%zxQiADAVPAGDFT0CyBUeA:4V2AMkFmUEORbBBDkW6AQkFtkE%xWWBL4VIQRvFX4DERWwAqcUvwExFLAAsBOM:yATWv6BEiL9zhHu%wYRxPooEKn5NA%j%CoOtPcNDd:23wsk9qIKg:VXCf30AAiT9KEGQ:Q8BQ702APy83gC7PMkAfnz4f8U9LL%OfSa:WH0mPyH9Kv7qPTS%sH0DfrR9F352fTE%Nn0RfjU9OL3zfSd98X0dPe:9Gb3vfRr98L0f:fP9Jv36vS59xP12PdP9fb3nvUW%AT2O:iC9mb4F:ea%MT31viI%Br5Yfli%U76rvlL%:n5VvxD%mv9ivqH:tD6pf8V%78AXfvPAar70QL%%7wDXfyMBMX8OgU1:cIFqf0iBh:%VwaS:mEGAP9CBmn:%gXO:4sFMgD4BJUAQgT4AG0DWAF%ArMBeQEDAmUARQJJ:3UCKv6SAg:9ngL8%5sC%PqNAgj6dwIv%VwCc:g9Atf3GwJg9:UBD:fNAeT2owHf9ngB:PZMATj3IAGP9:MA%:fEAHf4jgAA%VAAkfkIACf6uP:B%mD:XfsF::j7qf6S:E:%Jv31:bP9mP00:jT9qf7D:A7:QPxl:6n7rf:%%uf:QfoVAHn5OACr%FMA3vdmABr3cwBj9n0Av:WFADD1jgC69JsAXfSuAB30zAD88:gA:PM1AR70hwFm9PEB1fR3Amv1GgMo9tkDDfezBBX4pAU%%acGgvq2B9r7yghA:dsJrv7jCiAA2AuTAbIMBgNoDXcE8Q3jBUgORQdpDpcIUA7VCQAO%gp7DQQMxwz1DOsL0A3vCpcO2wlND7gI9A%QB4sQbQYOEVgFfBFaBM4RegMEEr4CGhIsAhMSxgHvEY4BsxGFAWQRqAEHEfYBoBBsAjUQBgPLD8ADZw%WBA4PgwXFDoAGkQ6IB3QOkwhvDp0Jgg6dCqkOjwvhDm8MJw86DXsP7g3dD4oOTRAND84QeA9gEcwPARIIELASLhBnE0EQHxRDENMUOhB%FSoQHBYZEK0WCxAwFwUQqBcLEBcYIRCBGEoQ5hiIEEcZ3RCjGUkR%BnLEUUaXxKJGgITwhqwE:EaYxQVGxYVMBvDFUUbZhZWG:YWaRtuF34bxheYG:YXtRv5F9QbyRfwG2QXBxzJFhYc%BUdHPMUHBy8ExQcVxIFHMYQ7hsPD8obNg2WG0ALTBsyCeoaFAdsGusE1BnAAiIZmABaGHz%fhdx:JEWf:qWFav4kBT99n8TevVnEif0ShEH8ykQH:IJD27x6w318NIMsfDAC53wtAq18K4J9PCuCFPxtAfP8cIGYvLYBQfz%wS78ysEefRpAzv1tQL69QsCsvZmAVv3wgDv9xsAbPhv:834vv4R%Qr%N:lW:UL5pvwz%f77Dflg%9f4zvqU%Er6TfjT%Qj4avnM9w:5oPfD%Iv3iPiT91:4vvdL%A:4S:iK%GD4L:mL%P75yvj1%hv5D:x7%Ub95vmT:lj67f:L%kkBO:ucAqX73QMI:P8EY:z4Bbf8wQYB:VAHQP2hB239rgeF:XgHgv0AB2D9SgYg:V0FwvxBBEn8AQO4%6YBEfs7AFb6zP6G%WH9n:gF:KH3wPqL9pn5W:WZ%BT0w:e48hv3S:Gi9tLvVvZS7jf20uw:9ljra:bq6bf2juge903nnfcs5i74MuXN%GPkdfnC4yH6T%PM%gjjcPvp4gj88OKS:BnjC:1l43L90%PH:WbkCv4d5Tz%9%Vf:vPmc:4L6Hr%Oel0:nXqZP6360z%%uwv:jjuEf5u7:f9m:Dm:b7x4v3X8vD95PMU:ub0UP7a9aj%wfYb:5r3qf9k%FMAIPkXAc358gFq%uAC%freA3j75wTs%:YFVfwFB7n8EAgb:RIJff0FCuD95QpE:rALqP5hDAv:9wxt:3ENzv:MDTEACg6VACoO%QAuDl0BGA66AeoNDgKnDVQCUw2IAvIMqAKHDLQCFgysAqQLkgI0C2YCyAorAmQK4gEKCo0BvAktAX8JxABUCVUAPwni:0IJbP9eCff%lAmE:uIJE:5GCqb9vAo7:UEL0vzQC2v8ZgwH:AENpvubDUj7Mw7u%sMOlfpGDzn6uA:W%RMQZflREOP4bhBL%GUQnvc2EN323w8M9mAPLvW7Dkj09Q1f8xENdvIWDI:xCgur8PUJze:fCPbu0Qcn7tIGY%3qBa3sIQUG7HsEcuv9A:DqqQOB6oADJ%p:A%DppAOr6eoDhulMBG7pwARe6UEFVOnEBUvpQgZC6bIGOekNBzDpTQcp6W0HJeloByPpPQch6eoGHOlyBhHp1QX:6BkF5OhBBMPoUwOb6FUCbehOATnoRQD%50D:u%dD:m:nVv0Z53r8uua0%1LmBfvj5W36buXt%fXkhPl55C75:ePp%IPjtPgN44r4oOJr%EDiVvjy4Ur4uuFJ%J3hU:id4Wb4u%GD%PbhpvhK4s34teLy%DPjE:nE4y35Z%Q%%R7lR:nr5Uf50OZB%c7nNvnj6Cf5DOoY%UPrCPmF7Pv4zO3x%BPv7vhW8PL4lPEC%cryHvn280v5FvWJ%Sn23Pks90b6HvjG%v74XvvL%Q38hPrQ:Cr7pP28%4X%PPxv:6v8WwAM:UUBZP0mArb9%QIJ:rkDXv5hBLn%7AQZ:1YFfv%dBef:vgVUALYFxgCIBT8BMQXBAbUETAIVBN8CVAN2A3QCDgR7AaEEawArBUn:qQUb:hsG5fyBBqv73AZz%i0HQPl3Bxb4uwf59voH7PU2CPL0cAgO9KgIQ:PhCJHyGgn98VQJhvGQCS:xywn18AQK2fA3CtjwZArv8IYKGfGgClXxsAqe8boK9PHAClPywgq78sAKJ:O4CpXzpQoA9IUKZfRTCsD0DgoO9bYJUPVQCYT13wit9WsIz:X4B%z1jgcI9i8HKfbgBlP2oQaK9nMG0:ZXBjL3TAaq91UGPvhwBu:4nga8%d8GpPoyB6P7lwe1:AwI1P2OCPn%GgkdAKoJNAE5CjYCwAoZAzoL1AOjC18E%QuzBDwMzgRtDK4EjQxTBJwMwAOXDPgCfAwDAkoM5QD:C6f:nAtR:iIL6:yTCn:78gkU%kAJsvh%CGD3rAck9soGAvXWBf7z0QQa874DWfKeArjxdQE38UcA0vAY:4bw7P1P8Mb8KPCo%w3wlvr575L56O%h%NnvxvfI7wX3t%9h9qPv2:WP73T1ee8p9WHv9vRH79j0Ke:N9Abv0:Tc7uv0rO4V9XjuVPVA7qf1Ce4Q9tbti:ar7Rb3i%2s93rtSfh67ef4j%2F%brtIfr%7bv6W%5U%9Lu7Ptl74X8EfAf:dXwuf2w8VL%oPLp:qLze:%y9AYAzPWJAOn2AgEE%HEBFPnZARX6OwL%%p0Cy:sBA3j8aQMC:dUDZv1EBKP9sQS5:RoFqf17BXb90wUi:SIGs:xoBi78pwaY%94G%PoKB1P6Kweu%TsHDfk6B3X4Jgfo9:8GaPfIBvb2gwaU9jMGQfbdBf31gwXK9SkFpvXTBJP1gwSQ9T0EnvUDBL711QPv9bYDM:akA4b2nAPq9psDWvedA9T3nQNV%JgD2PiKA1r5cgPY%VIDTfopA7j6%QIW%8ECZfuBAqT7NALQ%9gB6ftqAez75wDY%1AArvuo:2:79P4e%zr%v:qD:Vn61Pzx%TT8jvmo%zj5Mfv1%NT6zPiS%sL4bPrb%GT6Gvl8%n:5tvoJ%hL7tPqT%3z7N:xb:AD9S:3q:UT%9P4::xgANABTARoBngLnAfQDlAJPBRoDrQZ0AwsIngNoCZgDwApjAxIMBANYDX8Ciw7aAaUPHQGhEE4AexF0:zESmP7DEsD9NRP0:IkTOvzBE5j74BMS%%kTrvrcE276vBNU%osTYvpNE5j6BBP2%rUSevtiEiH8ERLo:MYRyv2EEcL%URHK:y8R3gAjEfkBMBEVA1gRMQSdEUcF:xFWBnwSWwcQE1IIthM6CWkUEAolFdEK5hV8C6sWDwxyF4sMPRjwDA0ZQQ3fGX8NsxqvDYYb0w1THPENFh0LDssdJw5xHkoOBx94Dowftg4DIAgPbSByD84g9w8mIZgQdSFWEbwhMBL5ISUTLSIwFFUiThVwIngWfyKmF4Ii0Bh6IusZaSLvGlMi0xs9IpAcKCIeHRcieR0KIp0d:iGIHe8hNx3bIaocviHkG5ch5xpkIbgZJyFdGN0g3RaEIEIVFyCVE5Mf3hHzHiUQNh5zDlsdzQxjHDkLUxu9CS0aXQj2GBwHshf9BWcWBAUZFTEEzBOHA4QSBQNGEa0CExB%Au0OeALXDZgC0AzdAtkLQQPyCsEDFwpUBEkJ9ASFCJgFygc4BhgHzQZvBlAHzQW8BzQFDQifBEAIDgRSCHsDQwjkAhMIRQLCB54BUgfwAMkGPAArBoj:fwXW:s4ELf4gBJD9gAMB:fcCgvyOAhP8TQK1%zwCaPtgAi77ugII%0kD%PoKBP:69wQf%wUGWPsrB6v7XggX:JAJm:y2CjX9xgvg:bQMl:55DVT:DQ4SAGwOywCRDnsBfA4gAi8OtgKsDToD%gymAx4M9QMhCyAECgohBOEI9QOuB5sDdwYUA0UFZAIeBJABCAObAAgCiv8jAWL%XQAl:bj:2fs3:4H62:4j%aP%wveO:mT2nP4M9cn%v:MT:4Hyd:9X8fL:Q:CAAErvHQFu7sMBtO1vAh:tGwOy7MQDbuxnBFTsAAVk7I4FnOwOBvjsfQZz7dkGCu4gB7ruUAeB72oHX:BtB1XxWwdh8jcHg:MEB7f0xgb59YIGQ:c8BpD4%QXb%b0FIPuNBV38bQWQ:WEFuP5sBdP:kgXgANUF3AE3BscCuQaeA1oHYQQaCA8F9AiqBeQJMQbmCqYG8QsKB:4MXwcGDqgHAg:oB%oPIwi6EFsIbhGQCAISwgh2Eu4IyRIUCfsSMgkLE0YJ%xJUCc4SXAmGEl8JJhJcCbQRUgkyETsJpRAVCRAQ3Ah4D44I3w4tCEoOuge6DTYHMg2lBrQMCgZBDGUF2Qu5BH4LCQQwC1YD8AqkArwK9QGWCkoBfQqnAHEKDQBwCnz:ewr1:o8Kdv6sCv79zAqJ:ewKF:0HC6X8Fgsy:BQLvfv%Ckf7zwrN%oYKTfogCsP5nAks%foIhPg6CMn3Xgf79moGHfZhBTL1SgQ:9CsDSfMLAlTy9ABk8ez:e:D%:pvvL:7G7of9:%0K:Uftufyh7Jb8EOyd:JTrzPwx6xv95uqD:bXq:f2e6n7%oer::rzqeP:u6uL:M%s4AIbrdQDi65UAQuyWAKLsdwD%7DkAVe3f:6Lta::k7eP%Fu5L:jPuqf047v78Iu5O:PPtnfus7ez6Ue08%ufskflx7Ov48etM%GjrtffZ6if3ROqk9qzpL:YU6cn1gOh09fPnNPVv5wf19ebw9Inm7fQq5v:02uUl9ZjlXfVk5aX1PuX89SblXvYe5cj2KOU690TlsPd15Sn4ueWi%BDmGvl35oz57eb0%XDnUPoA6Jv6nujT%kvp9voL6gT72%oA%73r6:qu7Mn6qu2g%q7udPq070z6ufAt%rrxHPqx8iD6nvM7%n30cfpM9cT6CPY2%7H2xvtF93L8w:c2:S74Dv6F%Pb%zPjm:wT51wAv%cIBUfmcAm35XwOH%QEEovl7BMP5ygTt%eoEIPraBFz6mgSf%iwE5vqSAzL7zgKC%%QB1vvYAC38sf%I:HP%4vwm:Tn9z:uJ:XT6z:0b%Qj%yPc2:oD2Wv5H9XT%IPSI:g7zl:4V8qT%N:Gw:nTwvv7P79D%Se:o:uDuB:%U7jD:ZO5j:0:uof9S7ur:a%49AJnulgDY7vEAJe9JAXvvmgHX798BMvAYAojwRALW8GMCGfF3Ak:xfwJ28XsCkfFoAp:xRgKj8RMCovHPAaDxfAGh8R0BrPG2AMfxTAD48eT:RfKD:7PyLv9G8%j%AfS2:uX0mf7w9Zb%H:et:mv44P7N%TD:O:uc:6v8JAAR:sYAYf%AAZMATwKcAS4DdgIZBBwDBwWLA:EFwgPPBsEDmAeLA0UIJAPSCI4CPAnQAYEJ8QCfCfb:lAnp:l4J0f38CLX8bwib%7kHivreBoX55AWQ%NIErfevA9:2fwIl9kYBgfUIAPP0yf569Iv9GPRR:MrzH:uP8:b5ZvPb%E3zzvdC89H2RPPl9U:zC:Vi80H0fPOH85jz3fK180Ty0fO78enzRPH78%HwCfSS8BH0WPAU9DHwFPQb8BH0E:AL9BnwAvQr8PTzSvDh83bwx:Oy8Kjz:vCB81nxVvPD8SjzOfL58rjyzfI786jywfON8kX0gfLG9IfyQvWh8rr10vIs9hnzmfZ28wD35vNh92f0uvf09Av4ivVS%CP2jfi69r34S:fh%M73%vhA%Aj5mvgP%dj4Evn4%BL59:gR%dX4EPmV%A:5OvgM%cb3Bfk:9:n4qfbp%Af21fhe9b34sfSi%AX0hPhd82D4vvI3%CzyBvip8c33OvGO99:wSveZ8AP3aPC%9kvwfPZB8EH2R:AP9l7w5:WD8M31tfDA9fPwwfU98dL1kfHx9e7xHvZT8lf2wfKa9jXz4vat8yz3KPRy96P0rfcZ9dr3h:X39%j1Avg49vz3dPbl95v2vfer9ob3pfY894323:Zl9m:2Mfbq9fj1UvXA9az0kfX783H1RfNo9ZHyfPXj8bL1Q:EO9rbwkfZC8Dv37O8L%Lnv:vis7w76yu80%xXwZ:yO8J79OPHP:hHy8P8Y8:kASvTiAaL1pgIb90MDrPi5A0:6CAT5%zMEo:09BEP:KQTVAPwDUQK5A7UDZAP9BAMDJgabAisHMQIKCMoBwAhtAU0JHAGzCdwA9gmtABoKkwAnCosAIgqYABIKuAD8CesA5QkxAdAJiQHACfQBuQlxArwJ:wLKCZ0D5AlKBAcKAwU1CscFbQqUBq0KZwf3Cj0ISAsUCaQL6QkJDLcKegx7C:gMMQyDDdYMHA5nDb8O5A1qD0oOGhCYDswQzg59EewOLhLyDt0S3w6ME7cOORR7DuUULg6NFdYNMBZ2Dc0WFg1gF7kM6RdnDGUYJAzUGPYLNRnhC4oZ6AvSGQ4MERpTDEcatgx1GjMNnRrGDb8aag7aGhYP7RrED:gabRD7GggR9BqNEeQa9hHNGjkSshpTEpUaPhJ3GvkRXBqEEUAa4hAkGhYQAxolD9wZFA6rGegMcRmlCysZUQraGPIIfBiOBw8YKwaQF9AE:RaGA1YWUAKbFTYBzBQ6AO8TYP8FE6r%FBIX:iERqf0vEF39RQ8x:WUOIv2UDS391AxP:ScMg:2PC8b9CwsV:pwKa:5ACsX%9Qkg:7oJef%JCcv:XwkSADkJSwATCXEA6QiAALsIdgCFCFIARAgTAPcHvP%bB1L:LQfa:qsGXf4XBuT9bwV5:bkEJP33A%38MAPc:GoC9fyqATz99wCy:VcAV:7O:yf:YP8eAA::NAHf:mAC0f6ZA%b%1AQh:wkGgP8sBwIANgimAB0JaQHaCUUCaQo2A8YKMwTvCjMF5gotBq4KFwdKCucHvwmXCBIJHwlHCH4JZQevCXIGswl0BYYJcgQpCXIDmgh7AtsHkAHxBrcA4QXy:7IEQf9uA6f%HgIh:skAsP14:1L9L:4G:fP8zvzI%6b8sfqR:K:5i:zE%Jb88Pex:DP32vyN9hH9:fVU:YD1ov0Y9fj9w:RT:oP0sf5Z9A::SvRp:1b0vf%B9AcAy:READT1cwC59ZEAWPaeAA73mQDX94IAsfhbAJr5IgCR%tr:k:uE:6H8If%2:bb%0v5H:vH:2v0RAXb9LgIh:UYD4fxXBLr8XwWy:FwGyvxNBwX9Lwhk:QAJ5f2:CYb%agpE:wILGwCHCwYB%QsBAlkMBAOoDAsE5QwQBRENDAYuDfgGPg3QB0QNjwhCDTIJOQ24CSsNIQoWDW4K%gykCtUMxgqnDNUKcAzWCjMMygryC7QKrQuXCmYLcwobC0wKywolCnQKAgoVCuQJrQnPCT0JwwnFCMQJRwjQCcMH6Ak9BwwKtQY8Ci4GdgqpBbgKKQUCC7EEUAtCBKAL4APxC4kDPww%A4cM:gLHDMYC:QySAiUNXgI%DSgCRA3rATYNpAERDVIB1AzzAH8MhAASDAIAjwts::kKv:5WCvr9rgkb:QkJI:xwCBX77Af1%YMHyPg8B5T3GQdi9h0HNvVFBxn0kQcQ8:wHIPKDCFDxHwmi8MwJG:CDCrvvPguC7:ULb%%iDIDvPw2x78YNAPAzDmrwgw7o8LUOd:HIDg:yvg6p8pkOO:NbDr3zBw4p9J8NefQmDav0ngy99AcMr:RjC4L0tQo39AAKz:NGCU3zigi28s4HDvIVB1zxXwam8K0F8%::BEfvVgSm7rMDFO4YA5HthQIf7f4BveyFAWvsHAEq7McA%OuGANTrXQDA600AuetUAL:rcwDS66kA8OvyABvsTAFT7LEBmOwcAuvsigJO7fQCwu1WA0XurAPY7vMDeO8pBCTwTgTZ8GEEl:FkBF3yVgQs8zoEBfQQBOj02wPU9Z4DyfZcA8T3GQPC%NsCwfmnAr36hQKz%3oCofyJAoX9twJc:gQDJP9wA9v:%QOBAJsEFAFRBZUBFQYFAuEGZAKuB7UCdAj4Ai4JLQPUCVYDYAp2A80KjQMVC6ADNAuxAygLwAPvCs8DjAreAwAK6gNPCfMDfwj5A5UH%wOWBvsDhwX7A2wE%gNLA:oDKAL5AwgB%APv::QD4f7tA%P94wP4:NgDI:zMA2b7wgPD%rwDOfq9A8r5xwN0%dwDNvkABA75NQT5%H0E9PjZBPv4TAUN%dQFJPlvBj75GQdZ%c4HcPmGCIP5OgmP%eMJkvl7Co35:Ap%%WQLZ:mvC0n53gsn%fELA:nnC%L4wQvG%IILtfgpC7X4uQrK%DYK%fijCUf5Bwm1%WgIRPrMB:P6PAe%%78GofxbBpT9FgaR:vcFkP::BYYAMgZuAY4GPQIQB%8CtAd8A3UI4QNKCRoELAolBBML:wP3C6sDzwwpA5ENfQI2DqwBtg69AAgPtP8qD5j%Fw9v:c0OPvxPDgn7nw3U%b8Movi1C3f3hgpV9joJQPXXBzr0ZQZE8%0EYfJ2A5HxBwLV8KQAK:BT:5PvFf4L7%z8lO7Y%yzu2PrU7ev5jO0Q%VXtR:gu7Y73GO3j9hXtSPYk7br1RO069XTtx:Sz7WD0:e0I9FDuvfOp7oLzA%9Y81zvQPOx7zvz:e9H8z:wY:Nz8I:zmvDH87HwCvS78Fj0uPCw9KrwEvWS8H71cvD29UvwePYe8AP37u%W973vLfiO78b4Y%9c%UHv7Pkq73P6Iu:v%izvXPtI77v7de8L:LPvTPz:73:8VPCl:LHwvvwQ8cf8b:HC:MvxrPwi8oX8cfJN:LjyBfz08rD7JfNQ%0nz6fpi8376b:MS%nHzqPlp8z:5W:PY%Ejzc:g08xD4IPOt9w7zTPf98uz27vKO9uLyM:bZ8tv11fKG9dXyNfXc8uj07PKh9AXzX:Qo8yX0VfP184zz0fPL87rzEvSz8170vfOs9Nrz%vQJ9ET1SfSI9Zr0w:X49PP1X:UV9sv1KvY19i:2l:Yl9uj2DPYk9%b1Rfe19Uj3evUs9zn18fb09Jj2sPQl9nD0mfU59Pn0DvRG9PXzhPPy87fyCfTl8T30E:GR9EjwBPWK75X14e5C9lXuBfft7dr3se27%KXtoPnP7Yb6L%5m%8juPPyW7wT9lfC5:cDxWf4Q8%L%fPRR::31pv%I9%H:GPkEAKP6EAAh:AkAjP3y:97%z:8RAKP:IgF0:w8CQ::XAhL:ewPk:gAEuf5nBJP%tQRy:u8EWP4XBUf%MAU::j4FQv5EBU:%RQVo:kYFjf5KBb3%VQX4:moFP:%MBZH:vAXv::kFWABBBs0AkwZNAe0G2gFKB3MCqgcZAwoIygNpCIYExghLBSEJFQZ5CeIG0QmsByoKcQiICisJ6wrWCVULbgrHC:EKPwxcC7wMrgs7DeYLuQ0GDDYODgyxDgIMKg:lC6EPugsYEIcLjhBQCwMRGAt3EeYK6RG9ClcSogrCEpgKJxOkCoUTxgrbEwALJxRQC2cUtgucFCsMxBStDOAUNQ3wFL8N9RRDDvAUvA7fFCQPwRR2D5UUrw9YFMwPCRTLD6kTqg85E2oPuxILDzMSkA6kEfsNEBFQDXkQkwzgD8cLRQ:yCqcOFwoHDjwJYw1jCLsMjwcODMMGXQsABqcKRwXuCZwEMQn%A3MIcQO1B:UC%gaLAkQGMgKWBeoB9QSxAWEEhQHfA2EBcANCARUDIgHQAvwAnwLMAIECjQByAjwAbwLZ:3ACYv9wAtj%aAI9:lACk:0jAt783QEi:HkBZfv4AKz6WQD9%Z3:XPnH:tD42v1d%Nr8CPjK%9T3sfrE95P52:d3%Bn4Zfd:%Gb2C:mD9bv5xPSJ%jH0cfvS82r8qvNt:bzzcf4J9G7:jfReAET1OAEm9vkBKvecAkf4HgNx%X4DoPq6A8j71APk:MsD6:2jA9j%XgOk::8CSwCMAsYACgITAXwBMAHnABsBTwDWALf:ZAAi:8r:kv4N:wn%M:6I:UH9Ev08:Kj8KvtM:BH6APz1%MX73fec%8z2hfvI9X:71:SJ%:zzofs588X7kfL0%wPyLfyO8W78MfG4:ObwCf2t8GH9gPDB:V7wKP5E8JX%MfAJ:yXwgf8g8Pz:JfB2ADbw7wBW8GIBifDOAdLwLwIy8YQCqvHJAjry:QLe8iADlvMyA170MwM09ScDGPYQAwj38gIF%NECDvmxAiT6lQJF%4ACb:x2Ap:9fALR:pMCAgDAAiwBAwNNAl8DYAPUA2IEYARRBQIFKwa2Be0GdwaXB0IHKQgTCKQI5ggFCbgJTwmFCoAJSwuZCQUMmwmzDIgJUg1iCd8NLQlZDuwIvw6hCBIPTghRD:UHfg%UB5kPLAelD7wGog9HBpEPzwV0D1YFSw:fBBgPbQTaDgEEkw6dA0UOPgPyDeMCmw2MAkMNOALsDOYBmAyYAUYMUAH4Cw4BrAvVAGELpQAVC34AxgpgAHIKSwAWCjwArwkzADwJLQC8CCcALQgdAJAHCgDmBur:Lwa2:3AFaf%qBAL:4gN8:h0D2P1eAhf9qwE8:AcBSPt3AD:6:f8m%Zz:APhY:9L2M:%i9S3:dvRI:1jzg:9O8tz:YfFSAJnw3wD974ABku8vAlvv5gJX758Dhu9VBOLvAwVo8KUFDvE3Bs:xtwai8iMHgPN3B2L0tAdC9dcHGvbjB%T21ged97MHQfh5B8z4Kwc5%csGiPlaBrX52QXA%UsFqfmvBHP5CgQg%VsDtPimAjT47gGk9zMBCfd7AGj2yf:F9SD:JPWD:oz09P0A9Hf9hPMM:RzztvzJ8nT8i:JI:GHyMvxM8jH8SPJG:FXycfxy8rL8nvII:dnycv0h8%:9dfN7:tXzFP8%9Lb:sPRbACr1:wCt9ZwBN:YvAsv2sgJo9yMDDfh%A7v4wQNt%esDIvr8A9j69gOP%9wDRfyxA:78eQO5:TsDe:75AkT:uAIVAHwC7gBHAssBHAKrAv0BiwPtAWYE7AE5BfsBAgYaAr0GSAJoB4ICAQjHAoUIEAP0CFwDTQmjA5AJ5AO%CRgE1wk%BN4JUQTTCVEEugk6BJMJDARgCcYDJQlnA%MI8AKeCGICWQi9ARQIBAHTBzkAlQde:1oHeP4hB4z96wab:LkGrPuLBsH6Ywbd%UQGA:kuBjX4IwZ09yEGw:YqBiP2PAaV9VgGGvV%BrL0rwZc9O4GGPQ7B%Hzmge28wsIk:OQCHTzJwlW89AJNvOJChPzTAvs8hUMwPLdDJDynA1e8kgOKvLaDvjxSQ:M8ZAPqPGtD5Lxng%O8WcPnvEMD8bxlA4I8gcOZfJqDdvyxQxr8x0ME:R4C8:03Aqf9U4KfvbUCWz3cwli%DAJX:kQCVz6FwlW%0QJRvyaCSj9FAr4:bAKsv5oC1P:NQza:xANRwDvDZgAyg7OAJgP6gBTEOwA8xDVAHMRpgDOEWIAARIJAAgSnv:iEST:jRGd:gkRDv5WEHr9eA:j:HIOSvxKDbT7Bwwh%7EKk:pOCQv65AeK%XgGE:kQBaf4sQNI%GAC%fcgAbv3%P%P9%n%dvf3:XD3Iv1892j8mffI%8f3PfsF%MX6Uvhc%q34::kX%a75j:lm%RT6J:mk%vH4PPvD%Nr7nfh7:H:4Gf1s%LP9Y:hC:mn4w:5:%DP:pfiM:934zf8m%fP:ffn9:9:57f9J%sT:u:qG:zT7N:%0%9z%Pfx3:s78Dv5n:aP9B:45:an%0fxI:2383:8P:GcAt:vcAGn7OQEm%3sB7vqgAcP6qQGm%pYBlfpqAZH6JgGY%s4AqvpkAMP66f:k%mD:CvvK:jX7Kf5j%3:9k:vP:MP7Hfzy%277H:zH%kn8Lvpu:KT5jvws%aj8xfi7:G:4yPwo%ND87:fU:MH31fye99T8hPfT:HT30:xs99P8bPfU:HD31vx599n8hvfd:Jb34:yr9%z8xvf4:Or3B:0Z%Bn9U:gr:Zn4O:3s%Eb9SvlK:bL5Rf0j%jP9mfoU:RL76PyH%7H89Ptw:FD8KPyU:N77u:yV%778Ufud:Bf7V:zq%vD7z:pt%8f61vrU%jL69vqJ%S774vh5%0L41:uu90T8KPe::Lb2Rv1b9tf9HPZw:v31EP8B9rX:LfZbAID2AgH89qYBnvdFAmP43QJI%WwDSPrwA1z7aASB:NQEr:0zBeP%hAUYAMkFSgH:BXYCKAaYA0QGrQRSBrIFUwaiBkcGfAcwBjwIDgbjCOYFcAm4BeYJiAVHClgFmAopBd0K:gQZC9gEUAu5BIILogSzC5UE4guTBBEMnQRADLcEcQzeBKgMFQXmDFsFLA2uBX0NDgbXDXgGOA7rBp4OZgcHD%YHbg9qCNAP8ggrEHwJehAGCr0QjgrxEBELFxGLCzER%QtDEVkMURGnDGAR4Qx1EQQNlREQDb8RAw32EdwMNxKeDIASSAzNEt4LHRNjC28T3ArDE0wKGhS4CXcUJQnaFJYIQhUOCK0VkAcYFhwHfRazBtkWVwYoFwYGZhfCBZEXigWoF14Fqhc8BZYXIwVtFxEFMBcEBeAW%gR:FvAEDBbmBIcV2QTyFMcESxSwBJMTkwTKEm8E9RFFBBYRFQQzEN4DUg%hA3cOXwOnDRkD4gzNAikMfwJ9Cy0C2graAUEKhgGyCTMBLgnhALUIkABICEAA5wfy:5EHpP9DB1X:%wYF:7gGtP54BmH%PAYM:gYGtf3XBV39sAUD:ZMFpfx9BUL8bQXY%18FZ:tQBe36PAVs%h4F5PnxBFf5sQTH%FYEOfjeA7H3RAMx94cCvvanAV32pwAR9o7:3fVl:sT1NP3H9QX85fXg%hz2zPlr9s74zfbp90D3IPfB93b2Tfjv9eL4jfV%%Vb1IfpM9cr6cfV2%8P1Jfw:9tP84PZ%:Z:3Iv5z%L7%VflO:zv60P8d%0EA8:uiALj87wBl:SkB%f1OAXH%XQHL:lYBBf85AR::BgEW:74A6v5kAJj%%f8i:oH:if3%:tL8c:4A:OP9G:tR:Sn6wfww%Tb8M:ix%zf3N:s%9sn6SPVq%ln0Hvp08%b5nPLG%dbxvfkn8cv5kvDw%RjwKfq573T6c%:N%kPvMfsn7577Ge8Q:Bbvh:wa7::8Ie94:Sfv7v0r72L%Le:P:i:vNf8y75L:Pe:j:1PvJwB8710AvO%EABbwnACN8KUAH:GfAMrxiwCL8mwAXvNFAED0GQAv9e3:KvbF:zP3o:9J%Iz:a:mB:5f6gv:J%5H::fyt:y7%1:9V:w8AbgBUAHYBqABmAgoBPgN6AfoD%AGYBIMCFwUYA3cFtgO2BVsE1gUEBdYFsAW5BVwGgQUHBzEFrgfLBFAIVQTrCNIDfglGAwcKtwKGCiYC%QqXAV8LCQG2C34A:wv1:zkMbf9jDOn%fwxr:o0M9v2PDI39hgw1:XIM7vxUDLb8KwyM:PgLbPy6C1H8cws5:CQLIfzOCgr8cgrx%xMK2PuwCb37SQmh%%AIg:tyCGD7:wc2%4cHBPsLB8b6jAZ6%gsGHfqMBav5EAUj%ZoEgfgsBMb3xwPw9m8DBPYkAwT16AL2870C4:KkAtHxnQLH8KcCy%:BAuDu6QII7h4DQ%1dA5PspgP66:gDe%tTBBvrtwTc6iQFw%qaBdLqFwYI65kGZOsdB%HroAd87B4ILO2SCOvt%giz7lEJfu%UCUTwwAkC8dIJtPHHCVfyngno8lYJZvPwCNDzawgj9MsHXfQQB330PgZ:9FkFY:RkBCj0ZAPQ810CX:NWAdryUABF8lL:pvFf:gDxef1X8KT8r%:i%wvvN:tv7qT64%0s%mrt0fkK7ZL5xuxx%Z7sa:mR7H:5nOyp%bvs5fnr7DH6Ke2K%nHt7frC7Vj7HO7K%3vuQPzh7rn8Su80:bjvrv0o8Cb%nPCZ:hTxBv%T8Wz:GfLK:6fyHgBA82cA4fOjAIr00gA49fQA6fUJAZv2EgFP9xMBBfgNAcH4AwGC%fkATPrvAB776QD2%%YA0vzmAK396QCD:u8AT::3AAwAAQG2AA4BSgEcAcYBLQEoAkEBbQJXAZYCcQGjAo4BkgKsAWYCywEgAukBwgEEAk8BGgLMACkCPQAvAqb:LAIN:x0Cdv4EAub93wFi:bAB6vx2AYH8MgEl:OUA1vuPAJT7MgBh%8::Pftn:yz7:f4x%5H%TPsm:n:7u:3G%1L9IPzr:Ij8hfz7:CH8d:3A%:j9Y:t::gv7Cf%4%pj:bPorACb6wQDl%VkBqvnzAXT5iwJE%SADGvmvA:j4MwTf%KsE0fgRBc:4YgXb%JoF9Pi2BRr5tQVP%ZcFkPlfBd35EwU3%rsEm:pgBAj7CQR7%74D8:uCA278WQPp:EMDYv1AA9n9UANN:nEDv:6kAy3:6QOZ:0EEAwCrBGgAJgXIALMFIAFNBm4B8gauAZ4H3gFKCPoB8wgBApIJ7wEjCsIBoAp6AQULFwFQC5kAfQsAAIoLUP92C4n%QAuv:eYKxPxoCsv7xgnJ%gIJwfkeCLf4IAex9w4Gs:bvBML1yAPj9KACGPR7AWbzWwDN8kb:UPI%:vDxSP2r8Wr8hPGo%3jxBPuI8X:6s:EY%vbxzPlO8pX5uvJv%TTzVvm680b5SfQ6%d30M:l19S:5DfYu%aX2L:k59zX5yPdA%U:4UvnN%G35P:mW%aP5z:n5%Rr6Pvp5%nP67PqW%m:7pvoB:KT6m:yP%jv9aPre:TH6gv7s%Sf:nvnM:0n5cQDy%BUBm:i1AUr4TgL%99wCuvdYA373vgNM9woEIvc4BAL3RwTt9jYE4vYGBOL2ugPu9lQDBvfZAiv3TQJc97MBmPcQAd33ZwAp%Lr:e:gL:8:4W:4l%a39evkD:c35Y:wd%tD7avpQ%7L65vr1%pP6MvtY%mv7Mvqe%yH6yvsh%vD7MPoP:E76KPx4%jr8rfpF:O36Svwz%0b8f:s7:M37Jvwa:Af8Zvze%7D8qvv3:G77Pf0p%4D93vrB:Y76AP49%j3%6:l4:pv5r:5O%eL%BPkP:8D4Nf%C%FL:TPhk:x:4Z::791n:4fc2:8:3:v7F97D%xPdP:sr33v3Z92T97:fo:A74cPw1%AT8ZPin%5v4XfvZ%Cf7HvkI%2n5::q6%Qz7Efox%3H6b:va%sT7S:sz:Mf7ufxL:Fj91:wM:mj91P77:a7:i:6VABb:hwGW:38CCQB6A2sAcwS8AGcF%ABSBiABMgc0AQQIMwHICCABfAn6AB4KxACtCoAAKAswAI8L2P:iC3v:JQwd:10Mwf6NDG3%uwwl:uoM7f0cDcf9Uw23:Y4Nv:3ODd79Eg4W:lkOZf6mDsz%%A5I:08P2P%rD3oADRArAXIQ5gHZEKoCQBFxA6MROAQAEvwEUxK5BZkSbgbREhoH%BK7Bw8TUggYE9wIFRNZCQoTyQn%EiwK9hKACvgSxwoJEwILKxMvC14TTwugE2IL7xNpC0UUZAugFFML:BQ5C1YVFwuvFfAKBRbGClgWnQqoFnUK8xZSCjYXMgpvFxgKmBcCCq4X8gmvF%gJlxfkCWUX6QkbF:gJuRYQCkAWNAq0FWMKFxWdCmsU4Aq0EyoL8xJ7CysSzgteESIMixB1DLYPxQzgDg8NDA5SDT4Njg16DMENxgvrDSMLCg6WCh0OHwokDr4JHQ5yCQgOOwnkDRcJrw0DCWsN:wgWDQgJsQwaCT0MMQm5C0oJJgteCYQKawnVCWwJGAlgCVEIRgmBBx0JrgbnCNsFpAgMBVUIRgT6B4wDlQfhAiYHRgKtBr0BKgZHAZ4F4wAHBZAAZAROALUDGwD4AvP:LQLU:1cBvf93AKv:lP%e:7L%lf:Z:ZH:D:2S:1r8mv%9%6r:O:vD:9P65v%H%hQAV:pOAEH6lQBI%ukAbPpMAa76vgEP%z8CjPvOAiT8aQPT:A0Ek:22BF3%YAUr:wYG9P%kBrIANQddAbMH8QEdCGgCbgjAAqQI%QK:CBIDvggOA6EI7QJoCLICFghdAqwH8AEvB2oBoAbQAAUGIwBiBWn:vASo:hgE5v16Ayf96AJv:GQCwvvyASD7kwGJ%kkB:fkVAX359gAL%ewAqfj2AFf4FAEZ%EUB7feFAdP30wHK9yoCzveIAt736AL490gDGfikAz:4%gNo%EsElPiVBL:42ATp%BQFEvlJBTz5eAVp%aEFoPnFBeT55AU6%v8Fp:oYBi37LgbN%0MGhfxVBlP9ZQYz:nMGIv9:BhwAiQYeAZMGJgKfBjMDrQZCBMAGUQXZBmAG%QZqByAHawhPB14Jhgc9CsUHBgsNCLMLXghCDLkIswwfCQYNkQk6DQ0KUA2VCkgNJQslDb4L5QxaDIsM9wwaDJINkwsnDvsKsw5XCjMPqgmkD:sIBRBOCFIQpQeMEAIHsRBoBsEQ1QW7EEoFnhDGBGwQSgQjENcDww9vA04PFAPEDsYCJg6FAnUNUgKyDCoC3wsIAv0K6QENCsgBEgmhAQ8IcwEHBzsB:gX5APoEqwD:A1IAEQPu:zMCfv9pAQL:swB8:hEA6:2F:1H9Df%t:Kj%APxU:kr7EP6J%tn9vvms:en4h:0K%Gn9I:dP:Tn2Of1R9Sj9b:Qd:ZrzG:3W8iP9KPI3:ZPxWP0X8Yj9tfDG:W3wFP4:8HH%K:Dc:jHwVP9S8Nf:kPBkAOnw9wBd8Y0B6PEjAobyswIw8zgD4fOvA4:0EQQ19VwEzfWLBFL2mwTB9owEFvdcBFH3DQRy958DevcWA2j3dAJA97wBAff0AK72IABI9kb:0vVp:k71j:3B9Lz8L:T1%5vzPfsK85r6f:IM%vvxl:mB8Tn5EvH0%LHwxvhf8K74H:Cq%PTvuvjg79r44%8L%f3vSvkq8Jb5afDr%bTwSfoK8av6ZvEP%8bxdPsq8tj7j:I7:Pbym:xe8:n8xvNV:TD0rf2b9AL%B:VT:nf1oP7s9en%ZvYu:%f2bf9u96j:%:fc:434CAAj%SsAuvlDAFL6TgDo%kwAffs7AA78HgCd:Pb:Kf3E:7H9i:81:k7:sf4P:yX:0f6L:5f%4v9g:iYAMP5VAAX%bADj:WsAyP1QALf9HgCw:dT:tP10:8H9AP:W:Xv%8:3n:Rb%Rv07:pz8YP7t%4L%Pvug:pL6tv7v%cT%WfnH:tT4v:5k%Kv%CfiM:sX3Yf6W9yv%e:fo:XT3mf1:9zz9nPfS:Mr3W:wI%Nj7V:hL%7P4tfoa%Rn6ivl5%f751:hz%jX46PqY91r7AffI%3X2M:z49Zz8jvUC:Tn1Z:399Mz92PQw:sr0lP7S9Pb%7PRW:xb1sf9L9QUAifVQAMz1jwAQ9r8AUfbdAI726QDG9uEA9vbIACD3oABF928AaPc6AIr3CACv997:2ffC:wz4t:9J%MH:kfje:%T4EABD%VUAq:mqABz6DQGU%n0BEfv2AZH7dQIT:PcCkvx4Awv99AN6:WkE2:3QBCn%JgVf:mgFfP6RBXv%nwVd:pIFIf5pBcn9JAVX:cMEz:xKBDT8uQOK%xID1vpYAh36jQFh%bMAqPjN::X33:5K9%39rfb6:CD2C:yn9SL7RvVD%v30cPnP9Kr4u:T198D0Uvfc9ML2DPVJ9k315vWd9Zr1%vVl9WD2RfXM9jf1PPc59az3R:UY%F31ffh59dn4mPUq%bn1bPnc9aH5::XH%SX23flO9uX5e:be%a72yfnp9qf5LPd6%Xn3Q:nS9wP5Nfi7%KL4bPgY%Rb4lfm69xX6V:eW%u72Fft:9pD7C:YF:Jb1dPwg9dv8r:Q5:UT0jP3j89H9j:MG:kvzJ:4W8zH%8vIi:t:y%f3c8rX96PJX:QHz4fwo81b8WvO4%5jzDfvh81f6MvSb%Yz03Pjq9B:4TfVl97L1sfYX9gb2fPZm9d720vQ89070lvfc8%r3f:M5%DjzgvgH88X47fIA%efyMvn08lr5EfN1%TrzhPlt84P5p:N1%ebzWfkn9DH5aPQB%af0yvjj9I:4GvVS%Ev1Fvh29d33m:Wp97z1fvfa9V339:VK9xP2Rfcv9k:3TPZn92n2jPeF9rv3oPbx97b2K:jH9mX40fac%NH2zPjH9vP4svYQ%ZH2Ivll9iv5MvYs%fv1KvnH9Sr5mvUw%Xz1QPlx9V:5f:WP%af11Pnr9S:6Svaf%sP2JPtU97z7%:dk:LP4Gv16%dn9Tfqh:ij7bP8G:DcA5fz:AML9wAGY:nQCZv8YAykApwPgAB4EigF7BCYCvQS2AuYEOAP3BLAD8gQeBNsEhAS2BOQEhQRBBU4EnAUTBPUF2QNNBqIDpQZwA:0GRgNWBycDsQcUAxAIEAN1CB8D3whBA00JdwPACcEDNgoeBK4KiwQlCwYFmguMBQ8MGgaCDK4G9AxFB2QN3QfSDXEIPQ4BCaQOhwkFDwIKXg9vCrAPzQr4DxkLOBBVC20QgAuaEJwLwBCoC%AQpQv8EJYLFhF7CzIRVQtTESYLexHtCq0RqwroEWAKLRILCnoSrAnLEkMJHxPQCHETVAjAE9EHChRKB08UwwaNFD8GwxTCBe8UTwUSFeoEJxWWBC0VVAQhFSQEABUGBMoU:AN:FAMEHhQcBKkTRgQjE4EEjBLLBOgRJAU6EYoFhRD5BcwPcAYSD%sGWg5lB6YN3Af5DEwIUwyzCLcLDgkmC1oJowqVCS8KvgnOCdQJfwnWCUQJwgkcCZgJAwlWCfYI:AjzCIkI9QgACPoIYQcACbEGBAn0BQUJLgUBCWUE9QieA%AI3gLACCgClgiAAWEI6QAhCGYA2Qf5:4oHpf80B2f:1wY::3MGK:8IBij:lAUw:xYFP:%OBE:::ANb:14DX:%1Alj:AgJC:0YBHf%FAOj%wv%m:gP:Wf5O:gf%qf2z:Rz9Zv2t:CP9YPzy:Dj81:w2:NX8Wvzt:KD8If0E:W79gv3T:RX%Tv64:tr%Z:9z:xwAFQDUALwAigFkATcCCALZAqMCaQMxA%QDrQNIBBMEkARhBL0ElQTNBKwEwQSmBJoEhARbBEgEBgT0A58DigMrAw8DrgKEAiwC7wGmAVMBHwGyAJcAEgAOAHX:hv:g:gD:VP5::tb9Bf5p:Zb9Dv0z:cf82:yU:JD8dfxR:Gj8Hfxr:PP7e:zW%5f8xPu%:MD77vzI%yX93Ptj:f37pf0n:Ov9WPww:o:8c:7K:LL%Cv3s:kv9H:%P:Uz:1P1z:xv%lv9k:rP:sv7M:wX:4v9h::T:yP8EADwAEwDBACAAVgErAP0BNQC0AjwAegNBAEsERAAlBUYABAZIAOQGTADEB1QAoQhiAHcJeQBGCpwACwvOAMMLDwFqDGAB:gzBAXwNMALfDa4CJw43A1MOywNjDmcEVg4KBTAOswXyDWAGnA0QBzINwAe3DG8IMAwaCZ4LvQkDC1UKZArhCsEJXgsdCckLeAgfDNUHYAw3B4sMoAafDBIGnQyOBYUMFAVWDKIEEgw1BLoLywNOC2MDzwr8AkAKlwKkCTMCAQnTAVkIeAGyByIBEQfQAHoGgADvBTIAdQXi:w4Fkv%7BD::fQTp:lYEkP5GBDH%SQTM:V8EXv2CBOf8sARm:OME2vsXBUP7RwWj%nIF%:mUBUz5rAWZ%LwF5ffDBTT3xgWK9sUF7PXFBV:1yQXo9NcFjfTxBU:0GgYz9FUGOvSiBmH0AAem9GwHBPXkB3b1Ywj39eUIgPZlCQ333gma90wKI:irCqb49wog%S8Lj:lRC:D5WwtC%ksLg:oiC7P63QrR%n4K3PoHCtb6egm%%tgIl:onCGL6aAci%qEG2vnWBY:5CgVC%UEE9vh:A6v4xwJg%BoCFfh9Acr37wB993EAMfcFAOj2q:%k9mX:avYz:zj2FP8S9gf:9fUK:%P1HP:a9Tr:2:Vh:%j1kf8C9sj:KfYFAF32SQCe9pMA6vbiAD:3NgGa940B%vflAV34PwLA%JkCJfnyAon5SgPu%Z8DUvrxA7f6QAQe%4oEh:vPBPP7DQVj:EQF2Px0BVH9mgXQ:bcFUv7IBdf%zQVc:8MF4P%sBWAAhwXZAFUFSgEXBbMB0AQRAoQEZAI1BK4C6APuAqEDJANiA04DLgNrAwUDeAPpAnYD2QJlA9QCQwPYAhMD5QLVAvkCjAIUAzgCNAPcAVYDewF6AxoBngO6AL4DXQDaAwYA7gO1::kDa::4Ayj:6gPv:s4Dv:6hA53%ZAOJ:hYDhf65ApL%TAKu:tIB1v5LAQf:uAA%:xwAef94:7j:0P76:yn%QgCG:ZIA7PzoAGL8RQHp%6cBhvsMAjv7cQII%9UC7Po1A%X6jwPy%uMDEPsvBDv7cQRv%6gEpvvTBN378wQN:AYFMvwOBUn8DAVR:AIFSfzyBDD83gQH:MoE0fu3BJL7qgRO%6MECvulBMr6sgSV%s0Ebvr2BFn6LwVY%ngFbPrSBZT6OQbN%qsGFvshB2n7mAfE%wkIIPxwCHn8yAjK:A8JEP1DCUn9Ywlz:W0JjP1jCZL9RAmD:RIJX:3OCCP9eQjQ:BUIZvyjB%X7JAdP%5kGqfoEBvb5aAU5%cYEePgiBLb3fwP49t8CQ:ZBApr1pAEA9QoBdvRvAP:z0:%b8zf:S:Od:g:zCP7o8nz91vL5:Nryf:zy8hD8HvOq%1vzTful8:j6%fOq%lT0Zfqz9Cr6E:X5%XL10:nN9bf5I:aj%XP2lPm69or5%PaC%Sn3e:lP93b5aPdx%XX3bvl292:5a:dz%Vf3ffk694:5Fvep%ez2zvm:9v:5kPY8%mD2hfox9tn6AvY4%9T1nvum9Qn8efV1:E713Pwk9Tr9::SN:d700:3F9An%tPQw:q:0R:629Ez%y:RB:vD0Iv4j9e:9ZPWo:a:1Sv0D9tj8XPZS:Lj2uvsV9xP7cfdh%sz3qfkj%O74dfg4%MH4ivcG%en2Q:lW9nf50vWh%V71wvn69Nn5pfTl%V:05:ko9N:5AfTO%erzs:nl85D58PNm%Qj0Nvkq9AH5U:TH%IH0ivix9Ev44:QO%Bb11vdN9ab3hfWB9771a:f29Wb3KvZx91j2jPd99rT3l:bm96X2H:im9l34m:ab%IP21vhe9gv5L:Y3%ff1Wfm39W:5c:V5%S31d:nq9Gv5rfRX%Xr0O:lU9Bz5PvT8%Dr04fhJ9M34avTF%J:0zvjo9Ov4RfUe%bb1avk89s751fZJ%n:32vo2%H379vgu:Lr56Px8%qX9OPti:uj7Gf%L:Mb:H:1nAKT9%QAZ:nsBgf7rAdz%SQIt:5MCdv:KArn:7AL5::wCNwD4AnMA5AKxAMEC8QCTAjQBXAJ%ASEC0AHkASsCqQGSAnIBAgNCAXoDGwH4A:4AeQTrAPsE5AB9BeYA:gX0AH8GDAECBzEBhwdhAQ4InwGWCOgBHgk9AqEJnAIdCgIDkQpuA:oK3ANZC0wErQu8BPYLKQU0DJMFaQz4BZIMVwaxDLAGxgwAB9EMRwfUDIUH0Qy3B8gM3we7DP4HqwwSCJkMHgiHDCAIdQwYCGcMCQhfDPAHXgzQB2kMpweADHYHpAw7B9QM%AYNDa4GTA1eBowNCwbJDbcF:g1nBSkOHgVIDuIEXA60BGQOmQRhDpQEUw6lBDkOzgQRDg0F3A1gBZcNxQVDDTcG3QyzBmYMNQfhC7oHTws:CLMKwAgRCjoJbQmqCcoIDQotCF8KlQecCgUHwgp8Bs4K%gW9Cn8FjgoMBUEKogTUCUMESgnxA6QIrQPmB3oDEwdYAzEGRgNDBUEDTgRIA1cDWANjAnADdwGPA5gAtAPL:90DFP8GBHb%LAT2:UoEkf1cBEn9XAQZ:UcE:PwaBO380wPo:HID5vz5AuP8aALa:MIBx:wJAaf8QwB5:HP:Pfyf:vH7zP2Y%wH9NftC:Mn6lPtY%vr65vl0%nn5BfoU%a35vfhr%Xj4QvlJ%DH5Nfg6%T:4Xvln%Jv5r:jy%Rb5XPqb%dX6OfpW%%762Puz%1T8hPzE:Fr9JP0x:nL9Av%t:cr:1v2FAO:9MQH4:csB8:1RAuD9wQLA:RsDk:1cA1n9hQMS:ZYDvfyRA1z8dgPy%0gDgvsKAw77vAKb%mMCLPoCAsT5nAFi%TUBCPnOALT4awBn%A0AH:i3:933aP%j9yT:c:fq:lD3v:4696L%MPeU:jP3lP5A96L%VPe7:m333f6K9wX:qfcy:8r3Y::v95b:F:jK:0T4AQB0%DkAqPhzAOD4rgAc%ekAXfklAaP5YAHv%ZoBQfrTAZn6CQL1%j0CVftvArn7nwIj:M0Ck:z5Agv9IgOP:UoDH:5wA77%kwNr:7QDJgDTA%kA8AOxAQ4EeAItBDkDUATxA3gEngSnBD8F4ATSBSUFWAZ2BdIG1wU:B0cGnAfEBugHTQciCN0HRghzCFQICQlMCJ0JLQgsCvkHtAq0BzILXgejC:wGBwyPBloMGwacDKAFygwfBeMMmATkDAwEzQx7A5wM6AJPDFUC6AvGAWYLQAHOCsUAIQpYAGYJ%v%gCKn:1Qdl:wgHK:8%Bvj%ewXL:sIEov4WBH7%egNf:vACRP56Aiz%GAIT:ssB9:2SAdT9agGl:VABZ:1CARn9OgG5:DcBSfw1Acj7MQE6%yoBoPogAf:5EgFa%QABtvjqABf40QCE97cA::aeAIv2hgAq9nIA3PVlAKL1YQB69WgAYfV9AFb1oABa9dMAa:UWAYz1ZgG79cQB%PUtAkL2ngKU9hMD6:aJA0D3:AOP92cE0ffHBAb4GAUr%FgFQviFBUz4oAVL%KkFRPiiBTr4jAUt%GgFIfg5BRX4AAUK%L4EAPh2BPX3JwTo99QD2:d9A873JAPB98kCt:duArH3FAKx97wBtvdoAb73FwHJ98oA1PeCAOD3PgDp9:7:8ffC::r3i:8F%Fr:Ffgw:yn4Df9C%PP%X:jh:n:41:6g%NP%wvjU:uj42f4S%eH%Qfnq:nr59:68%Qj:Cfoc:2H6Nf:C%lL:K:tz:5n7l:8L:Lz:f:zg::X8AwBq:SIA3:07AFH%TADA:lUALP9VAJb:TAD9:zgAYwAaAMoA8v8yAcL:mgGJ:wMCSv9pAgb:ywLA:iUDeP5yAzD%sQPs:eIDrv0GBHb9HQRI:SsEJf0yBBD9NQQM:TMEGP0tBDX9JARi:RUEm:0ABN:95AMq:sADeP6VA8X%ZAMO:y0DUP:yAoj:tAK0:3QC0v80AuD:9AHd:7QByP90AZ::MwFj::QAFP%4ALH%ggA9:lYAuv03ACr9KQCT:C8A%PtJAF:7dADL%rAAQvr5AMf5TAFc%acBA:kGAr74aQKL%M0CbfgxA2L4kgNo%O4DffhBBJ34iATF%MAE7:joBBf5AAU6%QgFU:kCBWH58ARh%dUEVPm2BDv5lgQV%XkE5PhiBKv4VgRr%FoEKPhuBOX3lQSl984EbPcXBT33bQUc980FDPcyBg73lwYm9:sGU:daB5f3tAfw9wgIXPhVCNr4mghm%dQI:PkDCZn6Igk5%zAJ1:srCW38EQn5:OMIdv2jCOP9UQg::vEHiP6GB8D%Ewfo:pkGAP8cBgj:ngUC:yEF7v6lBM7%LASh:rUDaf5DAyj%1QLg:W0ClP0MAkf9swH8:GIBtvwZAXf81QBB:JQAFvxUAPf7EwDk%8::2:uI:9v7Pf:k%:D%9Pui:gv8Uv4n:AD%Sfys:W:8V:2Y:P78wfyk:Or8SfwP:fD7Lv2d%0f9Ufta:RH7Zv3d%mr9t:pn:aD6Xv2X%k39m:o1:az6Fv3J%vD88frF:CT7lPxe%178oPsl:Of76vs1:K77h:xx%%D8Nvs::f:6pP3L%g:%nPp%:nT68P5U%mH:PPrL:yz6KQAl%ncAJ:qxADD61gBC%uUAXPrfAH76xgCo%p0A2:pnABf7JQBd%9j:q:uB:wP8H:9g:LL%wvw6:iT9uP2E:Sz93:2Y:DL%::t8:mT7vP7L%u:%NvoW:6n5L:8o%Tn:s:g2:0v4Jf:w9wb:o:fb:mP3pv4y92f%EPci:v722v399pH9DfdN:S33Ef1c9%H8l:e%:Nr3q:wj%Kf8bvi1:Ln40fwB%fz8RPkz:X:5dP2x%bz91:kK:vD5WP77%aT%9vnq:uP5Jf:C%VP:mPlx:2b5ff8x%Xj::fhh:8:4PP%q%Ar:k:jO:o:4i:6h%Ef%y:gD:g:5xf1u%Y795vlj:XL6Rf0P%zf9uPs6:Wf8Tf0Y:XP9yf2q:Xf%8f0f:0n%w:%u:mAAIf:3AJ::hQElAAoCsACDAj4B7wLKAUsDUgKXA9EC1ANGAwUErgMqBAkESARVBGEElQR4BMgEkATxBKsEEQXKBCgF7wQ3BRsFPgVNBT4FhgU4BcgFLQUTBhwFaAYJBckG9AQ2B%AEsAfPBDQIwQTACLkEUQm2BOUJuAR3Cr8EBQvJBI4L1QQQDOIEigzuBP4M%gRqDQUFzg0QBSkOGgV6DiQFvw4uBfYOOAUgD0AFPg9JBVAPTwVZD1QFXA9YBVoPWwVUD1wFTg9bBUkPWQVHD1MFSg9IBVIPNwVfDx4Fbw:%BIIP1gSWD6UEqQ9sBLoPKwTID%ED1g%SA%UPPgP2D%YCChCNAiIQNAI%EN4BXBCNAXcQQwGOEAIBmxDLAJwQoQCPEIUAchB5AEYQgAAOEJsAyw:JAH4PDQEpD2QByg7PAWEOSgLsDdECaQ1hA9kM8gM5DIEEjAsHBdQKgQURCuoFSQk:Bn4Ifga1B6UG8gayBjcGpQaIBX4G5QQ9BlAE4gXKA28FUwPnBOwCTASWAqMDUwLxAiICPAIDAokB9QHfAPcBQwAEArj:GgJD:zQC4:5PApv%ZgJo:ncCSf5:Ajr%fAI4:m0CQf5PAlD%HwJh:twBcv6FAX3%GgF%:p0Acv4RAFf%ev8q:tv%7P06:pz9nP0%:Qb90:x9:GD8Bvzp%6X7cftd%:76LvuT%hf7M:oX%%L5Kvuj%Uz7ePl5%2H5rvtf%ej7cfkk:Jn5Y:zU%aT8Ivrn:IH6LP3w%nP9bfu6:fX7:P2G:Db%HP1j:rT9gP5K:on%2:5::mP:Y:7f:zf%TQD::awAvv37AHf9OwEu:WwB4:yQAZf8pwFM:LIBAfywAbb7pAFq%4wBIPtsAdj6QgGU%hEBVvrbACH6oQD0%WYA0PkqALX57:%i%bf:lfmA:4z5TP%H%Rr:hPnr:oL5v:6B%Zb%gflx:oT5Uf6I%Tf%jfkk:pL5Gf6V%Rf%lPkc:o:5Kf6I%T3%gflY:nr5ef54%aD%fPnO:on5A:%h%T7:xvl:::n5xv86%hAAifpcAOT6pwBJ%%8AtfszASb8cgGa:KsBEP3eAYb9CgL9:TECdv5TAvD%cgJu:48C7:%tAnEAywL0AOwCcwESA%0BPANeAmwDwgKiAxgD3wNeAyUElQNzBL0DywTYAysF5wOVBeoDBwbgA4AGygP9BqUDfAdwA:cHKwNrCNQC0ghuAigJ:AFsCYABmQn8AK8JcwCvCef:lwlc:2sJ0P4qCUf%1gjC:XIIQf0ACMb8gQdS:PkG5:trBob72wUv%00F5frFBKf6SQRz%toDSPp8AyL6MQP%%fwC2fnaAq75zAJ6%c0CP:nbAvz48wKy%BADZPgwAxP4TgO:92kDafd:AxH3jgO49pMDXvaOAwT2fgOr9WQDVvU:AwX1EgO79OACe:SqAkX0dAIb9EAC::MRAvHz6AHw88YB%POsAQn0mgEf9JABN:SOAU:0kwFm9J0Be:SsAY70vwGg9NMBs:TpAcj0AALg9BQC:fQmAh71NQJC9T8CZfVDAoT1PwKd9TQCr:UgArj1AwK49d0BsvWtAan1dgGg9ToBmfX6AJb1ugCY9XkAnvU7AKj1AAC29cf:xfWR:9b1XP:n9Sn:%vX3:g72xv4j9pX%O:Zm:lX2OP5y9gr%kvbc:bX2rv3Z9oD9:vZR:SL3Iv1F9:L8ZffD:IH3k:ya92X8sPc7:MP3FfzS9:f73ffh%%T31vvl99X74vfe%9z38vvY9w:82Pc1:N:3Y:zw95n8DPjV:DX4GP1q%GD9qfir:fL4%P1B%UT%k:mL:uj5zP47%gX:jPoy:9r6VP8l%2n:b:tz:7n7cP8D:GT:TvxP:5v8Nf:p:Bj:Nv35:oH92:7G:cD%A:6r:jb%nv5d:pj%d:6d:oT%q:6F:sP%fP7n:m3%Fv9Y:lD:QP6T:yf%4P8L:jMA7v2LAM795ACp:ToBgf2KAVX9zgEn:QQC%PwpAsv8OwKg:DkCefwjAln8%QE::L4BLPxzASH8GgEe:LYAI:xKAC:82v9E:Gr:Yfz9:oT8mP6v:D3%4vzx:Rz9tP1b:Yj9n:1u:eT9Z:0n:nH9Z:6I:Z:%qv3R:tP9:v79:SX:Jf5L:0j%cP9i:pT:cv63:3X%2f9r:vz:VP4eAC:%QAD8:WQAu:2LAG79twAX:ekAuPwiAVb8ZQHz%7QBk:sPAjn7dwLn%usCn:ppA2L67wMz%nkEEfoEBfz5jQX0%REG%vmMBg36:AYr%l4HVPqzB4j6%QfF%jIICvtdCFP7fQih%5AI8fuVCEH8jQiN:HcI1PxSCBT9IAhL:eEHdv2YB5T9Rwem:fEGqv2YBqP9PgaT:eQFev2MBVr9NQU2:eEEDf2SBOH8RgSz:P4Dgfy7A0z8fgMX:EUD4PsRA6r74AJ1%7ECQvuFAhP7WQLn%isCwPr4AZ36vQF9%ngBYvonAUn6yQAy%mAAHPrt:wb6cv:y%fL%3vlu:s356f2:%WT9tfni:LD5Zvyt%fb7rvmV%7H5SPu3%RL7vvn1%sb58:rR%Qv73:k7%%75f:v%%dX7D:o2:CD6n:wv%gz9Pfp4:Uj64f1R%kX%WPqk:l76:P5k%k7:a:qa:3T63:%B%h8AlPpYAK36iwDN%rQA8:rUACL75wBX%%wAk:viANb7ygAd:KIAZ:xwALP8NAD::PL:S:2s:5T9Y::Z:Rn:Gv7M:lT%ff6G:ir%rv7T:cr%eP3W:hz90f6::Lr%ZPyR:g78Vf6:%wj%efus:UD7RP0T%9L89Ppb:OL64vve%mv75Pr4%vP6jfoI%y76IPvc%Tr7nPlU%235bvtS%Yn7Svmi%1X5uvty%c:7nvnf%9b56:sW%vL7Wfr3%5v6%vvX%v77C:sF:DT7DvxR%xn8Yfsm:Gf7Nvxj%0n8Vftd:D77dPwf%5D8%vqy:ND63Pyk%g:9d:pO:U76m:0r%vb9D:pf:v751v76%Vf:A:ri:xz6cgBE%gYBevqZAb76KQIN%7ECZ:swA8r7pAM0:AwEo:xpBBX9uwSJ:QUF:f1HBXD%gQXh:rQFUP:gBbv:BQYjACMGhgA6BuMASwY6AVoGiAFpBs8BeQYOAo4GRgKpBncCzQakAvcGzgIqB:YCZQcdA6gHQgP0B2QDRwiEA6IIoAMFCbgDbgnMA9sJ2wNOCuYDxAruAz4L8gO5C:QDMwz1A6kM9AMYDfMDfA3vA9QN6wMeDuUDXA7dA40O1AO0DssD0w7DA%kOvgP3Dr4D:Q7EA:0O0gP2DugD6w4GBN0OKgTPDlUExA6GBL0OuwS9DvUExQ4yBdYOcQXvDrEFEA:wBTYPLAZgD2QGig%VBrUPvwbcD%AGABD4Bh4QCAc3EBIHSRAWB1UQGAdbEBsHWxAgB1UQKgdKEDwHORBYByIQfgcDEK8H2g:rB6UPNAhkD4gIFQ:lCLkOSglTDrUJ4w0lCmsNlQrtDAYLaAx0C94L3AtNCzoMtwqMDBwKzAx%CfcM4AgKDUQIAQ2sB9sMHgeYDJoGOQwkBsILvQU1C2cFlwohBewJ7AQ6CcUEhQirBNIHmgQkB44EfwaFBOcFegRdBW4E4gRdBHkESQQiBDEE3QMUBKcD8QOAA8cDYwOXA08DYAM%AyUDLQPoAhcDqgL7AmwC1AIwAqQC9gFpAr4BJAKGAdUBUAF%ARsBIAHnALwAtQBTAIYA5:9dAHn:PAAL:yUAof4YAD7%GADj:SMAlv05AFn9WAAu:X0AF:2lABT9zwAn:fcAT:0bAYr9NwHX:UwBNP5ZAZ7%XAEU:1gBkv9NARcAPQGgACkBKwESAbcB%ABBAtoAyQK3AEwDjQDJA1wAPwQkAKwE5f8OBaL:YwVf:6wFHv:nBeD%FAan:jUGdv5KBk7%VQYt:lUGFf5LBgT%Nwb7:RoG9:30Bff9xQX5:Y4F%:1QBf:9DAUD:sMEB:53BA3%KgQT:twDGf6PAx3%QwMf:voCHP6yAhT%bQIJ:ioC:P3tAe:9tAHi:YMB2P1ZAdH9OgHO:SYBzv0fAdP9JAHc:TYB7f1SAQf%eAEs:qUBXv7YAZ7%EALt:k0CSf%MArL:zgIlABIDoABWAx8BmQOeAdkDHQIXBJcCUQQMA4UEegO1BN4D3wQ5BAYFiQQrBc8ETwUOBXQFRAWcBXMFxwWcBfcFvgUsBtoFZgbtBaQG9wXlBvcFKQfsBW8H1QW0B7QF%AeKBTgIWQVyCCIFpAjnBM0IqQTrCGgE:AglBP4I4QPwCJ0DzwhbA5gIGwNLCN4C6QelAnIHcALoBj8CTwYQAqsF5AEBBbsBVASTAasDawEJA0MBcwIXAeoB5gBwAa4ABwFvALAAKgBpAN::MgCR:wsAQP:x:%3%4v%Z:t3:Qv7f:%f95f%J:ez:KP3z:8b8%P9j:Pf:Afzw:6T74:9M%8::%:q2:6:6mf9o%nj:JfpU:%b5Lv%p%Qf:bfnd:jT5s:79%Ij%yfhe:pj4Nv5r%BL%P:jz:Rb42v3v98j9yfe%:aP3vP1:98D9W:fL:Tf32v0V9%399PYD:tX2Gf649jD%nfZH:of2X:529nf%avaP:mT2qP5l9sH%avbb:nL29f579hH:gvYt:4X2SP%E9mP:f:Z7:3j2j:9w9qD:aPat:2L2tf9g9rr:Y:a8:2z2uf989rP:kvap:672mv:P9oX:9PZr:x33S:9H9yT:cff1:pz3wP7J94b%9:dH:ib4A:5W%Lv9hfhx:bH4Jv3Y%Nr89:iN:A75Qvwd%fj7JPmz%yT5cvsf%Tf7F:kE%wz52:oA%bz68:io%uj4n:rh%J:63:in%uX4tvr2%Mn6FPng%j:59:p3%Q:7u:ko%wj6QPtd%lj7tPpu%wz7gfth%5D7svuc%::7o:tF:Kf7hvyn%8D8pPv1:KH7JP2e%079nfty:aH7kf2r%6n9vfu7:df7xf37%8b9KPy7:V78pv2d:IX95fxa:TX9Jv2K:er84:2s:Dz%bvyU:jP86P7%%zX:0ft7:637tv%T%%X:hPsGAH77FwCC%xkAjvsKAKH76:%5%77:1fuD::T7P:8U:PX%NPyp:lL8Xf5u:Bb%hvzV:Zf8nv2i:HD9o:xO:Zz8Nv2N:Cj9ePwi:V:8JP1G:C39MPw5:R38Sf0R:Fn9Cfxp:Qb8dv0J:H:9E:yC:ST8ff09:G:9X:xY:Yz8OP3D:A:9Av3e:En9pfyU:Wf84f0j:C:%2:t8:pD7yv5C%xb:8vpg:6L6rP9U%vn:DPpHAMr5lgCS%eYAZPk3AUT5hwEy%dYBLfkjAjb5bAJO%bACcvntAqP5IAPe%UoDIvpqA276fgPC%okDG:uMA3r7hgPc%3kDQPxnA6X8UAMK:TMDbv0RA8:96AIt:rkChf6FAtX%SgIc:woCWf:IAYr:ggGw:zoByv:yANr:qQDg:2AA3f8ZANH:0:%%:5D:ov9P:3::Dv9U:9D%Iv%T:uj%Vv6l:hv%W:7i:Qv%qv20:XT9Wf0%:fv8B:2Z:M38NvyN:NL7R:xu%:z7DPut%6v6XPtN%g378vnC%pz5ffpK%UD6:vgO%rr46Pl%%M75SfjC%R34x:n399352fcE%sD3PPqt94X6oPfc%pn3PfuX96P7mvcK:KP3bvyx98z8wvch:df3av3u96f9BvjY:R74%:04%BP%U:gg:m:4I:6O%B:%sPgT:tb4Af4B%er9MfnO:Wf5rP2j%YX95PlX:Sr6Iv10%uj8wfqm:A:7X:xc%xb8pfvM%%r7hfsm:EH7WPwE%3:8zfqZ:Jz6p:xx%qj8S:qe:Cr6iPwM%mj87:k9:NP5C:y5%dX7nvmc%4L5Y:tm%S:7S:kC%y:53voQ%cb68Pi6%s74vfqm%M36evjo%kn4DfsW%Dv74vdv%7H3p:uE9%H7X:cd:EP3WPwx95L8KvfI:C33%vw89yb9VvdM:X33a:2w94L97:eS:Tn4mv2L%Jr94viV:T35i:2X%X797vlw:UL6YP2R%k793fo9:Sb7Lf1t%x:9s:sU:fj7Df0::A79iPwW:dL8KP0g:UT9cP1r:cX9nf0b:tr9dP4g:s3%cf4m:8n%ff8o:9L:jP8lAPP:dQBdAMMAxwAPATABWwGXAaYB:AHyAV0CPQK8AokCGQPUAnQDHQPMA2MDIQSnA3IE6QPABCkECgVoBE4FpwSMBeYExAUoBfYFbAUjBrMFTAb9BXAGTAaPBp0GpwbxBrcGRQe:BpsHvQbzB7EGTAiZBqYIdwYBCUoGXgkVBrwJ2AUaCpUFdApOBckKBAUYC7kEXwttBJ8LIwTaC9wDEgyYA0gMWAN8DB4DsQzrAuYMvwIbDZwCTw2BAoUNcAK9DWcC%Q1nAjoObQKBDnkCzg6LAiEPowJ1D78Cyg:fAhwQBANpECwDrhBYA%sQhQMbEbMDPxHhA1MRDwRXETsEShFmBCsRkAT6ELoEtxDlBGUQEgUDEEIFlQ93BR0PrwWdDu0FFQ4vBogNdQb2DL8GYAwKB8cLVgcsC58HkwrjB:wJHghqCU8I4Qh0CGEIiQjsB48IgweFCCQHbQjQBkYIhAYTCD4G1Qf9BYsHvwU4B4QF3gZJBX0GDgUaBtQEtwWZBFcFXwT9BCMEqwTmA2MEpgMlBGAD8QMWA8cDxQKmA24CigMTAnIDuAFcA18BRgMLAS4DvwATA30A9gJHANQCHACvAvz:hALq:1UC5P8fAuv:4wEAAKIBIQBZAUoACwF6ALYArABeAN8AAwANAaX:NgFH:1kB6v51AY3%jAEz:p4B2:2rAYf9tQE5:bwB8:zAAbf8wgGH:MIBZfzBAVL8vQFP:LkBXvy1AX38sAGs:KkB6PygATH9lQGE:YgB3:12AUD%YgGk:kwBCP81AWr:HgHI:wcBIQDzAHMA4AC%AM0AAgG7AD8BpwB1AZIApAF6AMsBXwDqAUUA:wErAAsCFQAOAgMACAL3::kB8v:jAfb:xwEBAKUBEQB%ASUAUwE7ACMBUADuAGQAtgB3AHkAigA6AJ0A%f%wALf:xQB4:9sAO::yAAL:BwHP:hoBov4qAXz%NwFe:kIBR:5NATj%WwEv:m0BLv6FATT%owFC:scBWP7xAXf%IQKe:lgCzP6WAgL:3AI9:yoDff%AA7::2wMDADkESQCZBJAA9wTZAFEFIwGkBXAB7wW:ATAGEAJnBmICkga0Aq8GBgO:BlYDwQamA7YG9AOdBj8EeQaJBEwG0gQXBhoF3QVfBaAFogVkBeIFKAUfBu0EVwazBIkGfAS2BkYE2wYRBPYG4AMGB7MDCgeKAwAHZgPnBkoDwQY1A5AGKANTBh8DDwYZA8QFFAN1BQ0DJAUDA9ME8wKEBNsCNwS7AvEDkwKyA2QCfAMuAlED9AEyA7QBIQNwAR4DJQEnA9QAPAN8AFsDHACDA7j:sQNR:%MD6v4XBIb%SgQo:nwE0f2tBIP92wQ7:QYF%fwvBb38VAWG:HUFU:ySBSb8qgX%%7wF2:vGBbz7yQWf%8MFhPu0BWf7nAVI%3sFJvtSBQH7IAXY%ucErvqmBIL6XwRV%hMEKfrEA:z5dAPS%SYDqvncAof5mQJp%V4CUPktAj:5CAI2%e0BNPnbATj50gFC%dEBUPnWAWL54AF2%e4Bi:n9AaL5DwK6%SIC1Pk0AvD5RwIM%loCJ:psAkD6fwJV%pMCZvqmAnD6uAJ0%skCc:rWAm:63wJp%uQCZfriAmX62wJs%s4Cevq8ApH6pgKu%owC0PptAvf6SwIg%yQCSvv5AXP7ygGb%5cBw:tgAev7JwET:OoAO:ysAGP8bgCI:DEAqfz2:8P8vv:W:In:4fxY:%b8Lf:l:Af:4vzo:t78z:7c:L7%2:yz:t78sf7m:Lf%8:zG:gX93f4f:fv%QP0f:2j9R:%Y:XH:z:2e:wz%zP9L:vr:i:4nAMr%VQAF:4IAO:%vAGv:2wCS:wcBsf8wAcf:VwHS:3oB1P%bAc3:ugG%:9UBqP:uAY::BgJy:x0CU:8zAjT:SQIW:18C%P51Atr%jAK9:qQCn:67AoP%0gJo:uUCUP70Aj3%:gIv:gEDKv7%Ai7%9AI8:uMCUf7MAm7%sQKQ:pICtP5yAtj%UAL5:i0CFf8LAi3:6AE%:8cBSv%oAVD:igFS:24BUP9UAUr:OwE::yMBL:8LARv:8gAB:9YA5f64AMj%lwCu:nIAm:5KAJH%HwCV:vL:qP7E:8r%lP:6:mX:Ov82:4X:B::c:9j%OwCo:qMAdv4SAUH%hgEH:vsBxv1vAn:94AIx:UsD2:yuA3:8BwQd:FcEt:udBE:72gTm%g4FgPo7BR36ZAXB%YkFb:mrBSn5zQXw%O8FyPgVBrL4Pgat%GkGufiXBtX4xgYA%fQGNvkfB3f5RQfA%WUHD:p:B2P6kAe4%psHDvufB2T7nAe3%5EHB:x%B1T8Ywef:D4H5fwNByj90AZm:YYGn:0vBtD9zAX5:V8FGf7qBC7%bwQ5:vADOf5xAy:%8QIb:nMC:v32Adn9fQGs:QgBd:2WADr9KgD2:MP:qvxk:1b8DP:7%73%mvt4:jT7O:7L%gT%YfrS:fb5pP2O%Xj9KflM:cr4Hv1x%PH8IPjH:Nn3n:yb93z8aPdg:ED3TPwj9z:8Evc7:Az3P:wR90r8Ivdd:D33ePxi95n8j:fB:Mb37PwD%Bj9RvhE:Y74bf3c%JD9Lvms:YL5v:3Y%cj9L:rG:YT6uf3W%qH9JPt%:W37Uf2w%x396:vj:CH8p:xQ:Gv8ePwx:Jv8:Pu5:Mz70fyh%%X8ffv0:F37:vxA%wT9JfsE:Qv7:vzx%vH81vrd:L36wPym%pz8kPpv:Hz6O:xp%gP8V:rH%0P6i:ss%lD7EPoZ%%:56PrH%bz6mPmX%mT5efor%WH67vhO%rD4QPpw%Df6L:gw%u:3Lfqv9yz6cfcs%jT3LPr59iz6wvYt%pL2Lfpp9i36TPYu%jv2MPo59jb6R:ZA%mb2TfqU9l:6z:Z2%hj3kfps97D6yPfQ%ir48fqR%BH7%vgt%2D5RfvD%Vj7Hvpn%3D6cPu3%nT78:p2%yb7d:tO%3j7cPt6%437f:uo%4n7w:uZ%9:7sfsB:NP7KvwA:F38Ofya:H384fzN:DP9KP2N:Yv97v31:VP%Zf64:tn%HP9P:3z:xv:Y:zwALgCuAH4AHQHKAIYBEgHpAVQBRgKSAZ4CywHwAv4BPQMqAoYDTgLLA2oCDQSAAkoEkgKDBKECtwSwAuQEwQIKBdYCKQXxAkAFEANQBTUDWAVfA1gFjgNRBcEDQQX4AykFMgQJBXAE3gSwBKsE9QRwBD0FLgSJBeYD1gWbAyYGTwN1BgMDwga6Ag0HdQJVBzYCmgf%AdwHzQEdCKQBXgiDAaEIbAHlCFwBKwlVAXUJVwHACWIBCgp2AVUKkwGgCrsB6QrsAS4LJgJuC2kCqAu1AtgLCAP9C2IDFgzCAyAMJwQcDJAECAz8BOULaQWyC9QFbws9Bh0LoAa8CvwGTQpPB9MJmAdRCdgHyggNCEMINgi%B1UIQAdqCMoGcwheBnII:AVlCKMFTQhSBSoICQX8B8QExAeEBIEHSAQ2BxEE4QbeA4UGrwMjBoQDvQVcA1UFNQPtBAsDiATfAicErgLOA3YCfAM4AjED9AHsAqsBrAJeAW4CDQEyAroA9QFmALYBEAB1Abv:MgFl:%sAEf%iAL7%WABv:g0AJv7B:%P9dv%q:Sz:fv3l:mH9of5U:V:%V:0i:mr96v2N:bf9vP2J:fX9X:02:jj9e:4U:cL%8PwJ:8z8Tf%m:Iv:fvzA:1T86:8o:AkA%:saAM:7HwCl%xkAgPsHAF:77v9G%87:Nfup:y77gv8x%1v:Qfs4:177Gf%J%wD:wvvw:gn86P5e:Of%v:zr:in98v6c:fv%E:4A:47%Af8J::z%gf:x:vX:4P5iAMv%xwCy:iIBlv5zAXn%uQFc:vUBPP4mAhr%TgLz:W0CyP2FApj9lgJm:aACM:2kAgH9oALU:JUCrvyCApD8aQJ7:EkCcPwjAmz8%AFw:MkBefyXAYf8ZAGY:C0Bq:z1AMD8vQDW:IUA7vxOAAj9GAAk:eb:Qv25:2H9kf%B:XD:oP1X:7:9R::d:T7:%:0%:xr%Rf87:lT:X:5r:4j%h:%3:qr:6:7S:yL:AABc:zQAmf9uANj:sAAXAPgAVwBIAZUAngHRAPoBCQFbAjwBvgJpASQDjwGMA64B9QPFAV0E1AHEBNoBKQXYAYoFzQHlBbkBOAaeAYMGfgHDBlkB9wYzAR8HDgE6B%wARwfQAEYHvAA4B7IAHgevAPYGsgDCBroAgwbGADsG0wDpBd8AkQXqADMF9ADSBP8AbwQLAQ0EGgGtAyoBUQM7AfsCSwGtAlcBZwJeASsCXQH4AVUBzwFFAa4BLQGUAQ8BfwHpAG4BvgBfAY0AUQFYAEUBHgA5Ad7:LwGZ:ygBTv8lAf:%JwGr:i4BVf47Af79TgGr:WcBXf2GARj9qgHb:NQBp:z:AXr8LAJT:FkCL:yDAg38qQLp%8gCxPveAp376QJz%%gCRfvZAhT7vALf%pECp:pZAmv6FgIu%skB8Pl2AbP5HwF4%ckAQPl0AAz5IwDf%Nn:ufiX:5v4YP%G%DT:fPgW:334Bv%J%AT:n:gQ:734Kf:g%E7:B:l9:y:5sv9V%ez:ePknAJX5YwCt%ZwAwPnQAND5:wDe%SgB6:lKAfb5ZwEB%n4BCvqPAQ:6nAEQ%qYBDfqsAQb6sQH8%bIB9PmvAe:5pgHv%ZkB9:mFAQj6awEg%ksBQPojAWb69ACT%r8Aw:qEAPb6RAAr%:::YPu2:5b7aP:O%xf:B:zD:kD8bv55:Bf%svzC:en8b:0c:R79Sf3R:HD9h:yT:UP8sv0D:M39yfvo:ZT7BP5m%yL%PftD:hv7Z:7:%o3%6:q2:t:63:7b%gr:3:o2:%36Yv8E%47:I:u4:0v74v94%wsArPswAOX7UwAh:HIAYPyOAKH8pQDj:LcAJP3DAGT9ywCh:c4A2f3OAAv%zAA2:ssAWf7LAHT%zwCH:tgAk:7oAJn%:ACZ:hUBlP4zAY7%UQGH:m0Bf:6EAXr%lgF4:qQBe:6sAYL%sQGP:rYBof69Abr%xgHY:tEB%:7dASH:6wFL::YBdf::AZ::AwLI:wIC7f:9AQ0A8gEmAOMBNwDRAT8AugE9AKEBMgCFASAAaQEHAEsB6P8sAcX:DQGg:%8Ae::VAFb:wQAz:7YAE:%3APb%xADb:uIAxf4OAbH%SAGf:o4Bj:7dAX:%MgJv:okCW:7gAkP%NAMm:oMDAv7OA9n9EQSn:UsEbv18BC79pQTq:MYEpPzfBF388gQY:AEF2PsOBaD7GQV0%ygFVfs5BUT7UAVC%28FUPuWBW:7xAWf%:kF3:s1Bi78dAaM:LQG9fzzBmj9LAfj:V0HZP6EB%b%ngdo:6oH5:%pB2MAmwfYAIEHSAFbB68BKwcOAvAGZAKrBrMCWQb5Av4FOQOZBXADKQWgA7MExgM5BOQDvgP5A0UDAgTQAv4DYwLtA:0BzwOfAaEDSgFlA:wAGgO2AMECeABbAkMA6wEXAHEB8::wANn:agDJ:9::wf9R:8L:xP7K:zv%2P%3:ef:Of33:8P8BABW:A4A9fsUAKD7FQBW%xMAGfsQAOj6CwDE%gYArfoCAKL6:v%j%vv:sfr4:8r68::u%u::HPvq:1T74:%U%93:3PvW:yr8zv9%:MX:1fy7:y:9sf%L:aT:5:2V:0L%hP%a:nD:8P5a:z::Qv%H:yj:xf8O::n:8:4hANv%PADG:ksAtv5NAKr%QwCk:i8Ao:4UAKf%8v%s:s3:sf6n:7T%gv%z:l::rP5B:6D%Kv%P:hr:ev4R:2T%EP9M:hb:NP4i:xz%M:8E:kj:6f1e:8r9dP%m:Yr:ff2d:079rP8a:bf:5Py9:6r8vf9v:Lf:Mfys::T7m:%3%4f:fftw:0b7Wf8U%0L:5:ou:8L6H:%n%hP:lfoN:5H6DP%a%hD:svoY:9f6Jf8H%zP:QvtD:4P7VP:K%2T:Evxx:1f8e:%Z:ID:2PyB:xH9ff9D:XL:bv1j:5L9UP%u:Tv:w:0k:9L9Dv:e:fz%5v3v:u796f76:e3%Cv78:iH%Ff9B:jr:bf5r:6b%p::r:uz:Pf87AJv:kgAEAPAAdABTAekAuQFgASEC1gGJAkcC7wKxAlIDFAOvA20DBwS9A1gEAwSiBEME5QR9BCEFswRWBeMEgwUQBaoFNwXKBVgF5AV0BfgFigUHBp0FEAavBRQGxQUSBt8FCgb%BfoFJgbjBVQGxAWJBpoFwwZnBQIHKgVHB%MEjgeUBNoHPQQqCOADfQh:A9QIGQMvCbECjglKAu8J4wFRCn4BtAoeARULxAByC3AAygsmAB0M5P9oDK3:rQx%:%wMWf8mDUD:Ww0x:4kNLf%zDTT:1w1I::QNZ:8JDpP:Fw7L:xwODwAYDl4ACg64APMNGwHTDYgBqQ38AXYNdQI6DfEC9gxvA6oM6wNZDGQEAgzXBKULQgVEC6MF3Qr2BXMKOQYFCmoGlQmIBiQJkQazCIYGRAhnBtgHOAZwB:kFDgevBbAGXAVWBgUFAAasBKsFVQRWBQIEAgW3A64EdANcBDwDDAQOA8ID6gJ7A88COQO6AvkCqwK6Ap8CeQKUAjYCiALvAXgCowFjAlEBSQL7ACgCogABAkgA1QHt:6EBkv9mATn:JwHj:uUAkP6fAET%WAAA:hEAxP3M:5L9iv9r:U3:Uv0W:0b95P5K:bf%Xf2Q:n39a:6n:Uj%2f0n:hL%B:5N:uX9hf7A:bn%l:3o:mr9Dv84:Sv:Av0::8n8Sv%N:Ev:UfxD:xX8Mv:c%xn:qPv5:nz71P5Z%6v%QPuA:jP7Vv40%y:%QvsL:lz77P2D%9b9tfvJ:fL7w:03:MX9hPzO:df82v0u:ej9h:30:eH9:P06:v39kP71:eL%5f0t:8z9cf%r:a3:hv3h:2D9DQA4:TEAEP1MAOn8YADE:GwAnvxyAHf8cABP:GcAJ:xaAAD8SADc%zEAvfsWAKb79:%X%9X:kvuv:5b7hv%k%1n:uvsq:9j7%v77%8n%JPyY:lD8af5::D7%svwY:ub89:0b:d39U:3K:Yv9wP3E:b79:P3E:TH%0v1i:uf9j:4D:rb%Jv7X:k:%8:59:gz:sP4i:%f%Nf8j:0b:Yv9W:6f:ZP:w:2z:PQBw:44AcP:kAG3:PwFl:54BWf8AAkz:ZgI%:84CLv82Ax::nQMQ:wAEAf9dBPP%swTl:v4E2P4%Bcv%cAW9:pQFrf6nBZv%qQWJ:poFd:56BWX%SQVV:gkFSP67BD:%YgQ5:gIEN:6dAzf%NgM5:tICO:5yAj7%GQJA:ssBQP6HAUD%TwFC:iUBRf4GAUr%8gBS:ugAWv7kAGL%5wBl:uwAY:7zAFn%%QBG:v0AKf4BAQL%AgHT:QMBm:0DAV79BQEd:QgB1:wNAZD8FQFI:CIB:vsyAbT7RgFr%2ABI:t9Ad76nwGc%sMBX:roASn6DgL8%TIC2PlRArv5agKl%XoClPl:AoH5dwJs%WECUvk7AjH5BgIL%cIB3vhvAa34DwF5%KUARPgzABD4vv:c90b:qvfQ:nv3Xv5Q9:T9KveU:Qr3P:3w9vf83va%:NL2lPzP9nf81PZo:OH2Zfz19m38Evd::DT3l:xZ97b8gPfZ:Kb3::zI9yf94:dQ:ff3eP0E%J:9CfjE:Qf45v0C%AT%%:cf:vP3Nf7t90f%6vdW:uf3YP7m92j%5fds:uP3bv7g923%3vdq:t73Zv7i92D%6vdX:vj3Sv4O%Dr%LPgm:lH4DP58%O39rvjJ:eX4of0g%Xb9X:lH:aD5F:3j%ef8KPq5:G36jfyz%mT8%vo::ED7HvyE%wH8xPvo%wD81Ps1:MT7Y:y3%4r8rfus:Kj7yvyo%%X8rPv%:LX7Fv3E%y392ftA:fT7T:0W:Fr9QPxg:XL8YP2p:F796Pxa:S79Vf16:VL9zP1S:SL%VP16:lr90:5j:Sn:b:18:339yP%L:QsAmf1FAKX9dACt:ZYAsf2sALL9tgCw:bQArf2mAKn9kACm:XMApf1RAKf9LQCr:QoAr:3q:7L90P%0:b::s:24:639vP%k:cv:mf3m:479CwCF:TkAfv1sAH39pACA:dsAh:0QAZD9QQGZ:WoBoP2KAaX9oQGn:a0Bpv2wAaL9qQGd:ZsBmP2IAZX9bwGT:VMBlf01AZv9FQGm:fYAt:3XAM39uADr:ZoAD:59ADr%YABu:kIAq:4jAPL%AgBE:93:oP%0:wMAh:9rAFT:1QAb:z4B3P6hAZf%:QFN:lEC:v2dAqz93wJY:RkDA:1MA7H8eQNj:KADG:zCA9r73wOh%:gDc:sRBFH7KgQ7%0MEM:tfBDj7fQRM%58EbfvDBJr76wTT%xYFFfxCBWD8cAWw:JsFBv3CBV794gW3:fkFEf4FBmv%AwbF:vMFHP:VBXD:qgXB:3QFDAA1BVIA7wSSAKMEywBSBPwA:AMkAaMDQwFFA1gB4wJjAX4CZQEYAl0BsgFLAVEBMAH1AAsBnwDcAFEApAAMAGMAz:8YAJn:xf9r:2v:Rv8M:yj:qP4Q:0H%Af:b:fr%d:35:hj9::6::Az:b:wd:yf8Mf:o%0n:tfth:4v7dv9r%4b:UvuP:0D7kv82%43:MfuB:zH7cP83%13:QvtH:1L7MP9n%xf:gfv%:qP75P7K%8f%9vur:in8kP5i:Hf%oPxh:uL8Uv4p:Un%cv1G:rz9Sf4F:lL%S:5g:oz%cv7F:ob%9f6Y:hr:qP4x:7P%PP%5:jn:uP4n:7H%CP%m:t3%mf6n:or%aP58:iH%cP7X:Wf%i:1h:kD9Xf75:Fv%uPxX:n78UP5N:Eb%J:w5:gv8KP74%xX%7fsB:ur77f3r%9n98PvF:fb7r:37%5j9::t9:f:7Xv39%zz99vsW:e377vzh%8T81fuY:Mn7bfy%%0P8tvsc:LL7%fux%937tfvH%7z7ufvG%7X71Pu5%%P7x:v0%9:7BPz:%xT8Kfwh:Fz8LPyW:DP82Pw3:B79Nvxn:TD8rv0m:PL9F:wy:gT8bP7t%6H%1fvR:r37:v6n%yf:lPtN:4f7cv%B%5X:hPu3:5L72P%q%:j:zfsaAPz7PwA2:GgAe:yWAMr8ygAj:QUBhf1GAe79jwFe:t8B0f40Akf:jQK9:%gCMwBCA6YAmAMWAeoDhAE0BO0BdQRRAqwEsALbBAsDAQVhAyAFsAM7BfoDUwU%BGcFfAR5BbEEiAXeBJUFBAWfBSAFpgUzBawFPQWzBT8FvAU2BckFJQXdBQsF%AXrBBsGxARGBpkEeQZpBLEGNQTvBv4DMwfGA3wHjgPHB1UDFggfA2cI7QK6CMACDQmYAmIJdwK4CV4CDgpNAmEKQgKyCj8C:gpCAkELSwJ6C1gCqQtsAs0LhQLnC6IC9gvGAv8L8AIBDCMD:QtdA:ILoAPiC%wDzAtBBLELnASSC:8EcAtoBUsL1AUkC0MG:QqyBtYKHwewCogHiQrqB2EKQwg3CpEICwrQCNsJ:wioCRwJbwkoCTAJIQnqCAgJnwjfCE8IqQj8B2YIpQcZCE8HxQf7Bm4HqAYUB1oGuwYQBmYGygUVBoYFzAVEBYkFAwVPBcIEHQWBBPMEQgTQBAQEsgTHA5YEjAN9BFMDYwQZA0cE3gIoBKMCBARkAtkDIQKoA90BcQOXATcDUAH4AgkBuALFAHkCgwA8AkQAAgIMAM4B3f%gAbb:dwGZ:1MBh:80AX::GAGC::8Ajf:oAKL:0QC::7sA5P%lAA8AjgBAAHYAcwBdAKgAQgDZACUABAEFACgB4:9DAb::VQGa:14Bc:9iAU7:YQEt:1sBD:9RAfj%RgHq:jkB5v4pAez%FwH8:gQBF::wADz:3ABq:8oAof%6AOD:rwAlAKgAcACmAL8AqAARAbAAZQG8ALgByQAIAtcAVQLiAJwC6QDeAukAGgPgAE4DzwB8A7MAowOPAMQDZgDfAzkA9AMJAAEE2v8HBK3:BwSB:wEEVv:zAy3:3QMG:8AD3:6bA7r%bgOX:jwDev4GA2H%ywJP:o0CRP5OAkL%EAJI:tQBV:6cAW3%ZwGK:jcBrf4NAdb%6QAC:8sAL:%1AF7:pwCN:6EAu:%kAOj:rgATAMEAPADZAGEA9gCBABcBmwA6Aa0AXwG2AIUBuACrAbQA0gGrAPkBnwAjApMATwKHAIACfACzAnIA6wJqACYDZABkA2AAowNfAOMDZAAiBG0AXwR7AJcEjwDLBKgA%QTFAB4F5gA6BQgBSwUqAU8FSQFFBWUBKwV%AQMFkgHLBKMBhgSvATUEuQHbA8ABewPFARcDygGyAtEBUALaAfEB5AGXAe8BRAH8AfgACAK1AA8CegATAkgAFAIfAA8C:f8GAuP:%QHP:%kBwP:UAbf:vAGy:58BsP98AbD:UgGy:yEBtP:oALf:pwC7:18Awv8SAMv:wv:Y:3H:6f8h:wAA1P4dAIn%QABF:mgAB:6VANH9wwCg:fAAdf0aAU39PwEp:VwBB:1wAej8egHK:HkBr:xtAZb8VwF9:DcBY:wOAUb82gAj:J8A%vtbAMv7EgCU%8T:V:tz:xb7If:U%tH%lPqG:lb6Qf4c%gb%6PnV:bn5r:2Q%Zb9bfmJ:U:5h:05%ZD9Kfmj:SH5vv0f%eD9JPkI:jD5Nv5B%Wb%V:mY:nH5yv6M%fr%p:km:8H5Tv:X%XL:6vmR::b5qv:7%b::%vnR::T54f:r%e7:3:n4:9T5:::L%QMAxPkEAMH5AQDA%fj:wfno:8T50v:I%bX:zPmR:9D5Zv:W%TX:3:n::u35xf7:%Yf%FfpI:jH6CP5T%sn9evqK:af6TP3Z%g79D:vS:Ej7mPyD%2D8v:sr:Pz7%:s4:M77cvyn%6n8hvvd:Gr7Df1U%zf9Q:tZ:Tf7dP0v%4f9K:uT:Sz7mP0w%5j9OfuY:Uj7mP1e%5j9e:uY:Z:7mP3K%5n9:fuZ:TX8mP1w:Jf9r:yX:fD8l:0w:Zr9b:2g:az9rP3m:bz9Hf7P:U7%4:16:vj9n:4M:r3%HP7S:in%3:4y:uX%N:7k:jj%3f41:tL%Mf7F:i7%uf4r:q:%Kv6n:i3%pP4z:qT%PP6p:kb%sf5R:r3%Wf7N:l3%3v5c:vL%Vv4I:0v%H:87:jb:Kv5O:xj%Zf8G:nv:8:2P:9:9ov:L:bP:t:3C:6P9z:%O:dn:ef3i:2b96f9W:e::Sv30:0P9%f9C:f7:Sf0DAFj9CABv:QwAkP0NALj9CQDn:QAAHf7w:1b%1:%T:rb:0:6M:xb:Wf9b:x::ov:e:uv:mP4zAE3%eQAA:roAsf31AGL9KAET:VQBxvx4AX78lQE7:K4BAfzEAdH71gGt%%gBl:v6AZH7DAKa%xsCsfsrAtf7PAIM:EwCS:xdApT8cALm:IYCPv2eApz9uQL9:dQCX:7uAsH%BwMh:x0Dff8vA9P:PAMjAEEDawA9A6sAMQPiAB0DEQH:AjgB2QJYAawCcQF6AoIBRQKNAQwCjgHRAYYBlQF1AVcBWQEXATIB0gD:AIoAwQBAAHgA9:8kAK3:yf9n:2b:JP:%:uf%lP6w:ir%gP7A:Vf%Wv02:vn8HP6d:An%R:z9:fj79:2u%:b9a:v5:S:7::35%gj%y:oT:qP6H:6D%ir%afoz:lf6Nv5K%jT%RPop:kH6F:5D%vv9R:rZ:U76sf1Z%of9Z:pc:Xj6Mv2P%gr9qvrl:Mz6xPzz%qb8HvuK:E77cvyB%178t:tR:O:7Sfwm:En8XPxP:JD8XPzB:G787vyE:Bb9nPw4:bP8U:3J:Gf92:xz:en8d:3y:HX99:xt:fn8X:34:E:99fw7:fL8J:3x:BP98:z%:Pf86vz%:NX8B:3A:BL9rPwa:Zf8Hv2D:B79cPwY:WD8DP1S:Pn8SPzi:EP8yPxD:Kv8SfyM:FX8a:xo:Er8gvwn:KH8BPzG:OP78PzC%x39oftN:YP7f:1o%7L9T:vl:Tv7F:4r%0n%Ift3:h37o:4f%8r%KPvr:jf7Bv9L%xj:Y:si:3:7Iv%d%xn:v:sI:%P78P4I:ND%Lfys:lL8hv50:F7%kvw1:qr8Df6%:Of9zPzC:dj8o:3i:In96:x3:ff8bf0G:W39Gv16:TP9k:1O:br9bP3u:Y39L:6x:Xv%1v3R:v39MP8p:pb:WP4AAIv%bQDD:toAAP9IAUH:tAGE:x4Cyv%DAhMA4wJbADsDoQCLA%UA1AMmARQEYgFKBJoBeATPAZ8EAQK9BDAC0wRfAuIEjwLpBL4C5wTuAt0EIAPMBFEDswSBA5EEsANnBOADNwQPBAAEPwTDA3IEgwOpBEID4wT:AiIFvAJmBX0CsAVDAv0FDQJNBtwBoQazAfUGkQFIB3QBmAddAeYHTQEvCEMBcQg%Aa8IPgHoCEUBGwlRAUcJYgFrCXoBhwmWAZgJtgGgCdoBnwkCApUJKwKDCVYCbgmEAlcJtgI%CesCJQkjAwwJXwPzCJ8D2gjhA8EIJASnCGkEiwisBG4I7ARRCCgFMwhhBRQIkgXyB7sF0AfdBaoH%AV:BwkGUAcTBhwHFQbiBhAGowYCBl8G7QUXBtQFzAW1BYAFkgUzBW0F5wRHBZwEIAVTBPkEDgTSBMwDqQSMA38ETwNTBBMDJgTWAvcDmQLGA1sCkwMdAl8D3wEtA6AB%wJiAcwCJQGfAusAdwKzAFICfgAwAkoAEQIYAPYB6f:dAbz:xQGS:60Bav%VAUj:fAEq:2MBEf9JAf:%LgH1:hEB9P70AP3%1wAO:7gAJ:%XAEf:cgBt:0sAl:8eAMT:7f:z:7b:JAB7:1UAO:%EAPj%sAC0:tcAb:73ACv%DgHp:RsBqv0eAW79GgE4:RABB:0CAdz88gC6:OIAofzUAJL8xwCN:L0Ak:y1AKT8rgC::KgA5PyjABH9oQBG:aAAgf2iAL:9qAAB:rIARP7BAIf%1ADL:uoADf8CAUz:GwGJ:zQBwP9HAfH:VQEcAF0BQABdAVwAVAFwAEIBfQAqAYQADAGFAOkAgADEAHYAoQBnAH8AUwBgADsARAAfACsAAAAWAN3:BAC5::b:lP:s:27:5v9K:%f:Kf:u:wv:%::z:hAA4f4tANX%UQDR:nwA1P6tAN3%4ADt:hYBA:9LAR7:fAE9:6kBX::RAYP:8wGr:w8C1f8jAgMAMQIzADgCZgA5ApsAMgLTACMCDAEPAkUB9wGBAd4BvQHGAfkBsAE3Ap8BdgKUAbYCjAH4AooBOQONAXwDkwG9A5sB:AOlATYEsQFsBMABmwTQAcIE4gHjBPcB%wQMAgwFIQIVBTUCGAVIAhYFWAIPBWUCBAVwAvMEdwLeBH0CxQSBAqkEhQKIBIYCZASIAj0EiwIVBI4C6wOPAsADkAKVA48CagOKAkEDgAIZA3EC9QJaAtQCPAK5AhgCpALuAZgCvwGUAosBmQJWAagCHwHCAuYA4wKsAAsDcwA7AzoAbwMAAKQDx::aA5D:EARb:0EEKP9uBPn%lATQ:rMErf7KBJD%1wR6:twEav7YBF:%ygRX:rIEUP6QBEf%YgQ7:ioELP7oAxr%nAMC:kUD5:3oAsr9hQKn:R8CgP23AVT9UAEi:ewA6:yMAK:8MwBv:OL:Lvya:%77Xv%x%y3:efsI:0f78P4d%%X%%:rm:uD68v7K%gf:vPol:7T6S:%x%nX:s:qi:7v60P:I%v7:2foqAO76VAAG%3oAIPucADr7ugBU%9MAbfvoAIT79wCV%wABofsCAan7AAGr%:gAqfvsAKT73gCe%80Amfu7AJf7qQCa%5cAovuFAK:7cgDA%18A1vtLAO:7NQAL:B4AKfwFAEj86:9p:ND:i:y1:6:8nP:W:IX:::xv:yv9Xf9b:U7:kP1D:8f9O::::Tb:OP4x:3D%Lv%n:iv:3P4o:w7:Jf88:yD:Zv8b:4::GP%0:xf:1P8Y::D:G:8IACT:HAAx:yoAQf82AFT:QQBs:0sAh:9UAKX:XgDG:2gA6v9wABAAdQA4AHYAYQByAIkAZwCvAFgA0wBEAPQALwATARoALgEFAEUB8v9YAeL:aAHW:3UBy:%BAcP:jAG9:5YBtv%fAbD:qAGq:64Bov%xAZn:sQGQ:6wBh:%jAX3:lQF0:4EBbP9oAWX:SwFf:yoBWP8FAU7:3gBC:7UAMf%MABr:ZAD::j8A4P4eAL:%AwCc:u::e:7j:13%3:9A:uP:Kf7u:xj%::8M:hUAB:4tAAn%SAAS:mEAIf54ADf%iwBV:poAef6iAKb%owDd:p0AHP%PAGP:eACx:1gABAAwAFwAAAC1AMb:DwGF:2gBO:%%Aen%EAKR:mACM:6sAtH99QJu:TgDDP11A6z8rANS:NsD::sCBLT7IQRy%zkEPftLBBT7WAT5%mIE7fpqBPD6cQQD%3UEJPt5BFT7ewSS%3sE3ft6BDL8eASP:HYE8:x0BFn9dATB:XUEJ:52BIf%eATi:nsENf99BH::fQS::3sE9P93BB8AbQQ%AF0EUABIBFcALgRSAA0EQgDoAygAvQMFAJAD2:9hA6z:MQN4:wADQv:PAgr:nQLR:mgCl:4yAl7%%wEl:sQB7f2NAbf9VwGE:SIBVf3wACr9wgAE:ZgA5fx0AMz8VQC7:DsAsPwkAKr8EgCr:AMAsPz1:7j85::B:Nr:zPzO:9b8wP:d:LP:4vyn:%b8m::n:I3:5:x%:%X8bf:j:Fn:4fxD:%H8K::h:BH:4:z4:ub83v7q:MX%8Pyt:vj8mP4D:YP%D:1t:hz9WP4r:UP%PP0t:k39Gf5f:Qn%cv38:Yb99P2a:fL9r:33:cX9AP7a:Q3%7:0d:gP%Lv4V:j:%Jf5O:jH%W:45:mP%Ov5n:jP%Zv4k:l:%C:5U:uf9R:67:Tj%h:0o:kv9F:4L:QT%x:zw:YH82v07:ML99vum:bb7hv17%2P9R:s8:Rz7E:39%ur86frA:OP6lfzo%m38%:pH:Bv7JfxF%wX8d:vq%7D71Pvt%8H7LPyx%2r8p:um:KL73fyg%w79o:s4:ar7Wv22%3P9xvuC:dr7iP3z%4b9Dvx6:Sr8Zv1I:Ev9Zvwo:YP8:vyg:M:8u:yb:Nb8Zvzt:C:8Av36%xP9yfsg:Z77KP16%y39X:sw:U:7NP1J%zj9T:tA:WH7Tf2B%1:9rft2:eX7kv0q:LL9efzU:dL8%P00:R:%nf1H:gv%cf59:p3%7:7L:mD::P7O:y::NQBl:5YAnf:uANb:PAEPAIEBSAC9AYEA8AG3ABkC7AA5Ah8BUQJPAWACfAFnAqcBZgLSAWAC:AFVAiYCRgJQAjQCewIgAqcCCgLSAvQB:QLdASgDyAFRA7IBeAOdAaADigHJA3kB8QNrARoEYQFEBFsBcQRbAZ4EXwHNBGkB:QR4ASwFjQFaBaYBhwXCAbAF4QHWBQMC9wUnAhQGTAIvBnICRgaXAloGvAJrBuACegYFA4cGKQOQBk0DlAZuA5YGjgOVBq0DkAbJA4gG4QN%BvUDcgYGBGQGEQRSBhkEPgYdBCYGHwQLBh0E7AUYBMsFEQSpBQkEhQUCBGIF%wM:BfQDHQXvA:sE6wPYBOgDtQTnA48E5gNnBOUDOwTiAwwE3QPbA9QDpgPFA20DrwMyA5AD9AJnA7MCMwNxAvUCLgKvAuoBYgKkAQ8CXwG5ARkBYgHTAAsBiwC0AEIAYAD5:xIAsP:J:2j:hv8h:0z:3v4b:57%8:5i:tb%LP7D:vr9uf7O:bf%qP29:on9yf5v:dr%XP3u:k79Av9F:RX:Q:0m:0j9Nf9S:T::YP1D:3X9Qv%Q:Tz:sP0w:9L9Hf:4:Qb:Hv7o:kP%xv5p:qD%jf51:qz%Rv7I:hT%4v7i:fb%rv0E:3v9Df9L:Q::H:0M::n8Bf:a:Pr%xfzu:rj84:63:Nz%wvzY:tn82P77:N7%Kv3o:mT99P6n:QL:8:0S:0X%I:%d:jT:9:5G:1H:WP%q:2v:AAB%:1IAkv%cAKT:3gC3:xcByf9IAdj:bgHl:4wB7v%iAfH:rwHu:7MB5f%wAdf:pgHB:5YBpv%AAYb:ZgFk:0gBQf8qAR::CwH%:u4A3v7SAMH%uQCn:qIAkf6PAH3%fwBq:nIAWv5qAE3%ZgBC:mYAO:5rADj%dAA3:oIAOv6UAEL%qgBQ:sUAYP7gAHP%:gCI:h0Bnv4%AbL%XwHF:n8B1:6fAef%vgH0:twB::74AQn:FAIS:y8CGf9IAh3:YAIf:3cCH:%MAh7:nwId:7ICHv:CAh::0QIi:94CKP:pAjH:8wI8::wCSv8EA1v:DQNv:xYDh:8gA6P:KwPF:zgD7f9GAxkAVQNJAGUDfAB1A7EAgwPlAI0DGAGUA0cBlgNxAZEDlgGGA7YBdAPQAVoD4wE4A%4BDgP0Ad0C8wGmAusBaQLfASsCzQHsAbUBsAGXAXcBdAFGAUsBHQEcAf0A6ADoAK4A3gBxAOAAMQDsAPH:AwGx:yQBdP9NATn:fQEA:7EBzP7nAZ7%HgJz:lICS:6BAin%qgIL:s0C8P3nAtr99gLJ:fwCvP33ArL95QKs:ckCqv2kAqj9dAKn:TsCo:37AZ39tAGR:WgBgP0aAWj9ywBK:XoAJf0rAPv83v:N:JX:m:xP:2X8D:8t:Nb%8vuj:rb7ef57%1f%Qvs::gz7Mv7b%i7%sPo0:o36RP5x%l3%XPp8:k76ov5H%sz%RPr5:kb6J:9M%lT:VfqA:2H6qf9x%s3:gvrt:5b6BgCs%hgAxPojAN76JwD4%iMAEvsZAC37CQBG%:T:Xvvb:3T7vf%G%5z:l:t4:6b7Uf%0%yf:wvv8:tL70f7l%6X%%vt7:hL8Uf4u:Cr%S:wH:mr85v2J:Mf9qPys:cj8lf3m:IH9A:1v:R79X:04:VP9Uv1I:Wz9P:2I:Tf9pf0x:cT9LP3m:Sf9C:4l:TP%Jf1b:iX9hP4n:a7%K:3Z:jD9A:81:Sz:Ov1U:z:9ev9E:Z3:R:28:0r91:9N:ez:T:3%:1L9DABW:RYAW:0eAGD9IwBo:ScAcv0nAH79JACN:R8An:0VALT9CQDN:f3:6:3y:w7%5:81:uD:YP7f:5D%4::D:uz:9v76:yn:DABZ:yAAhf83AKv:TQDJ:2EA3:9zAOv:gADu:4oA6P%PANf:kQC::5AAn:%MAHf:hwBL:4IAHf97AO:%cgDD:mgAm:5cAHr%SwBf:jgATv4iAEf%CQBK:u7:Vf7V:2z%v:%L:qv:sf6c:97%k:8R:5H:R:%W:3::o:%3:7f:7v:T:yIA9:9SACEAfABRAKEAhwC:AMMA1QADAeMARwHpAI4B5gDWAdsAHgLIAGUCrgCoAo0A5AJlABkDOQBJAwsAcQPb:5EDqf%rA3n:wANM:84DIv:XA:7%3APh:t0Dy:7bA7:%2AO%:tMDyv7PA%L%ywMH:8sDOP:MA3T:zwO7:9QDCwDaA2EA4AO8AOYDGgHsA3cB8gPUAfgDLQL9A4ECBATNAgwEDwMVBEcDHARyAyQEjwMrBJ8DMgSgAzcEkwM6BHgDOQRRAzUEHgMsBOECHgSdAgwEUwL1AwUC2wO0Ab0DYgGdAxABewPAAFYDdAAwAy4ABwPv:9sCt:%rAoj:egJj:0cCRv8SAjH:3AEk:6cBHv91AR7:RAEi:xcBKf:tADP:xwA9:6UARv%JAE7:cQBT:1wAVP9MAFP:QABP:zYAR:8wAD7:LQAy:yoAJP8pABT:KAAC:yUA7v4fANn%FwDE:goAr:74:5n%4:%G:sv:dv6w:2r%lP9i:nn:Yf5e:2X%Rf9w:i3:gv4X:5r%BP%5:vP%3v7o:gn:4P43:%D%av:n:qD:9v7X:wz:DQAo:0AASv9vAHD:lgCX:7YAv::MAOL:1gABANMAGgDFACsAqgAyAIQAMgBUACkAGgAXANn:AQCT:%f:Sv:K:wH:qv%5:ov:d:5r:z3%Sv8M:ij:5:0F:9D94v7F:b:%yP2b:tb9eP7w:Vj%Ff46:kL%H:51:gn%rv74:en%7f0n:%f9Y::m:Z3:6v3T::L9BQD::TEADv5WAB7%dAAu:okAP:6VAE7%mQBc:pMAZ:6FAHH%bgB3:k8Aef4oAHn%:P92:sr:b:6V:2T%Xf9Z:ib:Tf7w:j:%vf4v:o3%H:5j:g:%P:7%:SP%7v0P:uH9BP7X:QT%0:0P:tf9Jv7i:Uf%9f1y:hD%p:4y:uT%V:4m:3:%bf%p:rb:1P4AAAD:SAAr:44AWP:PAIb:CwG2:0EB5:9vARoAlQFPALABiADDAcQAzQEAAcsBPwHBAYABrwHDAZYBBgJ3AUgCUwGLAiwBzgIFARED3QBTA7YAlwORANsDbwAfBFEAYgQ4AKMEJQDhBBgAHAUSAFIFFACDBR0ArgUtANUFRAD5BWIAGwaFADoGrQBXBtgAdQYHAZMGOQGxBm0BzwagAe0G0gEMBwQCKgczAkcHXwJiB4YCfAerApYHywKsB%YCvgf7As8HDAPeBxgD5wceA%sHHAPpBxYD4wcMA9UH:gLCB%0CqgfbAo4HyQJvB7gCTgeqAioHoAIFB5wC3gadArcGpAKQBrMCawbIAkYG4wIlBgQDBwYqA%wFUwPVBX0DvwWnA6kFzgOTBfEDewUNBGAFIARBBSgEHgUlBPYEFwTKBPwDmgTXA2UEpwMrBG0D7QMrA60D4gJsA5QCKQNCAuQC7wGeAp0BWAJPARICBwHLAcUAhAGMAD0BXQD4ADgAswAeAHIADgA1AAcA:f8IAMv:DwCf:xwAe:8uAF::RQBL:10AP:91ADv:jgA%:6YASP%7AFj:zgBs:9sAg::kAJ7:6AC5:%QA1f:ZAO::xwAJAKwAIACJADQAXwBEAC0ATwD1:1UAuP9VAHf:UgA1:0oA8:4%ALL%LgB1:hwAPf4IAAr%8P:f:db:vP28:6L9o:%R:Y3:if19:4z9c:%a:W::sP1y:9H9e::6:Yj:LP6Z:2P%qv%e:rv:2:7L:xn:2:9V:%n:j::1:8P:AADx:woAGAATADcAGwBOACQAXAAsAGAAMgBaADcATQA6ADcAOQAbADQA%:8rANb:HACv:wcAhv:t:17:0P82:6::EP%M:%7%af:R:kf:uf4l:6b%Bf%a:uf%lf7L:pf%sf6h:pn%sf6E:sj%cf7l:mH%Bv9V:iz:Tf5U:0r%f:9N:qr:Vv7U:2X%:P97:iMAlv5HALX%ZwDX:oMA%:6aAB3:rQA%:7sAXf:GAHn:zQCR:88Ao::MALL:yAC7:8EAvv%3AL3:rAC3:6EArv%XAKP:jwCZ:4sAj:%NAIj:lQCE:6UAhP%9AIf:3QCP:wUBmv8zAar:ZwG::54B2f:YAfn:EgIcAEwCRACCAm0AtAKWAN8CvQACA%AAGwP%ACsDFAEwAyEBKQMnARkDJAH:AhgB3QIEAbYC6QCLAscAXgKfADACdAAFAkQA3QERALoB2:%dAaT:hwFq:3gBLv9vAfL%bQG0:nEBd:57ATz%igED:p0Bzv2yAZ79yAF2:d0BU:3xATb9AAIf:QwCD:0TAgT9EwL8:AwC9:z%AfX86gHz:M8B8vyuAfH8hwHu:FkB6PwmAeH87wDW:LMAx:xyALL8LQCX:OX:dvyb:038T:8d:AL:5vu2:qr7bP5q%yb%J:vk:eP6qf2f%nT9XvpG:R:6If3k%QL9rfns:H353PxS%dP8LvnQ:BL51Pz%%N787:jt:Ob4AP3i%Bf94vgw:eP4Sv3m%GP96vh8:e74kv3z%KX9%fi0:QD5v:0I%cb9EvnJ:R:5x:0u%cH9Qfm3:VX5qP1s%Zf9hPmD:Z75bP25%VT90:k8:e75JP0J%g39I:r4:D365fxZ%tX8dvrI:JP6v:yy%rn80:q3:PP6ufwT%778MvvI:FH71fxu%%f8ifv9:KP7F:28%zX91ftW:e:7ef0L:Jv9Kfy%:Uz83:1z:P79nfwZ:sz8MP7::ET%NP1V:mv9Yf6h:Wv%1:1y:gv%d:47:nv%aP59:pD%f:6x:oD%zP6B:uH%g:7w:oX%%P6J:vz%j:79:pr%:P6p:vn%v:72:tv%9P4A::H%K::t:l3:6f6U:%T%z::d:gwA2P5JANT%hADR:rsA0f7tANP%GAHX:jsB3v5UAeb%YwHt:mcB9f5fAfz%TwH::jMB::4PAfv%4wDz:rEA5:57ANj%QwDG:gkAsv7Q:53%mv%K:mn:dv48:2T%Ff9S:vT%Qv7b:jH%x:4g:rv%EP62:gH%uP7z:cD%6f3P:uP94:7j:fv%6v0X::n9NP8Q:lL:L:5v:1f%i:%G:qX:vP68::j%z:83:9::e::r:8D:8v8FAPT:SQDy:40A6v:OAN7:CwHM:0MBtf91AZn:oQF5:8UBVv:gATD:9QEJ:wMC5P4KAsD%DQKf:g0Chv4KAnP%BgJp:gICZ:7%AXD%%wGB:vsBm:7%Ab:%AwLr:gsCHf8YAlf:JwKX:zkC2f9LAh4AXQJjAG4CpgB%AuQAigIdAZMCTQGaAnUBnwKTAaMCpgGlAq8BpwKsAagCnwGnAogBpgJoAaQCQQGgAhEBmgLdAJICpACGAmgAdwIrAGQC7:9OArT:NAJ9:xcCS::5AR::2QH6:rcB3P6WAcf%dAG6:lEBs:4sAbT%BgG7:uAAyP65ANv%kgDx:msADP9HACj:JgBG:woAZP:z:3::4f%X:9T:qv:N:7f:yv%8:8v:uf:Q:7D:1f%d:9n:g::d:2L:4P87:97:Df:b:93%1f%s:sz:ev6%:0r%rv8c:pv:8:2G:9D9b:%y:Vf:m:1A:479K:%K:Rr:j:0N:579B:%4:QX:3P0I:wj%EP88:hz:dP4r:67%PP:o:lL:IP9q:1L:hP9%:6L:oP:B:7f:3::C::3:wf8YALT:LwCa:0AAdf9LAEb:TgAO:0kAzv48AIn%JwBA:gwA9:3r:679xP9o:Zr:Jf1v:%j8Qv%y:Bb:g:zt:lv8xf48:J:%JPx7:hX8W:4Q:Dz%Evwf:h38CP4y:PT9Tfzj:W782f2W:NX9wvzV:e:83P0c:ev9Sv3%:XT9Fv6b:TD%vf1M:tr9af7y:YT%A:6c:g7%sP4T:sH%E:7M:gz%0P7::dD%7f3K:tj9vv69:az%nv2W:n39fv5c:WT%Ov1K:hr9Mf7%:Bz%5:wL:tf8::3P:Pn90fz5:d38:f3z:Ab%Ev0Y:jr9Mf5q:VD%of13:tz9p:4d:t7%Yv4a:6j%Wv:v:pz:Nv:f:3r:IAC7:2AA%f%fADEA2wBkABUBjwBOAbQAiAHTAMIB6wD7Af0ANQIJAW8CEgGpAhcB4gIYARsDFwFUAxUBiwMRAcIDDgH2AwwBKAQLAVYEDQGDBBQBrgQhAdYEMgH7BEkBHwVnAUIFjAFiBbYBfgXnAZgFHwKvBVwCxAWeAtYF5QLnBTED%AV:AwoG0AMdBiAEMwZwBEwGvARnBgQFhAZFBaIGfgXABrAF3wbYBfoG9gUQBwkGIwcSBjEHEQY5BwYGPQfzBTwH2AU2B7gFLAeSBR4HaQUMBz0F9gYTBd4G6QTDBsMEpwagBIwGgwRxBmsEVwZbBD8GUgQpBlIEFAZYBP8FYwTrBXME2AWGBMYFmgS1Ba0EpgW9BJkFygSMBdAEfwXRBHIFywRhBb4ETgWpBDUFjQQXBWoE8wRABMkEDwSbBNkDZwSeAy8EXgPzAxsDtAPXAnMDkgIvA00C6gIJAqQCyAFfAosBGQJRAdQBHAGQAewATgHDAA4BoADQAIQAmABxAGQAZgA2AGQAEABrAPP:egDe:5AA1P%sANP:zQDa::AA6f8UAf::OAEbAFsBOgB7AVsAmAF8ALABnADDAboA0AHTANYB6ADVAfcAzQEAAb4BAwGoAQABiwH2AGcB5wA9AdQAEAG9AN8AowCsAIkAeQBwAEkAWgAeAEQA9:8yANn:JADE:xgAt:8RALT:DwC7:xMAyv8cAOH:LAD::0IAIwBcAEoAewB0AJ0AogDAANAA4QD%AAEBKwEdAVcBNgF:AUoBowFbAcMBaAHeAXIB9QF5AQYCfQERAn0BFgJ6ARUCdQEQAm0BBgJiAfgBUgHmAT0B0QEkAbkBBQGfAeEAhAG5AGsBiwBTAVoAPgEnACwB8:8gAb::GAGN:xUBXf8XATD:HwEH:ywB4v48AcL%TwGn:mYBkv5:AYL%mQF4:rQBdP7OAXb%5QF9:vgBiv4FApv%DAKw:gsCx:4DAt:%8gH4:tkBEP%4ASX:kQE5:2UBSf81AVb:AwFg:9AAaf%gAHD:cwB2:0oAev8oAID:DgCG::z:jf:z:5b:8v%l::v:t:8MAM3:JADn:0QABQBqACYAlQBIAMIAawDxAJEAHwG4AEwB4AB1AQgBmQExAbgBWAHRAX4B5AGhAfIBwAH6AdgB:AHqAfsB9QH4AfkB8gH1AekB6wHfAdoB0wHDAccBpwG5AYcBqwFjAZwBPQGNARMBfwHoAHEBvABlAY0AWAFeAE0BLwBDAf::OgHQ:zEBo:8pAXn:IgFS:xoBMP8SARb:DQED:wcB9v4CAfD%%wDw:vQA9P7qAP3%3wAG:9IAD::BABf:rQAc:5gAHP%AABj:ZwAO:0sA:f4tAOf%DgDM:u3:q:7L:4P%qP9W:oT:Jf5f::D9Ov%3:RX:fP3w:kH9zf4H:az%0fyP:p38df5t:F:%Q:xO:h:8RP4A:D7%5:s8:tT7Pv7H%0P%wPtK:r37Uf6:%1j%xPte:sr7Yv7Q%2T%1vtk:tr7Yv7b%13%3PtV:tz7TP7c%0D%3Psz:t37Jf7g%xb%5fsF:uz79f32%%X9AvzV:RL8xv0j:Lj9N:yr:Uv8n:1f:JX9dPyM:Yb8hf2X:H:9pvx7:bL8ev2%:Hz9yfyB:dT8iv3f:Jj96:yo:ff8vP0F:dL9Ff3r:ST9BP4z:R7%RP04:lX9Uv5n:Wr%e:2C:pD9l:6l:an%vP24:tT9w:7s:cn%A:7J:hr%xP4w:rn%Rf6q:lj%lv5p:n:%d:5l:oP%S:6N:jP%lP4d:pj%DP6b:gD%mv77:Zj%:f2V:gf%kf4Z:o3%L:6I:kv%h:5r:oj%jv6J:rL%i:7V:o3%9:6O:hj:jv41:4z%Tv%K:mL:hv5x:4P%eP%A:nr:fv51:3z%a:98:lz:fP5I:3v%MP96:hX:ef75:nb%2:5y:rz%bv6d:mf%f:5d:mH%Uf5E:kP%KP4z:gz%Iv7x:RH%2P0B:sL98v2v:eX9n:3b:ZL91f2K:dL9h:3Q:Yf90:2M:dr9lv3l:aT99f22:Qv%zf0p:uj9Tf4G:nj%J:6q:kn%4f5r:hv:jf5X:6z%kv:H:sz:4P4CAPX%NAAF:18AEf%EABr:oQAd:7YAHf:FABn:zAAS:8sACf:EAP3%twDy:qUA5v6PANv%dwDR:l4Ayv5GAMf%MQDJ:h8A0P4SAN7%CgDy:ggADP8LAC3:FABT:yMAff83AKn:UQDX:3AAAwCRACwAtQBQANkAcAD6AIoAGAGcADEBqABGAawAVQGoAF8BnABmAYkAaQFvAGkBTgBmASgAYQH9:1oBzv9RAZz:RwFp:zkBNf8qAQL:GQHR:gUBov7wAHj%1wBR:rsAL:6cABL%fAD7:VoA6f04AN39FgDX:fb:1:3Y:979vv:r:aX:%:2P:w7%e:8l:mn:Pf5W:1P%Rf9o:jT:ev4j:4j%Ff%S:gj:mP76:pb%7v6O:uP%gP7X:mr%y:5N:r3%Kv6s:gH%mf7S:YX%of1u:m:9VP47:Tn%Cv0g:t38Bv61:O39lPzW:X38wv1y:LL9cvyk:X38mv2U:JX9tPyU:d78mf0Q:aP9Rv2x:X79xP24:dv98f3z:Sj%C:5b:iP%if48:rH%VP7S:mv%7P6C:v7%mf4J:67%Df:C:gn:0:7::uH%7:7r:tn%8f6::vH%of7t:oD%5f5d:tb%Of7B:hT%qP7v:Yv%zP1p:qn9Rf6J:R:%bP36:VP91:0%:bb9L:2a:SX9gv0h:XD9JP1k:Sz9XP06:Vr9Tf1f:WX9aP2C:Xf9pP2N:cv9qv31:cv9Iv7x:U:%Gv59:kX%qf5w:tL%mf72:r7%Ff:e:i7:9:5A:wf:TP8O:1H:DP9R:wH:S::s:kD:z:4x:6z%H:%C:gv:VP71:iT%4P7z:cz%xP26:pn9rP5z:aH%Vf2b:kD9m:40:aD%Mv2r:jn9u:5I:dL%X:3u:n:9D:%l:TL:0f1W:wT%e:89:qD:ev7C:7n%3::6:vn:O:8OAHz:HwC5:ysA8v8yACkANQBdADYAjgAzALwALQDoACYAEwEdADwBEwBkAQgAjAH9:7MB8::aAev::wHl:yMC4v9IAuP:awLp:4sC8v%qAgIAyAIXAOQCMwD%AlQAGQN8ADUDqwBRA%EAcAMdAZADYQGxA6kB0wP0AfYDQwIYBJMCOQTjAlgEMQN2BHsDkQTBA6wEAQTFBDsE3ARrBPEEkgQEBa4EEgW:BB0FxQQkBcAEJgWxBCIFmQQZBXoEDAVWBPsELwTnBAYE0QTdA7kEtgOhBJMDiAR1A3AEXQNYBEwDQQRBAywEPAMYBD0DBgRDA:UDTAPmA1YD2gNhA9ADbAPGA3UDvAN8A7IDgQOnA4MDnAOBA5IDfAOKA3MDgQNmA3oDVQNzA0EDagMoA2ADCwNUA%oCQwPGAi0DngITA3MC9AJGAs8CFAKkAuABdQKrAUICdAEJAjwBzgECAZAByQBRAZAAEgFaANQAJgCXAPb:XgDK:ykApP:5:4T:zP9p:6b:Vf%H:0j:bv9B:17:Qf9W:0j:WP9V:2T:Z:94:37:lP%X:7b:s::b:9D:AwDr:yoAAwBPABgAcQAoAI4ANACkADkAtAA5AL0ANAC:ACgAuQAXAK4AAQCdAOf:iADK:24Aq:9SAIv:NQBq:xkAS::::y7:6P8U:9X::P7I:%f%wP:X:r3:y:7A:8P%yP:C:tP:xf7i:8z%9f:Y:g0A6P4oAPv%RwAP:2cAI:%HADf:pwBL:8UAXv:gAG7:9gB8:wgBiP8VAZL:HQGZ:yEBnv8iAaD:HwGh:xgBoP8NAZz:AAGX::EAkP:fAIj:yQB%:7EAdP%XAGr:ewBi:1wAWv87AFP:GQBQ::T:UP:P:1L:qv9Z:4f:ZP9o:3X:Tf%L:zf:pf8m:8P:HP:l:xj:CQAZ:y4AHf9SACb:dgAx:5cAP:%2AFD:0ABk:%YAef:3AI::AwGn:woBv:8KAdj:BgHx::0ACQDxACEA4QA6ANIAUgDDAGkAtgCBAKwAmQCnALEAqADIAK8A4QC8APkA0QARAe0AKQEOAUABNQFXAWEBbwGPAYYBvwGeAe8BtgEdAs4BSALmAXIC:AGYAhACuwIiAtwCMQL6Aj8CFgNMAjIDWQJNA2QCZgNtAn4DdgKVA3wCrAN%AsEDfALUA3YC5ANqAvMDWgL:A0QCBwQpAg0ECQIPBOYBDQS:AQYEkwH6A2cB6AM4AdIDCAG2A9kAlgOqAHMDfgBMA1QAJAMsAPoCCQDSAur:rALO:4cCtv9kAqT:RQKW:yoCjv8RAo3::gGQ:%4Bl::gAaH:0wGs:8gBt:%9Ab::sQHD:6IBwf%RAbn:fgGr:2kBlv9QAXv:NQFZ:xYBMv:2AAj:0wDa:rAAqf6LAHf%ZQBE:kAAEv4dAOH9:f%x:d7:hP3D:1v9q:82:ZX:F:2E::78df:p:Gn:2vxg:8:8Wf:J:FT:xvxS:8j8Uf:M:FD:0vxP:9v8Tf:l:Er:7vxF::X8Pv:6:DT::Pwo::v8Gv:5:Av:9vz6:vL86f7v:Nj%7PzI:uv8uP7s:Kv%8Pyf:vX8lP78:Iz%Bf2H:hD9hf4c:Yb%Kf2M:jf9lf5G:aL%Vv20:mb9yP53:eD%iP38:pv9Gv%w:Tr:x:1d:%D9gf:9:ab:G:7K:zr%7P9a:gwAef4qAJT%QQCs:lQAwf5iANP%awDi:m0A7v5rAPj%ZAAA:1sAB:9PAAv:QAAQ:zEAFP8jABf:FgAa:wwAHv8GACP:BAAo:wcALf8PADT:GwA8:y0ARf9DAFD:XABb:3cAZ:%VAHP:swB::9AAjP:tAJr:CAGl:x0Bsf8tAb3:OgHI:0AB0P8:AdT:OQHW:y0B1P8dAc7:CgHG::QAvf:dALL:xQCm:6wAmf%TAI3:ewCA:2EAcv9GAGL:KgBR:w0AP::w:yv:0f8W:7D:AP%O:%n%a::Q:kb:t:4h:53%%v6D:tH%a:6p:lf%gv5F:lv%Of43:jP%F:4z:vv9Of7j:Ub%0f1Z:sb9cf7A:Y7%wP2v:sb91f7S:f:%4v0u::f9X:8O:pP:KP7H:0P%%f9e:icAd:5QAI3%cgCg:o0AsP6gALv%rQDD:rIAyP6wAMn%qQDH:p4Axf6PAMP%fwDA:m0Av:5cAMD%TADE:j8Ay:41ANj%MADo:i8A%:42ABL:RAAt:1gAS:9zAGn:kwCJ:7kAqf:iAMn:DgHn:zwBAwBrAR0AmQEzAMQBRADuAVAAEwJWADACVgBFAk8AVAJEAFsCMwBYAhwAUAIEAEQC6v8zAs7:HgKx:wYClf:tAXr:0QFg:7UBR:%XATD:eQEb:1sBCf8:Afr%JAHv:gsB6P7yAOX%3ADm:sgA6:63APX%qAAC:5sAEv%SACT:jAA4:4sATP%NAGD:kABy:5QAgv%XAI::mACY:5QAnP%MAJn:fgCR:20Ag:9XAG::PgBV:yMAN:8IABX:7P:w:s::y:6x:6X%lP%C:nb:YP5Z:0P%PP8r:iH:GP4I:wz%8f4G:t7%Bv7O:g3%w:4Z:rv%Kf65:j7%u:5W:sD%b:7J:or%1v6n:uf%xP76:uD%EP:6:if:E:8::yr:Vv89:23:Tv%B:1z:k:9o:6P:cv%w:3v:uf%C:8H:iP:I:47:y:%R:8z:lP:K:5X:w:%T:7f:jv%m:4b:kP96:3P:av9S:1f:LP9A:wH:Jf:R:gb:nv7k:mn%wP4z:pr%:v1z:s39Tf6f:Sj%eP0E:lr95f1D:cn9Nf2z:S:9ov0v:Zf9Nf2Q:UH9kP1S:ZX9Z:2d:X79qP2a:bf9uP3I:db92f3z:er9D:77:Sf%Cv44:hb%Qv4f:kX%JP4%:iP%Mf4e:hz%FP4A:gX%3:30:br94P2R:cr9aP2z:T:9nf0Y:Yj99vx3:dj8av3A:GD9svxd:a38Xv2x:GP9wPxu:dr8fP3::I:9LP2k:WL9vP2f:db94v3x:Sj%Df5x:ir%vv5I:gv:Zf5Y:4D%pv%a:vD:sv43AMb%eQDY:rUA5v7rAPH%GwH7:kQBA:9oAQv:iAET:6MBGv%6ASH:zgEr:%ABNv:vAUL:%wFQ:wkCY:8XAnn:JQKS:zQCr:9GAtP:WAL7:2wCKgCDAl8AmwKYALUC1wDSAhoB8QJgARIDpwE1A%8BWQM2AnwDegKeA7sCvAP2AtYDKgPqA1UD%QN4AwIEkwMGBKMDBgSrAwMEqwP9A6QD9AOWA%kDhAPbA24DzANXA7kDPwOkAycDjQMQA3UD%wJaA%kCPgPZAiMDzAIJA8EC8gK4AtwCrwLKAqgCugKhAqwCmQKfApAClQKFAowCeQKFAmsCgAJaAn0CSAJ5AjICdwIaAnYCAgJ0AucBcQLKAW0CrQFoApEBZAJ2AWACWwFbAkIBVgIqAVACEwFHAvwAPALmACsCzgATArQA9wGaANMBfQCnAV0AdgE7AD8BFwADAfH:wwDJ:38AoP85AHb:9P9N:7H:Jf9y::3%N::Z:gT:uP7Y:pz%s:6F:pb%c:6B:mj%df5j:m7%Zf5u:mz%dv56:oX%jf6Z:qP%tP69:tP%2f71:vf%Gv8V:z7:M:9e:07:ef9o:5D:fv%e:5D:pv%c:6j:pP%i:6j:lv%m:4b:of9x:5f:Wf%L:0H:fv8p:3D:Ef9i::z%Vv:s:kv:4P5C:9r%Pv:b:jz:4:49::T%Q:8L:0z:J:9W:0n:ZP9v:3T:l:%G:8H:mf:t:63:GQDD:0cA2v9yAPH:mwAIAMMAHwDnADUABQFJAB0BWwAvAWwAPAF8AEIBiABCAZMAPQGcADUBpAAoAasAGAGwAAQBtADwALgA2wC8AMUAwACwAMQAmwDJAIcA0AB0ANgAYQDjAE4A7wA6AP0AJwANARMAHQH::y8B7f9AAdz:UQHN:18Bwf9rAbf:dQGv:3oBp:97AZ::eAGY:3ABkP9kAYj:UwGA:z4Bev8mAXT:DAFw::EAbv:XAG::vwBw:6kAcv%YAHf:jAB9:4YAhf%EAI3:iACY:5AAo:%dALD:rQC9:74AzP:SAN3:5wDt::sA:P8NAQ4AHwEfADEBLgA:AT0ATgFMAFsBWgBoAWgAdQF2AIMBgwCRAZAAnwGdALABqQDBAbUA1QHAAOsBzAADAtgAHgLjADsC7gBZAvgAeAIAAZgCBQG2AgYB0wICAewC9wD:AugADQPTABUDuQAWA5gAEAN0AAMDSwDxAiAA1wL0:7kCx:%WApz:bwJz:0YCTv8bAi7:8QES:8UB:f6cAe3%dwHh:lUB2f42AdT%HQHS:goB0:77ANb%8QDb:usA4:7oAOv%6QD0:uoA%:7sAP7%7AD%:usA%f7nAO:%3wDe:tMAyP7BAKz%qgCL:o8AZ:5wAEH%TAAa:iYA9P3::8:91:%t:a7:jf2H:3H9Yv9Z:T::Rf0f:zT9A:8p:ev%Iv3W:h:9xP4g:bb%Jf2p:iv9nv42:ZX%Qf2M:k39g:5Z:Xr%Zf1x:m:9Z:55:Vz%gP1Q:oX9Q:6J:TX%iP0m:oP9FP58:QL%c:3v:Wf92:1c:cj9U:23:Uv9pf1G:Zb9RP2J:Uf9gP1O:Xv9Wv15:Wv9e:2A:YL9mv2N:bn9nv3a:bP9:f3M:SH%6v1F:gz%Z:4w:of%Vv6l:nz%wf6i:tr%x:7y:un%CP8H:xz:If8u:zb:Pf9F:0j:T:9P:1T:Uf9U:0::UP9I:0j:P:8%:zT:Mv8m:yX:Gf8a:wv:EP:9:gn:8f4G:%j%CP:f:g3:1:4V:9P%Iv:Q:jL:0P5E:9L%Vv:W:mj:3f55:%b%iP:x:pT::P6c:wn:of8W:6L:Iv%f:y::mv87:5P:Rv%K:1H:gP9b:3X:Zf9q:23:X:91:1T:e:9K:4D:QP%E:zb:h:8t:4r:Jv%M:yD:jf8a:47:Fv%P:xL:kP8Q:4::Df%M:wn:iP8G:4P:Av98::3%dP:2:mv:7v5i:%T%Wf:Z:lH:z:5K:8T%Q:%6:kH:sP5D:6n%Sv%j:lf:oP5s:6D%h:%j:qn:q:7R:7j%:P:I:ikA3f5YAPf%iAAW:7cAOP:lAF3:EgGE:z0BrP9mAdT:jAH8:60BIQDJAUUA3gFlAOwBggDzAZoA8wGuAO0BvgDiAckA0wHQAMEB1ACtAdcAmgHXAIkB1wB5AdcAbAHYAGIB2wBdAeAAXAHoAF8B8QBmAfwAcwEKAYQBGAGbAScBtAE1AdABQQHvAU0BDwJWAS8CXAFMAl4BaQJeAYECWwGVAlYBowJOAawCQwGuAjYBqgImAZ4CFQGMAgIBdgLuAFoC2QA7AsMAHAKuAPsBmQDaAYYAvAF1AKEBZgCJAVkAdQFOAGMBRgBXAUIAUAE:AEsBPgBLAT8ATgFCAFEBRgBUAUsAWQFSAFwBWQBdAV4AXQFkAF0BaQBcAWsAXAFqAFoBZABWAVsAUQFOAEgBPwA7ASwAKQEXABQBAQD5AOn:2wDR:7sAu:%bAKj:egCW:1cAh:83AH7:GQB5::r:eP:d:3v:wv%C:6n:jP%S:5j:ff%m:2r:tP9c:8L:Uf:O:0v:2f9K:%H:T::o:1j:7P9l:%z:df:s:4j:7P%d:%r:tP:o:8v:5v:j:%b:%::o:xIA6v8nAO3:OwDy:00A9:9bAP3:ZQAEAGwACwBvABIAcAAYAGwAHQBjACAAVwAjAEcAJgAyACQAGAAgAPv:GgDa:xEAtf8EAI7:9f9j:%L:OP:N:wz:tf:h:pz:uf6C:5P%aP9z:k3:Wf40:0f%Hf88:gf:O:72:kH%5:5O:tz%Yf7W:nj%1v6R:tn%rP7h:sf%7f7j:vv%:f4L:xf:HP8u:y3:Q:89:1P:Sv9f:1b:ZP9e:2L:Yv9a:2T:S:9h:zT:Wf8Z:07:%v5A:9f%Lf%z:hj:kf4B:2:%6P5Q:s7%N:62:iL%oP4S:oz%Cf57:gf%bv4M:mT%Gf5f:i7%XP5J:l3%a:5g:pT%Zf7B:mz%8f5z:iL:ef5U:3:%hv%G:rb:iv7j:4:%DgCT:jYAlv5aAJn%ewCb:pcAnP6wAJ:%xgCh:tgAov7oAKT%9wCo:gYBrf4TAbT%IQG%:jMBzP5GAd:%XQH2:nYBEv%TATP:swFY:9cBg::%AbH:JwLj:1ACGAB6Ak8ApQKJAM4CwwD2Av0AHAM2AUEDbQFlA6EBiQPRAawD:QHMAyIC6ANDAgEEXgIWBHUCJQSGAi4ElAIxBJ8CMASoAisEsAIiBLYCFwS7AgsEwgL%A8oC7gPSAt4D3ALNA%gCuwP0AqkDAAOVAwwDgwMYA3ADIQNeAycDTgMqA0EDKwM1AycDLAMgAycDFQMlAwgDIwP3AiMD5QIlA9ECKAO8AisDpQIvA44CNAN3AjkDYAI%A0gCQwMxAkcDGwJKAwUCSwPvAUkD2QFGA8MBPwOuATYDmQEoA4UBFwNxAQEDXgHlAksBxQI3AZ4CIgFzAgwBQgL1AAwC3ADTAcEAlwGkAFsBhwAeAWoA5ABMAKsALgB4ABEASwD2:yUA3f8GAMX:7:%y:%H:ov:Z:5f:1:%P:9v:jP:i:47:7f%V::z:of8NALD:IADB:zYA1f9NAOv:ZAAAAHoAFQCNACkAnQA7AKcASwCsAFkAqwBkAKQAbgCZAHYAiAB5AHMAewBdAHoARQB5AC0AdgAVAHEA::9tAOz:aQDc:2cAz:9nAMb:aQDB:2wAwP9xAMT:eADM:4EA2P%LAOf:lQD4:58ACwCqAB4AsgAvALgAPgC9AEsAvwBVAL8AWwC9AF4AuABdALIAWACrAFAAogBEAJcANQCLACMAfQAOAG8A%f9hAOP:UgDN:0IAuP80AKX:JwCV:xwAhv8RAHr:CQBx:wQAav8BAGX:AQBi:wMAX:8HAFz:CwBa:xEAVv8XAFD:GwBK:x8AQ:8hADz:IAA2:x0AMv8WAC::DAAu::::Mf:w:zX:4P84:87:PP%9:0D:rv9G:6L:Sf%Y:07:k:9V:5P:W:%Y:2L:of9s:7D:df:C:3::1:%K::D:lP8LAJ::KACs:0YAuP9kAMX:gADT:5sA4v%1APP:zAADAOAAFQDwACgA:wA7AAwBTgAXAWAAIgFxACsBggA1AZIAQAGhAEoBrwBWAb0AYwHKAHEB1QCAAd8AjgHnAJ0B7gCsAfEAuQHxAMYB7wDRAeoA2gHgAOEB0gDlAcAA6AGqAOcBjgDkAW0A3AFGANEBHADCAe7:sAG8:5gBh:99AVL:XwEd:z0B6P4aAbf%9QCK:tAAYP6rADz%iAAf:mcAB:5IAPb9LADq:RIA4:38:9:96::d:dz:3P3S:939y::e:cb:4P3E:%P9xP:k:cX:5f3E:%T9w::j:cH:3v27:9X9sf:J:ab:uf2X:6T9g:%O:W3:d:1T:179Nv9F:Rf:Lf33:hf91f4D:bX%8:yV:ub8dv7c:Fv%1vxD:tL8Lv7R:B3%0vwQ:tf8Bv7c:P:95Pz7:ez8%P3z:Pb9%:z1:QH99P0F:fP9CP3y:Qj97v0E:ef9::zg:fj82P3t:M394fzC:dX8tv3H:Kn9ufyc:a78kP2k:IX9nfx6:Zj8cf2Y:Gr9nvxm:an8Zf25:Gb9z:xs:en8dv0I:YX9Kf2X:Uz9rv1x:cf9l:3k:b39A:7g:SP%Av5E:iD%Zv47:of%Uf6l:mb%w:54:t7%h:71:pb%Cv%j:hv:rf4q:7b%OP%9:kT:wP5Q:8H%W:%::mj:uv53:7T%iP%r:pv:o:6w:5v%x:%U:uD:jv75:4r%EQCI:ikAiP5AAIr%VQCP:mgAmP54AKL%hgCw:pEAwf6aANT%ngDp:p8AAv%eABz:mgA4:5QAVf%LAHH:gQCO:3YAqP9qAMH:XQDY:1AA7f9DAP::NwAPACsAHAAgACUAFQAsAAsAMAABAC8A9:8sAOz:JADh:xkA1P8KAMf:%v%6:%f:q::R:5z:u:%N:6P:fv%J:27:b:9e:1X:Tv88:z7:I:8t:wz:HP:3:gz:5P78:tX%7P7K:t:%w:7T:sH%yv7G:sT%0P7A:t:%wP70:sP%DP:J:ib:1P5D:%L%X::z:nr:B:%U:x3:rP82:8L:Uf:W:27:6P%K::j:p:8EAML:DgDc:xMA9P8VAAkAFQAcABIAKwAMADgABgBDAP::SwD4:1AA8v9TAO::VADw:1UA9P9WAPn:VQADAFUAEQBYACEAXAAzAGAARwBmAFwAbQByAHYAiQB%AKAAhgC2AI4AywCWAN8AnQDxAKMA:wCnAAkBqQAQAaoAEgGqABEBqAAMAaUABQGhAPoAnADuAJcA3wCRAM8AigC%AIMArQB7AJwAcwCLAGoAfQBgAHAAWABmAE8AXgBHAFkAPwBXADcAVwAvAFoAKABfACEAZgAYAG0ADwB0AAUAewD4:4AA6P%DANf:hQDF:4YAsf%FAJz:gwCH:4AAcf99AFz:dwBH:28ANP9kACL:VgAT:0MAB:8rAP7%EAD4:vH:9f7Q::b%rv:5:or::f5o:wL:R:8I:yn:Df8N:xH:9P4T:%D%FP:O:hP:wf4Q:7j%DP%0:gb:tf7::rv%%P7F:vD%1v7o:uz%4v4H:9v%Jv:V:kj:0f5s:87%kP:N:rT:zP7Y:87%%f:R:hcA1v4zAN3%SwDl:l8A7f5vAPf%egAD:34ADf98ABf:cwAg:2UAKP9RAC7:NgAy:xcAM::0:zP:zP8w:6H:LP90:yb:Rf8e:xX:Ev:l:gX:tv72:oj%5v5c:tT%M:6::g:%qv7v:ZX%1f2A:sH9bP60:Vn%r:1H:rH9Nv65:Sj%x:0d:tj9FP7r:Qz%::0I:hT%B:4o:gj%O:4L:k3%D:5d:hT%bP4Z:nn%Hv6D:iH%if4h:o7%IP6O:h3%i:4X:ob%D:5::gb%dv76:Wz%7v1k:uP9Xf7X:Vn%zP1Y:sL9W:67:WP%t:1y:rX9hf63:Z3%vP25:sX92:7T:f:%5f0o::n9VP8Q:oP:Kv60:0f%5:9l:hoAhP5LAKP%ewDD:qgA4:7RAAP:9wAj:xkBQf84AV::VQF9:3EBm:%NAbr:qAHZ:8MB%P:dARcA%AE3ABQCWQAvAnoASgKcAGYCvwCCAuMAnwIIAb4CMAHeAlgB:QKBAR8DqgFBA9QBYwP8AYUDIwKnA0kCxgNrAuMDiwL9A6cCFAS:AigE1AI5BOYCSAT1AlQEAgNcBA0DYgQXA2UEIQNkBCoDXQQzA1IEPANBBEYDKwRPAxEEWgP0A2QD0wNvA7EDegOPA4QDbgOMA00DkwMvA5cDEwOaA:kCmgPhApgDzQKVA7wCjwOsAocDoQJ9A5kCcQOVAmQDlQJUA5oCQgOiAi4DqwIZA7gCAgPHAusC1gLSAuUCuAL0Ap0CAgODAg4DZwIaA0wCJAMzAi0DGQIyAwACNQPoATUD0QEwA7wBJgOnARcDkwEEA4EB7AJwAdACXwGwAlABjAJCAWYCNgE8AikBDwIeAeEBEwGyAQgBgQH8AFEB7wAiAeIA9gDUAMsAxACkALIAgwCiAGgAkABSAH8ARQBvAD0AXwA7AFEAPgBFAEUAOwBOADIAWQAtAGYAKwBzACwAgAAwAI4ANwCbAEAAqABLALYAVwDCAGMAzABvANUAewDbAIQA3ACMANsAkwDWAJgAzwCcAMUAnwC6AKEArQCjAKAApACUAKcAigCqAIEArAB5ALAAdAC2AHEAvQBvAMUAbwDOAHAA2AByAOQAdwDwAH0A:QCFAAkBjgAVAZcAIAGjACsBrQA1AbYAPAG:AEEBxgBEAcsARQHPAEMB0gA:AdYAOQHZADEB3AAoAd8AHwHiABUB4gAKAeEAAAHgAPUA3QDqANoA3wDVANQA0ADJAMsAvwDFALQAvwCoALoAnAC1AJAAsgCDAK0AdQCoAGUAowBVAJ0ARACVADAAjAAdAIEACgB0APb:ZwDk:1oA1P9MAMX:PgC5:y8Ar:8hAKn:EwCn:wIAp::x:6v:4P%y:8z:uv%4:8X:pf:T:5P:4f%A:%::b::%:2H:DQBU:xsASf8nAEH:MwA8:z4AO:9IAD3:UgBE:1wATv9mAF3:cABx:3oAif%DAKb:jQDH:5YA6v%fAA4AqAAzALEAWAC7AHsAxQCcAM8AuwDZANcA4wDxAO4ACAH5ABsBAwErAQwBNwEXAT8BIAFCASkBQAEvATkBNQEsATkBGwE6AQYBOwHvADoB0wA3AbYAMwGXAC8BdgAqAVQAIwExABsBDwATAe3:CgHM::8Arf:0AI::6AB0:9wAXf:QAEn:xAA5:7kALv%uACb:pQAi:50AI:%XACT:kQAm:4wAKv%JAC7:iAAw:4YAMP%EADD:ggAv:38ALP97ACf:dAAj:2sAHv9fABf:UAAQ:z4AB:8oAPz%DgDy:vL:5v7U:9n%s::M:pH:wf5v:7b%Tv%s:i3:pv4O:6D%8f6b:tb%mP6%:pX%q:6S:pv%kP6O:o3%hf6I:n:%gv57:nz%e:52:nz%bv59:mb%f:5f:oH%V:6D:k7%g:5F:oL%PP5::jP%e:4r:nT%Jf5s:iD%Y:4c:ln%G:5Q:hv%R:4c:j:%H:46:iT%OP4p:jj%Mf47:jv%Qf5H:kr%Vf5W:mb%ZP56:nb%kP6I:qj%m:7B:rH%2v7H:vP%3f4M::L%Iv8H:zb:G:9H:y7:VP9C:13:Vf9h:2f:YP96:1z:jf9U:6L:Sf%3:zv:zf8r:%P:F::6:wL:EQDq:ikA0P4:ALX%UwCZ:mcAff54AGH%hwBH:pMAL:6dABr%ogAJ:qUA%:2kAPH9oADs:ZkA6v2PAOv9gwDy:XUA:P1mAAr%VgAc:kYAMv40AEv%IgBp:g8Aif78:6r%6P:M:tT:7f7A:w7:rP8s:5j:Rv%D:17:b:9z:1v:hP9H:5L:M:%d:yD:pP8O:6f::v6l:%:%n::i:pX:1:6H:8z%dv:D:mP:u:5P:7T%Ov%u:iX:qv4R:6b%::6l:u:%pP7h:qT%1:6k:s:%pf7K:qf%yv6p:sv%qv7P:qz%2P6v:uP%sv7x:rb%Av%7:hb:wf4u:8j%SP:S:mT:3v6C:%z%oP:8:r7:Dv:b:yH:9f81:w4AS:8kAGL:NgB4:0QAjv9QAKP:WQC2:18Ax:9iANX:YgDg:2AA6f9bAO7:UwDw:0oA7:9AAOz:NQDo:ywA4v8jANr:GwDR:xUAyP8RAMD:DQC4:wwAsf8LAKz:CgCo:woApv8KAKb:CQCo:wkArP8KALH:CgC2:wsAvf8NAMT:DgDK:w4A0f8PANf:DgDb:wwA3v8JAOD:BQDg:wEA3f:8:9r:%P:W::P:0P:u:8r:6P:E:%L:vv:b:7b:1f%v:8::qP:I:53:w:%T:8H:iP:A:3z:wv9u:8j:YP:P:1D:2f8::%X:Lf:y:xv:AAAK:w0A%P4YAOb%IgDW:igAyP4sAL3%KwC1:icAr:4hAK3%FgCw:gkAtv74:8D%5P:N:s3:2:6z:%v%lf:8:nX:Df9T:x7:Lv8s:wj:Of:i:kP:vf5L:5r%UP97:lL:Yf5R:0v%T:86:kr:Lv5D:yj%O:8m:jP:Kv4p:zT%If9C:hj:VP4R:23%DP%L:gf:rP4C:9D%::74:v3%If:9:kn::f5u::3%kv:::rL:Af:M:wP:4:8E::X:B:8CAAr:CAAN:wkAEf8DABX:9v8a:%T:IP:M:yj:rf8u:4v:Nf9n:zz:P:9C:xf:R::v:kv:yf5P:6X%Uv%D:lT:Zf5V:0r%Vf8y:lL:H:5O:xD%Sf8G:kP:Af47:wH%M:8F:ir:Dv4h:xv%F:8t:g7:Q:4G:13%AP94:vr%lf71:rL%8f7O:u:%6:7u:gX:7v4d:%7%NP:u:kf:7v5Z:%3%av:s:nj:6v6E:%X%j::f:pj:1:6f:83%o::C:qX:tf6m:6j%p:%b:qb:j:6k:4P%pP95:qT:c:6l:23%pf9p:qj:af6s:27%r:9z:rL:fP62:4j%vP%X:sL:qP7K:7r%0::P:uD:5f7u::v%:P8R:wwAKf8dAEH:LQBZ:zwAcP9JAIb:VwCd:2QAs:9yAMr:gADf:44A9P%dAAoArwAiAMAAOgDQAFMA4gBtAPUAhwAHAaEAGgG7AC0B0wBCAesAWAEBAW8BFgGIASgBogE5AbwBSQHXAVYB8AFiAQkCbgEgAngBMgKBAUICiwFQApYBWwKhAWICrQFlArsBZQLLAWMC3AFeAu4BVgIBAk0CFQJAAigCMgI8AiECTgIMAl8C9gFuAt4BegLFAYUCqwGOApIBlAJ5AZcCZAGZAlEBmQJAAZcCMwGTAikBjQIjAYYCIQF9AiEBcwImAWgCLQFbAjgBTQJGAT0CVwEsAmoBGAJ:AQMClQHtAaoB1QG%AboB0AGfAeABgwHtAWUB9wFHAf8BKQECAgsBAwLtAAEC0gD6AbcA7gGeAN4BhwDKAXMAswFgAJcBTwB5AT8AWgExADkBIwAZARcA%gAMANoAAAC9APb:oQDs:4cA4v9vANf:WADN:0MAwv8xALf:IgCr:xYAn:8OAJL:CQCF:wkAef8MAG::EwBl:xwAXv8oAFj:NQBT:0QAUf9TAFL:YgBU:28AWf98AGH:iABr:5IAdf%bAIH:owCP:6sAnf%wAKr:tQC4:7kAxv%6ANP:uQDf:7UA6:%xAPf:qgACAKAADACVABcAiQAiAHwALgBuADoAYQBIAFMAVQBFAGMAOABxACsAfwAeAI4AEwCcAAkAqQAAALUA%::BAPf:ygD2:9MA%P:ZAPv:3QAAAN4ABQDfAAoA3AAQANkAFADTABcAygAaAL8AHgCzACIApgAkAJgAJwCIACkAeQArAGsALgBcADAATQAyAD4ANQAuADkAHwA%AA4AQwD9:0oA6:9TANn:XQDH:2YAtP9xAKL:fACS:4UAgv%NAHT:kwBq:5cAY:%YAGD:lwBg:5IAZf%LAG7:gwB9:3cAjv9qAKL:XAC6:04A1P9AAO::MQAJACIAJAAVAD8ACABZAPv:cgDw:4gA5v%eAOD:swDc:8YA2::ZAN7:6wDk::wA8P8PAf::IAESADABKwBBAUgAUwFmAGIBiQBzAa8AhAHWAJMB:gCiAScBsAFQAbwBdgHHAZoB0AG6AdgB1QHdAeoB4AH5AeIBBALjAQgC4AEHAtwBAgLYAfgB0gHpAcwB1gHHAb8BwQGkAbsBhgG1AWUBsAFDAasBHwGlAfsAnwHaAJoBuQCVAZkAjwF7AIkBXwCDAUcAfgEwAHkBGwB0AQcAbgH2:2kB5v9jAdj:XAHM:1YBw:9PAbz:SAG2:0ABtP84AbT:MQG1:ykBt:8hAbv:GQHA:xIBxf8KAcr:AgHN::oAz::yAND:6ADP:9wAzv:RAM3:xADL:7QAyf%jAMj:kgDH:4AAxf9tAML:WAC::0IAu:8tALf:GQCx:wYAqv:0:6P:4:%c:9T:lP:I:43:vf%G:7X:f:%u:3j:qf9w:6b:aP%j:2H:o:9a:6L:U:%i:0z:ov9G:6P:QP%h:zr:oP80:57:Lv%a:yj:l:8h:5P:Gf%M:xH:hv8K:3::A:95::3%cf:4:mr:9P5j::H%Xv:x:lv:8v5Y::P%V::4:lj:::5a:wb:XP8R:17:Hf9i:yz:Zv88:2n:Tv9t:2D:cv9z:3f:hf98:5X:g:%k:4z:rv%X:7b:o:%7:7L:u::E:7f:2P%v:%::o:8HAJP:IACB:zoAbP9TAFf:bABB:4QAKv%aABT:rQD::r0A6v7KANf%1ADF:toAtP7cAKj%3QCe:twAmP7XAJb%0QCZ:soAn:7BAKv%uAC7:q0A0P6hAOn%lgAE:4kAIv97AEL:bgBl:18Aiv9PAK::PgDU:ywA%v8ZAB0ABgA%APL:WgDc:3IAxv%FALH:kwCb:5oAhf%cAG::mQBa:5IAR:%FADT:dAAk:2AAFv9HAAn:KwD%:g0A9:7u::P%zf:v:qz:7P6M:%r%bv:p:lL:6v46:%r%I::p:hH:6v4D:%z%%P7s:u:%7P7r:uz%6v7u:uv%7:7v:vD%9f7w:v7%8f4K::T%F::2:ib:%v43:::%Sv8F:17:DP90:xT:iv8e:6D:Kf%2:zb:yv9D:9v:T::s:1z:%f9n:wMAcf8MAHr:EwCD:xkAiv8eAI7:IgCS:yQAlP8lAJX:JQCU:yYAlf8mAJX:JACU:yQAlf8kAJj:JQCb:ygAoP8sAKb:MgCu:zkAuf9CAMT:SwDQ:1UA3v9gAOz:awD6:3cACQCDABgAjgAmAJoANAClAEAArgBMALUAVgC6AF8AvgBnAMAAbQC:AHEAvgB0ALwAdAC5AHIAtwBuALYAagC0AGQAsgBcALEAUgCxAEkAsgA9ALMAMAC1ACIAuAASALwAAADCAO3:yQDZ:9AAxf:ZALD:4QCc:%kAif:wAHn:9QBs::cAYv:2AFv:8gBZ:%oAWv:eAF::zgBl:7oAbv%jAHr:iACG:2sAkv9OAJ::MACr:xEAtv:y:7::0::H:7b:zf%Y:9H:e::S:2H:0:9I:9L:Mv:P:yD:zP8T:8j:C::E:wn:wf8N:73:Fv%7:yX:uP84:7b:UP%0:2v:s:%I:7H:qP%w:8r:r::r:6::DACu:y0Arv9LAK7:ZgCt:3wArf%OAK7:mwCv:6EAr:%gAK::mQCw:44Asv98ALT:ZQC1:0kAt:8pALv:BQC%:97:wv%1:8f:iv:M:2D:0f81:9X:C::Y:%X%2::B:tz:n:7b:4H%2f9n:tb:Uf7R:z3%yv8u:sL:I:66:xr%sf8U:qX:E:6a:xT%jv8Y:oD:H:5z:yj%ZP80:lb:Qv5I:1L%O:9k:i3:eP4h:43%Ff%i:gn:uP7%:sz%8v7f:uX%8f7Z:gH:zP4Q:7:%Hf%w:in:o:40:5X%Pf%G:kT:eP5M:2z%Uf9g:lT:VP5X:0z%Wf9E:ln:Pv5a:zv%W:88:l3:P:5g:0X%ZP9O:mr:W:5y:2r%e:96:oX:jf6Q:6H%nP%2:qn:zP63:%L%xv:5:tb:D::l:yT:9v86:wYAUP8WAGX:JgB6:zUAkP9EAKX:UwC6:2IAzv9wAOL:gQD2:5IACQCjABsAtwAtAMoAPgDfAE0A9QBdAAoBawAgAXYANQGAAEkBiABcAY4AbgGSAH4BkwCNAZQAmgGTAKQBkQCsAZAAsgGSALUBkwC1AZYAswGcAK0BowClAawAmgG4AIwBwwB6Ac8AZwHdAFIB6gA8AfYAJwECAREBDQH8ABYB5wAgAdIAJwG9AC0BqgAyAZYANQGCADYBcAA3AV8ANgFQADUBRQAzATwAMAE3ACwBNwApATsAJAFCAB0BTgAXAV4ADwFvAAUBgwD7AJoA8gCwAOUAyADZAOAAzAD1AL4ACgGvAB4BogAuAZQAOgGEAEQBdQBLAWYATgFXAE0BSQBJATsAQQEuADcBIgApARcAGQEOAAcBBwDyAAAA2wD5:8QA9f%tAPL:lQDu:38A6v9qAOf:VwDj:0YA3:82ANn:KADS:xwAzP8RAMb:CADA:wAAuf:5:7L:9P%r:%::o::r:5v:6f%V:%f:jf:n:4b:6P%B:%z:fP:x:3n:9:94::7:eP8GAHr:DwB%:xYAg:8cAIj:IACP:yIAlv8jAJ::IwCo:yEAsP8fALr:HADF:xkAz:8VANr:EQDl:wsA7:8GAPv:AQAIAPr:FADz:yAA7v8vAOj:PQDj:0wA3:9dAN7:bwDd:4AA3v%RAOH:owDl:7QA6::EAPD:0QD3:90A:v:oAAUA8QANAPgAFgD8AB8A:wAoAP8AMgD%AD0A:QBHAPkAUgDzAF0A7QBqAOcAdwDeAIMA1ACRAMkAoAC9AK8ArwC:AKAAzwCRAN4AgADtAG8A:ABcAAoBSgAWATcAIgEkACsBEgAyAf::NwHv:zkB4f84AdX:NAHM:y4ByP8lAcf:GQHJ:wsBz::6ANj:5wDk:9AA8:%3AAMAnAAVAIAAKABjADoARgBNACoAYgAPAHQA9v%GAN::lgDJ:6YAtv%1AKX:wwCW:9AAif:cAH::5wB6::MAd::9AHj:BwF%:xEBiP8cAZf:JwGq:zIBv:87Adf:QwHz:0wBEABTAS0AWAFLAF0BaQBhAYQAZAGeAGYBtQBmAcgAZQHYAGMB4gBeAegAWQHpAFQB5ABNAdoARgHNAD4BugA2AaUALgGOACcBdAAgAVgAGgE9ABYBIAATAQQAEQHp:xABz:8QAbb:EAGf:xEBi:8TAXr:FQFq:xYBXP8WAVD:FwFG:xcBPf8XATT:FwEs:xUBJf8TAR::EAEZ:wsBFP8FAQ:::QAM::QACP:pAAf:3gAI:9IACv:FAA7:tgAU:6gAHP%aACP:iwAr:3wAMf9sADX:WwA4:0kAOf83ADn:JAA4:w8ANv:6:zT:5f8y:8::MP%5:y7:o:8s:4z:Kv93:yj:Yv8m:0::I:88:yD:LP8d:x7:G:8T:xj:Cf8V:wD:Ev:6:hH:9v4P::L%Df:v:gv:7P4I:%r%Bf:p:gH:5:78:uT%9:7j:vL%4f7r:t7%5f7b:uD%2f7c:tj%1:7X:tX%1v7T:tf%0v7W:tT%1v7Z:tj%3:7Z:uj%2v7y:tv%:v7d:gz:3:4Z:%D%J::i:jX:5v5D:%n%T::t:lz:8:5o::r%cf8B:3r:C:%B:xf:hf8k:4j:NP%H:0f:hP9Z:3::b:95:4b:bv%d:2L:tv9S:83:QP:j:yz:%P8X:w0AAf8eAOr%LgDU:jwAv:5HAK3%UQCd:lkAjv5fAIH%YgB3:mMAb:5lAGr%ZQBn:mIAZ:5eAGv%WgBz:lYAfv5RAI3%SwCf:kQAtv48AND%NADt:ioACv8fACr:EwBM:wYAbf:3:43:5:%s:9b:yf:F:%T:tP:9:6P:EwCR:yUAgP81AHH:PwBj:0UAVv9GAEr:QwBA:z0AOf80ADP:KAAu:xoALP8LAC3:%:8t:%z:Mf:d:zf:zf89:7::RP%0:03:qv9W:6P:YP%e:2v:m:91:5z:f:%f:4n:pf%T:6z:nP%1:6b:v:%w:8v:uf:a:8L:6v:L::r:0v8LANv:HADj:y0A6v9AAPL:UwD6:2UAAgB3AAsAiQAUAJoAHgCqACgAuAAxAMQAOgDMAEQA0wBNANUAUwDVAFkA1ABdANAAYADLAGIAxQBjAL4AYwC4AGIAswBhAK4AYQCpAGAApQBgAKMAYgChAGQAoABoAKAAbQChAHMAowB7AKYAgwCpAI0ArQCXALIAoAC2AKkAugCyAL0AuQC:AMAAwADFAL8AyQC9AMwAvADOALoAzgC4AM0AtwDMALYAyQC2AMYAtwDCALkAvQC9ALcAwgCvAMgApwDQAJ0A2QCSAOMAhwDtAHsA9wBuAAABYQAIAVUADgFJABMBPgAWATQAGAEqABgBIgAWARwAEgEXAAwBFAAFARMA%wATAO8AFQDjABoA1AAgAMIAJgCvAC4AmwA3AIQAPgBpAEQATwBLADQAUQAYAFUA:v9ZAOT:WwDM:10Atv9eAKL:XwCQ:18AgP9fAHL:XwBm:18AW:9eAFP:XQBP:1wATf9aAEz:VwBQ:1UAV:9TAGH:UABu:0sAff9GAI::QACj:zgAt:8vAMr:JQDc:xsA7f8RAPr:BgAFAPv:DgDx:xMA5:8VAN3:FADW:xAA0P8HAMv::P:I:%7:xf:b:8L:x::B:7L:wv%Z:8L:gv:E:2r:xv9R:8j:Ov:K:yP:zP8N:83:%v7Q:%j%0f:Y:tL:y:7T:8D%0:%4:tH:s:7O:7D%y:%w:sb:s:7A:7j%uf:A:rL:yv6q:9X%of:i:pb:8f6M:wH:gP8R:3P:If9m:zT:Wv9G:03:WP9A:2r:M:99:yf:j:8c:5::Ef%u:wb:u::7:sX:8P7O:%b%0::b:tb:z:7Y:8T%2P%6:tj:sP7X:6f%1:%g:tb:m:7U:5b%0v%T:tP:k:7S:5T%0f%W:tL:nP7S:6P%0v%r:tP:t:7U:8P%1v:S:tj:4f7a::D%3f8B:%H:Ev:k:yT:5v81:%j:Rf:q:1X:7v9n::H:d::1:4X:%v%V:wEApP8KALP:FQDC:yAA0P8sAN7:OgDr:0gA9:9YAAIAaAAMAHcAEwCIABoAmQAhAKoAJgC6ACsAygAvANkAMwDnADcA8wA8AP0AQgAFAUgADAFPABEBVgAUAV4AFgFnABUBcAAUAXoAEgGHAA8BkwALAZ8ABgGtAAABugD5AMcA8QDTAOgA3wDfAOsA1QD1AMwA:wDDAAgBvAARAbYAGgGwACMBqwAqAacAMgGkADkBogBAAaAARgGeAEoBngBOAaAAUgGjAFMBqABTAbAAUgG7AFAByABMAdcARwHoAD8B%gA2AQwBLAEfASABMQEVAUABBwFNAfkAWQHrAGMB3ABpAcwAbgG:AHABsQBvAaIAbQGVAGkBiQBhAXsAVwFuAEsBYgA:AVYAMQFKACEBPQASATMAAgEpAPIAHwDiABcA1AAQAMUACQC3AAIAqQD8:50A9v%TAPL:igDt:4EA6P97AOP:dgDe:3IA2P9yANT:cQDP:3AAyv9wAMj:cADH:3EAxf9yAMT:cgDD:3IAxP9yAMb:cgDJ:3IAzf9zANP:dADa:3QA4v9zAOz:cQD3:20AAQBnAAwAYAAXAFcAIgBMACwAQQA3ADUAQQAqAEoAIQBVABgAXgARAGkADAB1AAYAfwABAIkA:v%UAPr:nwD2:6oA8v%1AO7:vwDp:8kA5P:TAN::3ADb:%QA1f:rANH:8QDN::UAyf:4AMb:%QDC::gAv::1AL7:8AC9:%oAvv:iAMH:2ADF:80AzP:CANX:tQDf:6gA6v%aAPb:igADAHgAEABmAB4AUwArAD8ANgAqAEIAFQBOAAAAWADr:18A1v9lAMT:aQC0:2oApv9pAJr:ZgCR:2EAiv9YAIb:TgCE:0MAhf82AIf:KACL:xsAkf8NAJn::v%i::D:rf:h:7j:0::E:8X:0f%2:93:qf:q:5z:9:%Q:wQAhv8RAH7:HwB4:y8Adf8%AHP:TABz:1wAd:9sAHr:ewCA:4kAhv%WAI::ogCb:64Ap:%3ALb:vwDH:8YA2f:KAO7:zQAEAM8AGQDPAC8AzQBFAMoAWADEAGoAvgB5ALcAhwCwAJEAqACYAJ0AnACUAJ8AjACdAIIAmAB5AJEAcACHAGgAegBfAGsAWABZAFEARQBJADAAQgAbAD0ABgA4APD:NADa:zAAxf8tALL:LACg:y0Ajv8uAH3:LwBt:y8AXv8vAFP:MABI:y4APv8rADf:JwAw:yIAK:8bACj:FAAl:wwAI:8DACL:%f8h:%::If:l:yL:2:8j:9H:Jf:H:yb:vf8q:7X:MP%t:zX:pv87:5::Qf%Z:0b:k:9M:4::UP%K:1P:hP9U:33:VP92:1P:bf9S:2X:Uf9b:1H:Uv9R:0j:Uf89:1P:M:9V:yr:V:8h:1n:Gf9a:xL:Wv8L:1r:Bv9Y:wP:VP:::lD::f5M::7%Rv:%:kD::v46:wD:NP8C:y3:BP8n:wX:Iv8I:x3:Cf8W:wn:Ev8K:w::DP8N:w3:DP8O:wz:EP8O:xP:EP8V:xT:F:8Z:xr:Hv8c:yT:Hf8r:x7:M:8f:zv:IP9C:yD:Sv8g:1H:If9Y:yP:Xf8m:2H:Kv9k:zH:Zf86:2T:RP9j:1H:YP9f:1v:bf9X:3z:U:%M:07:m:9J:6z:RP%8:z::zP86:9v:NP:p:y7:9v8n:wMAH:8OABf:GQAP:yMAB:8sAAH:NAD7:jwA9:5DAPX%SQD1:lAA9:5WAPz%WwAD:18ADP9kABf:ZwAk:2gAMv9pAET:aABX:2YAa:9hAID:WwCX:1UAr:9NAMj:RADg:zoA%P8vAA8AIwAlABgAOAAKAEgA:P9VAO7:YQDi:2oA1v9wAMn:dAC%:3cAtP92AKv:cwCj:24Anf9oAJj:YACU:1UAkP9JAI3:PgCN:zIAjv8lAI7:GQCQ:w0Akv8CAJf:%f%d:%7:ov:l:6j:3f%u:9X:tP:P:7r:yf%::8X:xP:D:8j:wf:L:8D:zf:A:87:wP:O:8P:0P:F:9D:x::Q:8v:0v:O:9T:0f:V:9X:1::Y:9n:2::c:9::4P:i:%T:5v:o:%j:7f:r::L:7f:4:%7::f:u:wEA7:8GAO::CQDu:wsA7f8MAO3:DQDu:w4A7:8PAPD:DwDx:xAA9f8SAPj:FQD8:xgA::8dAAIAIgAFACgABgAwAAcAOAAGAEAABgBKAAYAVAAFAF4ABABnAAQAbwAFAHcABQB%AAYAgwAGAIYACACIAAkAiQAKAIcADQCEABAAgQAUAHsAGQB0AB8AbgAnAGYALgBcADcAUgBBAEgASgA8AFMALwBcACIAZAAUAGsABgByAPr:dwDu:3kA4v95ANf:dwDN:3QAx:9uAMH:ZQC8:1oAt:9NALT:QACw:zQArv8lAKn:FgCl:wcAoP:4:5z:6:%Y:93:lP:P:4::wf%M:7P:if%m:4j:mv%H:43:hv%B:4b:eP%I:3D:iv9p:4z:ZP%P:2L:k:9i:5j:ZP%d:2j:of9s:6X:cv%p:3j:q:9::67:hv%u:43:rv%U:67:nP%s:6X:qf%u:6X:uP%g:8L:nP:M:5f:1P%S:9v:jP:i:4f:5:%B:%r:fP:q:3j:6P9z:%X:b::h:27:2:9s:9T:bf:M:2::w:9w:7n:c:%w:3f:pf97:5r:fv%P:4P:g:%H:3f:i:9s:5D:Yf%T:1b:lv9M:5j:Qv%b:zn:nP8x:5z:Kv%b:yP:mf8d:5X:Gv%Q:xj:iv8Y:4P:Gf96:x3:cf8i:2f:KP9e:zD:Vf84:0v:QP9D:0n:Ov9S:zP:W:8r:2T:JP9t:x7:dv8Y:3::FP%I:xD:kf8M:5r:Cv%i:wf:qf8F:7H:Av%4:wD:v::%:sT:%:7J::n%zv:3:tP:9f7Y::X%3v:1:uT:9:7r::v%8v8A::r:B:8CABH:CQAc:xAAJ:8YADX:HwBD:yQAUf8qAGH:MABy:zcAhP89AJb:RACo:0sAuv9RAMz:WADd:18A7v9lAP7:bAANAHMAHAB5ACkAggA2AIsAQwCUAE0AngBWAKoAXwC3AGYAwwBtANAAcgDdAHcA6gB8APYAfwAAAYIACwGFABQBiQAdAY4AJAGSACkBlgAvAZ0AMgGkADQBqwA0AbMAMwG6ADABwQAtAcgAKAHPACIB1AAcAdkAFwHeABAB4QAJAeUAAwHpAPwA7wD0APMA7QD5AOcA:wDgAAUB2gANAdQAFQHOABwByQAkAcYAKwHFADIBxQA6AcYAQAHIAEYBzABMAdAAUAHWAFIB2wBTAeEAVAHnAFMB7QBQAfQATAH9AEgBBgFCAQ8BPQEZATYBIwEwAS0BKgE2ASIBPwEaAUcBEwFNAQsBUgECAVUB%gBXAfIAVwHrAFYB4wBVAd0AVAHXAE8B0ABJAcoARQHFAD4BvwA2AbkALQGzACQBrAAZAaUADwGfAAUBmAD6AJEA7gCKAOMAgwDYAH0AzQB3AMMAcQC4AGsArgBkAKYAXQCeAFYAlwBOAJEASACNAEEAhwA5AIMAMwCAAC4AfAApAHgAJQBzACMAbgAiAGkAIwBjACUAXQAnAFcAKgBSAC4ATQAyAEgAOABFAD4AQgBEAD4ASgA7AFAAOQBXADYAXAAyAGAALgBkACoAaAAmAGwAIABvAB0AcwAaAHgAGAB8ABcAgQAXAIgAFwCOABgAlQAZAJwAGwCjABwAqAAdAK4AHgCzACAAuAAhALwAIwC:ACUAwQAoAMEALADBAC8AwAAyAL0ANgC4ADsAswBBAKsARwChAE0AlwBWAIsAXwB%AGkAcAB0AGEAfwBRAIoAQQCWADEAoQAhAKoAEgCyAAMAuAD0:70A5::CAN3:xADT:8IAyf:AAML:uwC9:7UAuv%tALj:ogC3:5UAt:%JALf:fAC4:28Auv9hALz:UwC9:0cAwP87AMT:MADH:yUAzf8cANP:EwDa:wsA4:8EAO3::f:4::f:BADx:xEA6:8eAOb:KwDh:zkA3v9IANv:VgDX:2IA1:9wANj:fQDZ:4gA2:%RAN7:mQDi:58A5v%jAOv:pQDy:6UA%f%jAAEAoAAJAJwAEgCWABsAkAAlAIkALwCDADgAfAA:AHQARgBtAEsAZgBQAF8AUgBYAFQAUwBVAE8AVgBMAFUASwBUAEoAUQBLAE4ATgBKAFEAQwBUADwAWAAzAFwAKQBhAB8AZQAUAGoACgBuAP7:cQDy:3UA5:94ANz:egDT:3sAyf98AMH:ewC5:3oAsv93AK3:cwCr:24Aqf9oAKf:YACm:1gAp:9RAKj:SQCp:0EAqv85AKz:MwCt:ywAr:8mALP:IgC3:x0Au:8YAL::EwDD:w8Ayf8KAM::BQDV:wAA2::6:%D:8::k:%v:6P:j:%r:2f:q:87:6::E:%n:uf:m:67:4:%j:97:mP:b:4::1:%H:9T:gP:Q:3r:zf91:8r:cP:I:23:xv9q:8P:af:A:2j:vf9o:7v:av%4:2z:tf9u:7T:cv%y:3X:sf94:6::ev%t:33:rP9::6v:gf%q:4L:qv%C:6n:gv%p:4H:qf%B:6r:gP%q:4D:q:%B:63:gv%t:4P:rf%F:6z:if%s:43:q:%T:6n:mf%o:6H:pv%o:6L:sf%e:7r:mP:D:5L:zf%K:9f:gP:f:3b:5:9s:%::Y::2:1n::f9Q:wMAR:8IAD::DAA4:xAAMf8UACv:GQAm:x4AIv8kAB3:KQAZ:y4AFv8zABL:OAAP:z0AC:9BAAj:RQAG:0gABv9MAAb:TwAI:1AAC:9RABD:UQAW:08AHP9KACX:RgAu:0EAN:85AED:MABK:yYAVP8cAF7:EQBp:wcAc::7:33:8P%G:%T:j::Z:5j:z:%f:8X:pv%7:6v:sv%x:6n:tv%h:7v:mv%::5X:xP%R:8j:jf:M:4r:0P%J:9P:iP:U:4f:1v%I:9f:iv:W:4v:0:%L:9D:jf:O:4::yv%Q:8b:kf:C:5P:vf%U:7f:lf%y:5f:rf%Y:6f:mP%j:5j:n:%Y:5v:l:%Z:5j:mP%X:5b:lv%W:5b:l:%W:5n:l:%c:5j:nv%Y:6L:mv%n:5z:rf%e:7L:oP%5:6L:v:%l:8X:p::L:6n:0f%q:9b:q::b:6v:4P%s:%P:rP:l:6v:5:%q:%j:qP:n:6f:5v%m:%X:pf:j:6T:4v%l:%H:p::g:6n:3:%s:97:sP:f:7b:4P%8:%D:wf:h:8f:4::O:%T:1P:m:9r:6P:g:%r:5f:s:%n:7::t::P:8f:2::L:%f:y::3:8f8BAO::BADs:wcA5:8LAOH:DwDb:xMA0:8XAMz:HADF:yIAvv8mALf:KwCx:zAArP8zAKj:NgCm:zcApP84AKP:OACj:zYAo:8zAKP:MACk:ysApf8lAKb:HgCm:xYAp:8NAKf:AgCm::f:pv:t:6b:4f%k:9b:ov:N:6H:xP%g:7z:nv%1:57:r:%f:6j:n:%j:6H:oP%l:5z:qP%Y:6v:lf%w:5P:tv%P:7v:jf:B:4v:xv%K:8v:if:Q:4r:1P%L:9j:jf:b:47:2:%Q:9v:k::b:5X:2v%V:9f:lv:T:5j:0P%Z:8v:mv:H:5v:w:%b:77:nP%5:6D:tv%i:7L:o:%u:6b:q:%o:6n:qf%m:6z:pf%u:6P:r:%i:7H:o:%z:6b:tP%n:7T:qf%1:6z:tv%w:7b:s:%1:7X:s:%4:7D:u:%u:73:q:%::6f:v:%j:77:n:%9:5v:vP%X:7n:kv%2:47:sf%L:63:iP%n:4b:ov%G:5z:hv%W:4f:kP%J:4n:jv%D:5P:fv%Z:3j:oP9z:6n:cP%y:23:uv9p:8P:aP:N:2j:1v9o:97:Z::n:2j:8P9p::j:a:8AAGz:BgBt:wwAbv8TAHD:FwBx:xoAcf8dAHH:HwBy:yAAcv8gAHL:IQBz:yAAdf8gAHb:IwB6:yYAgP8oAIX:KwCM:y8Alf8zAJ::OACq:z0Atf9BAMH:QwDM:0YA2P9KAOX:TQDy:04A:f9QAAcAUQARAFIAGwBTACMAUgApAFEALwBRADQAUQA3AE8AOQBPADoATgA6AE8AOgBRADoAUwA5AFUAOQBYADkAWwA5AF0AOQBgADsAYgA9AGQAPwBkAEIAZABFAGQASABkAEwAYwBQAGEAUwBeAFYAWwBaAFgAXgBUAGIATwBlAEsAaABHAGwAQgBvAD4AcgA6AHcANwB8ADQAgQAxAIYAMACMAC4AkgAtAJkALQCgAC4ApwAuAK0ALgCzADAAugAxAMAAMgDEADQAyQA3AM0AOQDPAD0A0ABCANEARwDQAEwAzgBSAMwAWADJAF0AxABiAL8AZwC5AGwAsgBwAKwAdQClAHkAngB%AJYAggCOAIgAhwCMAH8AkAB2AJMAbgCYAGYAmwBdAJ0AVACfAEsAoQBEAKQAPAClADUApAAtAKMAJgChACAAnwAaAJsAEwCVAAwAjwAFAIcA:v9%APf:dQDw:2wA6f9jAOL:WQDb:04A1f9DAM7:OQDI:y8AxP8mAL::HQC6:xUAt:8PALT:CwCy:wgAsP8FAK7:BACu:wQArv8EAK::BgCx:wcAtP8JALj:CwC9:w0Aw:8OAMr:DwDS:xAA2v8QAOL:DwDr:w8A9P8PAPz:DwAEAA4ACwAMABIACgAYAAcAHQAEACIAAgAoAP7:LAD6:y8A9v8zAPP:OADx:zwA8P9BAPH:RQDy:0sA9f9RAPn:VwD9:10AAgBiAAcAZwAMAGoAEQBtABYAbwAaAHEAHgBxACIAcAAlAG4AKQBrAC0AZwAwAGAAMgBZADUAUQA3AEgAOgA:ADwANQA%ACsAQAAiAEIAGABFABAASAAJAEoAAgBNAPz:UAD4:1IA9P9TAPH:VQDw:1UA7:9VAO::VgDw:1UA8P9SAPD:UADx:00A8f9JAPL:RQDz:0EA9P88APb:OAD4:zMA%v8vAP3:LAADACkACAAmAA4AJAAWACMAHwAjACgAIwAyACMAPQAlAEkAJwBVACcAYAAoAGsAKAB2ACkAgQAqAIwAKgCVACoAnQArAKQAKwCrACwAsAAuALUAMAC3ADEAuQA0ALoANwC6ADkAuAA7ALUAPgCxAEIArQBGAKgASgCjAE4AngBTAJoAWACUAFwAjgBhAIoAZgCGAGoAggBuAH4AcwB9AHcAewB6AHoAfAB6AH8AewCAAHwAgAB%AH8AgAB9AIMAeQCGAHQAiABsAIkAZACLAFsAjQBRAI0ARgCNADoAjAAuAIoAIwCIABgAhgANAIMAAwB:APr:ewDy:3YA7P9yAOj:bgDl:2kA5P9kAOX:YADn:1sA6v9WAO7:UgD0:04A%v9MAAEASQAIAEcADQBFABIARAAXAEQAGgBDAB0AQwAeAEIAHgA:AB0APQAcADsAGgA4ABYAMwATAC8ADwAqAAoAIwAFAB0AAAAWAPr:DwDz:wkA7f8DAOj::v:k::n:4P:1:93:8v:b:%::2v:t:9n:7P:Y:%r:2P:p:9f:6P:W:%f:1f:m:9b:5v:U:%X:0f:j:8::4f:N:9::yv:b:8j:2P:F:9X:wf:Q:73:zP%6:8f:t::C:7P:vf%w:7j:rP%1:6n:sv%m:7D:o:%v:6D:sP%d:7H:mv%z:5f:t:%U:7r:kP%9:43:wv%K:8b:h::J:4X:zf%A:9D:fP:S:3j:1P9z:9b:b::X:2v:2f9m:9r:Yv:b:1::3v9c:9::Wf:h:1f:4:9W:%b:Vv:p:1b:7P9Y:%::Wv:y:1z:9f9e::f:Yf:5:2X::P9o::7:a::::2::AABx:wAAdf:::3n:::99::7:gf:8:4b:%v%L::n:kf:2:5b:8:%c::D:of:s:6b:6P%s:%T:sf:g:7b:2:%8:9b:w::T:8j:zv:O:8r:1f:H:9v:wv:h:73:6P%7:%::uf:z:7X:%P%x::7:r:8EAK3:BwCq:wsAqf8OAKj:EACn:xIAp:8TAKf:EgCo:xAAqP8OAKn:CgCq:wQAqv:::6r:%v%s::T:rf:t:63:5:%u:%D:rf:Z:67:1P%u:8::rv:K:67:x:%t:8T:rf:C:63:wv%t:8L:rf:E:6z:xv%s:8n:rf:M:63:z:%u:9P:r::Y:7D:2:%x:97:sv:h:7X:4:%3:%T:uf:m:7r:5:%8:%f:vv:m:8D:5v:C:%X:xP:l:8b:5f:I:%X:yv:k:8z:5P:P:%X:0v:m:9X:5::Z:%n:3f:r:%H:7v:m::H:6::2::D:%v:1::7:%v8DAP::CAAEAAsABgAQAAgAFAAKABgADAAbAAwAHQALAB8ACwAiAAoAJAAIACYABQAoAAEAKgD%:y0A%:8uAPf:LwDy:zEA7v8zAOz:NQDq:zYA6P84AOf:OQDn:zkA5:86AOj:OgDo:zgA6P84AOn:NgDp:zQA6f8yAOn:MADo:ywA5v8pAOT:JgDj:yIA4P8dAN7:GQDc:xMA2v8OANj:CQDX:wQA1v:::9b:%::W::f:1::z:9n:7::a:%z:3P:p:97:5::g:%b:4::l:%X:4::n:%H:6v:g:%z:3v:u:93:8f:b::P:2f:0:9j:9f:Y::b:2P:3:9j:9::Y::f:2f:2:9r:9v:b::T:2::z:9z:8v:d::D:3v:v:%D:7v:h:%z:4v:q:%T:6f:m:%n:6f:o:%z:6P:v:%f:8::m::f:5v:7:%b::f:l::::5f8BAOX:AgDl:wMA5f8CAOT:AgDk::::5f:7:%T:9v:j::L:4::r:%H:4::e:9z:3f:U:9r:zP:X:8X:1P%9:9D:tv:N:6::yf%p:8X:pP:B:6D:vf%d:7j:m:%0:5v:sP%c:63:nf%q:6D:p:%j:6T:pv%h:6v:oP%x:5::tv%e:7v:nf:A:53:xP%e:8j:n::M:6H:z:%i:9H:o::T:6X:1v%m:9f:p::X:6f:2P%o:9r:qv:b:6r:3P%q:97:q::g:6z:4f%u:%P:r::k:7D:5:%z:%v:tv:v:7n:8:%9::j:wv:8:8f:AADM:wQA0f8JANf:DQDc:xEA4P8VAOX:GADp:xoA7P8cAO7:HgDw:x4A8f8fAPP:IADz:yAA8:8fAPP:HwDy:x4A8v8eAPH:HQDx:x0A8f8cAPD:HADx:xwA8v8cAPL:HADz:x0A9f8dAPf:HgD5:x4A%:8eAP3:HgD%:x4A::8eAAEAHgADABwAAwAbAAQAGwAGABoABgAZAAgAGAAJABcACwAWAA4AFQARABQAEwASABYAEgAZABEAHAARAB8AEgAiABIAJAATACcAFgAqABcALAAYAC0AGgAvABwAMQAdADMAIAA0ACIANQAmADcAKQA4ACwAOQAvADoAMgA6ADcAOwA9ADwAQAA7AEMAOgBHADoASwA6AE4AOQBRADcAVAA1AFYAMwBYADEAWwAvAF0ALQBeACkAYAAlAGIAIwBlACAAZwAdAGkAGQBqABYAagARAGsADgBrAAsAaQAHAGgAAwBmAAEAYwD%:14A%v9ZAPj:VAD1:00A8v9GAO::PgDs:zcA6v8uAOj:JgDk:x4A4v8XAOD:EQDf:wsA3v8FAN3:AQDc::7:3P:8:9z:%v:c::r:3f:7:9:::P:h::3:5P:::%b:AQDp:wQA7P8HAPD:CgD0:wsA%f8LAP3:DAADAAwACQALAA4ACgATAAoAGQAHAB4ABQAjAAUAKAAEACwAAwAvAAMAMwACADYAAgA5AAMAPAAEAD4ABAA:AAUAQQAIAEMACQBEAAsARQAOAEYAEgBHABUARwAZAEgAHQBHACAARgAkAEUAKQBEACwAQgAuAEAALwA9ADIAOQAzADYANAAyADUALgA1ACkANQAlADcAIQA3AB0ANwAYADgAFgA4ABQANwAQADgADgA6AA4AOwAMADwACwA%AAwAQAAMAEEADABCAA0ARAAPAEYAEQBGABIARQATAEYAFABFABUAQwAVAEEAFQA:ABcAPAAYADkAGQA2ABsAMwAcADAAHgAtACEAKQAkACYAJwAkACsAIQAvAB4AMgAcADcAGwA7ABkAQAAZAEQAGQBIABgATAAYAE8AGABSABcAVQAVAFcAEwBZABEAWwAQAFwADgBeAAwAXgAKAF4ACABeAAYAXQAEAFwAAgBcAAAAWgD%:1gA:v9XAPz:VQD6:1MA%v9SAPr:UAD6:00A%:9LAP3:SQD::0gAAgBGAAQARQAFAEMACABCAAoAQgAMAEAADQA:AA0APgAMAD0ACwA8AAoAPAAGADsAAgA5AP3:OAD4:zgA8v83AOr:NgDi:zQA2:8yANL:LwDL:y0AxP8qAL7:JgC4:yIAtP8eALH:GgCv:xYAr:8TAK7:EACv:wwAsv8JALX:BgC4:wIAu::::7:::v:E::v:yP:5:8z:9v:P::T:0v:x:9T:8P:V:%7:1f:r:9T:6f:S:%f:0P:l:87:5P:M:%H:yf:e:8f:2v:F:9j:wv:U:8D:0f%::87:vf:K:7z:x:%8:8X:vP:D:7v:wP%6:73:u:%7:7z:uf%9:7f:vv%2:7::tP:A:7P:wv%y:8T:sf:F:7D:xv%v:8b:rv:G:6z:xv%r:8b:q::G:6r:xP%o:8T:qP:D:6j:wv%o:8H:qf:B:6r:v:%q:73:qv%9:63:vf%v:7v:sf%6:7P:uv%1:7r:uP%6:7v:u:%%:7r:wf%6:8T:uv:H:7v:y:%6:83:uv:Q:7r:0v%5:9T:uf:W:7n:2f%4:9r:tv:b:7X:3f%0:9::s::h:7H:4v%w:%P:r::k:63:5f%t:%f:rP:o:6r:6P%r:%r:rP:s:6z:7P%t:%3:r::v:7H:8P%y::D:tP:y:7b:8:%3::P:uP:0:7r:9f%7::b:vf:2:7::9::C::j:xP:4:8f:%P:J::j:zP:4:9D:%f:S::n:1f:4:9n:%f:d::n:4P:5:%P:%f:m::j:6v:3::D:9::1::f:%v:2::7:9f8CAPX:BgD0:woA8:8NAPL:DwDx:xAA8f8RAPD:EQDv:xIA7:8SAO::EQDv:w8A7:8NAO::CgDv:wgA7:8FAO::AQDv::::7::8:%::%f:t::f:7f:2:%3:9v:s::b:7P:2:%v:9v:r::j:6v:6:%r:%::p::3:6f:::%n:AgDq:wQA6:8GAO3:CADu:woA7:8MAPH:DgDz:w8A9v8PAPj:DwD7:w8A:f8PAAAADwACAA8ABQAPAAcADwAJABAACwARAA0AEQAPABEAEQATABMAFQAVABYAFgAYABcAGwAZAB0AGgAgABsAIQAcACQAHQAoAB8AKwAhAC4AIQAxACEANAAiADYAIgA3ACEAOQAhADsAIAA8AB4APAAcADwAGwA9ABsAPAAaADwAGQA8ABgAPAAYAD0AGAA9ABgAPAAYADwAGQA7ABoAOgAbADoAHAA5ABwAOQAdADgAHQA3AB4ANQAeADMAHwAyACAALwAfAC0AHwArAB8AKQAfACUAHgAhAB0AHgAcABsAHAAYABsAFQAaABEAGQANABgACgAYAAYAFwACABYA::8VAP3:FQD6:xUA9:8UAPf:FQD1:xUA8v8TAPL:EwDy:xQA8f8TAPH:EwDy:xMA8v8TAPH:EgDy:xMA8f8TAO::EwDv:xMA7v8UAO::FADv:xUA7v8VAO3:FADu:xUA7:8WAO::FQDw:xQA8v8VAPP:EwDz:xIA9f8SAPj:EQD5:xAA%v8OAPz:DQD::wwAAgALAAQACQAGAAcACQAFAAsABAAMAAIADAD::wsA:f8LAPv:CAD4:wYA9f8DAPP::::w::v:7f:4:%z:9P:p:%::5f:r:%P:6f:i:%T:3v:g:9v:3::Y:97:1v:c:9P:2::R:9v:z::c:83:3f:K:9::yP:i:8f:5P:G:%f:xf:q:8T:7f:E::D:xP:0:8X:9::F::n:xv:8:8b::::I:wIAyf8EAMv:BgDM:wcAzv8JAND:CgDS:wsA1P8MANb:DQDY:w4A2f8PANv:EQDd:xIA3v8UAOD:FgDi:xcA5P8YAOb:GQDo:xsA6v8dAOz:IADu:yIA8P8lAPL:KQD0:ysA9P8tAPX:MQD2:zQA9:81APf:NgD4:zcA%P83APj:OAD5:zgA%f83APn:NgD6:zYA%:8zAPv:MQD7:zAA:f8uAP7:KwD::ykAAAAoAAIAJgADACQABQAiAAYAIAAJAB8ACwAgAA4AHwAPAB0AEAAcABEAHQAUAB0AFwAcABkAGwAbABsAHAAbAB4AHAAhABsAIgAaACQAGgAmABsAKAAaACoAGgArABsALQAbAC8AGwAwABsAMgAcADMAHgA1ACAANgAiADcAJQA3ACcAOAArADkALwA7ADEAOwAyADwANQA9ADgAPwA6AD8AOwA:AD4AQQBBAEMAQgBEAEUARgBIAEcASgBHAEwARwBPAEgAUABIAFIASABVAEgAVwBHAFgARgBaAEUAWwBDAFsAQQBcAD4AXgA8AF8AOgBfADYAYAAzAGEAMABhAC0AYgAqAGAAJwBeACMAXAAgAFkAHABVABoAUgAXAE0AFABIABEARQAPAEEADgA8AAwANgAKADEACQAtAAgAKgAHACcABgAjAAUAIQAFAB8ABQAeAAQAHQAEAB4ABAAdAAQAHAAFAB0ABgAdAAgAHQAJAB0ACgAfAAwAIAAPACEAEQAiABQAJAAXACUAGQAlABwAJgAfACYAIwAmACUAJQAoACUAKwAlAC4AJAAxACQANAAjADYAIgA3ACIAOQAiADoAIgA7ACIAOwAiADwAIgA8ACIAPAAgADsAHwA6AB8AOQAfADgAHgA2AB4ANQAdADMAHQAwABwALQAdACsAHQApAB0AJgAcACMAGwAgABoAHgAZABsAGQAaABgAGAAXABYAFgAUABYAFAAVABMAEwASABMAEQASABEAEAAQAA8AEAAOABAADQAQAAwAEAAMABAACwAPAAoADwAKAA8ACQAPAAgADwAHAA8ABwAQAAYAEQAFABEAAwARAAMAEgABABMA::8UAP3:FAD7:xUA%f8VAPj:FQD2:xYA9P8WAPT:FwDy:xcA8f8XAPD:FgDw:xYA8P8WAPD:FgDw:xYA8P8UAPH:FADx:xMA8P8RAPD:EADw:xEA8P8PAO7:DgDt:w0A7f8NAOv:DADq:wsA6f8KAOn:CgDo:wkA5:8JAOf:CADo:wgA6P8HAOj:BgDo:wQA6f8EAOr:AwDr:wMA7P8CAO3:AQDt:wAA7v::::D::v:x::z:8v:6::L:%f:x::f:8f:2::H:9P:x::L:8f:x::D:7::w:%::7::u:%3:7P:r:%r:6::p:%v:6f:p:%j:6P:n:%f:5v:m:%X:5f:l:%T:5f:j:%T:4v:k:%P:5f:i:%T:4f:k:%L:5f:j:%X:4::l:%P:5f:k:%X:5P:m:%b:5::n:%j:6P:o:%r:6f:r:%r:6::q:%v:6::r:%z:6::s:%v:7P:q:%z:6f:s:%j:7f:n:%3:5f:s:%T:6::l:%z:5P:s:%P:6::i:%r:4v:p:%L:6P:j:%f:5P:m:%P:5P:j:%P:5P:i:%X:4f:l:%D:5f:e:%b:3v:m:9z:5::b:%n:2v:p:9n:6f:Y:%n:2P:q:9n:6f:Y:%n:2P:p:9j:6f:Y:%j:2P:o:9n:5::a:%f:2::m:9z:5v:d:%X:3v:l:9::5f:h:%P:4f:j:%H:5P:j:%T:5P:j:%T:4f:l:%H:5f:i:%b:4v:n:%L:6P:i:%n:4f:q:%D:6::g:%z:4P:t:97:7f:d:%3:3v:v:93:8P:c:%::2::v:9z:8P:c:%::2::v:9v:8P:c::D:3P:w:9z:7::d:%7:3f:v:97:7::f:%::3::u:%H:7v:i:%7:4v:u:%T:7v:l:%::5v:v:%f:8P:o::D:6f:x:%r:8v:r::P:7P:z:%3:8::v::X:8P:1::D:9f:y::b:9P:3::b:9::3::j:%f:4::r:%P:8::j::v:5::::%f8BAPn:AwD5:wQA%f8GAPn:BwD5:wgA%f8IAPj:CQD4:woA%P8JAPf:CAD3:wgA9:8HAPf:BgD2:wUA9v8FAPb:BAD2:wMA9v8CAPX:AQD1:wEA9v8AAPX::v:1::7:9P::::X::::1::::9P::::T::v:0::7:9P::::X::::1::::9P::::X::::1::::9v::::b:AAD3:wEA%P8CAPn:AgD6:wEA%:8AAPz:AQD9:wAA:v8AAP::::8AAP::AQD9:wIA:f8EAP3:BQD7:wUA%:8GAPz:BgD7:wcA%v8HAPv:CAD8:wkA%:8IAPz:CAD%:wgA:v8IAP7:BwD%:wcA::8HAAAABgACAAYAAgAFAAMABQAFAAUABgAFAAYABAAHAAQABwAEAAYABAAGAAQABwAEAAYABAAGAAQABQAFAAQABQADAAUAAgAFAAEABQAAAAUAAAAFAP::BAD9:wQA:f8DAPz:AwD8:wMA:P8DAPv:AgD7:wIA%v8CAPn:AQD4:wEA9:8AAPf:AAD2:wAA9f::::X::::1::::9P:%::P::v:z::3:8v:9::H::f:x::z:8f:8::D:%::v::r:7::6:%7:%v:t::r:7v:6:%7:%f:u::n:7v:5:%7:%f:u::n:7::5:%::%v:w::v:8P:8::D::P:v::z:8P:9::D::v:w::::8f8AAPH:AQDx:wEA8:8CAPT:AgD1:wMA9:8EAPn:BAD5:wQA%v8EAP3:BQD%:wUA:v8EAP::BAABAAQAAgADAAMAAgADAAEAAgD::wIA::8DAP::AgD%:wAA:P8AAPv::::6::7:%P:8::f::P:2::v:9f:6::T:%f:z::n:8v:5::L:%P:x::f:8f:3::H:9::w::b:8P:3::D:%P:w::j:7::6::D:%::w::v:8P:8::H::f:y::z:8v:8::L::v:0::7:9f:%::X::::2:wEA%P8CAPn:AgD6:wMA%v8DAPv:BAD8:wQA:v8EAP::BAAAAAYAAQAGAAIABwADAAcABAAIAAUACQAGAAoABgALAAcADAAHAAwACAAMAAgADQAIAA8ACAARAAgAEgAIABIACAAUAAkAFgAJABQABwAWAAcAGQAJABQACAAIAAMAAgABAAMAAwAFAAQAAwADAAMAAwAEAAMABAAEAAMABAADAAQAAwADAAMAAwADAAQAAwAEAAMABAACAAQAAgAEAAIABAACAAUAAgAEAAEABAABAAQAAQAFAAEABQABAAUAAQAFAAEABQABAAUAAQAFAAEABQAAAAUAAQAEAAEABQAAAAQA::8DAAAABAAAAAQAAAADAAAAAgABAAIAAQACAAAAAgABAAIAAQACAAEAAQACAAEAAgABAAEAAQABAAEAAgABAAIAAAAAAAAAAAAAAAAAAAD:::::::::::::::::::::::::::7::::%:::::v::::7::::%:::::v::::7::v:%::::::::::::::::::::AAD::wAA::8AAP::AAAAAAEAAQAAAAEAAAABAAAAAQAAAAEA::8BAP::AgD::wIA::8DAP7:AwD%:wMA:v8DAP7:AwD%:wMA:v8DAP7:AwD%:wMA::8DAP::AwD::wMA::8DAAAAAwAAAAMAAAADAAAAAwABAAIAAQACAAEAAgABAAIAAQACAAIAAgACAAIAAgACAAIAAgABAAIAAQACAAAAAgAAAAIAAAADAAAAAwD::wMA::8CAP::AwD::wMA:v8DAP7:AgD%:wIA:v8CAP7:AgD::wIA:v8CAP::AgD::wIA::8CAP::AgD::wIAAAACAAAAAwD::wIA::8CAAAAAgAAAAIAAAACAAAAAgD::wIA::8CAP::AgD::wIA::8BAP7:AQD%:wEA:v8BAP7:AAD%:wAA:v8AAP7:AAD9:wAA:f8AAP3:AAD%:wAA:f::::7::::%:wAA:f::::3::::%:wAA:v8AAP7::::::wAAAAAAAAAAAAAAAP::AQD::wAA::8AAP::AQAAAAAAAAAAAP::AAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQABAAIAAQABAAEAAAABAAAAAgAAAAIAAAACAP::AgD::wIA:v8BAP7:AgD%:wIA::8CAP::AgD::wIA::8BAAAAAgAAAAIAAAABAAAAAQAAAAEAAAABAAAAAQAAAAIAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEA::8BAAAAAQABAAEAAQAAAAAAAAD::wAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAP::AQD::wEA::8BAP::AQD::wIA:v8BAP7:AQD::wEA::8CAP::AQAAAAEAAAABAAAAAQABAAEAAgABAAAAAQAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAP::AAAAAAEA::8AAP::AAD::wAAAAAAAP:::::::wAAAAAAAAAA:::::::::::::wAA:v::::7::::%:::::v::::7::::%:wAA:v::::7::::%:wAA:v8AAP7:AAD%:wAA::8AAP::AAD::wAA::8AAP::AQD::wEA::8BAP::AQD::wEA::8BAP::AQAAAAEAAAACAP::AQD::wEA::8BAAAAAQD::wEA::8BAP::AQD::wEA::8BAP::AQD::wEA::8BAP::AQD%:wEA::8BAP::AQD::wEA::8BAP::AQD::wEAAAABAAAAAQAAAAEAAAABAAAAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAP::AQD::wEA::8CAP::AQD::wEA::8BAP::AQD::wEA::8BAP::AQD::wEA::8BAP::AAD::wEA::8AAP::AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAD::wAA::8AAP:::::::wAA::8AAP::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::AAD::wAA::8AAP::AAD::wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAP::AQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAQAAAAIAAQACAAEAAQAAAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAQAAAAIAAAACAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAP::AQD::wEAAAABAAAAAQD::wEA::8BAP::AQD::wAA::8AAP::AAD::wAA::8AAP::AAD::wAAAAAAAAAA::::::::AAD::wAA::8AAP::AAD::wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAD::wAAAAAAAAAAAAAAAAAAAAAAAP::AAD::wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAD::wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD::wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA::8AAAAAAAAAAAAA::8AAP::AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD::wAA::8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAD::wAAAAAAAP::AAD::wAA::8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP::AAAAAP::AAD::::::::::wAAAAAAAAAAAAD::wAAAAD::wAA::8AAP::AAD::wAA::8AAP::AAAAAAAAAAAAAAAA::::::::::8AAP::AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA::8AAAAAAAAAAAAA::8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA::8AAP::AAD::ww},{ name : "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault", data : "s4374:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8:9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89:Ly%%Osb%2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB:%fpFnpfIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK%ICzO5nCwR3xKxRoowlSviN%LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8:hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu:8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf%L7a:80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF:QP:U%Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z%H%B8H:nUeBkGceA6fwxNFhImmjMtLELWbx%YKuGk8Opf3n5r4D8P%pMW5FonS%BFQY4yA1HUqQH7tBygKESDR%8Vd:6NvvvgwIH554SqTi3P:7zf9Z8Gl4iWDm:A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG:iDEBAJVgMWSASpgA%yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D%2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG%UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ%h97BCEyCqbASrAUbwwzYCfaBQ%BVcAK8Bs6FC%AdcCXcAB%FO%Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegEdBa6EF2BbkK3oy%ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw%TBvmHGYQM46Zw2Kx8lh9rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA%Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf%On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFpB%kQ6RzpLuklmUzWIjuSo8gC8g5yM:kC%RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf%lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJCYVE2UxopFykTVAxVm%pFTaIWU7%jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p:1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48vvacIK%opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq:CVSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq%WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM:5oYmGSYtJoct9UxtTbNN%02:R3Mz0zllmN2S1zsrm7%QbzLvMXy:SXcZbtX3bHgmLhZ7HVosfig6WVJd%y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o:Z0%1j7A:ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c%c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r:Pu9SH5BPtU%zz21fPl%3b7wX7efrv9HqzQXMFb0ekP:L38d:s:DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw%XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z:RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS%SPJPqkuaT:ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy:fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7zmSue%63a1FrWWt78lTzNuWNrXNaV78eWh%3vmeD%oaCDRMbPTYe3kTYlLzpp3yT:LL8V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih%X8IqufqN6TeV33zaEb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7:bb3VFOLy8qf7UnZs%VimUVdXsJe4V7Ryt9K7uqNKp2Vr2vTqy%XeNc01arWLu9dn4fe9:Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv%tqNWytb6O1FR8Dx4THnn4f%:3wcZ:jPScYJ1p:0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ%2dNt293%o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h:HhPTM:9CxEXbvUG9g5c9Ll4%ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W:S3:2TxU:uA5UDHdavrXTesb3QPLh88M%QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW:h:sYH6AdFD6UeVjxSfNTws%7PbaOWo6fHXMf6Hwc:vj:OGn:2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ%nPFmYKf5X%tfa5zvMffnP8rX82YnbiBf:Fp99LXsq:PPRq2aueuYC5R69TXy:MF72Rf3P4LeNt37vwd5MLWe%x7ys:6H7o:ujz8cGn1E%f:gUDmPP8usTo0wAAAAlwSFlzAAAOwgAADsIBFShKgAAAABp0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjUuMTAw9HKhAAAB20lEQVQ4T33TvU8TYQDH8eflAIlJg7Ha9KhKr0JbioAlphrEhMhM4uKgMUagJcXJQUcTc4YBYpgciA64YIw2vgRbrVEPRtDFDtU49x8gqQoMP57nynPt5WqHX276fp57yRFzWq:kTANqj26H0O1vAyHEtUOUY7YrjOfd55zd98cqRIZYT7q2XRjCfEbHUZ%GNkpx3XcCJeMyqtFJ1yTWFFDg1tsBPJwc8YQKagn8sobRUzyN9nwEK9cuNUVs4Om9U55H%CnikIjJR8OeVohg%eaYB1nVBdAb6kC1OOwgP6whBIsRJ1YI:2Dg8a2LLiR7JCxfNMF8WreBkogDTWKFMIEszdSQsjGBTvFlbMB3mOPNiziOtYgbkYXZUaS7etRnJmCsA31XXoG:G:Tcugobr%xrBlpqvA4EgtMYHQfO3NgEX0u0RKiVhfatCv7kCwhlIPL0kfO:bUAuMbUB9r6:KUKtOWjf:4rtCWQXNDkGEghOObFC%tOfBBJzIbX4Ty0%GDefgcQGch5AQvFMESxfQ6h1p35yI7D48v%ARKLZNbDPd0X8z3WycwetgGSqDP:xq6DRs%BLr6Ft7XgQLoGTYbMiH6NxAT0Nytrrv7P4I%ngBTBzBTJSY3MPKvteBiSdU5EAWwAAAABJRU5ErkJggg"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt", data : "s4915:iVBORw0KGgoAAAANSUhEUgAAAIAAAAAICAMAAAAGAwdMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89%bN:rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz:SMBAPh%PDwrIsAHvgABeNMLCADATZvAMByH:w:qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf%bTAICd%Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA:g88wAAKCRFRHgg:P9eM4Ors7ONo62Dl8t6r8G:yJiYuP%5c%rcEAAAOF0ftH%LC%zGoA7BoBt:qIl7gRoXgugdfeLZrIPQLUAoOnaV:Nw%H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl:AV:1s%X48:Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H:LcL::wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s%wM%3zUAsGo%AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93:%8::UegJQCAZkmScQAAXkQkLlTKsz:HCAAARKCBKrBBG:TBGCzABhzBBdzBC:xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD:phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8%Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8%xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR%cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI%ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG%Qh8lsKnWJAcaT4U%IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr%h0uhHdlR5Ol9BX0svpR%iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK%YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI%pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q:pH5Z:YkGWcNMw09DpFGgsV:jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY:R27iz2qqaE5QzNKM1ezUvOUZj8H45hx%Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4:OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up%6Ynr5egJ5Mb6feeb3n%hx9L:1U:W36p:VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm%eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw%6TvZN9un2N:T0HDYfZDqsdWh1%c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc%Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26:uNu5p7ofcn8w0nymeWTNz0MPIQ%BR5dE:C5%VMGvfrH5PQ0%BZ7XnIy9jL5FXrdewt6V3qvdh7xc%9j5yn%M%4zw33jLeWV:MN8C3yLfLT8Nvnl%F30N:I:9k:3r:0QCngCUBZwOJgUGBWwL7%Hp8Ib%OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo%qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt:87fOH4p3iC%N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi:RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z%pn5mZ2y6xlhbL%xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a:zYnKOZarnivN7cyzytuQN5zvn::tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1%1dT1gvWd%1YfqGnRs%FYmKrhTbF5cVf9go3HjlG4dvyr%Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql%aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO:PLi8ZafJzs07P1SkVPRU%lQ27tLdtWHX%G7R7ht7vPY07NXbW7z3:T7JvttVAVVN1WbVZftJ%7P3P66Jqun4lvttXa1ObXHtxwPSA:0HIw6217nU1R3SPVRSj9Yr60cOxx%%:p3vdy0NNg1VjZzG4iNwRHnk6fcJ3:ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w%0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb%%6EHTh0kX:i%c7vDvOXPK4dPKy2%UTV7hXmq86X23qdOo8:pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb:1tWeOT3dvfN6b:fF9:XfFt1%cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v%3Njv3H9qwHeg89HcR:cGhYPP:pH1jw9DBY%Zj8uGDYbrnjg%OTniP3L96fynQ89kzyaeF:6i:suuFxYvfvjV69fO0ZjRoZfyl5O:bXyl:erA6xmv28bCxh6%yXgzMV70VvvtwXfcdx3vo98PT%R8IH8o:2j5sfVT0Kf7kxmTk:8EA5jz:GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5:wAAgOkAAHUwAADqYAAAOpgAABdvkl:FRgAAAwBQTFRFAAAAXl5eAAAAAwMDBAQEBQUFBgYGBwcHCAgICQkJCgoKCwsLDAwMDQ0NDg4ODw8PEBAQEREREhISExMTFBQUFRUVFhYWFxcXGBgYGRkZGhoaGxsbHBwcHR0dHh4eHx8fICAgISEhIiIiIyMjJCQkJSUlJiYmJycnKCgoKSkpKioqKysrLCwsLS0tLi4uLy8vMDAwMTExMjIyMzMzNDQ0NTU1NjY2Nzc3ODg4OTk5Ojo6Ozs7PDw8PT09Pj4%Pz8:QEBAQUFBQkJCQ0NDRERERUVFRkZGR0dHSEhISUlJSkpKS0tLTExMTU1NTk5OT09PUFBQUVFRUlJSU1NTVFRUVVVVVlZWV1dXWFhYWVlZWlpaW1tbXFxcXV1dXl5eX19fYGBgYWFhYmJiY2NjZGRkZWVlZmZmZ2dnaGhoaWlpampqa2trbGxsbW1tbm5ub29vcHBwcXFxcnJyc3NzdHR0dXV1dnZ2d3d3eHh4eXl5enp6e3t7fHx8fX19fn5%f39:gICAgYGBgoKCg4ODhISEhYWFhoaGh4eHiIiIiYmJioqKi4uLjIyMjY2Njo6Oj4%PkJCQkZGRkpKSk5OTlJSUlZWVlpaWl5eXmJiYmZmZmpqam5ubnJycnZ2dnp6en5%foKCgoaGhoqKio6OjpKSkpaWlpqamp6enqKioqampqqqqq6urrKysra2trq6ur6%vsLCwsbGxsrKys7OztLS0tbW1tra2t7e3uLi4ubm5urq6u7u7vLy8vb29vr6%v7%:wMDAwcHBwsLCw8PDxMTExcXFxsbGx8fHyMjIycnJysrKy8vLzMzMzc3Nzs7Oz8:P0NDQ0dHR0tLS09PT1NTU1dXV1tbW19fX2NjY2dnZ2tra29vb3Nzc3d3d3t7e39:f4ODg4eHh4uLi4%Pj5OTk5eXl5ubm5%fn6Ojo6enp6urq6%vr7Ozs7e3t7u7u7%:v8PDw8fHx8vLy8:Pz9PT09fX19vb29:f3%Pj4%fn5%vr6%:v7:Pz8:f39:v7%::::QkqfIwAAAAN0Uk5T::8A18oNQQAAAHZJREFUeNrsU0kSwCAISxj::2TpQRhbNdpbL:UCYQkOCwwAgBAAOMgEbNKw8m%NN:7ZX2qz1QMFPZSIh4tKme9PXJW:NLWXXRO70PeRHWt%w8fv:0DJ%XCaDl9MfF5dHnZCtcDGTFvWoD7TbUcpb%wCAAD::wMAyyASK2Aa6EwAAAAASUVORK5CYII"}];
flash.display.DisplayObject.GRAPHICS_INVALID = 2;
flash.display.DisplayObject.MATRIX_INVALID = 4;
flash.display.DisplayObject.MATRIX_CHAIN_INVALID = 8;
flash.display.DisplayObject.MATRIX_OVERRIDDEN = 16;
flash.display.DisplayObject.TRANSFORM_INVALID = 32;
flash.display.DisplayObject.BOUNDS_INVALID = 64;
flash.display.DisplayObject.RENDER_VALIDATE_IN_PROGRESS = 1024;
flash.display.DisplayObject.ALL_RENDER_FLAGS = 98;
flixel.FlxObject.SEPARATE_BIAS = 4;
flixel.FlxObject.LEFT = 1;
flixel.FlxObject.RIGHT = 16;
flixel.FlxObject.UP = 256;
flixel.FlxObject.DOWN = 4096;
flixel.FlxObject.NONE = 0;
flixel.FlxObject.CEILING = 256;
flixel.FlxObject.FLOOR = 4096;
flixel.FlxObject.WALL = 17;
flixel.FlxObject.ANY = 4369;
flixel.FlxObject._pZero = new flixel.util.FlxPoint();
flixel.FlxObject._firstSeparateFlxRect = new flixel.util.FlxRect();
flixel.FlxObject._secondSeparateFlxRect = new flixel.util.FlxRect();
DefaultAssetLibrary.className = new haxe.ds.StringMap();
DefaultAssetLibrary.path = new haxe.ds.StringMap();
DefaultAssetLibrary.type = new haxe.ds.StringMap();
flixel.text.FlxText.BORDER_NONE = 0;
flixel.text.FlxText.BORDER_SHADOW = 1;
flixel.text.FlxText.BORDER_OUTLINE = 2;
flixel.text.FlxText.BORDER_OUTLINE_FAST = 3;
Reg.background_color = -15068018;
base.State.Games = base.StateEnum.StateConst("Games","states.GamesState");
base.State.Home = base.StateEnum.StateConst("Home","states.IndexState");
base.State.Team = base.StateEnum.StateConst("Team","states.TeamState");
base.State.state_list = [base.State.Games,base.State.Home,base.State.Team];
flash.Lib.HTML_ACCELEROMETER_EVENT_TYPE = "devicemotion";
flash.Lib.HTML_ORIENTATION_EVENT_TYPE = "orientationchange";
flash.Lib.DEFAULT_HEIGHT = 500;
flash.Lib.DEFAULT_WIDTH = 500;
flash.Lib.HTML_DIV_EVENT_TYPES = ["resize","mouseover","mouseout","mousewheel","dblclick","click"];
flash.Lib.HTML_TOUCH_EVENT_TYPES = ["touchstart","touchmove","touchend"];
flash.Lib.HTML_TOUCH_ALT_EVENT_TYPES = ["mousedown","mousemove","mouseup"];
flash.Lib.HTML_WINDOW_EVENT_TYPES = ["keyup","keypress","keydown","resize","blur","focus"];
flash.Lib.NME_IDENTIFIER = "haxe:openfl";
flash.Lib.VENDOR_HTML_TAG = "data-";
flash.Lib.starttime = haxe.Timer.stamp();
flash.display._BitmapData.MinstdGenerator.a = 16807;
flash.display._BitmapData.MinstdGenerator.m = -2147483648 - 1;
flash.display.BitmapDataChannel.ALPHA = 8;
flash.display.BitmapDataChannel.BLUE = 4;
flash.display.BitmapDataChannel.GREEN = 2;
flash.display.BitmapDataChannel.RED = 1;
flash.display.Graphics.TILE_SCALE = 1;
flash.display.Graphics.TILE_ROTATION = 2;
flash.display.Graphics.TILE_RGB = 4;
flash.display.Graphics.TILE_ALPHA = 8;
flash.display.Graphics.TILE_TRANS_2x2 = 16;
flash.display.Graphics.TILE_BLEND_NORMAL = 0;
flash.display.Graphics.TILE_BLEND_ADD = 65536;
flash.display.Graphics.BMP_REPEAT = 16;
flash.display.Graphics.BMP_SMOOTH = 65536;
flash.display.Graphics.CORNER_ROUND = 0;
flash.display.Graphics.CORNER_MITER = 4096;
flash.display.Graphics.CORNER_BEVEL = 8192;
flash.display.Graphics.CURVE = 2;
flash.display.Graphics.END_NONE = 0;
flash.display.Graphics.END_ROUND = 256;
flash.display.Graphics.END_SQUARE = 512;
flash.display.Graphics.LINE = 1;
flash.display.Graphics.MOVE = 0;
flash.display.Graphics.__MAX_DIM = 5000;
flash.display.Graphics.PIXEL_HINTING = 16384;
flash.display.Graphics.RADIAL = 1;
flash.display.Graphics.SCALE_HORIZONTAL = 2;
flash.display.Graphics.SCALE_NONE = 0;
flash.display.Graphics.SCALE_NORMAL = 3;
flash.display.Graphics.SCALE_VERTICAL = 1;
flash.display.Graphics.SPREAD_REPEAT = 2;
flash.display.Graphics.SPREAD_REFLECT = 4;
flash.display.GraphicsPathCommand.LINE_TO = 2;
flash.display.GraphicsPathCommand.MOVE_TO = 1;
flash.display.GraphicsPathCommand.CURVE_TO = 3;
flash.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
flash.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
flash.display.GraphicsPathCommand.NO_OP = 0;
flash.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
flash.events.Event.ACTIVATE = "activate";
flash.events.Event.ADDED = "added";
flash.events.Event.ADDED_TO_STAGE = "addedToStage";
flash.events.Event.CANCEL = "cancel";
flash.events.Event.CHANGE = "change";
flash.events.Event.CLOSE = "close";
flash.events.Event.COMPLETE = "complete";
flash.events.Event.CONNECT = "connect";
flash.events.Event.CONTEXT3D_CREATE = "context3DCreate";
flash.events.Event.DEACTIVATE = "deactivate";
flash.events.Event.ENTER_FRAME = "enterFrame";
flash.events.Event.ID3 = "id3";
flash.events.Event.INIT = "init";
flash.events.Event.MOUSE_LEAVE = "mouseLeave";
flash.events.Event.OPEN = "open";
flash.events.Event.REMOVED = "removed";
flash.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
flash.events.Event.RENDER = "render";
flash.events.Event.RESIZE = "resize";
flash.events.Event.SCROLL = "scroll";
flash.events.Event.SELECT = "select";
flash.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
flash.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
flash.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
flash.events.Event.UNLOAD = "unload";
flash.events.Event.SOUND_COMPLETE = "soundComplete";
flash.events.MouseEvent.CLICK = "click";
flash.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
flash.events.MouseEvent.MOUSE_DOWN = "mouseDown";
flash.events.MouseEvent.MOUSE_MOVE = "mouseMove";
flash.events.MouseEvent.MOUSE_OUT = "mouseOut";
flash.events.MouseEvent.MOUSE_OVER = "mouseOver";
flash.events.MouseEvent.MOUSE_UP = "mouseUp";
flash.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
flash.events.MouseEvent.RIGHT_CLICK = "rightClick";
flash.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
flash.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
flash.events.MouseEvent.ROLL_OUT = "rollOut";
flash.events.MouseEvent.ROLL_OVER = "rollOver";
flash.display.Stage.NAME = "Stage";
flash.display.Stage.OrientationPortrait = 1;
flash.display.Stage.OrientationPortraitUpsideDown = 2;
flash.display.Stage.OrientationLandscapeRight = 3;
flash.display.Stage.OrientationLandscapeLeft = 4;
flash.display.Stage.__acceleration = { x : 0.0, y : 1.0, z : 0.0};
flash.display.Stage.DEFAULT_FRAMERATE = 0.0;
flash.display.Stage.UI_EVENTS_QUEUE_MAX = 1000;
flash.display.Stage.__mouseChanges = [flash.events.MouseEvent.MOUSE_OUT,flash.events.MouseEvent.MOUSE_OVER,flash.events.MouseEvent.ROLL_OUT,flash.events.MouseEvent.ROLL_OVER];
flash.display.Stage.__touchChanges = ["touchOut","touchOver","touchRollOut","touchRollOver"];
flash.display.StageQuality.BEST = "best";
flash.display.StageQuality.HIGH = "high";
flash.display.StageQuality.MEDIUM = "medium";
flash.display.StageQuality.LOW = "low";
flash.errors.Error.DEFAULT_TO_STRING = "Error";
flash.events.TextEvent.LINK = "link";
flash.events.TextEvent.TEXT_INPUT = "textInput";
flash.events.ErrorEvent.ERROR = "error";
flash.events.Listener.sIDs = 1;
flash.events.EventPhase.CAPTURING_PHASE = 0;
flash.events.EventPhase.AT_TARGET = 1;
flash.events.EventPhase.BUBBLING_PHASE = 2;
flash.events.FocusEvent.FOCUS_IN = "focusIn";
flash.events.FocusEvent.FOCUS_OUT = "focusOut";
flash.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
flash.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
flash.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
flash.events.IOErrorEvent.IO_ERROR = "ioError";
flash.events.KeyboardEvent.KEY_DOWN = "keyDown";
flash.events.KeyboardEvent.KEY_UP = "keyUp";
flash.events.ProgressEvent.PROGRESS = "progress";
flash.events.ProgressEvent.SOCKET_DATA = "socketData";
flash.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
flash.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
flash.events.TouchEvent.TOUCH_END = "touchEnd";
flash.events.TouchEvent.TOUCH_MOVE = "touchMove";
flash.events.TouchEvent.TOUCH_OUT = "touchOut";
flash.events.TouchEvent.TOUCH_OVER = "touchOver";
flash.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
flash.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
flash.events.TouchEvent.TOUCH_TAP = "touchTap";
flash.filters.DropShadowFilter.DEGREES_FULL_RADIUS = 360.0;
flash.geom.Transform.DEG_TO_RAD = Math.PI / 180.0;
flash.media.Sound.EXTENSION_MP3 = "mp3";
flash.media.Sound.EXTENSION_OGG = "ogg";
flash.media.Sound.EXTENSION_WAV = "wav";
flash.media.Sound.EXTENSION_AAC = "aac";
flash.media.Sound.MEDIA_TYPE_MP3 = "audio/mpeg";
flash.media.Sound.MEDIA_TYPE_OGG = "audio/ogg; codecs=\"vorbis\"";
flash.media.Sound.MEDIA_TYPE_WAV = "audio/wav; codecs=\"1\"";
flash.media.Sound.MEDIA_TYPE_AAC = "audio/mp4; codecs=\"mp4a.40.2\"";
flash.net.URLRequestMethod.DELETE = "DELETE";
flash.net.URLRequestMethod.GET = "GET";
flash.net.URLRequestMethod.HEAD = "HEAD";
flash.net.URLRequestMethod.OPTIONS = "OPTIONS";
flash.net.URLRequestMethod.POST = "POST";
flash.net.URLRequestMethod.PUT = "PUT";
flash.system.ApplicationDomain.currentDomain = new flash.system.ApplicationDomain(null);
flash.system.SecurityDomain.currentDomain = new flash.system.SecurityDomain();
flash.text.AntiAliasType.ADVANCED = "advanced";
flash.text.AntiAliasType.NORMAL = "normal";
flash.text.Font.DEFAULT_FONT_DATA = "q:55oy6:ascentd950.5y4:dataad84d277.5d564d277.5d564d320.5d293d1024d187.5d1024d442.5d362.5d84d362.5d84d277.5hy6:_widthd651.5y4:xMaxd564y4:xMind84y4:yMaxd746.5y4:yMind0y7:_heightd662.5y7:leadingd168y7:descentd241.5y8:charCodei55y15:leftsideBearingd84y12:advanceWidthd651.5y8:commandsai1i2i2i2i2i2i2i2hg:111oR0d950.5R1ad313.5d528.5d239.5d528.5d196.5d586.25d153.5d644d153.5d744.5d153.5d845d196.25d902.75d239d960.5d313.5d960.5d387d960.5d430d902.5d473d844.5d473d744.5d473d645d430d586.75d387d528.5d313.5d528.5d313.5d450.5d433.5d450.5d502d528.5d570.5d606.5d570.5d744.5d570.5d882d502d960.25d433.5d1038.5d313.5d1038.5d193d1038.5d124.75d960.25d56.5d882d56.5d744.5d56.5d606.5d124.75d528.5d193d450.5d313.5d450.5hR2d626.5R3d570.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i111R11d56.5R12d626.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:54oR0d950.5R1ad338d610.5d270d610.5d230.25d657d190.5d703.5d190.5d784.5d190.5d865d230.25d911.75d270d958.5d338d958.5d406d958.5d445.75d911.75d485.5d865d485.5d784.5d485.5d703.5d445.75d657d406d610.5d338d610.5d538.5d294d538.5d386d500.5d368d461.75d358.5d423d349d385d349d285d349d232.25d416.5d179.5d484d172d620.5d201.5d577d246d553.75d290.5d530.5d344d530.5d456.5d530.5d521.75d598.75d587d667d587d784.5d587d899.5d519d969d451d1038.5d338d1038.5d208.5d1038.5d140d939.25d71.5d840d71.5d651.5d71.5d474.5d155.5d369.25d239.5d264d381d264d419d264d457.75d271.5d496.5d279d538.5d294hR2d651.5R3d587R4d71.5R5d760R6d-14.5R7d688.5R8d168R9d241.5R10i54R11d71.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3hg:110oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i110R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:53oR0d950.5R1ad110.5d277.5d507d277.5d507d362.5d203d362.5d203d545.5d225d538d247d534.25d269d530.5d291d530.5d416d530.5d489d599d562d667.5d562d784.5d562d905d487d971.75d412d1038.5d275.5d1038.5d228.5d1038.5d179.75d1030.5d131d1022.5d79d1006.5d79d905d124d929.5d172d941.5d220d953.5d273.5d953.5d360d953.5d410.5d908d461d862.5d461d784.5d461d706.5d410.5d661d360d615.5d273.5d615.5d233d615.5d192.75d624.5d152.5d633.5d110.5d652.5d110.5d277.5hR2d651.5R3d562R4d79R5d746.5R6d-14.5R7d667.5R8d168R9d241.5R10i53R11d79R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i2hg:109oR0d950.5R1ad532.5d571.5d567d509.5d615d480d663d450.5d728d450.5d815.5d450.5d863d511.75d910.5d573d910.5d686d910.5d1024d818d1024d818d689d818d608.5d789.5d569.5d761d530.5d702.5d530.5d631d530.5d589.5d578d548d625.5d548d707.5d548d1024d455.5d1024d455.5d689d455.5d608d427d569.25d398.5d530.5d339d530.5d268.5d530.5d227d578.25d185.5d626d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d217d499.5d261d475d305d450.5d365.5d450.5d426.5d450.5d469.25d481.5d512d512.5d532.5d571.5hR2d997.5R3d910.5R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i109R11d93R12d997.5R13ai1i3i3i3i3i2i2i2i3i3i3i3i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:52oR0d950.5R1ad387d365.5d132d764d387d764d387d365.5d360.5d277.5d487.5d277.5d487.5d764d594d764d594d848d487.5d848d487.5d1024d387d1024d387d848d50d848d50d750.5d360.5d277.5hR2d651.5R3d594R4d50R5d746.5R6d0R7d696.5R8d168R9d241.5R10i52R11d50R12d651.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2hg:108oR0d950.5R1ad96.5d246d188.5d246d188.5d1024d96.5d1024d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i108R11d96.5R12d284.5R13ai1i2i2i2i2hg:51oR0d950.5R1ad415.5d621.5d488d637d528.75d686d569.5d735d569.5d807d569.5d917.5d493.5d978d417.5d1038.5d277.5d1038.5d230.5d1038.5d180.75d1029.25d131d1020d78d1001.5d78d904d120d928.5d170d941d220d953.5d274.5d953.5d369.5d953.5d419.25d916d469d878.5d469d807d469d741d422.75d703.75d376.5d666.5d294d666.5d207d666.5d207d583.5d298d583.5d372.5d583.5d412d553.75d451.5d524d451.5d468d451.5d410.5d410.75d379.75d370d349d294d349d252.5d349d205d358d157.5d367d100.5d386d100.5d296d158d280d208.25d272d258.5d264d303d264d418d264d485d316.25d552d368.5d552d457.5d552d519.5d516.5d562.25d481d605d415.5d621.5hR2d651.5R3d569.5R4d78R5d760R6d-14.5R7d682R8d168R9d241.5R10i51R11d78R12d651.5R13ai1i3i3i3i3i3i3i2i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:107oR0d950.5R1ad93d246d185.5d246d185.5d705.5d460d464d577.5d464d280.5d726d590d1024d470d1024d185.5d750.5d185.5d1024d93d1024d93d246hR2d593R3d590R4d93R5d778R6d0R7d685R8d168R9d241.5R10i107R11d93R12d593R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:50oR0d950.5R1ad196.5d939d549d939d549d1024d75d1024d75d939d132.5d879.5d231.75d779.25d331d679d356.5d650d405d595.5d424.25d557.75d443.5d520d443.5d483.5d443.5d424d401.75d386.5d360d349d293d349d245.5d349d192.75d365.5d140d382d80d415.5d80d313.5d141d289d194d276.5d247d264d291d264d407d264d476d322d545d380d545d477d545d523d527.75d564.25d510.5d605.5d465d661.5d452.5d676d385.5d745.25d318.5d814.5d196.5d939hR2d651.5R3d549R4d75R5d760R6d0R7d685R8d168R9d241.5R10i50R11d75R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:106oR0d950.5R1ad96.5d464d188.5d464d188.5d1034d188.5d1141d147.75d1189d107d1237d16.5d1237d-18.5d1237d-18.5d1159d6d1159d58.5d1159d77.5d1134.75d96.5d1110.5d96.5d1034d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d-18.5R5d778R6d-213R7d796.5R8d168R9d241.5R10i106R11d-18.5R12d284.5R13ai1i2i2i3i3i2i2i2i3i3i2i1i2i2i2i2hg:49oR0d950.5R1ad127d939d292d939d292d369.5d112.5d405.5d112.5d313.5d291d277.5d392d277.5d392d939d557d939d557d1024d127d1024d127d939hR2d651.5R3d557R4d112.5R5d746.5R6d0R7d634R8d168R9d241.5R10i49R11d112.5R12d651.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:105oR0d950.5R1ad96.5d464d188.5d464d188.5d1024d96.5d1024d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i105R11d96.5R12d284.5R13ai1i2i2i2i2i1i2i2i2i2hg:48oR0d950.5R1ad325.5d344d247.5d344d208.25d420.75d169d497.5d169d651.5d169d805d208.25d881.75d247.5d958.5d325.5d958.5d404d958.5d443.25d881.75d482.5d805d482.5d651.5d482.5d497.5d443.25d420.75d404d344d325.5d344d325.5d264d451d264d517.25d363.25d583.5d462.5d583.5d651.5d583.5d840d517.25d939.25d451d1038.5d325.5d1038.5d200d1038.5d133.75d939.25d67.5d840d67.5d651.5d67.5d462.5d133.75d363.25d200d264d325.5d264hR2d651.5R3d583.5R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i48R11d67.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:104oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d246d185.5d246d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d778R6d0R7d685R8d168R9d241.5R10i104R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:47oR0d950.5R1ad260d277.5d345d277.5d85d1119d0d1119d260d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i47R11d0R12d345R13ai1i2i2i2i2hg:103oR0d950.5R1ad465d737.5d465d637.5d423.75d582.5d382.5d527.5d308d527.5d234d527.5d192.75d582.5d151.5d637.5d151.5d737.5d151.5d837d192.75d892d234d947d308d947d382.5d947d423.75d892d465d837d465d737.5d557d954.5d557d1097.5d493.5d1167.25d430d1237d299d1237d250.5d1237d207.5d1229.75d164.5d1222.5d124d1207.5d124d1118d164.5d1140d204d1150.5d243.5d1161d284.5d1161d375d1161d420d1113.75d465d1066.5d465d971d465d925.5d436.5d975d392d999.5d347.5d1024d285.5d1024d182.5d1024d119.5d945.5d56.5d867d56.5d737.5d56.5d607.5d119.5d529d182.5d450.5d285.5d450.5d347.5d450.5d392d475d436.5d499.5d465d549d465d464d557d464d557d954.5hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i103R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i2i3i3i3i3i2i3i3i3i3i3i3i3i3i2i2i2hg:46oR0d950.5R1ad109.5d897d215d897d215d1024d109.5d1024d109.5d897hR2d325.5R3d215R4d109.5R5d127R6d0R7d17.5R8d168R9d241.5R10i46R11d109.5R12d325.5R13ai1i2i2i2i2hg:102oR0d950.5R1ad380d246d380d322.5d292d322.5d242.5d322.5d223.25d342.5d204d362.5d204d414.5d204d464d355.5d464d355.5d535.5d204d535.5d204d1024d111.5d1024d111.5d535.5d23.5d535.5d23.5d464d111.5d464d111.5d425d111.5d331.5d155d288.75d198.5d246d293d246d380d246hR2d360.5R3d380R4d23.5R5d778R6d0R7d754.5R8d168R9d241.5R10i102R11d23.5R12d360.5R13ai1i2i2i3i3i2i2i2i2i2i2i2i2i2i2i2i3i3i2hg:45oR0d950.5R1ad50d702.5d319.5d702.5d319.5d784.5d50d784.5d50d702.5hR2d369.5R3d319.5R4d50R5d321.5R6d239.5R7d271.5R8d168R9d241.5R10i45R11d50R12d369.5R13ai1i2i2i2i2hg:101oR0d950.5R1ad575.5d721d575.5d766d152.5d766d158.5d861d209.75d910.75d261d960.5d352.5d960.5d405.5d960.5d455.25d947.5d505d934.5d554d908.5d554d995.5d504.5d1016.5d452.5d1027.5d400.5d1038.5d347d1038.5d213d1038.5d134.75d960.5d56.5d882.5d56.5d749.5d56.5d612d130.75d531.25d205d450.5d331d450.5d444d450.5d509.75d523.25d575.5d596d575.5d721d483.5d694d482.5d618.5d441.25d573.5d400d528.5d332d528.5d255d528.5d208.75d572d162.5d615.5d155.5d694.5d483.5d694hR2d630R3d575.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i101R11d56.5R12d630R13ai1i2i2i3i3i3i3i2i3i3i3i3i3i3i3i3i1i3i3i3i3i2hg:44oR0d950.5R1ad120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d325.5R3d225.5R4d79R5d127R6d-119R7d48R8d168R9d241.5R10i44R11d79R12d325.5R13ai1i2i2i2i2i2i2hg:100oR0d950.5R1ad465d549d465d246d557d246d557d1024d465d1024d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5hR2d650R3d557R4d56.5R5d778R6d-14.5R7d721.5R8d168R9d241.5R10i100R11d56.5R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:43oR0d950.5R1ad471d382d471d660.5d749.5d660.5d749.5d745.5d471d745.5d471d1024d387d1024d387d745.5d108.5d745.5d108.5d660.5d387d660.5d387d382d471d382hR2d858R3d749.5R4d108.5R5d642R6d0R7d533.5R8d168R9d241.5R10i43R11d108.5R12d858R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:99oR0d950.5R1ad499.5d485.5d499.5d571.5d460.5d550d421.25d539.25d382d528.5d342d528.5d252.5d528.5d203d585.25d153.5d642d153.5d744.5d153.5d847d203d903.75d252.5d960.5d342d960.5d382d960.5d421.25d949.75d460.5d939d499.5d917.5d499.5d1002.5d461d1020.5d419.75d1029.5d378.5d1038.5d332d1038.5d205.5d1038.5d131d959d56.5d879.5d56.5d744.5d56.5d607.5d131.75d529d207d450.5d338d450.5d380.5d450.5d421d459.25d461.5d468d499.5d485.5hR2d563R3d499.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i99R11d56.5R12d563R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:42oR0d950.5R1ad481.5d400.5d302d497.5d481.5d595d452.5d644d284.5d542.5d284.5d731d227.5d731d227.5d542.5d59.5d644d30.5d595d210d497.5d30.5d400.5d59.5d351d227.5d452.5d227.5d264d284.5d264d284.5d452.5d452.5d351d481.5d400.5hR2d512R3d481.5R4d30.5R5d760R6d293R7d729.5R8d168R9d241.5R10i42R11d30.5R12d512R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:98oR0d950.5R1ad498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d185.5d1024d93d1024d93d246d185.5d246d185.5d549hR2d650R3d594R4d93R5d778R6d-14.5R7d685R8d168R9d241.5R10i98R11d93R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:41oR0d950.5R1ad82d247d162d247d237d365d274.25d478d311.5d591d311.5d702.5d311.5d814.5d274.25d928d237d1041.5d162d1159d82d1159d148.5d1044.5d181.25d931.25d214d818d214d702.5d214d587d181.25d474.5d148.5d362d82d247hR2d399.5R3d311.5R4d82R5d777R6d-135R7d695R8d168R9d241.5R10i41R11d82R12d399.5R13ai1i2i3i3i3i3i2i3i3i3i3hg:97oR0d950.5R1ad351d742.5d239.5d742.5d196.5d768d153.5d793.5d153.5d855d153.5d904d185.75d932.75d218d961.5d273.5d961.5d350d961.5d396.25d907.25d442.5d853d442.5d763d442.5d742.5d351d742.5d534.5d704.5d534.5d1024d442.5d1024d442.5d939d411d990d364d1014.25d317d1038.5d249d1038.5d163d1038.5d112.25d990.25d61.5d942d61.5d861d61.5d766.5d124.75d718.5d188d670.5d313.5d670.5d442.5d670.5d442.5d661.5d442.5d598d400.75d563.25d359d528.5d283.5d528.5d235.5d528.5d190d540d144.5d551.5d102.5d574.5d102.5d489.5d153d470d200.5d460.25d248d450.5d293d450.5d414.5d450.5d474.5d513.5d534.5d576.5d534.5d704.5hR2d627.5R3d534.5R4d61.5R5d573.5R6d-14.5R7d512R8d168R9d241.5R10i97R11d61.5R12d627.5R13ai1i3i3i3i3i3i3i2i2i1i2i2i2i3i3i3i3i3i3i2i2i3i3i3i3i2i3i3i3i3hg:40oR0d950.5R1ad317.5d247d250.5d362d218d474.5d185.5d587d185.5d702.5d185.5d818d218.25d931.25d251d1044.5d317.5d1159d237.5d1159d162.5d1041.5d125.25d928d88d814.5d88d702.5d88d591d125d478d162d365d237.5d247d317.5d247hR2d399.5R3d317.5R4d88R5d777R6d-135R7d689R8d168R9d241.5R10i40R11d88R12d399.5R13ai1i3i3i3i3i2i3i3i3i3i2hg:96oR0d950.5R1ad183.5d205d324.5d392d248d392d85d205d183.5d205hR2d512R3d324.5R4d85R5d819R6d632R7d734R8d168R9d241.5R10i96R11d85R12d512R13ai1i2i2i2i2hg:39oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5hR2d281.5R3d183.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i39R11d98.5R12d281.5R13ai1i2i2i2i2hg:95oR0d950.5R1ad522d1194d522d1265.5d-10d1265.5d-10d1194d522d1194hR2d512R3d522R4d-10R5d-170R6d-241.5R7d-160R8d168R9d241.5R10i95R11d-10R12d512R13ai1i2i2i2i2hg:38oR0d950.5R1ad249d622.5d203.5d663d182.25d703.25d161d743.5d161d787.5d161d860.5d214d909d267d957.5d347d957.5d394.5d957.5d436d941.75d477.5d926d514d894d249d622.5d319.5d566.5d573.5d826.5d603d782d619.5d731.25d636d680.5d639d623.5d732d623.5d726d689.5d700d754d674d818.5d627.5d881.5d767d1024d641d1024d569.5d950.5d517.5d995d460.5d1016.75d403.5d1038.5d338d1038.5d217.5d1038.5d141d969.75d64.5d901d64.5d793.5d64.5d729.5d98d673.25d131.5d617d198.5d567.5d174.5d536d162d504.75d149.5d473.5d149.5d443.5d149.5d362.5d205d313.25d260.5d264d352.5d264d394d264d435.25d273d476.5d282d519d300d519d391d475.5d367.5d436d355.25d396.5d343d362.5d343d310d343d277.25d370.75d244.5d398.5d244.5d442.5d244.5d468d259.25d493.75d274d519.5d319.5d566.5hR2d798.5R3d767R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i38R11d64.5R12d798.5R13ai1i3i3i3i3i3i3i2i1i2i3i3i2i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3hg:94oR0d950.5R1ad478d277.5d749.5d556d649d556d429d358.5d209d556d108.5d556d380d277.5d478d277.5hR2d858R3d749.5R4d108.5R5d746.5R6d468R7d638R8d168R9d241.5R10i94R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:37oR0d950.5R1ad744.5d695.5d701d695.5d676.25d732.5d651.5d769.5d651.5d835.5d651.5d900.5d676.25d937.75d701d975d744.5d975d787d975d811.75d937.75d836.5d900.5d836.5d835.5d836.5d770d811.75d732.75d787d695.5d744.5d695.5d744.5d632d823.5d632d870d687d916.5d742d916.5d835.5d916.5d929d869.75d983.75d823d1038.5d744.5d1038.5d664.5d1038.5d618d983.75d571.5d929d571.5d835.5d571.5d741.5d618.25d686.75d665d632d744.5d632d228.5d327.5d185.5d327.5d160.75d364.75d136d402d136d467d136d533d160.5d570d185d607d228.5d607d272d607d296.75d570d321.5d533d321.5d467d321.5d402.5d296.5d365d271.5d327.5d228.5d327.5d680d264d760d264d293d1038.5d213d1038.5d680d264d228.5d264d307.5d264d354.5d318.75d401.5d373.5d401.5d467d401.5d561.5d354.75d616d308d670.5d228.5d670.5d149d670.5d102.75d615.75d56.5d561d56.5d467d56.5d374d103d319d149.5d264d228.5d264hR2d973R3d916.5R4d56.5R5d760R6d-14.5R7d703.5R8d168R9d241.5R10i37R11d56.5R12d973R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i2i2i2i2i1i3i3i3i3i3i3i3i3hg:93oR0d950.5R1ad311.5d246d311.5d1159d99.5d1159d99.5d1087.5d219d1087.5d219d317.5d99.5d317.5d99.5d246d311.5d246hR2d399.5R3d311.5R4d99.5R5d778R6d-135R7d678.5R8d168R9d241.5R10i93R11d99.5R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:36oR0d950.5R1ad346d1174.5d296d1174.5d295.5d1024d243d1023d190.5d1011.75d138d1000.5d85d978d85d888d136d920d188.25d936.25d240.5d952.5d296d953d296d725d185.5d707d135.25d664d85d621d85d546d85d464.5d139.5d417.5d194d370.5d296d363.5d296d246d346d246d346d362d392.5d364d436d371.75d479.5d379.5d521d393d521d480.5d479.5d459.5d435.75d448d392d436.5d346d434.5d346d648d459.5d665.5d513d710.5d566.5d755.5d566.5d833.5d566.5d918d509.75d966.75d453d1015.5d346d1023d346d1174.5d296d639d296d434d238d440.5d207.5d467d177d493.5d177d537.5d177d580.5d205.25d604.5d233.5d628.5d296d639d346d735d346d951.5d409.5d943d441.75d915.5d474d888d474d843d474d799d443.25d773d412.5d747d346d735hR2d651.5R3d566.5R4d85R5d778R6d-150.5R7d693R8d168R9d241.5R10i36R11d85R12d651.5R13ai1i2i2i3i3i2i3i3i2i3i3i3i3i2i2i2i3i3i2i3i3i2i3i3i3i3i2i1i2i3i3i3i3i1i2i3i3i3i3hg:92oR0d950.5R1ad85d277.5d345d1119d260d1119d0d277.5d85d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i92R11d0R12d345R13ai1i2i2i2i2hg:35oR0d950.5R1ad523.5d573.5d378d573.5d336d740.5d482.5d740.5d523.5d573.5d448.5d289d396.5d496.5d542.5d496.5d595d289d675d289d623.5d496.5d779.5d496.5d779.5d573.5d604d573.5d563d740.5d722d740.5d722d817d543.5d817d491.5d1024d411.5d1024d463d817d316.5d817d265d1024d184.5d1024d236.5d817d79d817d79d740.5d255d740.5d297d573.5d136d573.5d136d496.5d316.5d496.5d367.5d289d448.5d289hR2d858R3d779.5R4d79R5d735R6d0R7d656R8d168R9d241.5R10i35R11d79R12d858R13ai1i2i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:91oR0d950.5R1ad88d246d300d246d300d317.5d180d317.5d180d1087.5d300d1087.5d300d1159d88d1159d88d246hR2d399.5R3d300R4d88R5d778R6d-135R7d690R8d168R9d241.5R10i91R11d88R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:34oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5d372.5d277.5d372.5d555d287.5d555d287.5d277.5d372.5d277.5hR2d471R3d372.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i34R11d98.5R12d471R13ai1i2i2i2i2i1i2i2i2i2hg:90oR0d950.5R1ad57.5d277.5d644d277.5d644d354.5d172d939d655.5d939d655.5d1024d46d1024d46d947d518d362.5d57.5d362.5d57.5d277.5hR2d701.5R3d655.5R4d46R5d746.5R6d0R7d700.5R8d168R9d241.5R10i90R11d46R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:33oR0d950.5R1ad154.5d897d256d897d256d1024d154.5d1024d154.5d897d154.5d277.5d256d277.5d256d605d246d783.5d165d783.5d154.5d605d154.5d277.5hR2d410.5R3d256R4d154.5R5d746.5R6d0R7d592R8d168R9d241.5R10i33R11d154.5R12d410.5R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:89oR0d950.5R1ad-2d277.5d106.5d277.5d313.5d584.5d519d277.5d627.5d277.5d363.5d668.5d363.5d1024d262d1024d262d668.5d-2d277.5hR2d625.5R3d627.5R4d-2R5d746.5R6d0R7d748.5R8d168R9d241.5R10i89R11d-2R12d625.5R13ai1i2i2i2i2i2i2i2i2i2hg:32oR0d950.5R1ahR2d325.5R3d0R4d0R5d0R6d0R7d0R8d168R9d241.5R10i32R11d0R12d325.5R13ahg:88oR0d950.5R1ad64.5d277.5d173d277.5d358.5d555d545d277.5d653.5d277.5d413.5d636d669.5d1024d561d1024d351d706.5d139.5d1024d30.5d1024d297d625.5d64.5d277.5hR2d701.5R3d669.5R4d30.5R5d746.5R6d0R7d716R8d168R9d241.5R10i88R11d30.5R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:87oR0d950.5R1ad34d277.5d136d277.5d293d908.5d449.5d277.5d563d277.5d720d908.5d876.5d277.5d979d277.5d791.5d1024d664.5d1024d507d376d348d1024d221d1024d34d277.5hR2d1012.5R3d979R4d34R5d746.5R6d0R7d712.5R8d168R9d241.5R10i87R11d34R12d1012.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:86oR0d950.5R1ad293d1024d8d277.5d113.5d277.5d350d906d587d277.5d692d277.5d407.5d1024d293d1024hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i86R11d8R12d700.5R13ai1i2i2i2i2i2i2i2hg:85oR0d950.5R1ad89d277.5d190.5d277.5d190.5d731d190.5d851d234d903.75d277.5d956.5d375d956.5d472d956.5d515.5d903.75d559d851d559d731d559d277.5d660.5d277.5d660.5d743.5d660.5d889.5d588.25d964d516d1038.5d375d1038.5d233.5d1038.5d161.25d964d89d889.5d89d743.5d89d277.5hR2d749.5R3d660.5R4d89R5d746.5R6d-14.5R7d657.5R8d168R9d241.5R10i85R11d89R12d749.5R13ai1i2i2i3i3i3i3i2i2i2i3i3i3i3i2hg:84oR0d950.5R1ad-3d277.5d628.5d277.5d628.5d362.5d363.5d362.5d363.5d1024d262d1024d262d362.5d-3d362.5d-3d277.5hR2d625.5R3d628.5R4d-3R5d746.5R6d0R7d749.5R8d168R9d241.5R10i84R11d-3R12d625.5R13ai1i2i2i2i2i2i2i2i2hg:83oR0d950.5R1ad548d302d548d400.5d490.5d373d439.5d359.5d388.5d346d341d346d258.5d346d213.75d378d169d410d169d469d169d518.5d198.75d543.75d228.5d569d311.5d584.5d372.5d597d485.5d618.5d539.25d672.75d593d727d593d818d593d926.5d520.25d982.5d447.5d1038.5d307d1038.5d254d1038.5d194.25d1026.5d134.5d1014.5d70.5d991d70.5d887d132d921.5d191d939d250d956.5d307d956.5d393.5d956.5d440.5d922.5d487.5d888.5d487.5d825.5d487.5d770.5d453.75d739.5d420d708.5d343d693d281.5d681d168.5d658.5d118d610.5d67.5d562.5d67.5d477d67.5d378d137.25d321d207d264d329.5d264d382d264d436.5d273.5d491d283d548d302hR2d650R3d593R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i83R11d67.5R12d650R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:82oR0d950.5R1ad454.5d674d487d685d517.75d721d548.5d757d579.5d820d682d1024d573.5d1024d478d832.5d441d757.5d406.25d733d371.5d708.5d311.5d708.5d201.5d708.5d201.5d1024d100.5d1024d100.5d277.5d328.5d277.5d456.5d277.5d519.5d331d582.5d384.5d582.5d492.5d582.5d563d549.75d609.5d517d656d454.5d674d201.5d360.5d201.5d625.5d328.5d625.5d401.5d625.5d438.75d591.75d476d558d476d492.5d476d427d438.75d393.75d401.5d360.5d328.5d360.5d201.5d360.5hR2d711.5R3d682R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i82R11d100.5R12d711.5R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i3i3i3i3i1i2i2i3i3i3i3i2hg:81oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d545d1010.5d678d1156d556d1156d445.5d1036.5d429d1037.5d420.25d1038d411.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.25d57.5d828d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d781.5d696.25d874d644d966.5d545d1010.5hR2d806R3d748.5R4d57.5R5d760R6d-132R7d702.5R8d168R9d241.5R10i81R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i2i2i2i3i3i3i3i3i3i3i3i3i3hg:80oR0d950.5R1ad201.5d360.5d201.5d641d328.5d641d399d641d437.5d604.5d476d568d476d500.5d476d433.5d437.5d397d399d360.5d328.5d360.5d201.5d360.5d100.5d277.5d328.5d277.5d454d277.5d518.25d334.25d582.5d391d582.5d500.5d582.5d611d518.25d667.5d454d724d328.5d724d201.5d724d201.5d1024d100.5d1024d100.5d277.5hR2d617.5R3d582.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i80R11d100.5R12d617.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2i2i2hg:79oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d828d654.5d933.25d560.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.5d57.5d828.5d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264hR2d806R3d748.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i79R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:78oR0d950.5R1ad100.5d277.5d236.5d277.5d567.5d902d567.5d277.5d665.5d277.5d665.5d1024d529.5d1024d198.5d399.5d198.5d1024d100.5d1024d100.5d277.5hR2d766R3d665.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i78R11d100.5R12d766R13ai1i2i2i2i2i2i2i2i2i2i2hg:77oR0d950.5R1ad100.5d277.5d251d277.5d441.5d785.5d633d277.5d783.5d277.5d783.5d1024d685d1024d685d368.5d492.5d880.5d391d880.5d198.5d368.5d198.5d1024d100.5d1024d100.5d277.5hR2d883.5R3d783.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i77R11d100.5R12d883.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:76oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d939d565d939d565d1024d100.5d1024d100.5d277.5hR2d570.5R3d565R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i76R11d100.5R12d570.5R13ai1i2i2i2i2i2i2hg:75oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d593d536.5d277.5d666.5d277.5d296d625.5d693d1024d560d1024d201.5d664.5d201.5d1024d100.5d1024d100.5d277.5hR2d671.5R3d693R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i75R11d100.5R12d671.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:74oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d972d201.5d1107d150.25d1168d99d1229d-14.5d1229d-53d1229d-53d1144d-21.5d1144d45.5d1144d73d1106.5d100.5d1069d100.5d972d100.5d277.5hR2d302R3d201.5R4d-53R5d746.5R6d-205R7d799.5R8d168R9d241.5R10i74R11d-53R12d302R13ai1i2i2i3i3i2i2i2i3i3i2hg:73oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d1024d100.5d1024d100.5d277.5hR2d302R3d201.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i73R11d100.5R12d302R13ai1i2i2i2i2hg:72oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d583.5d568.5d583.5d568.5d277.5d669.5d277.5d669.5d1024d568.5d1024d568.5d668.5d201.5d668.5d201.5d1024d100.5d1024d100.5d277.5hR2d770R3d669.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i72R11d100.5R12d770R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:71oR0d950.5R1ad609.5d917.5d609.5d717d444.5d717d444.5d634d709.5d634d709.5d954.5d651d996d580.5d1017.25d510d1038.5d430d1038.5d255d1038.5d156.25d936.25d57.5d834d57.5d651.5d57.5d468.5d156.25d366.25d255d264d430d264d503d264d568.75d282d634.5d300d690d335d690d442.5d634d395d571d371d508d347d438.5d347d301.5d347d232.75d423.5d164d500d164d651.5d164d802.5d232.75d879d301.5d955.5d438.5d955.5d492d955.5d534d946.25d576d937d609.5d917.5hR2d793.5R3d709.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i71R11d57.5R12d793.5R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:70oR0d950.5R1ad100.5d277.5d529.5d277.5d529.5d362.5d201.5d362.5d201.5d582.5d497.5d582.5d497.5d667.5d201.5d667.5d201.5d1024d100.5d1024d100.5d277.5hR2d589R3d529.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i70R11d100.5R12d589R13ai1i2i2i2i2i2i2i2i2i2i2hg:126oR0d950.5R1ad749.5d615.5d749.5d704.5d697d744d652.25d761d607.5d778d559d778d504d778d431d748.5d425.5d746.5d423d745.5d419.5d744d412d741.5d334.5d710.5d287.5d710.5d243.5d710.5d200.5d729.75d157.5d749d108.5d790.5d108.5d701.5d161d662d205.75d644.75d250.5d627.5d299d627.5d354d627.5d427.5d657.5d432.5d659.5d435d660.5d439d662d446d664.5d523.5d695.5d570.5d695.5d613.5d695.5d655.75d676.5d698d657.5d749.5d615.5hR2d858R3d749.5R4d108.5R5d408.5R6d233.5R7d300R8d168R9d241.5R10i126R11d108.5R12d858R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:69oR0d950.5R1ad100.5d277.5d572.5d277.5d572.5d362.5d201.5d362.5d201.5d583.5d557d583.5d557d668.5d201.5d668.5d201.5d939d581.5d939d581.5d1024d100.5d1024d100.5d277.5hR2d647R3d581.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i69R11d100.5R12d647R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:125oR0d950.5R1ad128d1119d163d1119d233d1119d254.25d1097.5d275.5d1076d275.5d1004.5d275.5d880.5d275.5d802.5d298d767d320.5d731.5d376d718d320.5d705.5d298d670d275.5d634.5d275.5d556d275.5d432d275.5d361d254.25d339.25d233d317.5d163d317.5d128d317.5d128d246d159.5d246d284d246d325.75d282.75d367.5d319.5d367.5d430d367.5d550d367.5d624.5d394.5d653.25d421.5d682d492.5d682d523.5d682d523.5d753.5d492.5d753.5d421.5d753.5d394.5d782.5d367.5d811.5d367.5d887d367.5d1006.5d367.5d1117d325.75d1154d284d1191d159.5d1191d128d1191d128d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i125R11d128R12d651.5R13ai1i2i3i3i2i3i3i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2hg:68oR0d950.5R1ad201.5d360.5d201.5d941d323.5d941d478d941d549.75d871d621.5d801d621.5d650d621.5d500d549.75d430.25d478d360.5d323.5d360.5d201.5d360.5d100.5d277.5d308d277.5d525d277.5d626.5d367.75d728d458d728d650d728d843d626d933.5d524d1024d308d1024d100.5d1024d100.5d277.5hR2d788.5R3d728R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i68R11d100.5R12d788.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2hg:124oR0d950.5R1ad215d241.5d215d1265.5d130d1265.5d130d241.5d215d241.5hR2d345R3d215R4d130R5d782.5R6d-241.5R7d652.5R8d168R9d241.5R10i124R11d130R12d345R13ai1i2i2i2i2hg:67oR0d950.5R1ad659.5d335d659.5d441.5d608.5d394d550.75d370.5d493d347d428d347d300d347d232d425.25d164d503.5d164d651.5d164d799d232d877.25d300d955.5d428d955.5d493d955.5d550.75d932d608.5d908.5d659.5d861d659.5d966.5d606.5d1002.5d547.25d1020.5d488d1038.5d422d1038.5d252.5d1038.5d155d934.75d57.5d831d57.5d651.5d57.5d471.5d155d367.75d252.5d264d422d264d489d264d548.25d281.75d607.5d299.5d659.5d335hR2d715R3d659.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i67R11d57.5R12d715R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:123oR0d950.5R1ad523.5d1119d523.5d1191d492.5d1191d368d1191d325.75d1154d283.5d1117d283.5d1006.5d283.5d887d283.5d811.5d256.5d782.5d229.5d753.5d158.5d753.5d128d753.5d128d682d158.5d682d230d682d256.75d653.25d283.5d624.5d283.5d550d283.5d430d283.5d319.5d325.75d282.75d368d246d492.5d246d523.5d246d523.5d317.5d489.5d317.5d419d317.5d397.5d339.5d376d361.5d376d432d376d556d376d634.5d353.25d670d330.5d705.5d275.5d718d331d731.5d353.5d767d376d802.5d376d880.5d376d1004.5d376d1075d397.5d1097d419d1119d489.5d1119d523.5d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i123R11d128R12d651.5R13ai1i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i3i3i2i3i3i2hg:66oR0d950.5R1ad201.5d667.5d201.5d941d363.5d941d445d941d484.25d907.25d523.5d873.5d523.5d804d523.5d734d484.25d700.75d445d667.5d363.5d667.5d201.5d667.5d201.5d360.5d201.5d585.5d351d585.5d425d585.5d461.25d557.75d497.5d530d497.5d473d497.5d416.5d461.25d388.5d425d360.5d351d360.5d201.5d360.5d100.5d277.5d358.5d277.5d474d277.5d536.5d325.5d599d373.5d599d462d599d530.5d567d571d535d611.5d473d621.5d547.5d637.5d588.75d688.25d630d739d630d815d630d915d562d969.5d494d1024d368.5d1024d100.5d1024d100.5d277.5hR2d702.5R3d630R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i66R11d100.5R12d702.5R13ai1i2i2i3i3i3i3i2i1i2i2i3i3i3i3i2i1i2i3i3i3i3i3i3i3i3i2i2hg:122oR0d950.5R1ad56.5d464d493.5d464d493.5d548d147.5d950.5d493.5d950.5d493.5d1024d44d1024d44d940d390d537.5d56.5d537.5d56.5d464hR2d537.5R3d493.5R4d44R5d560R6d0R7d516R8d168R9d241.5R10i122R11d44R12d537.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:65oR0d950.5R1ad350d377d213d748.5d487.5d748.5d350d377d293d277.5d407.5d277.5d692d1024d587d1024d519d832.5d182.5d832.5d114.5d1024d8d1024d293d277.5hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i65R11d8R12d700.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2hg:121oR0d950.5R1ad329.5d1076d290.5d1176d253.5d1206.5d216.5d1237d154.5d1237d81d1237d81d1160d135d1160d173d1160d194d1142d215d1124d240.5d1057d257d1015d30.5d464d128d464d303d902d478d464d575.5d464d329.5d1076hR2d606R3d575.5R4d30.5R5d560R6d-213R7d529.5R8d168R9d241.5R10i121R11d30.5R12d606R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i2i2hg:64oR0d950.5R1ad381d755.5d381d827d416.5d867.75d452d908.5d514d908.5d575.5d908.5d610.75d867.5d646d826.5d646d755.5d646d685.5d610d644.25d574d603d513d603d452.5d603d416.75d644d381d685d381d755.5d653.5d905d623.5d943.5d584.75d961.75d546d980d494.5d980d408.5d980d354.75d917.75d301d855.5d301d755.5d301d655.5d355d593d409d530.5d494.5d530.5d546d530.5d585d549.25d624d568d653.5d606d653.5d540.5d725d540.5d725d908.5d798d897.5d839.25d841.75d880.5d786d880.5d697.5d880.5d644d864.75d597d849d550d817d510d765d444.5d690.25d409.75d615.5d375d527.5d375d466d375d409.5d391.25d353d407.5d305d439.5d226.5d490.5d182.25d573.25d138d656d138d752.5d138d832d166.75d901.5d195.5d971d250d1024d302.5d1076d371.5d1103.25d440.5d1130.5d519d1130.5d583.5d1130.5d645.75d1108.75d708d1087d760d1046.5d805d1102d742.5d1150.5d668.75d1176.25d595d1202d519d1202d426.5d1202d344.5d1169.25d262.5d1136.5d198.5d1074d134.5d1011.5d101d929.25d67.5d847d67.5d752.5d67.5d661.5d101.5d579d135.5d496.5d198.5d434d263d370.5d347.5d336.75d432d303d526.5d303d632.5d303d723.25d346.5d814d390d875.5d470d913d519d932.75d576.5d952.5d634d952.5d695.5d952.5d827d873d903d793.5d979d653.5d982d653.5d905hR2d1024R3d952.5R4d67.5R5d721R6d-178R7d653.5R8d168R9d241.5R10i64R11d67.5R12d1024R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2hg:120oR0d950.5R1ad562d464d359.5d736.5d572.5d1024d464d1024d301d804d138d1024d29.5d1024d247d731d48d464d156.5d464d305d663.5d453.5d464d562d464hR2d606R3d572.5R4d29.5R5d560R6d0R7d530.5R8d168R9d241.5R10i120R11d29.5R12d606R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:63oR0d950.5R1ad195.5d897d297d897d297d1024d195.5d1024d195.5d897d294d823.5d198.5d823.5d198.5d746.5d198.5d696d212.5d663.5d226.5d631d271.5d588d316.5d543.5d345d517d357.75d493.5d370.5d470d370.5d445.5d370.5d401d337.75d373.5d305d346d251d346d211.5d346d166.75d363.5d122d381d73.5d414.5d73.5d320.5d120.5d292d168.75d278d217d264d268.5d264d360.5d264d416.25d312.5d472d361d472d440.5d472d478.5d454d512.75d436d547d391d590d347d633d323.5d656.5d313.75d669.75d304d683d300d695.5d297d706d295.5d721d294d736d294d762d294d823.5hR2d543.5R3d472R4d73.5R5d760R6d0R7d686.5R8d168R9d241.5R10i63R11d73.5R12d543.5R13ai1i2i2i2i2i1i2i2i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i2hg:119oR0d950.5R1ad43d464d135d464d250d901d364.5d464d473d464d588d901d702.5d464d794.5d464d648d1024d539.5d1024d419d565d298d1024d189.5d1024d43d464hR2d837.5R3d794.5R4d43R5d560R6d0R7d517R8d168R9d241.5R10i119R11d43R12d837.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:62oR0d950.5R1ad108.5d520d108.5d429d749.5d661.5d749.5d744.5d108.5d977d108.5d886d623.5d703.5d108.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i62R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:118oR0d950.5R1ad30.5d464d128d464d303d934d478d464d575.5d464d365.5d1024d240.5d1024d30.5d464hR2d606R3d575.5R4d30.5R5d560R6d0R7d529.5R8d168R9d241.5R10i118R11d30.5R12d606R13ai1i2i2i2i2i2i2i2hg:61oR0d950.5R1ad108.5d559d749.5d559d749.5d643d108.5d643d108.5d559d108.5d763d749.5d763d749.5d848d108.5d848d108.5d763hR2d858R3d749.5R4d108.5R5d465R6d176R7d356.5R8d168R9d241.5R10i61R11d108.5R12d858R13ai1i2i2i2i2i1i2i2i2i2hg:117oR0d950.5R1ad87d803d87d464d179d464d179d799.5d179d879d210d918.75d241d958.5d303d958.5d377.5d958.5d420.75d911d464d863.5d464d781.5d464d464d556d464d556d1024d464d1024d464d938d430.5d989d386.25d1013.75d342d1038.5d283.5d1038.5d187d1038.5d137d978.5d87d918.5d87d803hR2d649R3d556R4d87R5d560R6d-14.5R7d473R8d168R9d241.5R10i117R11d87R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:60oR0d950.5R1ad749.5d520d233.5d703.5d749.5d886d749.5d977d108.5d744.5d108.5d661.5d749.5d429d749.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i60R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:116oR0d950.5R1ad187.5d305d187.5d464d377d464d377d535.5d187.5d535.5d187.5d839.5d187.5d908d206.25d927.5d225d947d282.5d947d377d947d377d1024d282.5d1024d176d1024d135.5d984.25d95d944.5d95d839.5d95d535.5d27.5d535.5d27.5d464d95d464d95d305d187.5d305hR2d401.5R3d377R4d27.5R5d719R6d0R7d691.5R8d168R9d241.5R10i116R11d27.5R12d401.5R13ai1i2i2i2i2i2i3i3i2i2i2i3i3i2i2i2i2i2i2hg:59oR0d950.5R1ad120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5d120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d345R3d225.5R4d79R5d529.5R6d-119R7d450.5R8d168R9d241.5R10i59R11d79R12d345R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:115oR0d950.5R1ad453.5d480.5d453.5d567.5d414.5d547.5d372.5d537.5d330.5d527.5d285.5d527.5d217d527.5d182.75d548.5d148.5d569.5d148.5d611.5d148.5d643.5d173d661.75d197.5d680d271.5d696.5d303d703.5d401d724.5d442.25d762.75d483.5d801d483.5d869.5d483.5d947.5d421.75d993d360d1038.5d252d1038.5d207d1038.5d158.25d1029.75d109.5d1021d55.5d1003.5d55.5d908.5d106.5d935d156d948.25d205.5d961.5d254d961.5d319d961.5d354d939.25d389d917d389d876.5d389d839d363.75d819d338.5d799d253d780.5d221d773d135.5d755d97.5d717.75d59.5d680.5d59.5d615.5d59.5d536.5d115.5d493.5d171.5d450.5d274.5d450.5d325.5d450.5d370.5d458d415.5d465.5d453.5d480.5hR2d533.5R3d483.5R4d55.5R5d573.5R6d-14.5R7d518R8d168R9d241.5R10i115R11d55.5R12d533.5R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:58oR0d950.5R1ad120d897d225.5d897d225.5d1024d120d1024d120d897d120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5hR2d345R3d225.5R4d120R5d529.5R6d0R7d409.5R8d168R9d241.5R10i58R11d120R12d345R13ai1i2i2i2i2i1i2i2i2i2hg:114oR0d950.5R1ad421d550d405.5d541d387.25d536.75d369d532.5d347d532.5d269d532.5d227.25d583.25d185.5d634d185.5d729d185.5d1024d93d1024d93d464d185.5d464d185.5d551d214.5d500d261d475.25d307.5d450.5d374d450.5d383.5d450.5d395d451.75d406.5d453d420.5d455.5d421d550hR2d421R3d421R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i114R11d93R12d421R13ai1i3i3i3i3i2i2i2i2i2i3i3i3i3i2hg:57oR0d950.5R1ad112.5d1008.5d112.5d916.5d150.5d934.5d189.5d944d228.5d953.5d266d953.5d366d953.5d418.75d886.25d471.5d819d479d682d450d725d405.5d748d361d771d307d771d195d771d129.75d703.25d64.5d635.5d64.5d518d64.5d403d132.5d333.5d200.5d264d313.5d264d443d264d511.25d363.25d579.5d462.5d579.5d651.5d579.5d828d495.75d933.25d412d1038.5d270.5d1038.5d232.5d1038.5d193.5d1031d154.5d1023.5d112.5d1008.5d313.5d692d381.5d692d421.25d645.5d461d599d461d518d461d437.5d421.25d390.75d381.5d344d313.5d344d245.5d344d205.75d390.75d166d437.5d166d518d166d599d205.75d645.5d245.5d692d313.5d692hR2d651.5R3d579.5R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i57R11d64.5R12d651.5R13ai1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:113oR0d950.5R1ad151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d465d464d557d464d557d1237d465d1237d465d940hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i113R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:56oR0d950.5R1ad325.5d669.5d253.5d669.5d212.25d708d171d746.5d171d814d171d881.5d212.25d920d253.5d958.5d325.5d958.5d397.5d958.5d439d919.75d480.5d881d480.5d814d480.5d746.5d439.25d708d398d669.5d325.5d669.5d224.5d626.5d159.5d610.5d123.25d566d87d521.5d87d457.5d87d368d150.75d316d214.5d264d325.5d264d437d264d500.5d316d564d368d564d457.5d564d521.5d527.75d566d491.5d610.5d427d626.5d500d643.5d540.75d693d581.5d742.5d581.5d814d581.5d922.5d515.25d980.5d449d1038.5d325.5d1038.5d202d1038.5d135.75d980.5d69.5d922.5d69.5d814d69.5d742.5d110.5d693d151.5d643.5d224.5d626.5d187.5d467d187.5d525d223.75d557.5d260d590d325.5d590d390.5d590d427.25d557.5d464d525d464d467d464d409d427.25d376.5d390.5d344d325.5d344d260d344d223.75d376.5d187.5d409d187.5d467hR2d651.5R3d581.5R4d69.5R5d760R6d-14.5R7d690.5R8d168R9d241.5R10i56R11d69.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:112oR0d950.5R1ad185.5d940d185.5d1237d93d1237d93d464d185.5d464d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5hR2d650R3d594R4d93R5d573.5R6d-213R7d480.5R8d168R9d241.5R10i112R11d93R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hgh";
flash.text.Font.DEFAULT_FONT_SCALE = 9.0;
flash.text.Font.DEFAULT_FONT_NAME = "Bitstream_Vera_Sans";
flash.text.Font.DEFAULT_CLASS_NAME = "flash.text.Font";
flash.text.Font.__registeredFonts = new Array();
flash.text.TextField.mDefaultFont = "Bitstream_Vera_Sans";
flash.text.FontInstance.mSolidFonts = new haxe.ds.StringMap();
flash.text.TextFieldAutoSize.CENTER = "CENTER";
flash.text.TextFieldAutoSize.LEFT = "LEFT";
flash.text.TextFieldAutoSize.NONE = "NONE";
flash.text.TextFieldAutoSize.RIGHT = "RIGHT";
flash.text.TextFieldType.DYNAMIC = "DYNAMIC";
flash.text.TextFieldType.INPUT = "INPUT";
flash.ui.Keyboard.NUMBER_0 = 48;
flash.ui.Keyboard.NUMBER_1 = 49;
flash.ui.Keyboard.NUMBER_2 = 50;
flash.ui.Keyboard.NUMBER_3 = 51;
flash.ui.Keyboard.NUMBER_4 = 52;
flash.ui.Keyboard.NUMBER_5 = 53;
flash.ui.Keyboard.NUMBER_6 = 54;
flash.ui.Keyboard.NUMBER_7 = 55;
flash.ui.Keyboard.NUMBER_8 = 56;
flash.ui.Keyboard.NUMBER_9 = 57;
flash.ui.Keyboard.A = 65;
flash.ui.Keyboard.B = 66;
flash.ui.Keyboard.C = 67;
flash.ui.Keyboard.D = 68;
flash.ui.Keyboard.E = 69;
flash.ui.Keyboard.F = 70;
flash.ui.Keyboard.G = 71;
flash.ui.Keyboard.H = 72;
flash.ui.Keyboard.I = 73;
flash.ui.Keyboard.J = 74;
flash.ui.Keyboard.K = 75;
flash.ui.Keyboard.L = 76;
flash.ui.Keyboard.M = 77;
flash.ui.Keyboard.N = 78;
flash.ui.Keyboard.O = 79;
flash.ui.Keyboard.P = 80;
flash.ui.Keyboard.Q = 81;
flash.ui.Keyboard.R = 82;
flash.ui.Keyboard.S = 83;
flash.ui.Keyboard.T = 84;
flash.ui.Keyboard.U = 85;
flash.ui.Keyboard.V = 86;
flash.ui.Keyboard.W = 87;
flash.ui.Keyboard.X = 88;
flash.ui.Keyboard.Y = 89;
flash.ui.Keyboard.Z = 90;
flash.ui.Keyboard.NUMPAD_0 = 96;
flash.ui.Keyboard.NUMPAD_1 = 97;
flash.ui.Keyboard.NUMPAD_2 = 98;
flash.ui.Keyboard.NUMPAD_3 = 99;
flash.ui.Keyboard.NUMPAD_4 = 100;
flash.ui.Keyboard.NUMPAD_5 = 101;
flash.ui.Keyboard.NUMPAD_6 = 102;
flash.ui.Keyboard.NUMPAD_7 = 103;
flash.ui.Keyboard.NUMPAD_8 = 104;
flash.ui.Keyboard.NUMPAD_9 = 105;
flash.ui.Keyboard.NUMPAD_MULTIPLY = 106;
flash.ui.Keyboard.NUMPAD_ADD = 107;
flash.ui.Keyboard.NUMPAD_ENTER = 108;
flash.ui.Keyboard.NUMPAD_SUBTRACT = 109;
flash.ui.Keyboard.NUMPAD_DECIMAL = 110;
flash.ui.Keyboard.NUMPAD_DIVIDE = 111;
flash.ui.Keyboard.F1 = 112;
flash.ui.Keyboard.F2 = 113;
flash.ui.Keyboard.F3 = 114;
flash.ui.Keyboard.F4 = 115;
flash.ui.Keyboard.F5 = 116;
flash.ui.Keyboard.F6 = 117;
flash.ui.Keyboard.F7 = 118;
flash.ui.Keyboard.F8 = 119;
flash.ui.Keyboard.F9 = 120;
flash.ui.Keyboard.F10 = 121;
flash.ui.Keyboard.F11 = 122;
flash.ui.Keyboard.F12 = 123;
flash.ui.Keyboard.F13 = 124;
flash.ui.Keyboard.F14 = 125;
flash.ui.Keyboard.F15 = 126;
flash.ui.Keyboard.BACKSPACE = 8;
flash.ui.Keyboard.TAB = 9;
flash.ui.Keyboard.ENTER = 13;
flash.ui.Keyboard.SHIFT = 16;
flash.ui.Keyboard.CONTROL = 17;
flash.ui.Keyboard.CAPS_LOCK = 18;
flash.ui.Keyboard.ESCAPE = 27;
flash.ui.Keyboard.SPACE = 32;
flash.ui.Keyboard.PAGE_UP = 33;
flash.ui.Keyboard.PAGE_DOWN = 34;
flash.ui.Keyboard.END = 35;
flash.ui.Keyboard.HOME = 36;
flash.ui.Keyboard.LEFT = 37;
flash.ui.Keyboard.RIGHT = 39;
flash.ui.Keyboard.UP = 38;
flash.ui.Keyboard.DOWN = 40;
flash.ui.Keyboard.INSERT = 45;
flash.ui.Keyboard.DELETE = 46;
flash.ui.Keyboard.NUMLOCK = 144;
flash.ui.Keyboard.BREAK = 19;
flash.ui.Keyboard.SEMICOLON = 186;
flash.ui.Keyboard.EQUAL = 187;
flash.ui.Keyboard.COMMA = 188;
flash.ui.Keyboard.MINUS = 189;
flash.ui.Keyboard.PERIOD = 190;
flash.ui.Keyboard.SLASH = 191;
flash.ui.Keyboard.BACKQUOTE = 192;
flash.ui.Keyboard.LEFTBRACKET = 219;
flash.ui.Keyboard.BACKSLASH = 220;
flash.ui.Keyboard.RIGHTBRACKET = 221;
flash.ui.Keyboard.DOM_VK_CANCEL = 3;
flash.ui.Keyboard.DOM_VK_HELP = 6;
flash.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
flash.ui.Keyboard.DOM_VK_TAB = 9;
flash.ui.Keyboard.DOM_VK_CLEAR = 12;
flash.ui.Keyboard.DOM_VK_RETURN = 13;
flash.ui.Keyboard.DOM_VK_ENTER = 14;
flash.ui.Keyboard.DOM_VK_SHIFT = 16;
flash.ui.Keyboard.DOM_VK_CONTROL = 17;
flash.ui.Keyboard.DOM_VK_ALT = 18;
flash.ui.Keyboard.DOM_VK_PAUSE = 19;
flash.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
flash.ui.Keyboard.DOM_VK_ESCAPE = 27;
flash.ui.Keyboard.DOM_VK_SPACE = 32;
flash.ui.Keyboard.DOM_VK_PAGE_UP = 33;
flash.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
flash.ui.Keyboard.DOM_VK_END = 35;
flash.ui.Keyboard.DOM_VK_HOME = 36;
flash.ui.Keyboard.DOM_VK_LEFT = 37;
flash.ui.Keyboard.DOM_VK_UP = 38;
flash.ui.Keyboard.DOM_VK_RIGHT = 39;
flash.ui.Keyboard.DOM_VK_DOWN = 40;
flash.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
flash.ui.Keyboard.DOM_VK_INSERT = 45;
flash.ui.Keyboard.DOM_VK_DELETE = 46;
flash.ui.Keyboard.DOM_VK_0 = 48;
flash.ui.Keyboard.DOM_VK_1 = 49;
flash.ui.Keyboard.DOM_VK_2 = 50;
flash.ui.Keyboard.DOM_VK_3 = 51;
flash.ui.Keyboard.DOM_VK_4 = 52;
flash.ui.Keyboard.DOM_VK_5 = 53;
flash.ui.Keyboard.DOM_VK_6 = 54;
flash.ui.Keyboard.DOM_VK_7 = 55;
flash.ui.Keyboard.DOM_VK_8 = 56;
flash.ui.Keyboard.DOM_VK_9 = 57;
flash.ui.Keyboard.DOM_VK_SEMICOLON = 59;
flash.ui.Keyboard.DOM_VK_EQUALS = 61;
flash.ui.Keyboard.DOM_VK_A = 65;
flash.ui.Keyboard.DOM_VK_B = 66;
flash.ui.Keyboard.DOM_VK_C = 67;
flash.ui.Keyboard.DOM_VK_D = 68;
flash.ui.Keyboard.DOM_VK_E = 69;
flash.ui.Keyboard.DOM_VK_F = 70;
flash.ui.Keyboard.DOM_VK_G = 71;
flash.ui.Keyboard.DOM_VK_H = 72;
flash.ui.Keyboard.DOM_VK_I = 73;
flash.ui.Keyboard.DOM_VK_J = 74;
flash.ui.Keyboard.DOM_VK_K = 75;
flash.ui.Keyboard.DOM_VK_L = 76;
flash.ui.Keyboard.DOM_VK_M = 77;
flash.ui.Keyboard.DOM_VK_N = 78;
flash.ui.Keyboard.DOM_VK_O = 79;
flash.ui.Keyboard.DOM_VK_P = 80;
flash.ui.Keyboard.DOM_VK_Q = 81;
flash.ui.Keyboard.DOM_VK_R = 82;
flash.ui.Keyboard.DOM_VK_S = 83;
flash.ui.Keyboard.DOM_VK_T = 84;
flash.ui.Keyboard.DOM_VK_U = 85;
flash.ui.Keyboard.DOM_VK_V = 86;
flash.ui.Keyboard.DOM_VK_W = 87;
flash.ui.Keyboard.DOM_VK_X = 88;
flash.ui.Keyboard.DOM_VK_Y = 89;
flash.ui.Keyboard.DOM_VK_Z = 90;
flash.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
flash.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
flash.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
flash.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
flash.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
flash.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
flash.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
flash.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
flash.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
flash.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
flash.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
flash.ui.Keyboard.DOM_VK_MULTIPLY = 106;
flash.ui.Keyboard.DOM_VK_ADD = 107;
flash.ui.Keyboard.DOM_VK_SEPARATOR = 108;
flash.ui.Keyboard.DOM_VK_SUBTRACT = 109;
flash.ui.Keyboard.DOM_VK_DECIMAL = 110;
flash.ui.Keyboard.DOM_VK_DIVIDE = 111;
flash.ui.Keyboard.DOM_VK_F1 = 112;
flash.ui.Keyboard.DOM_VK_F2 = 113;
flash.ui.Keyboard.DOM_VK_F3 = 114;
flash.ui.Keyboard.DOM_VK_F4 = 115;
flash.ui.Keyboard.DOM_VK_F5 = 116;
flash.ui.Keyboard.DOM_VK_F6 = 117;
flash.ui.Keyboard.DOM_VK_F7 = 118;
flash.ui.Keyboard.DOM_VK_F8 = 119;
flash.ui.Keyboard.DOM_VK_F9 = 120;
flash.ui.Keyboard.DOM_VK_F10 = 121;
flash.ui.Keyboard.DOM_VK_F11 = 122;
flash.ui.Keyboard.DOM_VK_F12 = 123;
flash.ui.Keyboard.DOM_VK_F13 = 124;
flash.ui.Keyboard.DOM_VK_F14 = 125;
flash.ui.Keyboard.DOM_VK_F15 = 126;
flash.ui.Keyboard.DOM_VK_F16 = 127;
flash.ui.Keyboard.DOM_VK_F17 = 128;
flash.ui.Keyboard.DOM_VK_F18 = 129;
flash.ui.Keyboard.DOM_VK_F19 = 130;
flash.ui.Keyboard.DOM_VK_F20 = 131;
flash.ui.Keyboard.DOM_VK_F21 = 132;
flash.ui.Keyboard.DOM_VK_F22 = 133;
flash.ui.Keyboard.DOM_VK_F23 = 134;
flash.ui.Keyboard.DOM_VK_F24 = 135;
flash.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
flash.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
flash.ui.Keyboard.DOM_VK_COMMA = 188;
flash.ui.Keyboard.DOM_VK_PERIOD = 190;
flash.ui.Keyboard.DOM_VK_SLASH = 191;
flash.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
flash.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
flash.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
flash.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
flash.ui.Keyboard.DOM_VK_QUOTE = 222;
flash.ui.Keyboard.DOM_VK_META = 224;
flash.ui.Keyboard.DOM_VK_KANA = 21;
flash.ui.Keyboard.DOM_VK_HANGUL = 21;
flash.ui.Keyboard.DOM_VK_JUNJA = 23;
flash.ui.Keyboard.DOM_VK_FINAL = 24;
flash.ui.Keyboard.DOM_VK_HANJA = 25;
flash.ui.Keyboard.DOM_VK_KANJI = 25;
flash.ui.Keyboard.DOM_VK_CONVERT = 28;
flash.ui.Keyboard.DOM_VK_NONCONVERT = 29;
flash.ui.Keyboard.DOM_VK_ACEPT = 30;
flash.ui.Keyboard.DOM_VK_MODECHANGE = 31;
flash.ui.Keyboard.DOM_VK_SELECT = 41;
flash.ui.Keyboard.DOM_VK_PRINT = 42;
flash.ui.Keyboard.DOM_VK_EXECUTE = 43;
flash.ui.Keyboard.DOM_VK_SLEEP = 95;
flash.utils.Endian.BIG_ENDIAN = "bigEndian";
flash.utils.Endian.LITTLE_ENDIAN = "littleEndian";
flash.utils.Uuid.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
flixel.FlxCamera.STYLE_LOCKON = 0;
flixel.FlxCamera.STYLE_PLATFORMER = 1;
flixel.FlxCamera.STYLE_TOPDOWN = 2;
flixel.FlxCamera.STYLE_TOPDOWN_TIGHT = 3;
flixel.FlxCamera.STYLE_SCREEN_BY_SCREEN = 4;
flixel.FlxCamera.STYLE_NO_DEAD_ZONE = 5;
flixel.FlxCamera.SHAKE_BOTH_AXES = 0;
flixel.FlxCamera.SHAKE_HORIZONTAL_ONLY = 1;
flixel.FlxCamera.SHAKE_VERTICAL_ONLY = 2;
flixel.system.scaleModes.BaseScaleMode.zoom = new flixel.util.FlxPoint();
flixel.system.frontEnds.HTML5FrontEnd.INTERNET_EXPLORER = "Internet Explorer";
flixel.system.frontEnds.HTML5FrontEnd.CHROME = "Chrome";
flixel.system.frontEnds.HTML5FrontEnd.FIREFOX = "Firefox";
flixel.system.frontEnds.HTML5FrontEnd.SAFARI = "Safari";
flixel.system.frontEnds.HTML5FrontEnd.OPERA = "Opera";
flixel.util.FlxTimer.pool = new flixel.util.FlxPool_flixel_util_FlxTimer();
flixel.tweens.FlxTween.PERSIST = 1;
flixel.tweens.FlxTween.LOOPING = 2;
flixel.tweens.FlxTween.PINGPONG = 4;
flixel.tweens.FlxTween.ONESHOT = 8;
flixel.tweens.FlxTween.BACKWARD = 16;
flixel.util.FlxPath.pool = new flixel.util.FlxPool_flixel_util_FlxPath();
flixel.util.FlxPath.FORWARD = 0;
flixel.util.FlxPath.BACKWARD = 1;
flixel.util.FlxPath.LOOP_FORWARD = 16;
flixel.util.FlxPath.LOOP_BACKWARD = 256;
flixel.util.FlxPath.YOYO = 4096;
flixel.util.FlxPath.HORIZONTAL_ONLY = 65536;
flixel.util.FlxPath.VERTICAL_ONLY = 1048576;
flixel.util.FlxPath._point = new flixel.util.FlxPoint();
flixel.util.FlxSave.SUCCESS = 0;
flixel.util.FlxSave.PENDING = 1;
flixel.util.FlxSave.ERROR = 2;
flixel.FlxG.autoPause = true;
flixel.FlxG.fixedTimestep = true;
flixel.FlxG.timeScale = 1;
flixel.FlxG.VERSION = new flixel.system.FlxVersion(3,2,1);
flixel.FlxG.elapsed = 0;
flixel.FlxG.fullscreen = false;
flixel.FlxG.worldBounds = new flixel.util.FlxRect();
flixel.FlxG.save = new flixel.util.FlxSave();
flixel.FlxG.swipes = [];
flixel.FlxG.html5 = new flixel.system.frontEnds.HTML5FrontEnd();
flixel.FlxG.inputs = new flixel.system.frontEnds.InputFrontEnd();
flixel.FlxG.console = new flixel.system.frontEnds.ConsoleFrontEnd();
flixel.FlxG.log = new flixel.system.frontEnds.LogFrontEnd();
flixel.FlxG.watch = new flixel.system.frontEnds.WatchFrontEnd();
flixel.FlxG["debugger"] = new flixel.system.frontEnds.DebuggerFrontEnd();
flixel.FlxG.vcr = new flixel.system.frontEnds.VCRFrontEnd();
flixel.FlxG.bitmap = new flixel.system.frontEnds.BitmapFrontEnd();
flixel.FlxG.cameras = new flixel.system.frontEnds.CameraFrontEnd();
flixel.FlxG.plugins = new flixel.system.frontEnds.PluginFrontEnd();
flixel.FlxG.sound = new flixel.system.frontEnds.SoundFrontEnd();
flixel.FlxG._scaleMode = new flixel.system.scaleModes.RatioScaleMode();
flixel._FlxSprite.GraphicDefault.resourceName = "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault";
flixel.animation.FlxAnimationController.prefixLength = 0;
flixel.animation.FlxAnimationController.postfixLength = 0;
flixel.animation.FlxPrerotatedAnimation.PREROTATED = "prerotated_animation";
flixel.effects.FlxFlicker._pool = new flixel.util.FlxPool_flixel_effects_FlxFlicker();
flixel.effects.FlxFlicker._boundObjects = new haxe.ds.ObjectMap();
flixel.input.gamepad.FlxGamepad.JUST_RELEASED = -1;
flixel.input.gamepad.FlxGamepad.RELEASED = 0;
flixel.input.gamepad.FlxGamepad.PRESSED = 1;
flixel.input.gamepad.FlxGamepad.JUST_PRESSED = 2;
flixel.input.keyboard.FlxKey.JUST_RELEASED = -1;
flixel.input.keyboard.FlxKey.RELEASED = 0;
flixel.input.keyboard.FlxKey.PRESSED = 1;
flixel.input.keyboard.FlxKey.JUST_PRESSED = 2;
flixel.input.keyboard.FlxKey.A = 65;
flixel.input.keyboard.FlxKey.B = 66;
flixel.input.keyboard.FlxKey.C = 67;
flixel.input.keyboard.FlxKey.D = 68;
flixel.input.keyboard.FlxKey.E = 69;
flixel.input.keyboard.FlxKey.F = 70;
flixel.input.keyboard.FlxKey.G = 71;
flixel.input.keyboard.FlxKey.H = 72;
flixel.input.keyboard.FlxKey.I = 73;
flixel.input.keyboard.FlxKey.J = 74;
flixel.input.keyboard.FlxKey.K = 75;
flixel.input.keyboard.FlxKey.L = 76;
flixel.input.keyboard.FlxKey.M = 77;
flixel.input.keyboard.FlxKey.N = 78;
flixel.input.keyboard.FlxKey.O = 79;
flixel.input.keyboard.FlxKey.P = 80;
flixel.input.keyboard.FlxKey.Q = 81;
flixel.input.keyboard.FlxKey.R = 82;
flixel.input.keyboard.FlxKey.S = 83;
flixel.input.keyboard.FlxKey.T = 84;
flixel.input.keyboard.FlxKey.U = 85;
flixel.input.keyboard.FlxKey.V = 86;
flixel.input.keyboard.FlxKey.W = 87;
flixel.input.keyboard.FlxKey.X = 88;
flixel.input.keyboard.FlxKey.Y = 89;
flixel.input.keyboard.FlxKey.Z = 90;
flixel.input.keyboard.FlxKey.ZERO = 48;
flixel.input.keyboard.FlxKey.ONE = 49;
flixel.input.keyboard.FlxKey.TWO = 50;
flixel.input.keyboard.FlxKey.THREE = 51;
flixel.input.keyboard.FlxKey.FOUR = 52;
flixel.input.keyboard.FlxKey.FIVE = 53;
flixel.input.keyboard.FlxKey.SIX = 54;
flixel.input.keyboard.FlxKey.SEVEN = 55;
flixel.input.keyboard.FlxKey.EIGHT = 56;
flixel.input.keyboard.FlxKey.NINE = 57;
flixel.input.keyboard.FlxKey.PAGEUP = 33;
flixel.input.keyboard.FlxKey.PAGEDOWN = 34;
flixel.input.keyboard.FlxKey.HOME = 36;
flixel.input.keyboard.FlxKey.END = 35;
flixel.input.keyboard.FlxKey.INSERT = 45;
flixel.input.keyboard.FlxKey.ESCAPE = 27;
flixel.input.keyboard.FlxKey.MINUS = 189;
flixel.input.keyboard.FlxKey.PLUS = 187;
flixel.input.keyboard.FlxKey.DELETE = 46;
flixel.input.keyboard.FlxKey.BACKSPACE = 8;
flixel.input.keyboard.FlxKey.LBRACKET = 219;
flixel.input.keyboard.FlxKey.RBRACKET = 221;
flixel.input.keyboard.FlxKey.BACKSLASH = 220;
flixel.input.keyboard.FlxKey.CAPSLOCK = 20;
flixel.input.keyboard.FlxKey.SEMICOLON = 186;
flixel.input.keyboard.FlxKey.QUOTE = 222;
flixel.input.keyboard.FlxKey.ENTER = 13;
flixel.input.keyboard.FlxKey.SHIFT = 16;
flixel.input.keyboard.FlxKey.COMMA = 188;
flixel.input.keyboard.FlxKey.PERIOD = 190;
flixel.input.keyboard.FlxKey.SLASH = 191;
flixel.input.keyboard.FlxKey.NUMPADSLASH = 191;
flixel.input.keyboard.FlxKey.GRAVEACCENT = 192;
flixel.input.keyboard.FlxKey.CONTROL = 17;
flixel.input.keyboard.FlxKey.ALT = 18;
flixel.input.keyboard.FlxKey.SPACE = 32;
flixel.input.keyboard.FlxKey.UP = 38;
flixel.input.keyboard.FlxKey.DOWN = 40;
flixel.input.keyboard.FlxKey.LEFT = 37;
flixel.input.keyboard.FlxKey.RIGHT = 39;
flixel.input.keyboard.FlxKey.TAB = 9;
flixel.input.keyboard.FlxKey.F1 = 112;
flixel.input.keyboard.FlxKey.F2 = 113;
flixel.input.keyboard.FlxKey.F3 = 114;
flixel.input.keyboard.FlxKey.F4 = 115;
flixel.input.keyboard.FlxKey.F5 = 116;
flixel.input.keyboard.FlxKey.F6 = 117;
flixel.input.keyboard.FlxKey.F7 = 118;
flixel.input.keyboard.FlxKey.F8 = 119;
flixel.input.keyboard.FlxKey.F9 = 120;
flixel.input.keyboard.FlxKey.F10 = 121;
flixel.input.keyboard.FlxKey.F11 = 122;
flixel.input.keyboard.FlxKey.F12 = 123;
flixel.input.keyboard.FlxKey.NUMPADZERO = 96;
flixel.input.keyboard.FlxKey.NUMPADONE = 97;
flixel.input.keyboard.FlxKey.NUMPADTWO = 98;
flixel.input.keyboard.FlxKey.NUMPADTHREE = 99;
flixel.input.keyboard.FlxKey.NUMPADFOUR = 100;
flixel.input.keyboard.FlxKey.NUMPADFIVE = 101;
flixel.input.keyboard.FlxKey.NUMPADSIX = 102;
flixel.input.keyboard.FlxKey.NUMPADSEVEN = 103;
flixel.input.keyboard.FlxKey.NUMPADEIGHT = 104;
flixel.input.keyboard.FlxKey.NUMPADNINE = 105;
flixel.input.keyboard.FlxKey.NUMPADMINUS = 109;
flixel.input.keyboard.FlxKey.NUMPADPLUS = 107;
flixel.input.keyboard.FlxKey.NUMPADPERIOD = 110;
flixel.input.keyboard.FlxKeyboard.TOTAL = 256;
flixel.input.mouse._FlxMouse.GraphicCursor.resourceName = "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor";
flixel.input.mouse.FlxMouseButton.LEFT = -1;
flixel.input.mouse.FlxMouseButton.MIDDLE = -2;
flixel.input.mouse.FlxMouseButton.RIGHT = -3;
flixel.input.mouse.FlxMouseButton.FAST_PRESS_RELEASE = -2;
flixel.input.mouse.FlxMouseButton.JUST_RELEASED = -1;
flixel.input.mouse.FlxMouseButton.RELEASED = 0;
flixel.input.mouse.FlxMouseButton.PRESSED = 1;
flixel.input.mouse.FlxMouseButton.JUST_PRESSED = 2;
flixel.input.touch.FlxTouchManager.maxTouchPoints = 0;
flixel.system._FlxAssets.FontDefault.resourceName = "NME_font_flixel_system__FlxAssets_FontDefault";
flixel.system.BeepSound.resourceName = "__ASSET__:sound_flixel_system_BeepSound";
flixel.system.GraphicLogo.resourceName = "__ASSET__:bitmap_flixel_system_GraphicLogo";
flixel.system.FlxAssets.FONT_DEFAULT = "Nokia Cellphone FC Small";
flixel.system.FlxAssets.FONT_DEBUGGER = "Arial";
flixel.system.FlxList._NUM_CACHED_FLX_LIST = 0;
flixel.system.FlxQuadTree.A_LIST = 0;
flixel.system.FlxQuadTree.B_LIST = 1;
flixel.system.FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
flixel.system.FlixelSound.resourceName = "__ASSET__:sound_flixel_system_FlixelSound";
flixel.system.debug.LogStyle.NORMAL = new flixel.system.debug.LogStyle();
flixel.system.debug.LogStyle.WARNING = new flixel.system.debug.LogStyle("[WARNING] ","FFFF00",12,true,false,false,new flixel.system.BeepSound(),true);
flixel.system.debug.LogStyle.ERROR = new flixel.system.debug.LogStyle("[ERROR] ","FF0000",12,true,false,false,new flixel.system.BeepSound(),true);
flixel.system.debug.LogStyle.NOTICE = new flixel.system.debug.LogStyle("[NOTICE] ","008000",12,true);
flixel.system.debug.LogStyle.CONSOLE = new flixel.system.debug.LogStyle("&#62; ","0000ff",12,true);
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
flixel.system.layer.TileSheetExt._DRAWCALLS = 0;
flixel.system.layer.frames.FlxFrame.POINT = new flash.geom.Point();
flixel.system.layer.frames.FlxFrame.MATRIX = new flash.geom.Matrix();
flixel.text.pxText.PxBitmapFont._storedFonts = new haxe.ds.StringMap();
flixel.text.pxText.PxBitmapFont.ZERO_POINT = new flash.geom.Point();
flixel.tile.GraphicAuto.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAuto";
flixel.tile.GraphicAutoAlt.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt";
flixel.tile.FlxTilemap.OFF = 0;
flixel.tile.FlxTilemap.AUTO = 1;
flixel.tile.FlxTilemap.ALT = 2;
flixel.tweens.FlxEase.PI2 = Math.PI / 2;
flixel.tweens.FlxEase.EL = 2 * Math.PI / .45;
flixel.tweens.FlxEase.B1 = 1 / 2.75;
flixel.tweens.FlxEase.B2 = 2 / 2.75;
flixel.tweens.FlxEase.B3 = 1.5 / 2.75;
flixel.tweens.FlxEase.B4 = 2.5 / 2.75;
flixel.tweens.FlxEase.B5 = 2.25 / 2.75;
flixel.tweens.FlxEase.B6 = 2.625 / 2.75;
flixel.tweens.FlxEase.ELASTIC_AMPLITUDE = 1;
flixel.tweens.FlxEase.ELASTIC_PERIOD = 0.4;
flixel.tweens.motion.QuadMotion.point = new flixel.util.FlxPoint();
flixel.tweens.motion.QuadMotion.point2 = new flixel.util.FlxPoint();
flixel.tweens.motion.QuadPath._Point = new flixel.util.FlxPoint();
flixel.tweens.motion.QuadPath._Point2 = new flixel.util.FlxPoint();
flixel.ui.FlxButton.NORMAL = 0;
flixel.ui.FlxButton.HIGHLIGHT = 1;
flixel.ui.FlxButton.PRESSED = 2;
flixel.ui._FlxTypedButton.GraphicButton.resourceName = "__ASSET__:bitmap_flixel_ui__FlxTypedButton_GraphicButton";
flixel.util.FlxAngle.cosTable = new Array();
flixel.util.FlxAngle.sinTable = new Array();
flixel.util.FlxAngle.TO_DEG = 180 / Math.PI;
flixel.util.FlxAngle.TO_RAD = Math.PI / 180;
flixel.util.FlxBitmapDataPool.maxLength = 8;
flixel.util.FlxBitmapDataPool.$length = 0;
flixel.util.FlxBitmapDataPool._rect = new flash.geom.Rectangle();
flixel.util.FlxCollision.CAMERA_WALL_OUTSIDE = 0;
flixel.util.FlxCollision.CAMERA_WALL_INSIDE = 1;
flixel.util.FlxCollision.pointA = new flash.geom.Point();
flixel.util.FlxCollision.pointB = new flash.geom.Point();
flixel.util.FlxCollision.centerA = new flash.geom.Point();
flixel.util.FlxCollision.centerB = new flash.geom.Point();
flixel.util.FlxCollision.matrixA = new flash.geom.Matrix();
flixel.util.FlxCollision.matrixB = new flash.geom.Matrix();
flixel.util.FlxCollision.testMatrix = new flash.geom.Matrix();
flixel.util.FlxCollision.boundsA = new flash.geom.Rectangle();
flixel.util.FlxCollision.boundsB = new flash.geom.Rectangle();
flixel.util.FlxColor.RED = -65536;
flixel.util.FlxColor.YELLOW = -256;
flixel.util.FlxColor.GREEN = -16744448;
flixel.util.FlxColor.BLUE = -16776961;
flixel.util.FlxColor.PINK = -16181;
flixel.util.FlxColor.PURPLE = -8388480;
flixel.util.FlxColor.WHITE = -1;
flixel.util.FlxColor.BLACK = -16777216;
flixel.util.FlxColor.GRAY = -8355712;
flixel.util.FlxColor.BROWN = -6927616;
flixel.util.FlxColor.TRANSPARENT = 0;
flixel.util.FlxColor.IVORY = -16;
flixel.util.FlxColor.BEIGE = -657956;
flixel.util.FlxColor.WHEAT = -663885;
flixel.util.FlxColor.TAN = -2968436;
flixel.util.FlxColor.KHAKI = -3952495;
flixel.util.FlxColor.SILVER = -4144960;
flixel.util.FlxColor.CHARCOAL = -12171706;
flixel.util.FlxColor.NAVY_BLUE = -16777088;
flixel.util.FlxColor.ROYAL_BLUE = -16233314;
flixel.util.FlxColor.MEDIUM_BLUE = -16777011;
flixel.util.FlxColor.AZURE = -16744449;
flixel.util.FlxColor.CYAN = -16711681;
flixel.util.FlxColor.AQUAMARINE = -8388652;
flixel.util.FlxColor.TEAL = -16744320;
flixel.util.FlxColor.FOREST_GREEN = -14513374;
flixel.util.FlxColor.OLIVE = -8355840;
flixel.util.FlxColor.CHARTREUSE = -8388864;
flixel.util.FlxColor.LIME = -4194560;
flixel.util.FlxColor.GOLDEN = -10496;
flixel.util.FlxColor.GOLDENROD = -2448096;
flixel.util.FlxColor.CORAL = -32944;
flixel.util.FlxColor.SALMON = -360334;
flixel.util.FlxColor.HOT_PINK = -258112;
flixel.util.FlxColor.FUCHSIA = -34817;
flixel.util.FlxColor.PUCE = -3372903;
flixel.util.FlxColor.MAUVE = -2051841;
flixel.util.FlxColor.LAVENDER = -4882724;
flixel.util.FlxColor.PLUM = -8113799;
flixel.util.FlxColor.INDIGO = -11861886;
flixel.util.FlxColor.MAROON = -8388608;
flixel.util.FlxColor.CRIMSON = -2354116;
flixel.util.FlxMath.MIN_VALUE = 0.0000000000000001;
flixel.util.FlxMath.MAX_VALUE = 1.79e+308;
flixel.util.FlxRandom.globalSeed = 1;
flixel.util.FlxRandom._internalSeed = 1;
flixel.util.FlxRandom.MULTIPLIER = 48271;
flixel.util.FlxRandom.MODULUS = 2147483647;
flixel.util.FlxRandom._intHelper = 0;
flixel.util.FlxRandom._intHelper2 = 0;
flixel.util.FlxRandom._intHelper3 = 0;
flixel.util.FlxRandom._floatHelper = 0;
flixel.util.FlxRandom._red = 0;
flixel.util.FlxRandom._green = 0;
flixel.util.FlxRandom._blue = 0;
flixel.util.FlxRandom._alpha = 0;
flixel.util.FlxSort.ASCENDING = -1;
flixel.util.FlxSort.DESCENDING = 1;
js.Browser.window = typeof window != "undefined" ? window : null;
js.Browser.document = typeof window != "undefined" ? window.document : null;
js.Browser.navigator = typeof window != "undefined" ? window.navigator : null;
flixel.util.FlxSpriteUtil.flashGfxSprite = new flash.display.Sprite();
flixel.util.FlxSpriteUtil.flashGfx = flixel.util.FlxSpriteUtil.flashGfxSprite.get_graphics();
haxe.Serializer.USE_CACHE = false;
haxe.Serializer.USE_ENUM_INDEX = false;
haxe.Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe.Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe.Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe.Template.expr_int = new EReg("^[0-9]+$","");
haxe.Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe.Template.globals = { };
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.ds.ObjectMap.count = 0;
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.libraries = new haxe.ds.StringMap();
openfl.Assets.initialized = false;
ApplicationMain.main();
})();
